import { useState, useEffect, createElement } from 'react';

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var dist = {};

var _extends = {};

var es6_object_assign = {};

var _global = {exports: {}};

var hasRequired_global;

function require_global () {
	if (hasRequired_global) return _global.exports;
	hasRequired_global = 1;
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = _global.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
	// eslint-disable-next-line no-new-func
	: Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	return _global.exports;
}

var _core = {exports: {}};

var hasRequired_core;

function require_core () {
	if (hasRequired_core) return _core.exports;
	hasRequired_core = 1;
	var core = _core.exports = {
	  version: '2.6.12'
	};
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	return _core.exports;
}

var _aFunction;
var hasRequired_aFunction;

function require_aFunction () {
	if (hasRequired_aFunction) return _aFunction;
	hasRequired_aFunction = 1;
	_aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};
	return _aFunction;
}

var _ctx;
var hasRequired_ctx;

function require_ctx () {
	if (hasRequired_ctx) return _ctx;
	hasRequired_ctx = 1;
	// optional / simple context binding
	var aFunction = require_aFunction();
	_ctx = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }
	  return function /* ...args */
	  () {
	    return fn.apply(that, arguments);
	  };
	};
	return _ctx;
}

var _objectDp = {};

var _isObject;
var hasRequired_isObject;

function require_isObject () {
	if (hasRequired_isObject) return _isObject;
	hasRequired_isObject = 1;
	_isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	return _isObject;
}

var _anObject;
var hasRequired_anObject;

function require_anObject () {
	if (hasRequired_anObject) return _anObject;
	hasRequired_anObject = 1;
	var isObject = require_isObject();
	_anObject = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};
	return _anObject;
}

var _fails;
var hasRequired_fails;

function require_fails () {
	if (hasRequired_fails) return _fails;
	hasRequired_fails = 1;
	_fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};
	return _fails;
}

var _descriptors;
var hasRequired_descriptors;

function require_descriptors () {
	if (hasRequired_descriptors) return _descriptors;
	hasRequired_descriptors = 1;
	// Thank's IE8 for his funny defineProperty
	_descriptors = !require_fails()(function () {
	  return Object.defineProperty({}, 'a', {
	    get: function () {
	      return 7;
	    }
	  }).a != 7;
	});
	return _descriptors;
}

var _domCreate;
var hasRequired_domCreate;

function require_domCreate () {
	if (hasRequired_domCreate) return _domCreate;
	hasRequired_domCreate = 1;
	var isObject = require_isObject();
	var document = require_global().document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	_domCreate = function (it) {
	  return is ? document.createElement(it) : {};
	};
	return _domCreate;
}

var _ie8DomDefine;
var hasRequired_ie8DomDefine;

function require_ie8DomDefine () {
	if (hasRequired_ie8DomDefine) return _ie8DomDefine;
	hasRequired_ie8DomDefine = 1;
	_ie8DomDefine = !require_descriptors() && !require_fails()(function () {
	  return Object.defineProperty(require_domCreate()('div'), 'a', {
	    get: function () {
	      return 7;
	    }
	  }).a != 7;
	});
	return _ie8DomDefine;
}

var _toPrimitive;
var hasRequired_toPrimitive;

function require_toPrimitive () {
	if (hasRequired_toPrimitive) return _toPrimitive;
	hasRequired_toPrimitive = 1;
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = require_isObject();
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	_toPrimitive = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};
	return _toPrimitive;
}

var hasRequired_objectDp;

function require_objectDp () {
	if (hasRequired_objectDp) return _objectDp;
	hasRequired_objectDp = 1;
	var anObject = require_anObject();
	var IE8_DOM_DEFINE = require_ie8DomDefine();
	var toPrimitive = require_toPrimitive();
	var dP = Object.defineProperty;
	_objectDp.f = require_descriptors() ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) {/* empty */}
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};
	return _objectDp;
}

var _propertyDesc;
var hasRequired_propertyDesc;

function require_propertyDesc () {
	if (hasRequired_propertyDesc) return _propertyDesc;
	hasRequired_propertyDesc = 1;
	_propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};
	return _propertyDesc;
}

var _hide;
var hasRequired_hide;

function require_hide () {
	if (hasRequired_hide) return _hide;
	hasRequired_hide = 1;
	var dP = require_objectDp();
	var createDesc = require_propertyDesc();
	_hide = require_descriptors() ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};
	return _hide;
}

var _has;
var hasRequired_has;

function require_has () {
	if (hasRequired_has) return _has;
	hasRequired_has = 1;
	var hasOwnProperty = {}.hasOwnProperty;
	_has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};
	return _has;
}

var _export;
var hasRequired_export;

function require_export () {
	if (hasRequired_export) return _export;
	hasRequired_export = 1;
	var global = require_global();
	var core = require_core();
	var ctx = require_ctx();
	var hide = require_hide();
	var has = require_has();
	var PROTOTYPE = 'prototype';
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0:
	              return new C();
	            case 1:
	              return new C(a);
	            case 2:
	              return new C(a, b);
	          }
	          return new C(a, b, c);
	        }
	        return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	      // make static versions for prototype methods
	    }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1; // forced
	$export.G = 2; // global
	$export.S = 4; // static
	$export.P = 8; // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	$export.U = 64; // safe
	$export.R = 128; // real proto method for `library`
	_export = $export;
	return _export;
}

var _cof;
var hasRequired_cof;

function require_cof () {
	if (hasRequired_cof) return _cof;
	hasRequired_cof = 1;
	var toString = {}.toString;
	_cof = function (it) {
	  return toString.call(it).slice(8, -1);
	};
	return _cof;
}

var _iobject;
var hasRequired_iobject;

function require_iobject () {
	if (hasRequired_iobject) return _iobject;
	hasRequired_iobject = 1;
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = require_cof();
	// eslint-disable-next-line no-prototype-builtins
	_iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	return _iobject;
}

var _defined;
var hasRequired_defined;

function require_defined () {
	if (hasRequired_defined) return _defined;
	hasRequired_defined = 1;
	// 7.2.1 RequireObjectCoercible(argument)
	_defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};
	return _defined;
}

var _toIobject;
var hasRequired_toIobject;

function require_toIobject () {
	if (hasRequired_toIobject) return _toIobject;
	hasRequired_toIobject = 1;
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = require_iobject();
	var defined = require_defined();
	_toIobject = function (it) {
	  return IObject(defined(it));
	};
	return _toIobject;
}

var _toInteger;
var hasRequired_toInteger;

function require_toInteger () {
	if (hasRequired_toInteger) return _toInteger;
	hasRequired_toInteger = 1;
	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	_toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	return _toInteger;
}

var _toLength;
var hasRequired_toLength;

function require_toLength () {
	if (hasRequired_toLength) return _toLength;
	hasRequired_toLength = 1;
	// 7.1.15 ToLength
	var toInteger = require_toInteger();
	var min = Math.min;
	_toLength = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};
	return _toLength;
}

var _toAbsoluteIndex;
var hasRequired_toAbsoluteIndex;

function require_toAbsoluteIndex () {
	if (hasRequired_toAbsoluteIndex) return _toAbsoluteIndex;
	hasRequired_toAbsoluteIndex = 1;
	var toInteger = require_toInteger();
	var max = Math.max;
	var min = Math.min;
	_toAbsoluteIndex = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};
	return _toAbsoluteIndex;
}

var _arrayIncludes;
var hasRequired_arrayIncludes;

function require_arrayIncludes () {
	if (hasRequired_arrayIncludes) return _arrayIncludes;
	hasRequired_arrayIncludes = 1;
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = require_toIobject();
	var toLength = require_toLength();
	var toAbsoluteIndex = require_toAbsoluteIndex();
	_arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	      // Array#indexOf ignores holes, Array#includes - not
	    } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    }
	    return !IS_INCLUDES && -1;
	  };
	};
	return _arrayIncludes;
}

var _shared = {exports: {}};

var _library;
var hasRequired_library;

function require_library () {
	if (hasRequired_library) return _library;
	hasRequired_library = 1;
	_library = true;
	return _library;
}

var hasRequired_shared;

function require_shared () {
	if (hasRequired_shared) return _shared.exports;
	hasRequired_shared = 1;
	var core = require_core();
	var global = require_global();
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	(_shared.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: require_library() ? 'pure' : 'global',
	  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
	});
	return _shared.exports;
}

var _uid;
var hasRequired_uid;

function require_uid () {
	if (hasRequired_uid) return _uid;
	hasRequired_uid = 1;
	var id = 0;
	var px = Math.random();
	_uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	return _uid;
}

var _sharedKey;
var hasRequired_sharedKey;

function require_sharedKey () {
	if (hasRequired_sharedKey) return _sharedKey;
	hasRequired_sharedKey = 1;
	var shared = require_shared()('keys');
	var uid = require_uid();
	_sharedKey = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};
	return _sharedKey;
}

var _objectKeysInternal;
var hasRequired_objectKeysInternal;

function require_objectKeysInternal () {
	if (hasRequired_objectKeysInternal) return _objectKeysInternal;
	hasRequired_objectKeysInternal = 1;
	var has = require_has();
	var toIObject = require_toIobject();
	var arrayIndexOf = require_arrayIncludes()(false);
	var IE_PROTO = require_sharedKey()('IE_PROTO');
	_objectKeysInternal = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};
	return _objectKeysInternal;
}

var _enumBugKeys;
var hasRequired_enumBugKeys;

function require_enumBugKeys () {
	if (hasRequired_enumBugKeys) return _enumBugKeys;
	hasRequired_enumBugKeys = 1;
	// IE 8- don't enum bug keys
	_enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
	return _enumBugKeys;
}

var _objectKeys;
var hasRequired_objectKeys;

function require_objectKeys () {
	if (hasRequired_objectKeys) return _objectKeys;
	hasRequired_objectKeys = 1;
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = require_objectKeysInternal();
	var enumBugKeys = require_enumBugKeys();
	_objectKeys = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};
	return _objectKeys;
}

var _objectGops = {};

var hasRequired_objectGops;

function require_objectGops () {
	if (hasRequired_objectGops) return _objectGops;
	hasRequired_objectGops = 1;
	_objectGops.f = Object.getOwnPropertySymbols;
	return _objectGops;
}

var _objectPie = {};

var hasRequired_objectPie;

function require_objectPie () {
	if (hasRequired_objectPie) return _objectPie;
	hasRequired_objectPie = 1;
	_objectPie.f = {}.propertyIsEnumerable;
	return _objectPie;
}

var _toObject;
var hasRequired_toObject;

function require_toObject () {
	if (hasRequired_toObject) return _toObject;
	hasRequired_toObject = 1;
	// 7.1.13 ToObject(argument)
	var defined = require_defined();
	_toObject = function (it) {
	  return Object(defined(it));
	};
	return _toObject;
}

var _objectAssign;
var hasRequired_objectAssign;

function require_objectAssign () {
	if (hasRequired_objectAssign) return _objectAssign;
	hasRequired_objectAssign = 1;

	// 19.1.2.1 Object.assign(target, source, ...)
	var DESCRIPTORS = require_descriptors();
	var getKeys = require_objectKeys();
	var gOPS = require_objectGops();
	var pIE = require_objectPie();
	var toObject = require_toObject();
	var IObject = require_iobject();
	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	_objectAssign = !$assign || require_fails()(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) {
	    B[k] = k;
	  });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) {
	  // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
	    }
	  }
	  return T;
	} : $assign;
	return _objectAssign;
}

var hasRequiredEs6_object_assign;

function requireEs6_object_assign () {
	if (hasRequiredEs6_object_assign) return es6_object_assign;
	hasRequiredEs6_object_assign = 1;
	// 19.1.3.1 Object.assign(target, source)
	var $export = require_export();
	$export($export.S + $export.F, 'Object', {
	  assign: require_objectAssign()
	});
	return es6_object_assign;
}

var assign$1;
var hasRequiredAssign$1;

function requireAssign$1 () {
	if (hasRequiredAssign$1) return assign$1;
	hasRequiredAssign$1 = 1;
	requireEs6_object_assign();
	assign$1 = require_core().Object.assign;
	return assign$1;
}

var assign;
var hasRequiredAssign;

function requireAssign () {
	if (hasRequiredAssign) return assign;
	hasRequiredAssign = 1;
	assign = {
	  "default": requireAssign$1(),
	  __esModule: true
	};
	return assign;
}

var hasRequired_extends;

function require_extends () {
	if (hasRequired_extends) return _extends;
	hasRequired_extends = 1;

	_extends.__esModule = true;
	var _assign = requireAssign();
	var _assign2 = _interopRequireDefault(_assign);
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	_extends.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	  return target;
	};
	return _extends;
}

var es6_object_getPrototypeOf = {};

var _objectGpo;
var hasRequired_objectGpo;

function require_objectGpo () {
	if (hasRequired_objectGpo) return _objectGpo;
	hasRequired_objectGpo = 1;
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = require_has();
	var toObject = require_toObject();
	var IE_PROTO = require_sharedKey()('IE_PROTO');
	var ObjectProto = Object.prototype;
	_objectGpo = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  }
	  return O instanceof Object ? ObjectProto : null;
	};
	return _objectGpo;
}

var _objectSap;
var hasRequired_objectSap;

function require_objectSap () {
	if (hasRequired_objectSap) return _objectSap;
	hasRequired_objectSap = 1;
	// most Object methods by ES6 should accept primitives
	var $export = require_export();
	var core = require_core();
	var fails = require_fails();
	_objectSap = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () {
	    fn(1);
	  }), 'Object', exp);
	};
	return _objectSap;
}

var hasRequiredEs6_object_getPrototypeOf;

function requireEs6_object_getPrototypeOf () {
	if (hasRequiredEs6_object_getPrototypeOf) return es6_object_getPrototypeOf;
	hasRequiredEs6_object_getPrototypeOf = 1;
	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = require_toObject();
	var $getPrototypeOf = require_objectGpo();
	require_objectSap()('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});
	return es6_object_getPrototypeOf;
}

var getPrototypeOf$1;
var hasRequiredGetPrototypeOf$1;

function requireGetPrototypeOf$1 () {
	if (hasRequiredGetPrototypeOf$1) return getPrototypeOf$1;
	hasRequiredGetPrototypeOf$1 = 1;
	requireEs6_object_getPrototypeOf();
	getPrototypeOf$1 = require_core().Object.getPrototypeOf;
	return getPrototypeOf$1;
}

var getPrototypeOf;
var hasRequiredGetPrototypeOf;

function requireGetPrototypeOf () {
	if (hasRequiredGetPrototypeOf) return getPrototypeOf;
	hasRequiredGetPrototypeOf = 1;
	getPrototypeOf = {
	  "default": requireGetPrototypeOf$1(),
	  __esModule: true
	};
	return getPrototypeOf;
}

var classCallCheck = {};

var hasRequiredClassCallCheck;

function requireClassCallCheck () {
	if (hasRequiredClassCallCheck) return classCallCheck;
	hasRequiredClassCallCheck = 1;

	classCallCheck.__esModule = true;
	classCallCheck.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	return classCallCheck;
}

var createClass = {};

var es6_object_defineProperty = {};

var hasRequiredEs6_object_defineProperty;

function requireEs6_object_defineProperty () {
	if (hasRequiredEs6_object_defineProperty) return es6_object_defineProperty;
	hasRequiredEs6_object_defineProperty = 1;
	var $export = require_export();
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !require_descriptors(), 'Object', {
	  defineProperty: require_objectDp().f
	});
	return es6_object_defineProperty;
}

var defineProperty$1;
var hasRequiredDefineProperty$1;

function requireDefineProperty$1 () {
	if (hasRequiredDefineProperty$1) return defineProperty$1;
	hasRequiredDefineProperty$1 = 1;
	requireEs6_object_defineProperty();
	var $Object = require_core().Object;
	defineProperty$1 = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};
	return defineProperty$1;
}

var defineProperty;
var hasRequiredDefineProperty;

function requireDefineProperty () {
	if (hasRequiredDefineProperty) return defineProperty;
	hasRequiredDefineProperty = 1;
	defineProperty = {
	  "default": requireDefineProperty$1(),
	  __esModule: true
	};
	return defineProperty;
}

var hasRequiredCreateClass;

function requireCreateClass () {
	if (hasRequiredCreateClass) return createClass;
	hasRequiredCreateClass = 1;

	createClass.__esModule = true;
	var _defineProperty = requireDefineProperty();
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	createClass.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	return createClass;
}

var possibleConstructorReturn = {};

var _typeof = {};

var es6_string_iterator = {};

var _stringAt;
var hasRequired_stringAt;

function require_stringAt () {
	if (hasRequired_stringAt) return _stringAt;
	hasRequired_stringAt = 1;
	var toInteger = require_toInteger();
	var defined = require_defined();
	// true  -> String#at
	// false -> String#codePointAt
	_stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	return _stringAt;
}

var _redefine;
var hasRequired_redefine;

function require_redefine () {
	if (hasRequired_redefine) return _redefine;
	hasRequired_redefine = 1;
	_redefine = require_hide();
	return _redefine;
}

var _iterators;
var hasRequired_iterators;

function require_iterators () {
	if (hasRequired_iterators) return _iterators;
	hasRequired_iterators = 1;
	_iterators = {};
	return _iterators;
}

var _objectDps;
var hasRequired_objectDps;

function require_objectDps () {
	if (hasRequired_objectDps) return _objectDps;
	hasRequired_objectDps = 1;
	var dP = require_objectDp();
	var anObject = require_anObject();
	var getKeys = require_objectKeys();
	_objectDps = require_descriptors() ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};
	return _objectDps;
}

var _html;
var hasRequired_html;

function require_html () {
	if (hasRequired_html) return _html;
	hasRequired_html = 1;
	var document = require_global().document;
	_html = document && document.documentElement;
	return _html;
}

var _objectCreate;
var hasRequired_objectCreate;

function require_objectCreate () {
	if (hasRequired_objectCreate) return _objectCreate;
	hasRequired_objectCreate = 1;
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = require_anObject();
	var dPs = require_objectDps();
	var enumBugKeys = require_enumBugKeys();
	var IE_PROTO = require_sharedKey()('IE_PROTO');
	var Empty = function () {/* empty */};
	var PROTOTYPE = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = require_domCreate()('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  require_html().appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	_objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};
	return _objectCreate;
}

var _wks = {exports: {}};

var hasRequired_wks;

function require_wks () {
	if (hasRequired_wks) return _wks.exports;
	hasRequired_wks = 1;
	var store = require_shared()('wks');
	var uid = require_uid();
	var Symbol = require_global().Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	var $exports = _wks.exports = function (name) {
	  return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	$exports.store = store;
	return _wks.exports;
}

var _setToStringTag;
var hasRequired_setToStringTag;

function require_setToStringTag () {
	if (hasRequired_setToStringTag) return _setToStringTag;
	hasRequired_setToStringTag = 1;
	var def = require_objectDp().f;
	var has = require_has();
	var TAG = require_wks()('toStringTag');
	_setToStringTag = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
	    configurable: true,
	    value: tag
	  });
	};
	return _setToStringTag;
}

var _iterCreate;
var hasRequired_iterCreate;

function require_iterCreate () {
	if (hasRequired_iterCreate) return _iterCreate;
	hasRequired_iterCreate = 1;

	var create = require_objectCreate();
	var descriptor = require_propertyDesc();
	var setToStringTag = require_setToStringTag();
	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	require_hide()(IteratorPrototype, require_wks()('iterator'), function () {
	  return this;
	});
	_iterCreate = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, {
	    next: descriptor(1, next)
	  });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	return _iterCreate;
}

var _iterDefine;
var hasRequired_iterDefine;

function require_iterDefine () {
	if (hasRequired_iterDefine) return _iterDefine;
	hasRequired_iterDefine = 1;

	var LIBRARY = require_library();
	var $export = require_export();
	var redefine = require_redefine();
	var hide = require_hide();
	var Iterators = require_iterators();
	var $iterCreate = require_iterCreate();
	var setToStringTag = require_setToStringTag();
	var getPrototypeOf = require_objectGpo();
	var ITERATOR = require_wks()('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	var returnThis = function () {
	  return this;
	};
	_iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS:
	        return function keys() {
	          return new Constructor(this, kind);
	        };
	      case VALUES:
	        return function values() {
	          return new Constructor(this, kind);
	        };
	    }
	    return function entries() {
	      return new Constructor(this, kind);
	    };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() {
	      return $native.call(this);
	    };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	return _iterDefine;
}

var hasRequiredEs6_string_iterator;

function requireEs6_string_iterator () {
	if (hasRequiredEs6_string_iterator) return es6_string_iterator;
	hasRequiredEs6_string_iterator = 1;

	var $at = require_stringAt()(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	require_iterDefine()(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0; // next index
	  // 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return {
	    value: undefined,
	    done: true
	  };
	  point = $at(O, index);
	  this._i += point.length;
	  return {
	    value: point,
	    done: false
	  };
	});
	return es6_string_iterator;
}

var web_dom_iterable = {};

var _addToUnscopables;
var hasRequired_addToUnscopables;

function require_addToUnscopables () {
	if (hasRequired_addToUnscopables) return _addToUnscopables;
	hasRequired_addToUnscopables = 1;
	_addToUnscopables = function () {/* empty */};
	return _addToUnscopables;
}

var _iterStep;
var hasRequired_iterStep;

function require_iterStep () {
	if (hasRequired_iterStep) return _iterStep;
	hasRequired_iterStep = 1;
	_iterStep = function (done, value) {
	  return {
	    value: value,
	    done: !!done
	  };
	};
	return _iterStep;
}

var es6_array_iterator;
var hasRequiredEs6_array_iterator;

function requireEs6_array_iterator () {
	if (hasRequiredEs6_array_iterator) return es6_array_iterator;
	hasRequiredEs6_array_iterator = 1;

	var addToUnscopables = require_addToUnscopables();
	var step = require_iterStep();
	var Iterators = require_iterators();
	var toIObject = require_toIobject();

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	es6_array_iterator = require_iterDefine()(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0; // next index
	  this._k = kind; // kind
	  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	return es6_array_iterator;
}

var hasRequiredWeb_dom_iterable;

function requireWeb_dom_iterable () {
	if (hasRequiredWeb_dom_iterable) return web_dom_iterable;
	hasRequiredWeb_dom_iterable = 1;
	requireEs6_array_iterator();
	var global = require_global();
	var hide = require_hide();
	var Iterators = require_iterators();
	var TO_STRING_TAG = require_wks()('toStringTag');
	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');
	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}
	return web_dom_iterable;
}

var _wksExt = {};

var hasRequired_wksExt;

function require_wksExt () {
	if (hasRequired_wksExt) return _wksExt;
	hasRequired_wksExt = 1;
	_wksExt.f = require_wks();
	return _wksExt;
}

var iterator$1;
var hasRequiredIterator$1;

function requireIterator$1 () {
	if (hasRequiredIterator$1) return iterator$1;
	hasRequiredIterator$1 = 1;
	requireEs6_string_iterator();
	requireWeb_dom_iterable();
	iterator$1 = require_wksExt().f('iterator');
	return iterator$1;
}

var iterator;
var hasRequiredIterator;

function requireIterator () {
	if (hasRequiredIterator) return iterator;
	hasRequiredIterator = 1;
	iterator = {
	  "default": requireIterator$1(),
	  __esModule: true
	};
	return iterator;
}

var es6_symbol = {};

var _meta = {exports: {}};

var hasRequired_meta;

function require_meta () {
	if (hasRequired_meta) return _meta.exports;
	hasRequired_meta = 1;
	var META = require_uid()('meta');
	var isObject = require_isObject();
	var has = require_has();
	var setDesc = require_objectDp().f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !require_fails()(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, {
	    value: {
	      i: 'O' + ++id,
	      // object ID
	      w: {} // weak collections IDs
	    }
	  });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	    // return object ID
	  }
	  return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	    // return hash weak collections IDs
	  }
	  return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = _meta.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};
	return _meta.exports;
}

var _wksDefine;
var hasRequired_wksDefine;

function require_wksDefine () {
	if (hasRequired_wksDefine) return _wksDefine;
	hasRequired_wksDefine = 1;
	var global = require_global();
	var core = require_core();
	var LIBRARY = require_library();
	var wksExt = require_wksExt();
	var defineProperty = require_objectDp().f;
	_wksDefine = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
	    value: wksExt.f(name)
	  });
	};
	return _wksDefine;
}

var _enumKeys;
var hasRequired_enumKeys;

function require_enumKeys () {
	if (hasRequired_enumKeys) return _enumKeys;
	hasRequired_enumKeys = 1;
	// all enumerable object keys, includes symbols
	var getKeys = require_objectKeys();
	var gOPS = require_objectGops();
	var pIE = require_objectPie();
	_enumKeys = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  }
	  return result;
	};
	return _enumKeys;
}

var _isArray;
var hasRequired_isArray;

function require_isArray () {
	if (hasRequired_isArray) return _isArray;
	hasRequired_isArray = 1;
	// 7.2.2 IsArray(argument)
	var cof = require_cof();
	_isArray = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};
	return _isArray;
}

var _objectGopnExt = {};

var _objectGopn = {};

var hasRequired_objectGopn;

function require_objectGopn () {
	if (hasRequired_objectGopn) return _objectGopn;
	hasRequired_objectGopn = 1;
	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = require_objectKeysInternal();
	var hiddenKeys = require_enumBugKeys().concat('length', 'prototype');
	_objectGopn.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};
	return _objectGopn;
}

var hasRequired_objectGopnExt;

function require_objectGopnExt () {
	if (hasRequired_objectGopnExt) return _objectGopnExt;
	hasRequired_objectGopnExt = 1;
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = require_toIobject();
	var gOPN = require_objectGopn().f;
	var toString = {}.toString;
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	_objectGopnExt.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};
	return _objectGopnExt;
}

var _objectGopd = {};

var hasRequired_objectGopd;

function require_objectGopd () {
	if (hasRequired_objectGopd) return _objectGopd;
	hasRequired_objectGopd = 1;
	var pIE = require_objectPie();
	var createDesc = require_propertyDesc();
	var toIObject = require_toIobject();
	var toPrimitive = require_toPrimitive();
	var has = require_has();
	var IE8_DOM_DEFINE = require_ie8DomDefine();
	var gOPD = Object.getOwnPropertyDescriptor;
	_objectGopd.f = require_descriptors() ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) {/* empty */}
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};
	return _objectGopd;
}

var hasRequiredEs6_symbol;

function requireEs6_symbol () {
	if (hasRequiredEs6_symbol) return es6_symbol;
	hasRequiredEs6_symbol = 1;

	// ECMAScript 6 symbols shim
	var global = require_global();
	var has = require_has();
	var DESCRIPTORS = require_descriptors();
	var $export = require_export();
	var redefine = require_redefine();
	var META = require_meta().KEY;
	var $fails = require_fails();
	var shared = require_shared();
	var setToStringTag = require_setToStringTag();
	var uid = require_uid();
	var wks = require_wks();
	var wksExt = require_wksExt();
	var wksDefine = require_wksDefine();
	var enumKeys = require_enumKeys();
	var isArray = require_isArray();
	var anObject = require_anObject();
	var isObject = require_isObject();
	var toObject = require_toObject();
	var toIObject = require_toIobject();
	var toPrimitive = require_toPrimitive();
	var createDesc = require_propertyDesc();
	var _create = require_objectCreate();
	var gOPNExt = require_objectGopnExt();
	var $GOPD = require_objectGopd();
	var $GOPS = require_objectGops();
	var $DP = require_objectDp();
	var $keys = require_objectKeys();
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () {
	      return dP(this, 'a', {
	        value: 7
	      }).a;
	    }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, {
	        enumerable: createDesc(0, false)
	      });
	    }
	    return setSymbolDesc(it, key, D);
	  }
	  return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  }
	  return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  }
	  return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
	      configurable: true,
	      set: $set
	    });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  require_objectGopn().f = gOPNExt.f = $getOwnPropertyNames;
	  require_objectPie().f = $propertyIsEnumerable;
	  $GOPS.f = $getOwnPropertySymbols;
	  if (DESCRIPTORS && !require_library()) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {
	  Symbol: $Symbol
	});
	for (var es6Symbols =
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]);
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () {
	    setter = true;
	  },
	  useSimple: function () {
	    setter = false;
	  }
	});
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	var FAILS_ON_PRIMITIVES = $fails(function () {
	  $GOPS.f(1);
	});
	$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return $GOPS.f(toObject(it));
	  }
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({
	    a: S
	  }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || require_hide()($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);
	return es6_symbol;
}

var es7_symbol_asyncIterator = {};

var hasRequiredEs7_symbol_asyncIterator;

function requireEs7_symbol_asyncIterator () {
	if (hasRequiredEs7_symbol_asyncIterator) return es7_symbol_asyncIterator;
	hasRequiredEs7_symbol_asyncIterator = 1;
	require_wksDefine()('asyncIterator');
	return es7_symbol_asyncIterator;
}

var es7_symbol_observable = {};

var hasRequiredEs7_symbol_observable;

function requireEs7_symbol_observable () {
	if (hasRequiredEs7_symbol_observable) return es7_symbol_observable;
	hasRequiredEs7_symbol_observable = 1;
	require_wksDefine()('observable');
	return es7_symbol_observable;
}

var symbol$1;
var hasRequiredSymbol$1;

function requireSymbol$1 () {
	if (hasRequiredSymbol$1) return symbol$1;
	hasRequiredSymbol$1 = 1;
	requireEs6_symbol();
	requireEs7_symbol_asyncIterator();
	requireEs7_symbol_observable();
	symbol$1 = require_core().Symbol;
	return symbol$1;
}

var symbol;
var hasRequiredSymbol;

function requireSymbol () {
	if (hasRequiredSymbol) return symbol;
	hasRequiredSymbol = 1;
	symbol = {
	  "default": requireSymbol$1(),
	  __esModule: true
	};
	return symbol;
}

var hasRequired_typeof;

function require_typeof () {
	if (hasRequired_typeof) return _typeof;
	hasRequired_typeof = 1;

	_typeof.__esModule = true;
	var _iterator = requireIterator();
	var _iterator2 = _interopRequireDefault(_iterator);
	var _symbol = requireSymbol();
	var _symbol2 = _interopRequireDefault(_symbol);
	var _typeof$1 = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
	};
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	_typeof.default = typeof _symbol2.default === "function" && _typeof$1(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof$1(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof$1(obj);
	};
	return _typeof;
}

var hasRequiredPossibleConstructorReturn;

function requirePossibleConstructorReturn () {
	if (hasRequiredPossibleConstructorReturn) return possibleConstructorReturn;
	hasRequiredPossibleConstructorReturn = 1;

	possibleConstructorReturn.__esModule = true;
	var _typeof2 = require_typeof();
	var _typeof3 = _interopRequireDefault(_typeof2);
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	possibleConstructorReturn.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};
	return possibleConstructorReturn;
}

var inherits = {};

var es6_object_setPrototypeOf = {};

var _setProto;
var hasRequired_setProto;

function require_setProto () {
	if (hasRequired_setProto) return _setProto;
	hasRequired_setProto = 1;
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = require_isObject();
	var anObject = require_anObject();
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	_setProto = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ?
	  // eslint-disable-line
	  function (test, buggy, set) {
	    try {
	      set = require_ctx()(Function.call, require_objectGopd().f(Object.prototype, '__proto__').set, 2);
	      set(test, []);
	      buggy = !(test instanceof Array);
	    } catch (e) {
	      buggy = true;
	    }
	    return function setPrototypeOf(O, proto) {
	      check(O, proto);
	      if (buggy) O.__proto__ = proto;else set(O, proto);
	      return O;
	    };
	  }({}, false) : undefined),
	  check: check
	};
	return _setProto;
}

var hasRequiredEs6_object_setPrototypeOf;

function requireEs6_object_setPrototypeOf () {
	if (hasRequiredEs6_object_setPrototypeOf) return es6_object_setPrototypeOf;
	hasRequiredEs6_object_setPrototypeOf = 1;
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = require_export();
	$export($export.S, 'Object', {
	  setPrototypeOf: require_setProto().set
	});
	return es6_object_setPrototypeOf;
}

var setPrototypeOf$1;
var hasRequiredSetPrototypeOf$1;

function requireSetPrototypeOf$1 () {
	if (hasRequiredSetPrototypeOf$1) return setPrototypeOf$1;
	hasRequiredSetPrototypeOf$1 = 1;
	requireEs6_object_setPrototypeOf();
	setPrototypeOf$1 = require_core().Object.setPrototypeOf;
	return setPrototypeOf$1;
}

var setPrototypeOf;
var hasRequiredSetPrototypeOf;

function requireSetPrototypeOf () {
	if (hasRequiredSetPrototypeOf) return setPrototypeOf;
	hasRequiredSetPrototypeOf = 1;
	setPrototypeOf = {
	  "default": requireSetPrototypeOf$1(),
	  __esModule: true
	};
	return setPrototypeOf;
}

var es6_object_create = {};

var hasRequiredEs6_object_create;

function requireEs6_object_create () {
	if (hasRequiredEs6_object_create) return es6_object_create;
	hasRequiredEs6_object_create = 1;
	var $export = require_export();
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {
	  create: require_objectCreate()
	});
	return es6_object_create;
}

var create$1;
var hasRequiredCreate$1;

function requireCreate$1 () {
	if (hasRequiredCreate$1) return create$1;
	hasRequiredCreate$1 = 1;
	requireEs6_object_create();
	var $Object = require_core().Object;
	create$1 = function create(P, D) {
	  return $Object.create(P, D);
	};
	return create$1;
}

var create;
var hasRequiredCreate;

function requireCreate () {
	if (hasRequiredCreate) return create;
	hasRequiredCreate = 1;
	create = {
	  "default": requireCreate$1(),
	  __esModule: true
	};
	return create;
}

var hasRequiredInherits;

function requireInherits () {
	if (hasRequiredInherits) return inherits;
	hasRequiredInherits = 1;

	inherits.__esModule = true;
	var _setPrototypeOf = requireSetPrototypeOf();
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	var _create = requireCreate();
	var _create2 = _interopRequireDefault(_create);
	var _typeof2 = require_typeof();
	var _typeof3 = _interopRequireDefault(_typeof2);
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	inherits.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};
	return inherits;
}

var propTypes = {exports: {}};

var reactIs = {exports: {}};

var reactIs_development = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;

	{
	  (function () {

	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	    // nor polyfill, then a plain number is used for performance.
	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	    // (unstable) APIs that have been removed. Can we remove the symbols?

	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
	    function isValidElementType(type) {
	      return typeof type === 'string' || typeof type === 'function' ||
	      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	    }
	    function typeOf(object) {
	      if (typeof object === 'object' && object !== null) {
	        var $$typeof = object.$$typeof;
	        switch ($$typeof) {
	          case REACT_ELEMENT_TYPE:
	            var type = object.type;
	            switch (type) {
	              case REACT_ASYNC_MODE_TYPE:
	              case REACT_CONCURRENT_MODE_TYPE:
	              case REACT_FRAGMENT_TYPE:
	              case REACT_PROFILER_TYPE:
	              case REACT_STRICT_MODE_TYPE:
	              case REACT_SUSPENSE_TYPE:
	                return type;
	              default:
	                var $$typeofType = type && type.$$typeof;
	                switch ($$typeofType) {
	                  case REACT_CONTEXT_TYPE:
	                  case REACT_FORWARD_REF_TYPE:
	                  case REACT_LAZY_TYPE:
	                  case REACT_MEMO_TYPE:
	                  case REACT_PROVIDER_TYPE:
	                    return $$typeofType;
	                  default:
	                    return $$typeof;
	                }
	            }
	          case REACT_PORTAL_TYPE:
	            return $$typeof;
	        }
	      }
	      return undefined;
	    } // AsyncMode is deprecated along with isAsyncMode

	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	    var ContextConsumer = REACT_CONTEXT_TYPE;
	    var ContextProvider = REACT_PROVIDER_TYPE;
	    var Element = REACT_ELEMENT_TYPE;
	    var ForwardRef = REACT_FORWARD_REF_TYPE;
	    var Fragment = REACT_FRAGMENT_TYPE;
	    var Lazy = REACT_LAZY_TYPE;
	    var Memo = REACT_MEMO_TYPE;
	    var Portal = REACT_PORTAL_TYPE;
	    var Profiler = REACT_PROFILER_TYPE;
	    var StrictMode = REACT_STRICT_MODE_TYPE;
	    var Suspense = REACT_SUSPENSE_TYPE;
	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	    function isAsyncMode(object) {
	      {
	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	        }
	      }
	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	    }
	    function isConcurrentMode(object) {
	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	    }
	    function isContextConsumer(object) {
	      return typeOf(object) === REACT_CONTEXT_TYPE;
	    }
	    function isContextProvider(object) {
	      return typeOf(object) === REACT_PROVIDER_TYPE;
	    }
	    function isElement(object) {
	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	    }
	    function isForwardRef(object) {
	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
	    }
	    function isFragment(object) {
	      return typeOf(object) === REACT_FRAGMENT_TYPE;
	    }
	    function isLazy(object) {
	      return typeOf(object) === REACT_LAZY_TYPE;
	    }
	    function isMemo(object) {
	      return typeOf(object) === REACT_MEMO_TYPE;
	    }
	    function isPortal(object) {
	      return typeOf(object) === REACT_PORTAL_TYPE;
	    }
	    function isProfiler(object) {
	      return typeOf(object) === REACT_PROFILER_TYPE;
	    }
	    function isStrictMode(object) {
	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
	    }
	    function isSuspense(object) {
	      return typeOf(object) === REACT_SUSPENSE_TYPE;
	    }
	    reactIs_development.AsyncMode = AsyncMode;
	    reactIs_development.ConcurrentMode = ConcurrentMode;
	    reactIs_development.ContextConsumer = ContextConsumer;
	    reactIs_development.ContextProvider = ContextProvider;
	    reactIs_development.Element = Element;
	    reactIs_development.ForwardRef = ForwardRef;
	    reactIs_development.Fragment = Fragment;
	    reactIs_development.Lazy = Lazy;
	    reactIs_development.Memo = Memo;
	    reactIs_development.Portal = Portal;
	    reactIs_development.Profiler = Profiler;
	    reactIs_development.StrictMode = StrictMode;
	    reactIs_development.Suspense = Suspense;
	    reactIs_development.isAsyncMode = isAsyncMode;
	    reactIs_development.isConcurrentMode = isConcurrentMode;
	    reactIs_development.isContextConsumer = isContextConsumer;
	    reactIs_development.isContextProvider = isContextProvider;
	    reactIs_development.isElement = isElement;
	    reactIs_development.isForwardRef = isForwardRef;
	    reactIs_development.isFragment = isFragment;
	    reactIs_development.isLazy = isLazy;
	    reactIs_development.isMemo = isMemo;
	    reactIs_development.isPortal = isPortal;
	    reactIs_development.isProfiler = isProfiler;
	    reactIs_development.isStrictMode = isStrictMode;
	    reactIs_development.isSuspense = isSuspense;
	    reactIs_development.isValidElementType = isValidElementType;
	    reactIs_development.typeOf = typeOf;
	  })();
	}
	return reactIs_development;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs.exports;
	hasRequiredReactIs = 1;

	{
	  reactIs.exports = requireReactIs_development();
	}
	return reactIs.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;

	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	function toObject(val) {
	  if (val === null || val === undefined) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }
	  return Object(val);
	}
	function shouldUseNative() {
	  try {
	    if (!Object.assign) {
	      return false;
	    }

	    // Detect buggy property enumeration order in older V8 versions.

	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
	    test1[5] = 'de';
	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    }

	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
	    var test2 = {};
	    for (var i = 0; i < 10; i++) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }
	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
	      return test2[n];
	    });
	    if (order2.join('') !== '0123456789') {
	      return false;
	    }

	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
	    var test3 = {};
	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
	      test3[letter] = letter;
	    });
	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }
	    return true;
	  } catch (err) {
	    // We don't expect any of the above to throw, but better to be safe.
	    return false;
	  }
	}
	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	  var from;
	  var to = toObject(target);
	  var symbols;
	  for (var s = 1; s < arguments.length; s++) {
	    from = Object(arguments[s]);
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	    if (getOwnPropertySymbols) {
	      symbols = getOwnPropertySymbols(from);
	      for (var i = 0; i < symbols.length; i++) {
	        if (propIsEnumerable.call(from, symbols[i])) {
	          to[symbols[i]] = from[symbols[i]];
	        }
	      }
	    }
	  }
	  return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

var has;
var hasRequiredHas;

function requireHas () {
	if (hasRequiredHas) return has;
	hasRequiredHas = 1;
	has = Function.call.bind(Object.prototype.hasOwnProperty);
	return has;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function () {};
	{
	  var ReactPropTypesSecret = /*@__PURE__*/ requireReactPropTypesSecret();
	  var loggedTypeFailures = {};
	  var has = /*@__PURE__*/ requireHas();
	  printWarning = function (text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {/**/}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	          var stack = getStack ? getStack() : '';
	          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function () {
	  {
	    loggedTypeFailures = {};
	  }
	};
	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs();
	var assign = requireObjectAssign();
	var ReactPropTypesSecret = /*@__PURE__*/ requireReactPropTypesSecret();
	var has = /*@__PURE__*/ requireHas();
	var checkPropTypes = /*@__PURE__*/ requireCheckPropTypes();
	var printWarning = function () {};
	{
	  printWarning = function (text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}
	function emptyFunctionThatReturnsNull() {
	  return null;
	}
	factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data : {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (!manualPropTypeCallCache[cacheKey] &&
	          // Avoid spamming the console because they are often not actionable except for lib authors
	          manualPropTypeWarningCount < 3) {
	            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	    return chainedCheckType;
	  }
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
	          expectedType: expectedType
	        });
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
	      return emptyFunctionThatReturnsNull;
	    }
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
	        return emptyFunctionThatReturnsNull;
	      }
	    }
	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
	  }
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	        return true;
	      default:
	        return false;
	    }
	  }
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredPropTypes;

function requirePropTypes () {
	if (hasRequiredPropTypes) return propTypes.exports;
	hasRequiredPropTypes = 1;
	{
	  var ReactIs = requireReactIs();

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = /*@__PURE__*/ requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
	}
	return propTypes.exports;
}

var lottie$1 = {exports: {}};

var lottie = lottie$1.exports;

var hasRequiredLottie;

function requireLottie () {
	if (hasRequiredLottie) return lottie$1.exports;
	hasRequiredLottie = 1;
	(function (module, exports) {
		typeof navigator!=="undefined"&&function(global,factory){module.exports=factory();}(lottie,function(){var svgNS='http://www.w3.org/2000/svg';var locationHref='';var _useWebWorker=false;var initialDefaultFrame=-999999;var setWebWorker=function setWebWorker(flag){_useWebWorker=!!flag;};var getWebWorker=function getWebWorker(){return _useWebWorker;};var setLocationHref=function setLocationHref(value){locationHref=value;};var getLocationHref=function getLocationHref(){return locationHref;};function createTag(type){// return {appendChild:function(){},setAttribute:function(){},style:{}}
		return document.createElement(type);}function extendPrototype(sources,destination){var i;var len=sources.length;var sourcePrototype;for(i=0;i<len;i+=1){sourcePrototype=sources[i].prototype;for(var attr in sourcePrototype){if(Object.prototype.hasOwnProperty.call(sourcePrototype,attr))destination.prototype[attr]=sourcePrototype[attr];}}}function getDescriptor(object,prop){return Object.getOwnPropertyDescriptor(object,prop);}function createProxyFunction(prototype){function ProxyFunction(){}ProxyFunction.prototype=prototype;return ProxyFunction;}// import Howl from '../../3rd_party/howler';
		var audioControllerFactory=function(){function AudioController(audioFactory){this.audios=[];this.audioFactory=audioFactory;this._volume=1;this._isMuted=false;}AudioController.prototype={addAudio:function addAudio(audio){this.audios.push(audio);},pause:function pause(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].pause();}},resume:function resume(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].resume();}},setRate:function setRate(rateValue){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].setRate(rateValue);}},createAudio:function createAudio(assetPath){if(this.audioFactory){return this.audioFactory(assetPath);}if(window.Howl){return new window.Howl({src:[assetPath]});}return {isPlaying:false,play:function play(){this.isPlaying=true;},seek:function seek(){this.isPlaying=false;},playing:function playing(){},rate:function rate(){},setVolume:function setVolume(){}};},setAudioFactory:function setAudioFactory(audioFactory){this.audioFactory=audioFactory;},setVolume:function setVolume(value){this._volume=value;this._updateVolume();},mute:function mute(){this._isMuted=true;this._updateVolume();},unmute:function unmute(){this._isMuted=false;this._updateVolume();},getVolume:function getVolume(){return this._volume;},_updateVolume:function _updateVolume(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].volume(this._volume*(this._isMuted?0:1));}}};return function(){return new AudioController();};}();var createTypedArray=function(){function createRegularArray(type,len){var i=0;var arr=[];var value;switch(type){case'int16':case'uint8c':value=1;break;default:value=1.1;break;}for(i=0;i<len;i+=1){arr.push(value);}return arr;}function createTypedArrayFactory(type,len){if(type==='float32'){return new Float32Array(len);}if(type==='int16'){return new Int16Array(len);}if(type==='uint8c'){return new Uint8ClampedArray(len);}return createRegularArray(type,len);}if(typeof Uint8ClampedArray==='function'&&typeof Float32Array==='function'){return createTypedArrayFactory;}return createRegularArray;}();function createSizedArray(len){return Array.apply(null,{length:len});}function _typeof$6(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof$6=function _typeof(obj){return typeof obj;};}else {_typeof$6=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof$6(obj);}var subframeEnabled=true;var expressionsPlugin=null;var expressionsInterfaces=null;var idPrefix$1='';var isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);var bmPow=Math.pow;var bmSqrt=Math.sqrt;var bmFloor=Math.floor;var bmMax=Math.max;var bmMin=Math.min;var BMMath={};(function(){var propertyNames=['abs','acos','acosh','asin','asinh','atan','atanh','atan2','ceil','cbrt','expm1','clz32','cos','cosh','exp','floor','fround','hypot','imul','log','log1p','log2','log10','max','min','pow','random','round','sign','sin','sinh','sqrt','tan','tanh','trunc','E','LN10','LN2','LOG10E','LOG2E','PI','SQRT1_2','SQRT2'];var i;var len=propertyNames.length;for(i=0;i<len;i+=1){BMMath[propertyNames[i]]=Math[propertyNames[i]];}})();BMMath.random=Math.random;BMMath.abs=function(val){var tOfVal=_typeof$6(val);if(tOfVal==='object'&&val.length){var absArr=createSizedArray(val.length);var i;var len=val.length;for(i=0;i<len;i+=1){absArr[i]=Math.abs(val[i]);}return absArr;}return Math.abs(val);};var defaultCurveSegments=150;var degToRads=Math.PI/180;var roundCorner=0.5519;function styleDiv(element){element.style.position='absolute';element.style.top=0;element.style.left=0;element.style.display='block';element.style.transformOrigin='0 0';element.style.webkitTransformOrigin='0 0';element.style.backfaceVisibility='visible';element.style.webkitBackfaceVisibility='visible';element.style.transformStyle='preserve-3d';element.style.webkitTransformStyle='preserve-3d';element.style.mozTransformStyle='preserve-3d';}function BMEnterFrameEvent(type,currentTime,totalTime,frameMultiplier){this.type=type;this.currentTime=currentTime;this.totalTime=totalTime;this.direction=frameMultiplier<0?-1:1;}function BMCompleteEvent(type,frameMultiplier){this.type=type;this.direction=frameMultiplier<0?-1:1;}function BMCompleteLoopEvent(type,totalLoops,currentLoop,frameMultiplier){this.type=type;this.currentLoop=currentLoop;this.totalLoops=totalLoops;this.direction=frameMultiplier<0?-1:1;}function BMSegmentStartEvent(type,firstFrame,totalFrames){this.type=type;this.firstFrame=firstFrame;this.totalFrames=totalFrames;}function BMDestroyEvent(type,target){this.type=type;this.target=target;}function BMRenderFrameErrorEvent(nativeError,currentTime){this.type='renderFrameError';this.nativeError=nativeError;this.currentTime=currentTime;}function BMConfigErrorEvent(nativeError){this.type='configError';this.nativeError=nativeError;}var createElementID=function(){var _count=0;return function createID(){_count+=1;return idPrefix$1+'__lottie_element_'+_count;};}();function HSVtoRGB(h,s,v){var r;var g;var b;var i;var f;var p;var q;var t;i=Math.floor(h*6);f=h*6-i;p=v*(1-s);q=v*(1-f*s);t=v*(1-(1-f)*s);switch(i%6){case 0:r=v;g=t;b=p;break;case 1:r=q;g=v;b=p;break;case 2:r=p;g=v;b=t;break;case 3:r=p;g=q;b=v;break;case 4:r=t;g=p;b=v;break;case 5:r=v;g=p;b=q;break;}return [r,g,b];}function RGBtoHSV(r,g,b){var max=Math.max(r,g,b);var min=Math.min(r,g,b);var d=max-min;var h;var s=max===0?0:d/max;var v=max/255;switch(max){case min:h=0;break;case r:h=g-b+d*(g<b?6:0);h/=6*d;break;case g:h=b-r+d*2;h/=6*d;break;case b:h=r-g+d*4;h/=6*d;break;}return [h,s,v];}function addSaturationToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[1]+=offset;if(hsv[1]>1){hsv[1]=1;}else if(hsv[1]<=0){hsv[1]=0;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}function addBrightnessToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[2]+=offset;if(hsv[2]>1){hsv[2]=1;}else if(hsv[2]<0){hsv[2]=0;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}function addHueToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[0]+=offset/360;if(hsv[0]>1){hsv[0]-=1;}else if(hsv[0]<0){hsv[0]+=1;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}var rgbToHex=function(){var colorMap=[];var i;var hex;for(i=0;i<256;i+=1){hex=i.toString(16);colorMap[i]=hex.length===1?'0'+hex:hex;}return function(r,g,b){if(r<0){r=0;}if(g<0){g=0;}if(b<0){b=0;}return '#'+colorMap[r]+colorMap[g]+colorMap[b];};}();var setSubframeEnabled=function setSubframeEnabled(flag){subframeEnabled=!!flag;};var getSubframeEnabled=function getSubframeEnabled(){return subframeEnabled;};var setExpressionsPlugin=function setExpressionsPlugin(value){expressionsPlugin=value;};var getExpressionsPlugin=function getExpressionsPlugin(){return expressionsPlugin;};var setExpressionInterfaces=function setExpressionInterfaces(value){expressionsInterfaces=value;};var getExpressionInterfaces=function getExpressionInterfaces(){return expressionsInterfaces;};var setDefaultCurveSegments=function setDefaultCurveSegments(value){defaultCurveSegments=value;};var getDefaultCurveSegments=function getDefaultCurveSegments(){return defaultCurveSegments;};var setIdPrefix=function setIdPrefix(value){idPrefix$1=value;};function createNS(type){// return {appendChild:function(){},setAttribute:function(){},style:{}}
		return document.createElementNS(svgNS,type);}function _typeof$5(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof$5=function _typeof(obj){return typeof obj;};}else {_typeof$5=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof$5(obj);}var dataManager=function(){var _counterId=1;var processes=[];var workerFn;var workerInstance;var workerProxy={onmessage:function onmessage(){},postMessage:function postMessage(path){workerFn({data:path});}};var _workerSelf={postMessage:function postMessage(data){workerProxy.onmessage({data:data});}};function createWorker(fn){if(window.Worker&&window.Blob&&getWebWorker()){var blob=new Blob(['var _workerSelf = self; self.onmessage = ',fn.toString()],{type:'text/javascript'});// var blob = new Blob(['self.onmessage = ', fn.toString()], { type: 'text/javascript' });
		var url=URL.createObjectURL(blob);return new Worker(url);}workerFn=fn;return workerProxy;}function setupWorker(){if(!workerInstance){workerInstance=createWorker(function workerStart(e){function dataFunctionManager(){function completeLayers(layers,comps){var layerData;var i;var len=layers.length;var j;var jLen;var k;var kLen;for(i=0;i<len;i+=1){layerData=layers[i];if('ks'in layerData&&!layerData.completed){layerData.completed=true;if(layerData.hasMask){var maskProps=layerData.masksProperties;jLen=maskProps.length;for(j=0;j<jLen;j+=1){if(maskProps[j].pt.k.i){convertPathsToAbsoluteValues(maskProps[j].pt.k);}else {kLen=maskProps[j].pt.k.length;for(k=0;k<kLen;k+=1){if(maskProps[j].pt.k[k].s){convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);}if(maskProps[j].pt.k[k].e){convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);}}}}}if(layerData.ty===0){layerData.layers=findCompLayers(layerData.refId,comps);completeLayers(layerData.layers,comps);}else if(layerData.ty===4){completeShapes(layerData.shapes);}else if(layerData.ty===5){completeText(layerData);}}}}function completeChars(chars,assets){if(chars){var i=0;var len=chars.length;for(i=0;i<len;i+=1){if(chars[i].t===1){// var compData = findComp(chars[i].data.refId, assets);
		chars[i].data.layers=findCompLayers(chars[i].data.refId,assets);// chars[i].data.ip = 0;
		// chars[i].data.op = 99999;
		// chars[i].data.st = 0;
		// chars[i].data.sr = 1;
		// chars[i].w = compData.w;
		// chars[i].data.ks = {
		//   a: { k: [0, 0, 0], a: 0 },
		//   p: { k: [0, -compData.h, 0], a: 0 },
		//   r: { k: 0, a: 0 },
		//   s: { k: [100, 100], a: 0 },
		//   o: { k: 100, a: 0 },
		// };
		completeLayers(chars[i].data.layers,assets);}}}}function findComp(id,comps){var i=0;var len=comps.length;while(i<len){if(comps[i].id===id){return comps[i];}i+=1;}return null;}function findCompLayers(id,comps){var comp=findComp(id,comps);if(comp){if(!comp.layers.__used){comp.layers.__used=true;return comp.layers;}return JSON.parse(JSON.stringify(comp.layers));}return null;}function completeShapes(arr){var i;var len=arr.length;var j;var jLen;for(i=len-1;i>=0;i-=1){if(arr[i].ty==='sh'){if(arr[i].ks.k.i){convertPathsToAbsoluteValues(arr[i].ks.k);}else {jLen=arr[i].ks.k.length;for(j=0;j<jLen;j+=1){if(arr[i].ks.k[j].s){convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);}if(arr[i].ks.k[j].e){convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);}}}}else if(arr[i].ty==='gr'){completeShapes(arr[i].it);}}}function convertPathsToAbsoluteValues(path){var i;var len=path.i.length;for(i=0;i<len;i+=1){path.i[i][0]+=path.v[i][0];path.i[i][1]+=path.v[i][1];path.o[i][0]+=path.v[i][0];path.o[i][1]+=path.v[i][1];}}function checkVersion(minimum,animVersionString){var animVersion=animVersionString?animVersionString.split('.'):[100,100,100];if(minimum[0]>animVersion[0]){return true;}if(animVersion[0]>minimum[0]){return false;}if(minimum[1]>animVersion[1]){return true;}if(animVersion[1]>minimum[1]){return false;}if(minimum[2]>animVersion[2]){return true;}if(animVersion[2]>minimum[2]){return false;}return null;}var checkText=function(){var minimumVersion=[4,4,14];function updateTextLayer(textLayer){var documentData=textLayer.t.d;textLayer.t.d={k:[{s:documentData,t:0}]};}function iterateLayers(layers){var i;var len=layers.length;for(i=0;i<len;i+=1){if(layers[i].ty===5){updateTextLayer(layers[i]);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();var checkChars=function(){var minimumVersion=[4,7,99];return function(animationData){if(animationData.chars&&!checkVersion(minimumVersion,animationData.v)){var i;var len=animationData.chars.length;for(i=0;i<len;i+=1){var charData=animationData.chars[i];if(charData.data&&charData.data.shapes){completeShapes(charData.data.shapes);charData.data.ip=0;charData.data.op=99999;charData.data.st=0;charData.data.sr=1;charData.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}};if(!animationData.chars[i].t){charData.data.shapes.push({ty:'no'});charData.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:'tr'});}}}}};}();var checkPathProperties=function(){var minimumVersion=[5,7,15];function updateTextLayer(textLayer){var pathData=textLayer.t.p;if(typeof pathData.a==='number'){pathData.a={a:0,k:pathData.a};}if(typeof pathData.p==='number'){pathData.p={a:0,k:pathData.p};}if(typeof pathData.r==='number'){pathData.r={a:0,k:pathData.r};}}function iterateLayers(layers){var i;var len=layers.length;for(i=0;i<len;i+=1){if(layers[i].ty===5){updateTextLayer(layers[i]);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();var checkColors=function(){var minimumVersion=[4,1,9];function iterateShapes(shapes){var i;var len=shapes.length;var j;var jLen;for(i=0;i<len;i+=1){if(shapes[i].ty==='gr'){iterateShapes(shapes[i].it);}else if(shapes[i].ty==='fl'||shapes[i].ty==='st'){if(shapes[i].c.k&&shapes[i].c.k[0].i){jLen=shapes[i].c.k.length;for(j=0;j<jLen;j+=1){if(shapes[i].c.k[j].s){shapes[i].c.k[j].s[0]/=255;shapes[i].c.k[j].s[1]/=255;shapes[i].c.k[j].s[2]/=255;shapes[i].c.k[j].s[3]/=255;}if(shapes[i].c.k[j].e){shapes[i].c.k[j].e[0]/=255;shapes[i].c.k[j].e[1]/=255;shapes[i].c.k[j].e[2]/=255;shapes[i].c.k[j].e[3]/=255;}}}else {shapes[i].c.k[0]/=255;shapes[i].c.k[1]/=255;shapes[i].c.k[2]/=255;shapes[i].c.k[3]/=255;}}}}function iterateLayers(layers){var i;var len=layers.length;for(i=0;i<len;i+=1){if(layers[i].ty===4){iterateShapes(layers[i].shapes);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();var checkShapes=function(){var minimumVersion=[4,4,18];function completeClosingShapes(arr){var i;var len=arr.length;var j;var jLen;for(i=len-1;i>=0;i-=1){if(arr[i].ty==='sh'){if(arr[i].ks.k.i){arr[i].ks.k.c=arr[i].closed;}else {jLen=arr[i].ks.k.length;for(j=0;j<jLen;j+=1){if(arr[i].ks.k[j].s){arr[i].ks.k[j].s[0].c=arr[i].closed;}if(arr[i].ks.k[j].e){arr[i].ks.k[j].e[0].c=arr[i].closed;}}}}else if(arr[i].ty==='gr'){completeClosingShapes(arr[i].it);}}}function iterateLayers(layers){var layerData;var i;var len=layers.length;var j;var jLen;var k;var kLen;for(i=0;i<len;i+=1){layerData=layers[i];if(layerData.hasMask){var maskProps=layerData.masksProperties;jLen=maskProps.length;for(j=0;j<jLen;j+=1){if(maskProps[j].pt.k.i){maskProps[j].pt.k.c=maskProps[j].cl;}else {kLen=maskProps[j].pt.k.length;for(k=0;k<kLen;k+=1){if(maskProps[j].pt.k[k].s){maskProps[j].pt.k[k].s[0].c=maskProps[j].cl;}if(maskProps[j].pt.k[k].e){maskProps[j].pt.k[k].e[0].c=maskProps[j].cl;}}}}}if(layerData.ty===4){completeClosingShapes(layerData.shapes);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();function completeData(animationData){if(animationData.__complete){return;}checkColors(animationData);checkText(animationData);checkChars(animationData);checkPathProperties(animationData);checkShapes(animationData);completeLayers(animationData.layers,animationData.assets);completeChars(animationData.chars,animationData.assets);animationData.__complete=true;}function completeText(data){if(data.t.a.length===0&&!('m'in data.t.p));}var moduleOb={};moduleOb.completeData=completeData;moduleOb.checkColors=checkColors;moduleOb.checkChars=checkChars;moduleOb.checkPathProperties=checkPathProperties;moduleOb.checkShapes=checkShapes;moduleOb.completeLayers=completeLayers;return moduleOb;}if(!_workerSelf.dataManager){_workerSelf.dataManager=dataFunctionManager();}if(!_workerSelf.assetLoader){_workerSelf.assetLoader=function(){function formatResponse(xhr){// using typeof doubles the time of execution of this method,
		// so if available, it's better to use the header to validate the type
		var contentTypeHeader=xhr.getResponseHeader('content-type');if(contentTypeHeader&&xhr.responseType==='json'&&contentTypeHeader.indexOf('json')!==-1){return xhr.response;}if(xhr.response&&_typeof$5(xhr.response)==='object'){return xhr.response;}if(xhr.response&&typeof xhr.response==='string'){return JSON.parse(xhr.response);}if(xhr.responseText){return JSON.parse(xhr.responseText);}return null;}function loadAsset(path,fullPath,callback,errorCallback){var response;var xhr=new XMLHttpRequest();// set responseType after calling open or IE will break.
		try{// This crashes on Android WebView prior to KitKat
		xhr.responseType='json';}catch(err){}// eslint-disable-line no-empty
		xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200){response=formatResponse(xhr);callback(response);}else {try{response=formatResponse(xhr);callback(response);}catch(err){if(errorCallback){errorCallback(err);}}}}};try{// Hack to workaround banner validation
		xhr.open(['G','E','T'].join(''),path,true);}catch(error){// Hack to workaround banner validation
		xhr.open(['G','E','T'].join(''),fullPath+'/'+path,true);}xhr.send();}return {load:loadAsset};}();}if(e.data.type==='loadAnimation'){_workerSelf.assetLoader.load(e.data.path,e.data.fullPath,function(data){_workerSelf.dataManager.completeData(data);_workerSelf.postMessage({id:e.data.id,payload:data,status:'success'});},function(){_workerSelf.postMessage({id:e.data.id,status:'error'});});}else if(e.data.type==='complete'){var animation=e.data.animation;_workerSelf.dataManager.completeData(animation);_workerSelf.postMessage({id:e.data.id,payload:animation,status:'success'});}else if(e.data.type==='loadData'){_workerSelf.assetLoader.load(e.data.path,e.data.fullPath,function(data){_workerSelf.postMessage({id:e.data.id,payload:data,status:'success'});},function(){_workerSelf.postMessage({id:e.data.id,status:'error'});});}});workerInstance.onmessage=function(event){var data=event.data;var id=data.id;var process=processes[id];processes[id]=null;if(data.status==='success'){process.onComplete(data.payload);}else if(process.onError){process.onError();}};}}function createProcess(onComplete,onError){_counterId+=1;var id='processId_'+_counterId;processes[id]={onComplete:onComplete,onError:onError};return id;}function loadAnimation(path,onComplete,onError){setupWorker();var processId=createProcess(onComplete,onError);workerInstance.postMessage({type:'loadAnimation',path:path,fullPath:window.location.origin+window.location.pathname,id:processId});}function loadData(path,onComplete,onError){setupWorker();var processId=createProcess(onComplete,onError);workerInstance.postMessage({type:'loadData',path:path,fullPath:window.location.origin+window.location.pathname,id:processId});}function completeAnimation(anim,onComplete,onError){setupWorker();var processId=createProcess(onComplete,onError);workerInstance.postMessage({type:'complete',animation:anim,id:processId});}return {loadAnimation:loadAnimation,loadData:loadData,completeAnimation:completeAnimation};}();var ImagePreloader=function(){var proxyImage=function(){var canvas=createTag('canvas');canvas.width=1;canvas.height=1;var ctx=canvas.getContext('2d');ctx.fillStyle='rgba(0,0,0,0)';ctx.fillRect(0,0,1,1);return canvas;}();function imageLoaded(){this.loadedAssets+=1;if(this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages){if(this.imagesLoadedCb){this.imagesLoadedCb(null);}}}function footageLoaded(){this.loadedFootagesCount+=1;if(this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages){if(this.imagesLoadedCb){this.imagesLoadedCb(null);}}}function getAssetsPath(assetData,assetsPath,originalPath){var path='';if(assetData.e){path=assetData.p;}else if(assetsPath){var imagePath=assetData.p;if(imagePath.indexOf('images/')!==-1){imagePath=imagePath.split('/')[1];}path=assetsPath+imagePath;}else {path=originalPath;path+=assetData.u?assetData.u:'';path+=assetData.p;}return path;}function testImageLoaded(img){var _count=0;var intervalId=setInterval(function(){var box=img.getBBox();if(box.width||_count>500){this._imageLoaded();clearInterval(intervalId);}_count+=1;}.bind(this),50);}function createImageData(assetData){var path=getAssetsPath(assetData,this.assetsPath,this.path);var img=createNS('image');if(isSafari){this.testImageLoaded(img);}else {img.addEventListener('load',this._imageLoaded,false);}img.addEventListener('error',function(){ob.img=proxyImage;this._imageLoaded();}.bind(this),false);img.setAttributeNS('http://www.w3.org/1999/xlink','href',path);if(this._elementHelper.append){this._elementHelper.append(img);}else {this._elementHelper.appendChild(img);}var ob={img:img,assetData:assetData};return ob;}function createImgData(assetData){var path=getAssetsPath(assetData,this.assetsPath,this.path);var img=createTag('img');img.crossOrigin='anonymous';img.addEventListener('load',this._imageLoaded,false);img.addEventListener('error',function(){ob.img=proxyImage;this._imageLoaded();}.bind(this),false);img.src=path;var ob={img:img,assetData:assetData};return ob;}function createFootageData(data){var ob={assetData:data};var path=getAssetsPath(data,this.assetsPath,this.path);dataManager.loadData(path,function(footageData){ob.img=footageData;this._footageLoaded();}.bind(this),function(){ob.img={};this._footageLoaded();}.bind(this));return ob;}function loadAssets(assets,cb){this.imagesLoadedCb=cb;var i;var len=assets.length;for(i=0;i<len;i+=1){if(!assets[i].layers){if(!assets[i].t||assets[i].t==='seq'){this.totalImages+=1;this.images.push(this._createImageData(assets[i]));}else if(assets[i].t===3){this.totalFootages+=1;this.images.push(this.createFootageData(assets[i]));}}}}function setPath(path){this.path=path||'';}function setAssetsPath(path){this.assetsPath=path||'';}function getAsset(assetData){var i=0;var len=this.images.length;while(i<len){if(this.images[i].assetData===assetData){return this.images[i].img;}i+=1;}return null;}function destroy(){this.imagesLoadedCb=null;this.images.length=0;}function loadedImages(){return this.totalImages===this.loadedAssets;}function loadedFootages(){return this.totalFootages===this.loadedFootagesCount;}function setCacheType(type,elementHelper){if(type==='svg'){this._elementHelper=elementHelper;this._createImageData=this.createImageData.bind(this);}else {this._createImageData=this.createImgData.bind(this);}}function ImagePreloaderFactory(){this._imageLoaded=imageLoaded.bind(this);this._footageLoaded=footageLoaded.bind(this);this.testImageLoaded=testImageLoaded.bind(this);this.createFootageData=createFootageData.bind(this);this.assetsPath='';this.path='';this.totalImages=0;this.totalFootages=0;this.loadedAssets=0;this.loadedFootagesCount=0;this.imagesLoadedCb=null;this.images=[];}ImagePreloaderFactory.prototype={loadAssets:loadAssets,setAssetsPath:setAssetsPath,setPath:setPath,loadedImages:loadedImages,loadedFootages:loadedFootages,destroy:destroy,getAsset:getAsset,createImgData:createImgData,createImageData:createImageData,imageLoaded:imageLoaded,footageLoaded:footageLoaded,setCacheType:setCacheType};return ImagePreloaderFactory;}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function triggerEvent(eventName,args){if(this._cbs[eventName]){var callbacks=this._cbs[eventName];for(var i=0;i<callbacks.length;i+=1){callbacks[i](args);}}},addEventListener:function addEventListener(eventName,callback){if(!this._cbs[eventName]){this._cbs[eventName]=[];}this._cbs[eventName].push(callback);return function(){this.removeEventListener(eventName,callback);}.bind(this);},removeEventListener:function removeEventListener(eventName,callback){if(!callback){this._cbs[eventName]=null;}else if(this._cbs[eventName]){var i=0;var len=this._cbs[eventName].length;while(i<len){if(this._cbs[eventName][i]===callback){this._cbs[eventName].splice(i,1);i-=1;len-=1;}i+=1;}if(!this._cbs[eventName].length){this._cbs[eventName]=null;}}}};var markerParser=function(){function parsePayloadLines(payload){var lines=payload.split('\r\n');var keys={};var line;var keysCount=0;for(var i=0;i<lines.length;i+=1){line=lines[i].split(':');if(line.length===2){keys[line[0]]=line[1].trim();keysCount+=1;}}if(keysCount===0){throw new Error();}return keys;}return function(_markers){var markers=[];for(var i=0;i<_markers.length;i+=1){var _marker=_markers[i];var markerData={time:_marker.tm,duration:_marker.dr};try{markerData.payload=JSON.parse(_markers[i].cm);}catch(_){try{markerData.payload=parsePayloadLines(_markers[i].cm);}catch(__){markerData.payload={name:_markers[i].cm};}}markers.push(markerData);}return markers;};}();var ProjectInterface=function(){function registerComposition(comp){this.compositions.push(comp);}return function(){function _thisProjectFunction(name){var i=0;var len=this.compositions.length;while(i<len){if(this.compositions[i].data&&this.compositions[i].data.nm===name){if(this.compositions[i].prepareFrame&&this.compositions[i].data.xt){this.compositions[i].prepareFrame(this.currentFrame);}return this.compositions[i].compInterface;}i+=1;}return null;}_thisProjectFunction.compositions=[];_thisProjectFunction.currentFrame=0;_thisProjectFunction.registerComposition=registerComposition;return _thisProjectFunction;};}();var renderers={};var registerRenderer=function registerRenderer(key,value){renderers[key]=value;};function getRenderer(key){return renderers[key];}function getRegisteredRenderer(){// Returns canvas by default for compatibility
		if(renderers.canvas){return 'canvas';}// Returns any renderer that is registered
		for(var key in renderers){if(renderers[key]){return key;}}return '';}function _typeof$4(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof$4=function _typeof(obj){return typeof obj;};}else {_typeof$4=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof$4(obj);}var AnimationItem=function AnimationItem(){this._cbs=[];this.name='';this.path='';this.isLoaded=false;this.currentFrame=0;this.currentRawFrame=0;this.firstFrame=0;this.totalFrames=0;this.frameRate=0;this.frameMult=0;this.playSpeed=1;this.playDirection=1;this.playCount=0;this.animationData={};this.assets=[];this.isPaused=true;this.autoplay=false;this.loop=true;this.renderer=null;this.animationID=createElementID();this.assetsPath='';this.timeCompleted=0;this.segmentPos=0;this.isSubframeEnabled=getSubframeEnabled();this.segments=[];this._idle=true;this._completedLoop=false;this.projectInterface=ProjectInterface();this.imagePreloader=new ImagePreloader();this.audioController=audioControllerFactory();this.markers=[];this.configAnimation=this.configAnimation.bind(this);this.onSetupError=this.onSetupError.bind(this);this.onSegmentComplete=this.onSegmentComplete.bind(this);this.drawnFrameEvent=new BMEnterFrameEvent('drawnFrame',0,0,0);this.expressionsPlugin=getExpressionsPlugin();};extendPrototype([BaseEvent],AnimationItem);AnimationItem.prototype.setParams=function(params){if(params.wrapper||params.container){this.wrapper=params.wrapper||params.container;}var animType='svg';if(params.animType){animType=params.animType;}else if(params.renderer){animType=params.renderer;}var RendererClass=getRenderer(animType);this.renderer=new RendererClass(this,params.rendererSettings);this.imagePreloader.setCacheType(animType,this.renderer.globalData.defs);this.renderer.setProjectInterface(this.projectInterface);this.animType=animType;if(params.loop===''||params.loop===null||params.loop===undefined||params.loop===true){this.loop=true;}else if(params.loop===false){this.loop=false;}else {this.loop=parseInt(params.loop,10);}this.autoplay='autoplay'in params?params.autoplay:true;this.name=params.name?params.name:'';this.autoloadSegments=Object.prototype.hasOwnProperty.call(params,'autoloadSegments')?params.autoloadSegments:true;this.assetsPath=params.assetsPath;this.initialSegment=params.initialSegment;if(params.audioFactory){this.audioController.setAudioFactory(params.audioFactory);}if(params.animationData){this.setupAnimation(params.animationData);}else if(params.path){if(params.path.lastIndexOf('\\')!==-1){this.path=params.path.substr(0,params.path.lastIndexOf('\\')+1);}else {this.path=params.path.substr(0,params.path.lastIndexOf('/')+1);}this.fileName=params.path.substr(params.path.lastIndexOf('/')+1);this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf('.json'));dataManager.loadAnimation(params.path,this.configAnimation,this.onSetupError);}};AnimationItem.prototype.onSetupError=function(){this.trigger('data_failed');};AnimationItem.prototype.setupAnimation=function(data){dataManager.completeAnimation(data,this.configAnimation);};AnimationItem.prototype.setData=function(wrapper,animationData){if(animationData){if(_typeof$4(animationData)!=='object'){animationData=JSON.parse(animationData);}}var params={wrapper:wrapper,animationData:animationData};var wrapperAttributes=wrapper.attributes;params.path=wrapperAttributes.getNamedItem('data-animation-path')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-animation-path').value:wrapperAttributes.getNamedItem('data-bm-path')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-bm-path').value:wrapperAttributes.getNamedItem('bm-path')?wrapperAttributes.getNamedItem('bm-path').value:'';params.animType=wrapperAttributes.getNamedItem('data-anim-type')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-anim-type').value:wrapperAttributes.getNamedItem('data-bm-type')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-bm-type').value:wrapperAttributes.getNamedItem('bm-type')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('bm-type').value:wrapperAttributes.getNamedItem('data-bm-renderer')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-bm-renderer').value:wrapperAttributes.getNamedItem('bm-renderer')?wrapperAttributes.getNamedItem('bm-renderer').value:getRegisteredRenderer()||'canvas';var loop=wrapperAttributes.getNamedItem('data-anim-loop')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-anim-loop').value:wrapperAttributes.getNamedItem('data-bm-loop')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-bm-loop').value:wrapperAttributes.getNamedItem('bm-loop')?wrapperAttributes.getNamedItem('bm-loop').value:'';if(loop==='false'){params.loop=false;}else if(loop==='true'){params.loop=true;}else if(loop!==''){params.loop=parseInt(loop,10);}var autoplay=wrapperAttributes.getNamedItem('data-anim-autoplay')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-anim-autoplay').value:wrapperAttributes.getNamedItem('data-bm-autoplay')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-bm-autoplay').value:wrapperAttributes.getNamedItem('bm-autoplay')?wrapperAttributes.getNamedItem('bm-autoplay').value:true;params.autoplay=autoplay!=='false';params.name=wrapperAttributes.getNamedItem('data-name')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-name').value:wrapperAttributes.getNamedItem('data-bm-name')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-bm-name').value:wrapperAttributes.getNamedItem('bm-name')?wrapperAttributes.getNamedItem('bm-name').value:'';var prerender=wrapperAttributes.getNamedItem('data-anim-prerender')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-anim-prerender').value:wrapperAttributes.getNamedItem('data-bm-prerender')// eslint-disable-line no-nested-ternary
		?wrapperAttributes.getNamedItem('data-bm-prerender').value:wrapperAttributes.getNamedItem('bm-prerender')?wrapperAttributes.getNamedItem('bm-prerender').value:'';if(prerender==='false'){params.prerender=false;}if(!params.path){this.trigger('destroy');}else {this.setParams(params);}};AnimationItem.prototype.includeLayers=function(data){if(data.op>this.animationData.op){this.animationData.op=data.op;this.totalFrames=Math.floor(data.op-this.animationData.ip);}var layers=this.animationData.layers;var i;var len=layers.length;var newLayers=data.layers;var j;var jLen=newLayers.length;for(j=0;j<jLen;j+=1){i=0;while(i<len){if(layers[i].id===newLayers[j].id){layers[i]=newLayers[j];break;}i+=1;}}if(data.chars||data.fonts){this.renderer.globalData.fontManager.addChars(data.chars);this.renderer.globalData.fontManager.addFonts(data.fonts,this.renderer.globalData.defs);}if(data.assets){len=data.assets.length;for(i=0;i<len;i+=1){this.animationData.assets.push(data.assets[i]);}}this.animationData.__complete=false;dataManager.completeAnimation(this.animationData,this.onSegmentComplete);};AnimationItem.prototype.onSegmentComplete=function(data){this.animationData=data;var expressionsPlugin=getExpressionsPlugin();if(expressionsPlugin){expressionsPlugin.initExpressions(this);}this.loadNextSegment();};AnimationItem.prototype.loadNextSegment=function(){var segments=this.animationData.segments;if(!segments||segments.length===0||!this.autoloadSegments){this.trigger('data_ready');this.timeCompleted=this.totalFrames;return;}var segment=segments.shift();this.timeCompleted=segment.time*this.frameRate;var segmentPath=this.path+this.fileName+'_'+this.segmentPos+'.json';this.segmentPos+=1;dataManager.loadData(segmentPath,this.includeLayers.bind(this),function(){this.trigger('data_failed');}.bind(this));};AnimationItem.prototype.loadSegments=function(){var segments=this.animationData.segments;if(!segments){this.timeCompleted=this.totalFrames;}this.loadNextSegment();};AnimationItem.prototype.imagesLoaded=function(){this.trigger('loaded_images');this.checkLoaded();};AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath);this.imagePreloader.setPath(this.path);this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this));};AnimationItem.prototype.configAnimation=function(animData){if(!this.renderer){return;}try{this.animationData=animData;if(this.initialSegment){this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]);this.firstFrame=Math.round(this.initialSegment[0]);}else {this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip);this.firstFrame=Math.round(this.animationData.ip);}this.renderer.configAnimation(animData);if(!animData.assets){animData.assets=[];}this.assets=this.animationData.assets;this.frameRate=this.animationData.fr;this.frameMult=this.animationData.fr/1000;this.renderer.searchExtraCompositions(animData.assets);this.markers=markerParser(animData.markers||[]);this.trigger('config_ready');this.preloadImages();this.loadSegments();this.updaFrameModifier();this.waitForFontsLoaded();if(this.isPaused){this.audioController.pause();}}catch(error){this.triggerConfigError(error);}};AnimationItem.prototype.waitForFontsLoaded=function(){if(!this.renderer){return;}if(this.renderer.globalData.fontManager.isLoaded){this.checkLoaded();}else {setTimeout(this.waitForFontsLoaded.bind(this),20);}};AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||this.renderer.rendererType!=='canvas')&&this.imagePreloader.loadedFootages()){this.isLoaded=true;var expressionsPlugin=getExpressionsPlugin();if(expressionsPlugin){expressionsPlugin.initExpressions(this);}this.renderer.initItems();setTimeout(function(){this.trigger('DOMLoaded');}.bind(this),0);this.gotoFrame();if(this.autoplay){this.play();}}};AnimationItem.prototype.resize=function(width,height){// Adding this validation for backwards compatibility in case an event object was being passed down
		var _width=typeof width==='number'?width:undefined;var _height=typeof height==='number'?height:undefined;this.renderer.updateContainerSize(_width,_height);};AnimationItem.prototype.setSubframe=function(flag){this.isSubframeEnabled=!!flag;};AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame;// eslint-disable-line no-bitwise
		if(this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted){this.currentFrame=this.timeCompleted;}this.trigger('enterFrame');this.renderFrame();this.trigger('drawnFrame');};AnimationItem.prototype.renderFrame=function(){if(this.isLoaded===false||!this.renderer){return;}try{if(this.expressionsPlugin){this.expressionsPlugin.resetFrame();}this.renderer.renderFrame(this.currentFrame+this.firstFrame);}catch(error){this.triggerRenderFrameError(error);}};AnimationItem.prototype.play=function(name){if(name&&this.name!==name){return;}if(this.isPaused===true){this.isPaused=false;this.trigger('_play');this.audioController.resume();if(this._idle){this._idle=false;this.trigger('_active');}}};AnimationItem.prototype.pause=function(name){if(name&&this.name!==name){return;}if(this.isPaused===false){this.isPaused=true;this.trigger('_pause');this._idle=true;this.trigger('_idle');this.audioController.pause();}};AnimationItem.prototype.togglePause=function(name){if(name&&this.name!==name){return;}if(this.isPaused===true){this.play();}else {this.pause();}};AnimationItem.prototype.stop=function(name){if(name&&this.name!==name){return;}this.pause();this.playCount=0;this._completedLoop=false;this.setCurrentRawFrameValue(0);};AnimationItem.prototype.getMarkerData=function(markerName){var marker;for(var i=0;i<this.markers.length;i+=1){marker=this.markers[i];if(marker.payload&&marker.payload.name===markerName){return marker;}}return null;};AnimationItem.prototype.goToAndStop=function(value,isFrame,name){if(name&&this.name!==name){return;}var numValue=Number(value);if(isNaN(numValue)){var marker=this.getMarkerData(value);if(marker){this.goToAndStop(marker.time,true);}}else if(isFrame){this.setCurrentRawFrameValue(value);}else {this.setCurrentRawFrameValue(value*this.frameModifier);}this.pause();};AnimationItem.prototype.goToAndPlay=function(value,isFrame,name){if(name&&this.name!==name){return;}var numValue=Number(value);if(isNaN(numValue)){var marker=this.getMarkerData(value);if(marker){if(!marker.duration){this.goToAndStop(marker.time,true);}else {this.playSegments([marker.time,marker.time+marker.duration],true);}}}else {this.goToAndStop(numValue,isFrame,name);}this.play();};AnimationItem.prototype.advanceTime=function(value){if(this.isPaused===true||this.isLoaded===false){return;}var nextValue=this.currentRawFrame+value*this.frameModifier;var _isComplete=false;// Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
		// If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.
		if(nextValue>=this.totalFrames-1&&this.frameModifier>0){if(!this.loop||this.playCount===this.loop){if(!this.checkSegments(nextValue>this.totalFrames?nextValue%this.totalFrames:0)){_isComplete=true;nextValue=this.totalFrames-1;}}else if(nextValue>=this.totalFrames){this.playCount+=1;if(!this.checkSegments(nextValue%this.totalFrames)){this.setCurrentRawFrameValue(nextValue%this.totalFrames);this._completedLoop=true;this.trigger('loopComplete');}}else {this.setCurrentRawFrameValue(nextValue);}}else if(nextValue<0){if(!this.checkSegments(nextValue%this.totalFrames)){if(this.loop&&!(this.playCount--<=0&&this.loop!==true)){// eslint-disable-line no-plusplus
		this.setCurrentRawFrameValue(this.totalFrames+nextValue%this.totalFrames);if(!this._completedLoop){this._completedLoop=true;}else {this.trigger('loopComplete');}}else {_isComplete=true;nextValue=0;}}}else {this.setCurrentRawFrameValue(nextValue);}if(_isComplete){this.setCurrentRawFrameValue(nextValue);this.pause();this.trigger('complete');}};AnimationItem.prototype.adjustSegment=function(arr,offset){this.playCount=0;if(arr[1]<arr[0]){if(this.frameModifier>0){if(this.playSpeed<0){this.setSpeed(-this.playSpeed);}else {this.setDirection(-1);}}this.totalFrames=arr[0]-arr[1];this.timeCompleted=this.totalFrames;this.firstFrame=arr[1];this.setCurrentRawFrameValue(this.totalFrames-0.001-offset);}else if(arr[1]>arr[0]){if(this.frameModifier<0){if(this.playSpeed<0){this.setSpeed(-this.playSpeed);}else {this.setDirection(1);}}this.totalFrames=arr[1]-arr[0];this.timeCompleted=this.totalFrames;this.firstFrame=arr[0];this.setCurrentRawFrameValue(0.001+offset);}this.trigger('segmentStart');};AnimationItem.prototype.setSegment=function(init,end){var pendingFrame=-1;if(this.isPaused){if(this.currentRawFrame+this.firstFrame<init){pendingFrame=init;}else if(this.currentRawFrame+this.firstFrame>end){pendingFrame=end-init;}}this.firstFrame=init;this.totalFrames=end-init;this.timeCompleted=this.totalFrames;if(pendingFrame!==-1){this.goToAndStop(pendingFrame,true);}};AnimationItem.prototype.playSegments=function(arr,forceFlag){if(forceFlag){this.segments.length=0;}if(_typeof$4(arr[0])==='object'){var i;var len=arr.length;for(i=0;i<len;i+=1){this.segments.push(arr[i]);}}else {this.segments.push(arr);}if(this.segments.length&&forceFlag){this.adjustSegment(this.segments.shift(),0);}if(this.isPaused){this.play();}};AnimationItem.prototype.resetSegments=function(forceFlag){this.segments.length=0;this.segments.push([this.animationData.ip,this.animationData.op]);if(forceFlag){this.checkSegments(0);}};AnimationItem.prototype.checkSegments=function(offset){if(this.segments.length){this.adjustSegment(this.segments.shift(),offset);return true;}return false;};AnimationItem.prototype.destroy=function(name){if(name&&this.name!==name||!this.renderer){return;}this.renderer.destroy();this.imagePreloader.destroy();this.trigger('destroy');this._cbs=null;this.onEnterFrame=null;this.onLoopComplete=null;this.onComplete=null;this.onSegmentStart=null;this.onDestroy=null;this.renderer=null;this.expressionsPlugin=null;this.imagePreloader=null;this.projectInterface=null;};AnimationItem.prototype.setCurrentRawFrameValue=function(value){this.currentRawFrame=value;this.gotoFrame();};AnimationItem.prototype.setSpeed=function(val){this.playSpeed=val;this.updaFrameModifier();};AnimationItem.prototype.setDirection=function(val){this.playDirection=val<0?-1:1;this.updaFrameModifier();};AnimationItem.prototype.setLoop=function(isLooping){this.loop=isLooping;};AnimationItem.prototype.setVolume=function(val,name){if(name&&this.name!==name){return;}this.audioController.setVolume(val);};AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume();};AnimationItem.prototype.mute=function(name){if(name&&this.name!==name){return;}this.audioController.mute();};AnimationItem.prototype.unmute=function(name){if(name&&this.name!==name){return;}this.audioController.unmute();};AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection;this.audioController.setRate(this.playSpeed*this.playDirection);};AnimationItem.prototype.getPath=function(){return this.path;};AnimationItem.prototype.getAssetsPath=function(assetData){var path='';if(assetData.e){path=assetData.p;}else if(this.assetsPath){var imagePath=assetData.p;if(imagePath.indexOf('images/')!==-1){imagePath=imagePath.split('/')[1];}path=this.assetsPath+imagePath;}else {path=this.path;path+=assetData.u?assetData.u:'';path+=assetData.p;}return path;};AnimationItem.prototype.getAssetData=function(id){var i=0;var len=this.assets.length;while(i<len){if(id===this.assets[i].id){return this.assets[i];}i+=1;}return null;};AnimationItem.prototype.hide=function(){this.renderer.hide();};AnimationItem.prototype.show=function(){this.renderer.show();};AnimationItem.prototype.getDuration=function(isFrame){return isFrame?this.totalFrames:this.totalFrames/this.frameRate;};AnimationItem.prototype.updateDocumentData=function(path,documentData,index){try{var element=this.renderer.getElementByPath(path);element.updateDocumentData(documentData,index);}catch(error){// TODO: decide how to handle catch case
		}};AnimationItem.prototype.trigger=function(name){if(this._cbs&&this._cbs[name]){switch(name){case'enterFrame':this.triggerEvent(name,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameModifier));break;case'drawnFrame':this.drawnFrameEvent.currentTime=this.currentFrame;this.drawnFrameEvent.totalTime=this.totalFrames;this.drawnFrameEvent.direction=this.frameModifier;this.triggerEvent(name,this.drawnFrameEvent);break;case'loopComplete':this.triggerEvent(name,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));break;case'complete':this.triggerEvent(name,new BMCompleteEvent(name,this.frameMult));break;case'segmentStart':this.triggerEvent(name,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));break;case'destroy':this.triggerEvent(name,new BMDestroyEvent(name,this));break;default:this.triggerEvent(name);}}if(name==='enterFrame'&&this.onEnterFrame){this.onEnterFrame.call(this,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameMult));}if(name==='loopComplete'&&this.onLoopComplete){this.onLoopComplete.call(this,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));}if(name==='complete'&&this.onComplete){this.onComplete.call(this,new BMCompleteEvent(name,this.frameMult));}if(name==='segmentStart'&&this.onSegmentStart){this.onSegmentStart.call(this,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));}if(name==='destroy'&&this.onDestroy){this.onDestroy.call(this,new BMDestroyEvent(name,this));}};AnimationItem.prototype.triggerRenderFrameError=function(nativeError){var error=new BMRenderFrameErrorEvent(nativeError,this.currentFrame);this.triggerEvent('error',error);if(this.onError){this.onError.call(this,error);}};AnimationItem.prototype.triggerConfigError=function(nativeError){var error=new BMConfigErrorEvent(nativeError,this.currentFrame);this.triggerEvent('error',error);if(this.onError){this.onError.call(this,error);}};var animationManager=function(){var moduleOb={};var registeredAnimations=[];var initTime=0;var len=0;var playingAnimationsNum=0;var _stopped=true;var _isFrozen=false;function removeElement(ev){var i=0;var animItem=ev.target;while(i<len){if(registeredAnimations[i].animation===animItem){registeredAnimations.splice(i,1);i-=1;len-=1;if(!animItem.isPaused){subtractPlayingCount();}}i+=1;}}function registerAnimation(element,animationData){if(!element){return null;}var i=0;while(i<len){if(registeredAnimations[i].elem===element&&registeredAnimations[i].elem!==null){return registeredAnimations[i].animation;}i+=1;}var animItem=new AnimationItem();setupAnimation(animItem,element);animItem.setData(element,animationData);return animItem;}function getRegisteredAnimations(){var i;var lenAnims=registeredAnimations.length;var animations=[];for(i=0;i<lenAnims;i+=1){animations.push(registeredAnimations[i].animation);}return animations;}function addPlayingCount(){playingAnimationsNum+=1;activate();}function subtractPlayingCount(){playingAnimationsNum-=1;}function setupAnimation(animItem,element){animItem.addEventListener('destroy',removeElement);animItem.addEventListener('_active',addPlayingCount);animItem.addEventListener('_idle',subtractPlayingCount);registeredAnimations.push({elem:element,animation:animItem});len+=1;}function loadAnimation(params){var animItem=new AnimationItem();setupAnimation(animItem,null);animItem.setParams(params);return animItem;}function setSpeed(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setSpeed(val,animation);}}function setDirection(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setDirection(val,animation);}}function play(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.play(animation);}}function resume(nowTime){var elapsedTime=nowTime-initTime;var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.advanceTime(elapsedTime);}initTime=nowTime;if(playingAnimationsNum&&!_isFrozen){window.requestAnimationFrame(resume);}else {_stopped=true;}}function first(nowTime){initTime=nowTime;window.requestAnimationFrame(resume);}function pause(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.pause(animation);}}function goToAndStop(value,isFrame,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.goToAndStop(value,isFrame,animation);}}function stop(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.stop(animation);}}function togglePause(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.togglePause(animation);}}function destroy(animation){var i;for(i=len-1;i>=0;i-=1){registeredAnimations[i].animation.destroy(animation);}}function searchAnimations(animationData,standalone,renderer){var animElements=[].concat([].slice.call(document.getElementsByClassName('lottie')),[].slice.call(document.getElementsByClassName('bodymovin')));var i;var lenAnims=animElements.length;for(i=0;i<lenAnims;i+=1){if(renderer){animElements[i].setAttribute('data-bm-type',renderer);}registerAnimation(animElements[i],animationData);}if(standalone&&lenAnims===0){if(!renderer){renderer='svg';}var body=document.getElementsByTagName('body')[0];body.innerText='';var div=createTag('div');div.style.width='100%';div.style.height='100%';div.setAttribute('data-bm-type',renderer);body.appendChild(div);registerAnimation(div,animationData);}}function resize(){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.resize();}}function activate(){if(!_isFrozen&&playingAnimationsNum){if(_stopped){window.requestAnimationFrame(first);_stopped=false;}}}function freeze(){_isFrozen=true;}function unfreeze(){_isFrozen=false;activate();}function setVolume(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setVolume(val,animation);}}function mute(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.mute(animation);}}function unmute(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.unmute(animation);}}moduleOb.registerAnimation=registerAnimation;moduleOb.loadAnimation=loadAnimation;moduleOb.setSpeed=setSpeed;moduleOb.setDirection=setDirection;moduleOb.play=play;moduleOb.pause=pause;moduleOb.stop=stop;moduleOb.togglePause=togglePause;moduleOb.searchAnimations=searchAnimations;moduleOb.resize=resize;// moduleOb.start = start;
		moduleOb.goToAndStop=goToAndStop;moduleOb.destroy=destroy;moduleOb.freeze=freeze;moduleOb.unfreeze=unfreeze;moduleOb.setVolume=setVolume;moduleOb.mute=mute;moduleOb.unmute=unmute;moduleOb.getRegisteredAnimations=getRegisteredAnimations;return moduleOb;}();/* eslint-disable */var BezierFactory=function(){/**
		       * BezierEasing - use bezier curve for transition easing function
		       * by Gaëtan Renaudeau 2014 - 2015 – MIT License
		       *
		       * Credits: is based on Firefox's nsSMILKeySpline.cpp
		       * Usage:
		       * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
		       * spline.get(x) => returns the easing value | x must be in [0, 1] range
		       *
		       */var ob={};ob.getBezierEasing=getBezierEasing;var beziers={};function getBezierEasing(a,b,c,d,nm){var str=nm||('bez_'+a+'_'+b+'_'+c+'_'+d).replace(/\./g,'p');if(beziers[str]){return beziers[str];}var bezEasing=new BezierEasing([a,b,c,d]);beziers[str]=bezEasing;return bezEasing;}// These values are established by empiricism with tests (tradeoff: performance VS precision)
		var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var float32ArraySupported=typeof Float32Array==='function';function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}function C(aA1){return 3.0*aA1;}// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
		function calcBezier(aT,aA1,aA2){return ((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
		function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){var currentX,currentT,i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else {aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0)return aGuessT;var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}/**
		       * points is an array of [ mX1, mY1, mX2, mY2 ]
		       */function BezierEasing(points){this._p=points;this._mSampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);this._precomputed=false;this.get=this.get.bind(this);}BezierEasing.prototype={get:function get(x){var mX1=this._p[0],mY1=this._p[1],mX2=this._p[2],mY2=this._p[3];if(!this._precomputed)this._precompute();if(mX1===mY1&&mX2===mY2)return x;// linear
		// Because JavaScript number are imprecise, we should guarantee the extremes are right.
		if(x===0)return 0;if(x===1)return 1;return calcBezier(this._getTForX(x),mY1,mY2);},// Private part
		_precompute:function _precompute(){var mX1=this._p[0],mY1=this._p[1],mX2=this._p[2],mY2=this._p[3];this._precomputed=true;if(mX1!==mY1||mX2!==mY2){this._calcSampleValues();}},_calcSampleValues:function _calcSampleValues(){var mX1=this._p[0],mX2=this._p[2];for(var i=0;i<kSplineTableSize;++i){this._mSampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}},/**
		           * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
		           */_getTForX:function _getTForX(aX){var mX1=this._p[0],mX2=this._p[2],mSampleValues=this._mSampleValues;var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&mSampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;// Interpolate to provide an initial guess for t
		var dist=(aX-mSampleValues[currentSample])/(mSampleValues[currentSample+1]-mSampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}if(initialSlope===0.0){return guessForT;}return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};return ob;}();var pooling=function(){function _double(arr){return arr.concat(createSizedArray(arr.length));}return {"double":_double};}();var poolFactory=function(){return function(initialLength,_create,_release){var _length=0;var _maxLength=initialLength;var pool=createSizedArray(_maxLength);var ob={newElement:newElement,release:release};function newElement(){var element;if(_length){_length-=1;element=pool[_length];}else {element=_create();}return element;}function release(element){if(_length===_maxLength){pool=pooling["double"](pool);_maxLength*=2;}if(_release){_release(element);}pool[_length]=element;_length+=1;}return ob;};}();var bezierLengthPool=function(){function create(){return {addedLength:0,percents:createTypedArray('float32',getDefaultCurveSegments()),lengths:createTypedArray('float32',getDefaultCurveSegments())};}return poolFactory(8,create);}();var segmentsLengthPool=function(){function create(){return {lengths:[],totalLength:0};}function release(element){var i;var len=element.lengths.length;for(i=0;i<len;i+=1){bezierLengthPool.release(element.lengths[i]);}element.lengths.length=0;}return poolFactory(8,create,release);}();function bezFunction(){var math=Math;function pointOnLine2D(x1,y1,x2,y2,x3,y3){var det1=x1*y2+y1*x3+x2*y3-x3*y2-y3*x1-x2*y1;return det1>-0.001&&det1<0.001;}function pointOnLine3D(x1,y1,z1,x2,y2,z2,x3,y3,z3){if(z1===0&&z2===0&&z3===0){return pointOnLine2D(x1,y1,x2,y2,x3,y3);}var dist1=math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2)+math.pow(z2-z1,2));var dist2=math.sqrt(math.pow(x3-x1,2)+math.pow(y3-y1,2)+math.pow(z3-z1,2));var dist3=math.sqrt(math.pow(x3-x2,2)+math.pow(y3-y2,2)+math.pow(z3-z2,2));var diffDist;if(dist1>dist2){if(dist1>dist3){diffDist=dist1-dist2-dist3;}else {diffDist=dist3-dist2-dist1;}}else if(dist3>dist2){diffDist=dist3-dist2-dist1;}else {diffDist=dist2-dist1-dist3;}return diffDist>-0.0001&&diffDist<0.0001;}var getBezierLength=function(){return function(pt1,pt2,pt3,pt4){var curveSegments=getDefaultCurveSegments();var k;var i;var len;var ptCoord;var perc;var addedLength=0;var ptDistance;var point=[];var lastPoint=[];var lengthData=bezierLengthPool.newElement();len=pt3.length;for(k=0;k<curveSegments;k+=1){perc=k/(curveSegments-1);ptDistance=0;for(i=0;i<len;i+=1){ptCoord=bmPow(1-perc,3)*pt1[i]+3*bmPow(1-perc,2)*perc*pt3[i]+3*(1-perc)*bmPow(perc,2)*pt4[i]+bmPow(perc,3)*pt2[i];point[i]=ptCoord;if(lastPoint[i]!==null){ptDistance+=bmPow(point[i]-lastPoint[i],2);}lastPoint[i]=point[i];}if(ptDistance){ptDistance=bmSqrt(ptDistance);addedLength+=ptDistance;}lengthData.percents[k]=perc;lengthData.lengths[k]=addedLength;}lengthData.addedLength=addedLength;return lengthData;};}();function getSegmentsLength(shapeData){var segmentsLength=segmentsLengthPool.newElement();var closed=shapeData.c;var pathV=shapeData.v;var pathO=shapeData.o;var pathI=shapeData.i;var i;var len=shapeData._length;var lengths=segmentsLength.lengths;var totalLength=0;for(i=0;i<len-1;i+=1){lengths[i]=getBezierLength(pathV[i],pathV[i+1],pathO[i],pathI[i+1]);totalLength+=lengths[i].addedLength;}if(closed&&len){lengths[i]=getBezierLength(pathV[i],pathV[0],pathO[i],pathI[0]);totalLength+=lengths[i].addedLength;}segmentsLength.totalLength=totalLength;return segmentsLength;}function BezierData(length){this.segmentLength=0;this.points=new Array(length);}function PointData(partial,point){this.partialLength=partial;this.point=point;}var buildBezierData=function(){var storedData={};return function(pt1,pt2,pt3,pt4){var bezierName=(pt1[0]+'_'+pt1[1]+'_'+pt2[0]+'_'+pt2[1]+'_'+pt3[0]+'_'+pt3[1]+'_'+pt4[0]+'_'+pt4[1]).replace(/\./g,'p');if(!storedData[bezierName]){var curveSegments=getDefaultCurveSegments();var k;var i;var len;var ptCoord;var perc;var addedLength=0;var ptDistance;var point;var lastPoint=null;if(pt1.length===2&&(pt1[0]!==pt2[0]||pt1[1]!==pt2[1])&&pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt1[0]+pt3[0],pt1[1]+pt3[1])&&pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt2[0]+pt4[0],pt2[1]+pt4[1])){curveSegments=2;}var bezierData=new BezierData(curveSegments);len=pt3.length;for(k=0;k<curveSegments;k+=1){point=createSizedArray(len);perc=k/(curveSegments-1);ptDistance=0;for(i=0;i<len;i+=1){ptCoord=bmPow(1-perc,3)*pt1[i]+3*bmPow(1-perc,2)*perc*(pt1[i]+pt3[i])+3*(1-perc)*bmPow(perc,2)*(pt2[i]+pt4[i])+bmPow(perc,3)*pt2[i];point[i]=ptCoord;if(lastPoint!==null){ptDistance+=bmPow(point[i]-lastPoint[i],2);}}ptDistance=bmSqrt(ptDistance);addedLength+=ptDistance;bezierData.points[k]=new PointData(ptDistance,point);lastPoint=point;}bezierData.segmentLength=addedLength;storedData[bezierName]=bezierData;}return storedData[bezierName];};}();function getDistancePerc(perc,bezierData){var percents=bezierData.percents;var lengths=bezierData.lengths;var len=percents.length;var initPos=bmFloor((len-1)*perc);var lengthPos=perc*bezierData.addedLength;var lPerc=0;if(initPos===len-1||initPos===0||lengthPos===lengths[initPos]){return percents[initPos];}var dir=lengths[initPos]>lengthPos?-1:1;var flag=true;while(flag){if(lengths[initPos]<=lengthPos&&lengths[initPos+1]>lengthPos){lPerc=(lengthPos-lengths[initPos])/(lengths[initPos+1]-lengths[initPos]);flag=false;}else {initPos+=dir;}if(initPos<0||initPos>=len-1){// FIX for TypedArrays that don't store floating point values with enough accuracy
		if(initPos===len-1){return percents[initPos];}flag=false;}}return percents[initPos]+(percents[initPos+1]-percents[initPos])*lPerc;}function getPointInSegment(pt1,pt2,pt3,pt4,percent,bezierData){var t1=getDistancePerc(percent,bezierData);var u1=1-t1;var ptX=math.round((u1*u1*u1*pt1[0]+(t1*u1*u1+u1*t1*u1+u1*u1*t1)*pt3[0]+(t1*t1*u1+u1*t1*t1+t1*u1*t1)*pt4[0]+t1*t1*t1*pt2[0])*1000)/1000;var ptY=math.round((u1*u1*u1*pt1[1]+(t1*u1*u1+u1*t1*u1+u1*u1*t1)*pt3[1]+(t1*t1*u1+u1*t1*t1+t1*u1*t1)*pt4[1]+t1*t1*t1*pt2[1])*1000)/1000;return [ptX,ptY];}var bezierSegmentPoints=createTypedArray('float32',8);function getNewSegment(pt1,pt2,pt3,pt4,startPerc,endPerc,bezierData){if(startPerc<0){startPerc=0;}else if(startPerc>1){startPerc=1;}var t0=getDistancePerc(startPerc,bezierData);endPerc=endPerc>1?1:endPerc;var t1=getDistancePerc(endPerc,bezierData);var i;var len=pt1.length;var u0=1-t0;var u1=1-t1;var u0u0u0=u0*u0*u0;var t0u0u0_3=t0*u0*u0*3;// eslint-disable-line camelcase
		var t0t0u0_3=t0*t0*u0*3;// eslint-disable-line camelcase
		var t0t0t0=t0*t0*t0;//
		var u0u0u1=u0*u0*u1;var t0u0u1_3=t0*u0*u1+u0*t0*u1+u0*u0*t1;// eslint-disable-line camelcase
		var t0t0u1_3=t0*t0*u1+u0*t0*t1+t0*u0*t1;// eslint-disable-line camelcase
		var t0t0t1=t0*t0*t1;//
		var u0u1u1=u0*u1*u1;var t0u1u1_3=t0*u1*u1+u0*t1*u1+u0*u1*t1;// eslint-disable-line camelcase
		var t0t1u1_3=t0*t1*u1+u0*t1*t1+t0*u1*t1;// eslint-disable-line camelcase
		var t0t1t1=t0*t1*t1;//
		var u1u1u1=u1*u1*u1;var t1u1u1_3=t1*u1*u1+u1*t1*u1+u1*u1*t1;// eslint-disable-line camelcase
		var t1t1u1_3=t1*t1*u1+u1*t1*t1+t1*u1*t1;// eslint-disable-line camelcase
		var t1t1t1=t1*t1*t1;for(i=0;i<len;i+=1){bezierSegmentPoints[i*4]=math.round((u0u0u0*pt1[i]+t0u0u0_3*pt3[i]+t0t0u0_3*pt4[i]+t0t0t0*pt2[i])*1000)/1000;// eslint-disable-line camelcase
		bezierSegmentPoints[i*4+1]=math.round((u0u0u1*pt1[i]+t0u0u1_3*pt3[i]+t0t0u1_3*pt4[i]+t0t0t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
		bezierSegmentPoints[i*4+2]=math.round((u0u1u1*pt1[i]+t0u1u1_3*pt3[i]+t0t1u1_3*pt4[i]+t0t1t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
		bezierSegmentPoints[i*4+3]=math.round((u1u1u1*pt1[i]+t1u1u1_3*pt3[i]+t1t1u1_3*pt4[i]+t1t1t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
		}return bezierSegmentPoints;}return {getSegmentsLength:getSegmentsLength,getNewSegment:getNewSegment,getPointInSegment:getPointInSegment,buildBezierData:buildBezierData,pointOnLine2D:pointOnLine2D,pointOnLine3D:pointOnLine3D};}var bez=bezFunction();var initFrame=initialDefaultFrame;var mathAbs=Math.abs;function interpolateValue(frameNum,caching){var offsetTime=this.offsetTime;var newValue;if(this.propType==='multidimensional'){newValue=createTypedArray('float32',this.pv.length);}var iterationIndex=caching.lastIndex;var i=iterationIndex;var len=this.keyframes.length-1;var flag=true;var keyData;var nextKeyData;var keyframeMetadata;while(flag){keyData=this.keyframes[i];nextKeyData=this.keyframes[i+1];if(i===len-1&&frameNum>=nextKeyData.t-offsetTime){if(keyData.h){keyData=nextKeyData;}iterationIndex=0;break;}if(nextKeyData.t-offsetTime>frameNum){iterationIndex=i;break;}if(i<len-1){i+=1;}else {iterationIndex=0;flag=false;}}keyframeMetadata=this.keyframesMetadata[i]||{};var k;var kLen;var perc;var jLen;var j;var fnc;var nextKeyTime=nextKeyData.t-offsetTime;var keyTime=keyData.t-offsetTime;var endValue;if(keyData.to){if(!keyframeMetadata.bezierData){keyframeMetadata.bezierData=bez.buildBezierData(keyData.s,nextKeyData.s||keyData.e,keyData.to,keyData.ti);}var bezierData=keyframeMetadata.bezierData;if(frameNum>=nextKeyTime||frameNum<keyTime){var ind=frameNum>=nextKeyTime?bezierData.points.length-1:0;kLen=bezierData.points[ind].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[ind].point[k];}// caching._lastKeyframeIndex = -1;
		}else {if(keyframeMetadata.__fnct){fnc=keyframeMetadata.__fnct;}else {fnc=BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y,keyData.n).get;keyframeMetadata.__fnct=fnc;}perc=fnc((frameNum-keyTime)/(nextKeyTime-keyTime));var distanceInLine=bezierData.segmentLength*perc;var segmentPerc;var addedLength=caching.lastFrame<frameNum&&caching._lastKeyframeIndex===i?caching._lastAddedLength:0;j=caching.lastFrame<frameNum&&caching._lastKeyframeIndex===i?caching._lastPoint:0;flag=true;jLen=bezierData.points.length;while(flag){addedLength+=bezierData.points[j].partialLength;if(distanceInLine===0||perc===0||j===bezierData.points.length-1){kLen=bezierData.points[j].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[j].point[k];}break;}else if(distanceInLine>=addedLength&&distanceInLine<addedLength+bezierData.points[j+1].partialLength){segmentPerc=(distanceInLine-addedLength)/bezierData.points[j+1].partialLength;kLen=bezierData.points[j].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[j].point[k]+(bezierData.points[j+1].point[k]-bezierData.points[j].point[k])*segmentPerc;}break;}if(j<jLen-1){j+=1;}else {flag=false;}}caching._lastPoint=j;caching._lastAddedLength=addedLength-bezierData.points[j].partialLength;caching._lastKeyframeIndex=i;}}else {var outX;var outY;var inX;var inY;var keyValue;len=keyData.s.length;endValue=nextKeyData.s||keyData.e;if(this.sh&&keyData.h!==1){if(frameNum>=nextKeyTime){newValue[0]=endValue[0];newValue[1]=endValue[1];newValue[2]=endValue[2];}else if(frameNum<=keyTime){newValue[0]=keyData.s[0];newValue[1]=keyData.s[1];newValue[2]=keyData.s[2];}else {var quatStart=createQuaternion(keyData.s);var quatEnd=createQuaternion(endValue);var time=(frameNum-keyTime)/(nextKeyTime-keyTime);quaternionToEuler(newValue,slerp(quatStart,quatEnd,time));}}else {for(i=0;i<len;i+=1){if(keyData.h!==1){if(frameNum>=nextKeyTime){perc=1;}else if(frameNum<keyTime){perc=0;}else {if(keyData.o.x.constructor===Array){if(!keyframeMetadata.__fnct){keyframeMetadata.__fnct=[];}if(!keyframeMetadata.__fnct[i]){outX=keyData.o.x[i]===undefined?keyData.o.x[0]:keyData.o.x[i];outY=keyData.o.y[i]===undefined?keyData.o.y[0]:keyData.o.y[i];inX=keyData.i.x[i]===undefined?keyData.i.x[0]:keyData.i.x[i];inY=keyData.i.y[i]===undefined?keyData.i.y[0]:keyData.i.y[i];fnc=BezierFactory.getBezierEasing(outX,outY,inX,inY).get;keyframeMetadata.__fnct[i]=fnc;}else {fnc=keyframeMetadata.__fnct[i];}}else if(!keyframeMetadata.__fnct){outX=keyData.o.x;outY=keyData.o.y;inX=keyData.i.x;inY=keyData.i.y;fnc=BezierFactory.getBezierEasing(outX,outY,inX,inY).get;keyData.keyframeMetadata=fnc;}else {fnc=keyframeMetadata.__fnct;}perc=fnc((frameNum-keyTime)/(nextKeyTime-keyTime));}}endValue=nextKeyData.s||keyData.e;keyValue=keyData.h===1?keyData.s[i]:keyData.s[i]+(endValue[i]-keyData.s[i])*perc;if(this.propType==='multidimensional'){newValue[i]=keyValue;}else {newValue=keyValue;}}}}caching.lastIndex=iterationIndex;return newValue;}// based on @Toji's https://github.com/toji/gl-matrix/
		function slerp(a,b,t){var out=[];var ax=a[0];var ay=a[1];var az=a[2];var aw=a[3];var bx=b[0];var by=b[1];var bz=b[2];var bw=b[3];var omega;var cosom;var sinom;var scale0;var scale1;cosom=ax*bx+ay*by+az*bz+aw*bw;if(cosom<0.0){cosom=-cosom;bx=-bx;by=-by;bz=-bz;bw=-bw;}if(1.0-cosom>0.000001){omega=Math.acos(cosom);sinom=Math.sin(omega);scale0=Math.sin((1.0-t)*omega)/sinom;scale1=Math.sin(t*omega)/sinom;}else {scale0=1.0-t;scale1=t;}out[0]=scale0*ax+scale1*bx;out[1]=scale0*ay+scale1*by;out[2]=scale0*az+scale1*bz;out[3]=scale0*aw+scale1*bw;return out;}function quaternionToEuler(out,quat){var qx=quat[0];var qy=quat[1];var qz=quat[2];var qw=quat[3];var heading=Math.atan2(2*qy*qw-2*qx*qz,1-2*qy*qy-2*qz*qz);var attitude=Math.asin(2*qx*qy+2*qz*qw);var bank=Math.atan2(2*qx*qw-2*qy*qz,1-2*qx*qx-2*qz*qz);out[0]=heading/degToRads;out[1]=attitude/degToRads;out[2]=bank/degToRads;}function createQuaternion(values){var heading=values[0]*degToRads;var attitude=values[1]*degToRads;var bank=values[2]*degToRads;var c1=Math.cos(heading/2);var c2=Math.cos(attitude/2);var c3=Math.cos(bank/2);var s1=Math.sin(heading/2);var s2=Math.sin(attitude/2);var s3=Math.sin(bank/2);var w=c1*c2*c3-s1*s2*s3;var x=s1*s2*c3+c1*c2*s3;var y=s1*c2*c3+c1*s2*s3;var z=c1*s2*c3-s1*c2*s3;return [x,y,z,w];}function getValueAtCurrentTime(){var frameNum=this.comp.renderedFrame-this.offsetTime;var initTime=this.keyframes[0].t-this.offsetTime;var endTime=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(frameNum===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=endTime&&frameNum>=endTime||this._caching.lastFrame<initTime&&frameNum<initTime))){if(this._caching.lastFrame>=frameNum){this._caching._lastKeyframeIndex=-1;this._caching.lastIndex=0;}var renderResult=this.interpolateValue(frameNum,this._caching);this.pv=renderResult;}this._caching.lastFrame=frameNum;return this.pv;}function setVValue(val){var multipliedValue;if(this.propType==='unidimensional'){multipliedValue=val*this.mult;if(mathAbs(this.v-multipliedValue)>0.00001){this.v=multipliedValue;this._mdf=true;}}else {var i=0;var len=this.v.length;while(i<len){multipliedValue=val[i]*this.mult;if(mathAbs(this.v[i]-multipliedValue)>0.00001){this.v[i]=multipliedValue;this._mdf=true;}i+=1;}}}function processEffectsSequence(){if(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length){return;}if(this.lock){this.setVValue(this.pv);return;}this.lock=true;this._mdf=this._isFirstFrame;var i;var len=this.effectsSequence.length;var finalValue=this.kf?this.pv:this.data.k;for(i=0;i<len;i+=1){finalValue=this.effectsSequence[i](finalValue);}this.setVValue(finalValue);this._isFirstFrame=false;this.lock=false;this.frameId=this.elem.globalData.frameId;}function addEffect(effectFunction){this.effectsSequence.push(effectFunction);this.container.addDynamicProperty(this);}function ValueProperty(elem,data,mult,container){this.propType='unidimensional';this.mult=mult||1;this.data=data;this.v=mult?data.k*mult:data.k;this.pv=data.k;this._mdf=false;this.elem=elem;this.container=container;this.comp=elem.comp;this.k=false;this.kf=false;this.vel=0;this.effectsSequence=[];this._isFirstFrame=true;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.addEffect=addEffect;}function MultiDimensionalProperty(elem,data,mult,container){this.propType='multidimensional';this.mult=mult||1;this.data=data;this._mdf=false;this.elem=elem;this.container=container;this.comp=elem.comp;this.k=false;this.kf=false;this.frameId=-1;var i;var len=data.k.length;this.v=createTypedArray('float32',len);this.pv=createTypedArray('float32',len);this.vel=createTypedArray('float32',len);for(i=0;i<len;i+=1){this.v[i]=data.k[i]*this.mult;this.pv[i]=data.k[i];}this._isFirstFrame=true;this.effectsSequence=[];this.getValue=processEffectsSequence;this.setVValue=setVValue;this.addEffect=addEffect;}function KeyframedValueProperty(elem,data,mult,container){this.propType='unidimensional';this.keyframes=data.k;this.keyframesMetadata=[];this.offsetTime=elem.data.st;this.frameId=-1;this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1};this.k=true;this.kf=true;this.data=data;this.mult=mult||1;this.elem=elem;this.container=container;this.comp=elem.comp;this.v=initFrame;this.pv=initFrame;this._isFirstFrame=true;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.interpolateValue=interpolateValue;this.effectsSequence=[getValueAtCurrentTime.bind(this)];this.addEffect=addEffect;}function KeyframedMultidimensionalProperty(elem,data,mult,container){this.propType='multidimensional';var i;var len=data.k.length;var s;var e;var to;var ti;for(i=0;i<len-1;i+=1){if(data.k[i].to&&data.k[i].s&&data.k[i+1]&&data.k[i+1].s){s=data.k[i].s;e=data.k[i+1].s;to=data.k[i].to;ti=data.k[i].ti;if(s.length===2&&!(s[0]===e[0]&&s[1]===e[1])&&bez.pointOnLine2D(s[0],s[1],e[0],e[1],s[0]+to[0],s[1]+to[1])&&bez.pointOnLine2D(s[0],s[1],e[0],e[1],e[0]+ti[0],e[1]+ti[1])||s.length===3&&!(s[0]===e[0]&&s[1]===e[1]&&s[2]===e[2])&&bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],s[0]+to[0],s[1]+to[1],s[2]+to[2])&&bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],e[0]+ti[0],e[1]+ti[1],e[2]+ti[2])){data.k[i].to=null;data.k[i].ti=null;}if(s[0]===e[0]&&s[1]===e[1]&&to[0]===0&&to[1]===0&&ti[0]===0&&ti[1]===0){if(s.length===2||s[2]===e[2]&&to[2]===0&&ti[2]===0){data.k[i].to=null;data.k[i].ti=null;}}}}this.effectsSequence=[getValueAtCurrentTime.bind(this)];this.data=data;this.keyframes=data.k;this.keyframesMetadata=[];this.offsetTime=elem.data.st;this.k=true;this.kf=true;this._isFirstFrame=true;this.mult=mult||1;this.elem=elem;this.container=container;this.comp=elem.comp;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.interpolateValue=interpolateValue;this.frameId=-1;var arrLen=data.k[0].s.length;this.v=createTypedArray('float32',arrLen);this.pv=createTypedArray('float32',arrLen);for(i=0;i<arrLen;i+=1){this.v[i]=initFrame;this.pv[i]=initFrame;}this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray('float32',arrLen)};this.addEffect=addEffect;}var PropertyFactory=function(){function getProp(elem,data,type,mult,container){if(data.sid){data=elem.globalData.slotManager.getProp(data);}var p;if(!data.k.length){p=new ValueProperty(elem,data,mult,container);}else if(typeof data.k[0]==='number'){p=new MultiDimensionalProperty(elem,data,mult,container);}else {switch(type){case 0:p=new KeyframedValueProperty(elem,data,mult,container);break;case 1:p=new KeyframedMultidimensionalProperty(elem,data,mult,container);break;}}if(p.effectsSequence.length){container.addDynamicProperty(p);}return p;}var ob={getProp:getProp};return ob;}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function addDynamicProperty(prop){if(this.dynamicProperties.indexOf(prop)===-1){this.dynamicProperties.push(prop);this.container.addDynamicProperty(this);this._isAnimated=true;}},iterateDynamicProperties:function iterateDynamicProperties(){this._mdf=false;var i;var len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();if(this.dynamicProperties[i]._mdf){this._mdf=true;}}},initDynamicPropertyContainer:function initDynamicPropertyContainer(container){this.container=container;this.dynamicProperties=[];this._mdf=false;this._isAnimated=false;}};var pointPool=function(){function create(){return createTypedArray('float32',2);}return poolFactory(8,create);}();function ShapePath(){this.c=false;this._length=0;this._maxLength=8;this.v=createSizedArray(this._maxLength);this.o=createSizedArray(this._maxLength);this.i=createSizedArray(this._maxLength);}ShapePath.prototype.setPathData=function(closed,len){this.c=closed;this.setLength(len);var i=0;while(i<len){this.v[i]=pointPool.newElement();this.o[i]=pointPool.newElement();this.i[i]=pointPool.newElement();i+=1;}};ShapePath.prototype.setLength=function(len){while(this._maxLength<len){this.doubleArrayLength();}this._length=len;};ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength));this.i=this.i.concat(createSizedArray(this._maxLength));this.o=this.o.concat(createSizedArray(this._maxLength));this._maxLength*=2;};ShapePath.prototype.setXYAt=function(x,y,type,pos,replace){var arr;this._length=Math.max(this._length,pos+1);if(this._length>=this._maxLength){this.doubleArrayLength();}switch(type){case'v':arr=this.v;break;case'i':arr=this.i;break;case'o':arr=this.o;break;default:arr=[];break;}if(!arr[pos]||arr[pos]&&!replace){arr[pos]=pointPool.newElement();}arr[pos][0]=x;arr[pos][1]=y;};ShapePath.prototype.setTripleAt=function(vX,vY,oX,oY,iX,iY,pos,replace){this.setXYAt(vX,vY,'v',pos,replace);this.setXYAt(oX,oY,'o',pos,replace);this.setXYAt(iX,iY,'i',pos,replace);};ShapePath.prototype.reverse=function(){var newPath=new ShapePath();newPath.setPathData(this.c,this._length);var vertices=this.v;var outPoints=this.o;var inPoints=this.i;var init=0;if(this.c){newPath.setTripleAt(vertices[0][0],vertices[0][1],inPoints[0][0],inPoints[0][1],outPoints[0][0],outPoints[0][1],0,false);init=1;}var cnt=this._length-1;var len=this._length;var i;for(i=init;i<len;i+=1){newPath.setTripleAt(vertices[cnt][0],vertices[cnt][1],inPoints[cnt][0],inPoints[cnt][1],outPoints[cnt][0],outPoints[cnt][1],i,false);cnt-=1;}return newPath;};ShapePath.prototype.length=function(){return this._length;};var shapePool=function(){function create(){return new ShapePath();}function release(shapePath){var len=shapePath._length;var i;for(i=0;i<len;i+=1){pointPool.release(shapePath.v[i]);pointPool.release(shapePath.i[i]);pointPool.release(shapePath.o[i]);shapePath.v[i]=null;shapePath.i[i]=null;shapePath.o[i]=null;}shapePath._length=0;shapePath.c=false;}function clone(shape){var cloned=factory.newElement();var i;var len=shape._length===undefined?shape.v.length:shape._length;cloned.setLength(len);cloned.c=shape.c;for(i=0;i<len;i+=1){cloned.setTripleAt(shape.v[i][0],shape.v[i][1],shape.o[i][0],shape.o[i][1],shape.i[i][0],shape.i[i][1],i);}return cloned;}var factory=poolFactory(4,create,release);factory.clone=clone;return factory;}();function ShapeCollection(){this._length=0;this._maxLength=4;this.shapes=createSizedArray(this._maxLength);}ShapeCollection.prototype.addShape=function(shapeData){if(this._length===this._maxLength){this.shapes=this.shapes.concat(createSizedArray(this._maxLength));this._maxLength*=2;}this.shapes[this._length]=shapeData;this._length+=1;};ShapeCollection.prototype.releaseShapes=function(){var i;for(i=0;i<this._length;i+=1){shapePool.release(this.shapes[i]);}this._length=0;};var shapeCollectionPool=function(){var ob={newShapeCollection:newShapeCollection,release:release};var _length=0;var _maxLength=4;var pool=createSizedArray(_maxLength);function newShapeCollection(){var shapeCollection;if(_length){_length-=1;shapeCollection=pool[_length];}else {shapeCollection=new ShapeCollection();}return shapeCollection;}function release(shapeCollection){var i;var len=shapeCollection._length;for(i=0;i<len;i+=1){shapePool.release(shapeCollection.shapes[i]);}shapeCollection._length=0;if(_length===_maxLength){pool=pooling["double"](pool);_maxLength*=2;}pool[_length]=shapeCollection;_length+=1;}return ob;}();var ShapePropertyFactory=function(){var initFrame=-999999;function interpolateShape(frameNum,previousValue,caching){var iterationIndex=caching.lastIndex;var keyPropS;var keyPropE;var isHold;var j;var k;var jLen;var kLen;var perc;var vertexValue;var kf=this.keyframes;if(frameNum<kf[0].t-this.offsetTime){keyPropS=kf[0].s[0];isHold=true;iterationIndex=0;}else if(frameNum>=kf[kf.length-1].t-this.offsetTime){keyPropS=kf[kf.length-1].s?kf[kf.length-1].s[0]:kf[kf.length-2].e[0];/* if(kf[kf.length - 1].s){
		                  keyPropS = kf[kf.length - 1].s[0];
		              }else{
		                  keyPropS = kf[kf.length - 2].e[0];
		              } */isHold=true;}else {var i=iterationIndex;var len=kf.length-1;var flag=true;var keyData;var nextKeyData;var keyframeMetadata;while(flag){keyData=kf[i];nextKeyData=kf[i+1];if(nextKeyData.t-this.offsetTime>frameNum){break;}if(i<len-1){i+=1;}else {flag=false;}}keyframeMetadata=this.keyframesMetadata[i]||{};isHold=keyData.h===1;iterationIndex=i;if(!isHold){if(frameNum>=nextKeyData.t-this.offsetTime){perc=1;}else if(frameNum<keyData.t-this.offsetTime){perc=0;}else {var fnc;if(keyframeMetadata.__fnct){fnc=keyframeMetadata.__fnct;}else {fnc=BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y).get;keyframeMetadata.__fnct=fnc;}perc=fnc((frameNum-(keyData.t-this.offsetTime))/(nextKeyData.t-this.offsetTime-(keyData.t-this.offsetTime)));}keyPropE=nextKeyData.s?nextKeyData.s[0]:keyData.e[0];}keyPropS=keyData.s[0];}jLen=previousValue._length;kLen=keyPropS.i[0].length;caching.lastIndex=iterationIndex;for(j=0;j<jLen;j+=1){for(k=0;k<kLen;k+=1){vertexValue=isHold?keyPropS.i[j][k]:keyPropS.i[j][k]+(keyPropE.i[j][k]-keyPropS.i[j][k])*perc;previousValue.i[j][k]=vertexValue;vertexValue=isHold?keyPropS.o[j][k]:keyPropS.o[j][k]+(keyPropE.o[j][k]-keyPropS.o[j][k])*perc;previousValue.o[j][k]=vertexValue;vertexValue=isHold?keyPropS.v[j][k]:keyPropS.v[j][k]+(keyPropE.v[j][k]-keyPropS.v[j][k])*perc;previousValue.v[j][k]=vertexValue;}}}function interpolateShapeCurrentTime(){var frameNum=this.comp.renderedFrame-this.offsetTime;var initTime=this.keyframes[0].t-this.offsetTime;var endTime=this.keyframes[this.keyframes.length-1].t-this.offsetTime;var lastFrame=this._caching.lastFrame;if(!(lastFrame!==initFrame&&(lastFrame<initTime&&frameNum<initTime||lastFrame>endTime&&frameNum>endTime))){/// /
		this._caching.lastIndex=lastFrame<frameNum?this._caching.lastIndex:0;this.interpolateShape(frameNum,this.pv,this._caching);/// /
		}this._caching.lastFrame=frameNum;return this.pv;}function resetShape(){this.paths=this.localShapeCollection;}function shapesEqual(shape1,shape2){if(shape1._length!==shape2._length||shape1.c!==shape2.c){return false;}var i;var len=shape1._length;for(i=0;i<len;i+=1){if(shape1.v[i][0]!==shape2.v[i][0]||shape1.v[i][1]!==shape2.v[i][1]||shape1.o[i][0]!==shape2.o[i][0]||shape1.o[i][1]!==shape2.o[i][1]||shape1.i[i][0]!==shape2.i[i][0]||shape1.i[i][1]!==shape2.i[i][1]){return false;}}return true;}function setVValue(newPath){if(!shapesEqual(this.v,newPath)){this.v=shapePool.clone(newPath);this.localShapeCollection.releaseShapes();this.localShapeCollection.addShape(this.v);this._mdf=true;this.paths=this.localShapeCollection;}}function processEffectsSequence(){if(this.elem.globalData.frameId===this.frameId){return;}if(!this.effectsSequence.length){this._mdf=false;return;}if(this.lock){this.setVValue(this.pv);return;}this.lock=true;this._mdf=false;var finalValue;if(this.kf){finalValue=this.pv;}else if(this.data.ks){finalValue=this.data.ks.k;}else {finalValue=this.data.pt.k;}var i;var len=this.effectsSequence.length;for(i=0;i<len;i+=1){finalValue=this.effectsSequence[i](finalValue);}this.setVValue(finalValue);this.lock=false;this.frameId=this.elem.globalData.frameId;}function ShapeProperty(elem,data,type){this.propType='shape';this.comp=elem.comp;this.container=elem;this.elem=elem;this.data=data;this.k=false;this.kf=false;this._mdf=false;var pathData=type===3?data.pt.k:data.ks.k;this.v=shapePool.clone(pathData);this.pv=shapePool.clone(this.v);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.paths.addShape(this.v);this.reset=resetShape;this.effectsSequence=[];}function addEffect(effectFunction){this.effectsSequence.push(effectFunction);this.container.addDynamicProperty(this);}ShapeProperty.prototype.interpolateShape=interpolateShape;ShapeProperty.prototype.getValue=processEffectsSequence;ShapeProperty.prototype.setVValue=setVValue;ShapeProperty.prototype.addEffect=addEffect;function KeyframedShapeProperty(elem,data,type){this.propType='shape';this.comp=elem.comp;this.elem=elem;this.container=elem;this.offsetTime=elem.data.st;this.keyframes=type===3?data.pt.k:data.ks.k;this.keyframesMetadata=[];this.k=true;this.kf=true;var len=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement();this.v.setPathData(this.keyframes[0].s[0].c,len);this.pv=shapePool.clone(this.v);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.paths.addShape(this.v);this.lastFrame=initFrame;this.reset=resetShape;this._caching={lastFrame:initFrame,lastIndex:0};this.effectsSequence=[interpolateShapeCurrentTime.bind(this)];}KeyframedShapeProperty.prototype.getValue=processEffectsSequence;KeyframedShapeProperty.prototype.interpolateShape=interpolateShape;KeyframedShapeProperty.prototype.setVValue=setVValue;KeyframedShapeProperty.prototype.addEffect=addEffect;var EllShapeProperty=function(){var cPoint=roundCorner;function EllShapePropertyFactory(elem,data){this.v=shapePool.newElement();this.v.setPathData(true,4);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.localShapeCollection.addShape(this.v);this.d=data.d;this.elem=elem;this.comp=elem.comp;this.frameId=-1;this.initDynamicPropertyContainer(elem);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.s=PropertyFactory.getProp(elem,data.s,1,0,this);if(this.dynamicProperties.length){this.k=true;}else {this.k=false;this.convertEllToPath();}}EllShapePropertyFactory.prototype={reset:resetShape,getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertEllToPath();}},convertEllToPath:function convertEllToPath(){var p0=this.p.v[0];var p1=this.p.v[1];var s0=this.s.v[0]/2;var s1=this.s.v[1]/2;var _cw=this.d!==3;var _v=this.v;_v.v[0][0]=p0;_v.v[0][1]=p1-s1;_v.v[1][0]=_cw?p0+s0:p0-s0;_v.v[1][1]=p1;_v.v[2][0]=p0;_v.v[2][1]=p1+s1;_v.v[3][0]=_cw?p0-s0:p0+s0;_v.v[3][1]=p1;_v.i[0][0]=_cw?p0-s0*cPoint:p0+s0*cPoint;_v.i[0][1]=p1-s1;_v.i[1][0]=_cw?p0+s0:p0-s0;_v.i[1][1]=p1-s1*cPoint;_v.i[2][0]=_cw?p0+s0*cPoint:p0-s0*cPoint;_v.i[2][1]=p1+s1;_v.i[3][0]=_cw?p0-s0:p0+s0;_v.i[3][1]=p1+s1*cPoint;_v.o[0][0]=_cw?p0+s0*cPoint:p0-s0*cPoint;_v.o[0][1]=p1-s1;_v.o[1][0]=_cw?p0+s0:p0-s0;_v.o[1][1]=p1+s1*cPoint;_v.o[2][0]=_cw?p0-s0*cPoint:p0+s0*cPoint;_v.o[2][1]=p1+s1;_v.o[3][0]=_cw?p0-s0:p0+s0;_v.o[3][1]=p1-s1*cPoint;}};extendPrototype([DynamicPropertyContainer],EllShapePropertyFactory);return EllShapePropertyFactory;}();var StarShapeProperty=function(){function StarShapePropertyFactory(elem,data){this.v=shapePool.newElement();this.v.setPathData(true,0);this.elem=elem;this.comp=elem.comp;this.data=data;this.frameId=-1;this.d=data.d;this.initDynamicPropertyContainer(elem);if(data.sy===1){this.ir=PropertyFactory.getProp(elem,data.ir,0,0,this);this.is=PropertyFactory.getProp(elem,data.is,0,0.01,this);this.convertToPath=this.convertStarToPath;}else {this.convertToPath=this.convertPolygonToPath;}this.pt=PropertyFactory.getProp(elem,data.pt,0,0,this);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.r=PropertyFactory.getProp(elem,data.r,0,degToRads,this);this.or=PropertyFactory.getProp(elem,data.or,0,0,this);this.os=PropertyFactory.getProp(elem,data.os,0,0.01,this);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.localShapeCollection.addShape(this.v);this.paths=this.localShapeCollection;if(this.dynamicProperties.length){this.k=true;}else {this.k=false;this.convertToPath();}}StarShapePropertyFactory.prototype={reset:resetShape,getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertToPath();}},convertStarToPath:function convertStarToPath(){var numPts=Math.floor(this.pt.v)*2;var angle=Math.PI*2/numPts;/* this.v.v.length = numPts;
		                  this.v.i.length = numPts;
		                  this.v.o.length = numPts; */var longFlag=true;var longRad=this.or.v;var shortRad=this.ir.v;var longRound=this.os.v;var shortRound=this.is.v;var longPerimSegment=2*Math.PI*longRad/(numPts*2);var shortPerimSegment=2*Math.PI*shortRad/(numPts*2);var i;var rad;var roundness;var perimSegment;var currentAng=-Math.PI/2;currentAng+=this.r.v;var dir=this.data.d===3?-1:1;this.v._length=0;for(i=0;i<numPts;i+=1){rad=longFlag?longRad:shortRad;roundness=longFlag?longRound:shortRound;perimSegment=longFlag?longPerimSegment:shortPerimSegment;var x=rad*Math.cos(currentAng);var y=rad*Math.sin(currentAng);var ox=x===0&&y===0?0:y/Math.sqrt(x*x+y*y);var oy=x===0&&y===0?0:-x/Math.sqrt(x*x+y*y);x+=+this.p.v[0];y+=+this.p.v[1];this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir,i,true);/* this.v.v[i] = [x,y];
		                      this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
		                      this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
		                      this.v._length = numPts; */longFlag=!longFlag;currentAng+=angle*dir;}},convertPolygonToPath:function convertPolygonToPath(){var numPts=Math.floor(this.pt.v);var angle=Math.PI*2/numPts;var rad=this.or.v;var roundness=this.os.v;var perimSegment=2*Math.PI*rad/(numPts*4);var i;var currentAng=-Math.PI*0.5;var dir=this.data.d===3?-1:1;currentAng+=this.r.v;this.v._length=0;for(i=0;i<numPts;i+=1){var x=rad*Math.cos(currentAng);var y=rad*Math.sin(currentAng);var ox=x===0&&y===0?0:y/Math.sqrt(x*x+y*y);var oy=x===0&&y===0?0:-x/Math.sqrt(x*x+y*y);x+=+this.p.v[0];y+=+this.p.v[1];this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir,i,true);currentAng+=angle*dir;}this.paths.length=0;this.paths[0]=this.v;}};extendPrototype([DynamicPropertyContainer],StarShapePropertyFactory);return StarShapePropertyFactory;}();var RectShapeProperty=function(){function RectShapePropertyFactory(elem,data){this.v=shapePool.newElement();this.v.c=true;this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.localShapeCollection.addShape(this.v);this.paths=this.localShapeCollection;this.elem=elem;this.comp=elem.comp;this.frameId=-1;this.d=data.d;this.initDynamicPropertyContainer(elem);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.s=PropertyFactory.getProp(elem,data.s,1,0,this);this.r=PropertyFactory.getProp(elem,data.r,0,0,this);if(this.dynamicProperties.length){this.k=true;}else {this.k=false;this.convertRectToPath();}}RectShapePropertyFactory.prototype={convertRectToPath:function convertRectToPath(){var p0=this.p.v[0];var p1=this.p.v[1];var v0=this.s.v[0]/2;var v1=this.s.v[1]/2;var round=bmMin(v0,v1,this.r.v);var cPoint=round*(1-roundCorner);this.v._length=0;if(this.d===2||this.d===1){this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,0,true);this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,p0+v0,p1+v1-round,1,true);if(round!==0){this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,2,true);this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,p0-v0+round,p1+v1,3,true);this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,4,true);this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,p0-v0,p1-v1+round,5,true);this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,6,true);this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,p0+v0-round,p1-v1,7,true);}else {this.v.setTripleAt(p0-v0,p1+v1,p0-v0+cPoint,p1+v1,p0-v0,p1+v1,2);this.v.setTripleAt(p0-v0,p1-v1,p0-v0,p1-v1+cPoint,p0-v0,p1-v1,3);}}else {this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,p0+v0,p1-v1+round,0,true);if(round!==0){this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,1,true);this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,p0-v0+round,p1-v1,2,true);this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,3,true);this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,p0-v0,p1+v1-round,4,true);this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,5,true);this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,p0+v0-round,p1+v1,6,true);this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,7,true);}else {this.v.setTripleAt(p0-v0,p1-v1,p0-v0+cPoint,p1-v1,p0-v0,p1-v1,1,true);this.v.setTripleAt(p0-v0,p1+v1,p0-v0,p1+v1-cPoint,p0-v0,p1+v1,2,true);this.v.setTripleAt(p0+v0,p1+v1,p0+v0-cPoint,p1+v1,p0+v0,p1+v1,3,true);}}},getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertRectToPath();}},reset:resetShape};extendPrototype([DynamicPropertyContainer],RectShapePropertyFactory);return RectShapePropertyFactory;}();function getShapeProp(elem,data,type){var prop;if(type===3||type===4){var dataProp=type===3?data.pt:data.ks;var keys=dataProp.k;if(keys.length){prop=new KeyframedShapeProperty(elem,data,type);}else {prop=new ShapeProperty(elem,data,type);}}else if(type===5){prop=new RectShapeProperty(elem,data);}else if(type===6){prop=new EllShapeProperty(elem,data);}else if(type===7){prop=new StarShapeProperty(elem,data);}if(prop.k){elem.addDynamicProperty(prop);}return prop;}function getConstructorFunction(){return ShapeProperty;}function getKeyframedConstructorFunction(){return KeyframedShapeProperty;}var ob={};ob.getShapeProp=getShapeProp;ob.getConstructorFunction=getConstructorFunction;ob.getKeyframedConstructorFunction=getKeyframedConstructorFunction;return ob;}();/*!
		   Transformation Matrix v2.0
		   (c) Epistemex 2014-2015
		   www.epistemex.com
		   By Ken Fyrstenberg
		   Contributions by leeoniya.
		   License: MIT, header required.
		   *//**
		   * 2D transformation matrix object initialized with identity matrix.
		   *
		   * The matrix can synchronize a canvas context by supplying the context
		   * as an argument, or later apply current absolute transform to an
		   * existing context.
		   *
		   * All values are handled as floating point values.
		   *
		   * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
		   * @prop {number} a - scale x
		   * @prop {number} b - shear y
		   * @prop {number} c - shear x
		   * @prop {number} d - scale y
		   * @prop {number} e - translate x
		   * @prop {number} f - translate y
		   * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
		   * @constructor
		   */var Matrix=function(){var _cos=Math.cos;var _sin=Math.sin;var _tan=Math.tan;var _rnd=Math.round;function reset(){this.props[0]=1;this.props[1]=0;this.props[2]=0;this.props[3]=0;this.props[4]=0;this.props[5]=1;this.props[6]=0;this.props[7]=0;this.props[8]=0;this.props[9]=0;this.props[10]=1;this.props[11]=0;this.props[12]=0;this.props[13]=0;this.props[14]=0;this.props[15]=1;return this;}function rotate(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);}function rotateX(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(1,0,0,0,0,mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1);}function rotateY(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,0,mSin,0,0,1,0,0,-mSin,0,mCos,0,0,0,0,1);}function rotateZ(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);}function shear(sx,sy){return this._t(1,sy,sx,1,0,0);}function skew(ax,ay){return this.shear(_tan(ax),_tan(ay));}function skewFromAxis(ax,angle){var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,mSin,0,0,-mSin,mCos,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,_tan(ax),1,0,0,0,0,1,0,0,0,0,1)._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);// return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
		}function scale(sx,sy,sz){if(!sz&&sz!==0){sz=1;}if(sx===1&&sy===1&&sz===1){return this;}return this._t(sx,0,0,0,0,sy,0,0,0,0,sz,0,0,0,0,1);}function setTransform(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){this.props[0]=a;this.props[1]=b;this.props[2]=c;this.props[3]=d;this.props[4]=e;this.props[5]=f;this.props[6]=g;this.props[7]=h;this.props[8]=i;this.props[9]=j;this.props[10]=k;this.props[11]=l;this.props[12]=m;this.props[13]=n;this.props[14]=o;this.props[15]=p;return this;}function translate(tx,ty,tz){tz=tz||0;if(tx!==0||ty!==0||tz!==0){return this._t(1,0,0,0,0,1,0,0,0,0,1,0,tx,ty,tz,1);}return this;}function transform(a2,b2,c2,d2,e2,f2,g2,h2,i2,j2,k2,l2,m2,n2,o2,p2){var _p=this.props;if(a2===1&&b2===0&&c2===0&&d2===0&&e2===0&&f2===1&&g2===0&&h2===0&&i2===0&&j2===0&&k2===1&&l2===0){// NOTE: commenting this condition because TurboFan deoptimizes code when present
		// if(m2 !== 0 || n2 !== 0 || o2 !== 0){
		_p[12]=_p[12]*a2+_p[15]*m2;_p[13]=_p[13]*f2+_p[15]*n2;_p[14]=_p[14]*k2+_p[15]*o2;_p[15]*=p2;// }
		this._identityCalculated=false;return this;}var a1=_p[0];var b1=_p[1];var c1=_p[2];var d1=_p[3];var e1=_p[4];var f1=_p[5];var g1=_p[6];var h1=_p[7];var i1=_p[8];var j1=_p[9];var k1=_p[10];var l1=_p[11];var m1=_p[12];var n1=_p[13];var o1=_p[14];var p1=_p[15];/* matrix order (canvas compatible):
		           * ace
		           * bdf
		           * 001
		           */_p[0]=a1*a2+b1*e2+c1*i2+d1*m2;_p[1]=a1*b2+b1*f2+c1*j2+d1*n2;_p[2]=a1*c2+b1*g2+c1*k2+d1*o2;_p[3]=a1*d2+b1*h2+c1*l2+d1*p2;_p[4]=e1*a2+f1*e2+g1*i2+h1*m2;_p[5]=e1*b2+f1*f2+g1*j2+h1*n2;_p[6]=e1*c2+f1*g2+g1*k2+h1*o2;_p[7]=e1*d2+f1*h2+g1*l2+h1*p2;_p[8]=i1*a2+j1*e2+k1*i2+l1*m2;_p[9]=i1*b2+j1*f2+k1*j2+l1*n2;_p[10]=i1*c2+j1*g2+k1*k2+l1*o2;_p[11]=i1*d2+j1*h2+k1*l2+l1*p2;_p[12]=m1*a2+n1*e2+o1*i2+p1*m2;_p[13]=m1*b2+n1*f2+o1*j2+p1*n2;_p[14]=m1*c2+n1*g2+o1*k2+p1*o2;_p[15]=m1*d2+n1*h2+o1*l2+p1*p2;this._identityCalculated=false;return this;}function multiply(matrix){var matrixProps=matrix.props;return this.transform(matrixProps[0],matrixProps[1],matrixProps[2],matrixProps[3],matrixProps[4],matrixProps[5],matrixProps[6],matrixProps[7],matrixProps[8],matrixProps[9],matrixProps[10],matrixProps[11],matrixProps[12],matrixProps[13],matrixProps[14],matrixProps[15]);}function isIdentity(){if(!this._identityCalculated){this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1);this._identityCalculated=true;}return this._identity;}function equals(matr){var i=0;while(i<16){if(matr.props[i]!==this.props[i]){return false;}i+=1;}return true;}function clone(matr){var i;for(i=0;i<16;i+=1){matr.props[i]=this.props[i];}return matr;}function cloneFromProps(props){var i;for(i=0;i<16;i+=1){this.props[i]=props[i];}}function applyToPoint(x,y,z){return {x:x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12],y:x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13],z:x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14]};/* return {
		           x: x * me.a + y * me.c + me.e,
		           y: x * me.b + y * me.d + me.f
		           }; */}function applyToX(x,y,z){return x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12];}function applyToY(x,y,z){return x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13];}function applyToZ(x,y,z){return x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14];}function getInverseMatrix(){var determinant=this.props[0]*this.props[5]-this.props[1]*this.props[4];var a=this.props[5]/determinant;var b=-this.props[1]/determinant;var c=-this.props[4]/determinant;var d=this.props[0]/determinant;var e=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/determinant;var f=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/determinant;var inverseMatrix=new Matrix();inverseMatrix.props[0]=a;inverseMatrix.props[1]=b;inverseMatrix.props[4]=c;inverseMatrix.props[5]=d;inverseMatrix.props[12]=e;inverseMatrix.props[13]=f;return inverseMatrix;}function inversePoint(pt){var inverseMatrix=this.getInverseMatrix();return inverseMatrix.applyToPointArray(pt[0],pt[1],pt[2]||0);}function inversePoints(pts){var i;var len=pts.length;var retPts=[];for(i=0;i<len;i+=1){retPts[i]=inversePoint(pts[i]);}return retPts;}function applyToTriplePoints(pt1,pt2,pt3){var arr=createTypedArray('float32',6);if(this.isIdentity()){arr[0]=pt1[0];arr[1]=pt1[1];arr[2]=pt2[0];arr[3]=pt2[1];arr[4]=pt3[0];arr[5]=pt3[1];}else {var p0=this.props[0];var p1=this.props[1];var p4=this.props[4];var p5=this.props[5];var p12=this.props[12];var p13=this.props[13];arr[0]=pt1[0]*p0+pt1[1]*p4+p12;arr[1]=pt1[0]*p1+pt1[1]*p5+p13;arr[2]=pt2[0]*p0+pt2[1]*p4+p12;arr[3]=pt2[0]*p1+pt2[1]*p5+p13;arr[4]=pt3[0]*p0+pt3[1]*p4+p12;arr[5]=pt3[0]*p1+pt3[1]*p5+p13;}return arr;}function applyToPointArray(x,y,z){var arr;if(this.isIdentity()){arr=[x,y,z];}else {arr=[x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12],x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13],x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14]];}return arr;}function applyToPointStringified(x,y){if(this.isIdentity()){return x+','+y;}var _p=this.props;return Math.round((x*_p[0]+y*_p[4]+_p[12])*100)/100+','+Math.round((x*_p[1]+y*_p[5]+_p[13])*100)/100;}function toCSS(){// Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
		/* if(this.isIdentity()) {
		              return '';
		          } */var i=0;var props=this.props;var cssValue='matrix3d(';var v=10000;while(i<16){cssValue+=_rnd(props[i]*v)/v;cssValue+=i===15?')':',';i+=1;}return cssValue;}function roundMatrixProperty(val){var v=10000;if(val<0.000001&&val>0||val>-0.000001&&val<0){return _rnd(val*v)/v;}return val;}function to2dCSS(){// Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
		/* if(this.isIdentity()) {
		              return '';
		          } */var props=this.props;var _a=roundMatrixProperty(props[0]);var _b=roundMatrixProperty(props[1]);var _c=roundMatrixProperty(props[4]);var _d=roundMatrixProperty(props[5]);var _e=roundMatrixProperty(props[12]);var _f=roundMatrixProperty(props[13]);return 'matrix('+_a+','+_b+','+_c+','+_d+','+_e+','+_f+')';}return function(){this.reset=reset;this.rotate=rotate;this.rotateX=rotateX;this.rotateY=rotateY;this.rotateZ=rotateZ;this.skew=skew;this.skewFromAxis=skewFromAxis;this.shear=shear;this.scale=scale;this.setTransform=setTransform;this.translate=translate;this.transform=transform;this.multiply=multiply;this.applyToPoint=applyToPoint;this.applyToX=applyToX;this.applyToY=applyToY;this.applyToZ=applyToZ;this.applyToPointArray=applyToPointArray;this.applyToTriplePoints=applyToTriplePoints;this.applyToPointStringified=applyToPointStringified;this.toCSS=toCSS;this.to2dCSS=to2dCSS;this.clone=clone;this.cloneFromProps=cloneFromProps;this.equals=equals;this.inversePoints=inversePoints;this.inversePoint=inversePoint;this.getInverseMatrix=getInverseMatrix;this._t=this.transform;this.isIdentity=isIdentity;this._identity=true;this._identityCalculated=false;this.props=createTypedArray('float32',16);this.reset();};}();function _typeof$3(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof$3=function _typeof(obj){return typeof obj;};}else {_typeof$3=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof$3(obj);}var lottie={};function setLocation(href){setLocationHref(href);}function searchAnimations(){{animationManager.searchAnimations();}}function setSubframeRendering(flag){setSubframeEnabled(flag);}function setPrefix(prefix){setIdPrefix(prefix);}function loadAnimation(params){return animationManager.loadAnimation(params);}function setQuality(value){if(typeof value==='string'){switch(value){case'high':setDefaultCurveSegments(200);break;default:case'medium':setDefaultCurveSegments(50);break;case'low':setDefaultCurveSegments(10);break;}}else if(!isNaN(value)&&value>1){setDefaultCurveSegments(value);}}function inBrowser(){return typeof navigator!=='undefined';}function installPlugin(type,plugin){if(type==='expressions'){setExpressionsPlugin(plugin);}}function getFactory(name){switch(name){case'propertyFactory':return PropertyFactory;case'shapePropertyFactory':return ShapePropertyFactory;case'matrix':return Matrix;default:return null;}}lottie.play=animationManager.play;lottie.pause=animationManager.pause;lottie.setLocationHref=setLocation;lottie.togglePause=animationManager.togglePause;lottie.setSpeed=animationManager.setSpeed;lottie.setDirection=animationManager.setDirection;lottie.stop=animationManager.stop;lottie.searchAnimations=searchAnimations;lottie.registerAnimation=animationManager.registerAnimation;lottie.loadAnimation=loadAnimation;lottie.setSubframeRendering=setSubframeRendering;lottie.resize=animationManager.resize;// lottie.start = start;
		lottie.goToAndStop=animationManager.goToAndStop;lottie.destroy=animationManager.destroy;lottie.setQuality=setQuality;lottie.inBrowser=inBrowser;lottie.installPlugin=installPlugin;lottie.freeze=animationManager.freeze;lottie.unfreeze=animationManager.unfreeze;lottie.setVolume=animationManager.setVolume;lottie.mute=animationManager.mute;lottie.unmute=animationManager.unmute;lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations;lottie.useWebWorker=setWebWorker;lottie.setIDPrefix=setPrefix;lottie.__getFactory=getFactory;lottie.version='5.12.2';function checkReady(){if(document.readyState==='complete'){clearInterval(readyStateCheckInterval);searchAnimations();}}function getQueryVariable(variable){var vars=queryString.split('&');for(var i=0;i<vars.length;i+=1){var pair=vars[i].split('=');if(decodeURIComponent(pair[0])==variable){// eslint-disable-line eqeqeq
		return decodeURIComponent(pair[1]);}}return null;}var queryString='';{var scripts=document.getElementsByTagName('script');var index=scripts.length-1;var myScript=scripts[index]||{src:''};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,''):'';// eslint-disable-line no-useless-escape
		getQueryVariable('renderer');}var readyStateCheckInterval=setInterval(checkReady,100);// this adds bodymovin to the window object for backwards compatibility
		try{if(!(('object'==="undefined"?"undefined":_typeof$3(exports))==='object'&&'object'!=='undefined')&&!(typeof undefined==='function'&&undefined.amd)// eslint-disable-line no-undef
		){window.bodymovin=lottie;}}catch(err){//
		}var ShapeModifiers=function(){var ob={};var modifiers={};ob.registerModifier=registerModifier;ob.getModifier=getModifier;function registerModifier(nm,factory){if(!modifiers[nm]){modifiers[nm]=factory;}}function getModifier(nm,elem,data){return new modifiers[nm](elem,data);}return ob;}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){};ShapeModifier.prototype.addShapeToModifier=function(){};ShapeModifier.prototype.addShape=function(data){if(!this.closed){// Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.
		data.sh.container.addDynamicProperty(data.sh);var shapeData={shape:data.sh,data:data,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(shapeData);this.addShapeToModifier(shapeData);if(this._isAnimated){data.setAsAnimated();}}};ShapeModifier.prototype.init=function(elem,data){this.shapes=[];this.elem=elem;this.initDynamicPropertyContainer(elem);this.initModifierProperties(elem,data);this.frameId=initialDefaultFrame;this.closed=false;this.k=false;if(this.dynamicProperties.length){this.k=true;}else {this.getValue(true);}};ShapeModifier.prototype.processKeys=function(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();};extendPrototype([DynamicPropertyContainer],ShapeModifier);function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier);TrimModifier.prototype.initModifierProperties=function(elem,data){this.s=PropertyFactory.getProp(elem,data.s,0,0.01,this);this.e=PropertyFactory.getProp(elem,data.e,0,0.01,this);this.o=PropertyFactory.getProp(elem,data.o,0,0,this);this.sValue=0;this.eValue=0;this.getValue=this.processKeys;this.m=data.m;this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length;};TrimModifier.prototype.addShapeToModifier=function(shapeData){shapeData.pathsData=[];};TrimModifier.prototype.calculateShapeEdges=function(s,e,shapeLength,addedLength,totalModifierLength){var segments=[];if(e<=1){segments.push({s:s,e:e});}else if(s>=1){segments.push({s:s-1,e:e-1});}else {segments.push({s:s,e:1});segments.push({s:0,e:e-1});}var shapeSegments=[];var i;var len=segments.length;var segmentOb;for(i=0;i<len;i+=1){segmentOb=segments[i];if(!(segmentOb.e*totalModifierLength<addedLength||segmentOb.s*totalModifierLength>addedLength+shapeLength)){var shapeS;var shapeE;if(segmentOb.s*totalModifierLength<=addedLength){shapeS=0;}else {shapeS=(segmentOb.s*totalModifierLength-addedLength)/shapeLength;}if(segmentOb.e*totalModifierLength>=addedLength+shapeLength){shapeE=1;}else {shapeE=(segmentOb.e*totalModifierLength-addedLength)/shapeLength;}shapeSegments.push([shapeS,shapeE]);}}if(!shapeSegments.length){shapeSegments.push([0,0]);}return shapeSegments;};TrimModifier.prototype.releasePathsData=function(pathsData){var i;var len=pathsData.length;for(i=0;i<len;i+=1){segmentsLengthPool.release(pathsData[i]);}pathsData.length=0;return pathsData;};TrimModifier.prototype.processShapes=function(_isFirstFrame){var s;var e;if(this._mdf||_isFirstFrame){var o=this.o.v%360/360;if(o<0){o+=1;}if(this.s.v>1){s=1+o;}else if(this.s.v<0){s=0+o;}else {s=this.s.v+o;}if(this.e.v>1){e=1+o;}else if(this.e.v<0){e=0+o;}else {e=this.e.v+o;}if(s>e){var _s=s;s=e;e=_s;}s=Math.round(s*10000)*0.0001;e=Math.round(e*10000)*0.0001;this.sValue=s;this.eValue=e;}else {s=this.sValue;e=this.eValue;}var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var pathsData;var pathData;var totalShapeLength;var totalModifierLength=0;if(e===s){for(i=0;i<len;i+=1){this.shapes[i].localShapeCollection.releaseShapes();this.shapes[i].shape._mdf=true;this.shapes[i].shape.paths=this.shapes[i].localShapeCollection;if(this._mdf){this.shapes[i].pathsData.length=0;}}}else if(!(e===1&&s===0||e===0&&s===1)){var segments=[];var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];// if shape hasn't changed and trim properties haven't changed, cached previous path can be used
		if(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame&&this.m!==2){shapeData.shape.paths=shapeData.localShapeCollection;}else {shapePaths=shapeData.shape.paths;jLen=shapePaths._length;totalShapeLength=0;if(!shapeData.shape._mdf&&shapeData.pathsData.length){totalShapeLength=shapeData.totalShapeLength;}else {pathsData=this.releasePathsData(shapeData.pathsData);for(j=0;j<jLen;j+=1){pathData=bez.getSegmentsLength(shapePaths.shapes[j]);pathsData.push(pathData);totalShapeLength+=pathData.totalLength;}shapeData.totalShapeLength=totalShapeLength;shapeData.pathsData=pathsData;}totalModifierLength+=totalShapeLength;shapeData.shape._mdf=true;}}var shapeS=s;var shapeE=e;var addedLength=0;var edges;for(i=len-1;i>=0;i-=1){shapeData=this.shapes[i];if(shapeData.shape._mdf){localShapeCollection=shapeData.localShapeCollection;localShapeCollection.releaseShapes();// if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group
		if(this.m===2&&len>1){edges=this.calculateShapeEdges(s,e,shapeData.totalShapeLength,addedLength,totalModifierLength);addedLength+=shapeData.totalShapeLength;}else {edges=[[shapeS,shapeE]];}jLen=edges.length;for(j=0;j<jLen;j+=1){shapeS=edges[j][0];shapeE=edges[j][1];segments.length=0;if(shapeE<=1){segments.push({s:shapeData.totalShapeLength*shapeS,e:shapeData.totalShapeLength*shapeE});}else if(shapeS>=1){segments.push({s:shapeData.totalShapeLength*(shapeS-1),e:shapeData.totalShapeLength*(shapeE-1)});}else {segments.push({s:shapeData.totalShapeLength*shapeS,e:shapeData.totalShapeLength});segments.push({s:0,e:shapeData.totalShapeLength*(shapeE-1)});}var newShapesData=this.addShapes(shapeData,segments[0]);if(segments[0].s!==segments[0].e){if(segments.length>1){var lastShapeInCollection=shapeData.shape.paths.shapes[shapeData.shape.paths._length-1];if(lastShapeInCollection.c){var lastShape=newShapesData.pop();this.addPaths(newShapesData,localShapeCollection);newShapesData=this.addShapes(shapeData,segments[1],lastShape);}else {this.addPaths(newShapesData,localShapeCollection);newShapesData=this.addShapes(shapeData,segments[1]);}}this.addPaths(newShapesData,localShapeCollection);}}shapeData.shape.paths=localShapeCollection;}}}else if(this._mdf){for(i=0;i<len;i+=1){// Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
		// Don't remove this even if it's losing cached info.
		this.shapes[i].pathsData.length=0;this.shapes[i].shape._mdf=true;}}};TrimModifier.prototype.addPaths=function(newPaths,localShapeCollection){var i;var len=newPaths.length;for(i=0;i<len;i+=1){localShapeCollection.addShape(newPaths[i]);}};TrimModifier.prototype.addSegment=function(pt1,pt2,pt3,pt4,shapePath,pos,newShape){shapePath.setXYAt(pt2[0],pt2[1],'o',pos);shapePath.setXYAt(pt3[0],pt3[1],'i',pos+1);if(newShape){shapePath.setXYAt(pt1[0],pt1[1],'v',pos);}shapePath.setXYAt(pt4[0],pt4[1],'v',pos+1);};TrimModifier.prototype.addSegmentFromArray=function(points,shapePath,pos,newShape){shapePath.setXYAt(points[1],points[5],'o',pos);shapePath.setXYAt(points[2],points[6],'i',pos+1);if(newShape){shapePath.setXYAt(points[0],points[4],'v',pos);}shapePath.setXYAt(points[3],points[7],'v',pos+1);};TrimModifier.prototype.addShapes=function(shapeData,shapeSegment,shapePath){var pathsData=shapeData.pathsData;var shapePaths=shapeData.shape.paths.shapes;var i;var len=shapeData.shape.paths._length;var j;var jLen;var addedLength=0;var currentLengthData;var segmentCount;var lengths;var segment;var shapes=[];var initPos;var newShape=true;if(!shapePath){shapePath=shapePool.newElement();segmentCount=0;initPos=0;}else {segmentCount=shapePath._length;initPos=shapePath._length;}shapes.push(shapePath);for(i=0;i<len;i+=1){lengths=pathsData[i].lengths;shapePath.c=shapePaths[i].c;jLen=shapePaths[i].c?lengths.length:lengths.length+1;for(j=1;j<jLen;j+=1){currentLengthData=lengths[j-1];if(addedLength+currentLengthData.addedLength<shapeSegment.s){addedLength+=currentLengthData.addedLength;shapePath.c=false;}else if(addedLength>shapeSegment.e){shapePath.c=false;break;}else {if(shapeSegment.s<=addedLength&&shapeSegment.e>=addedLength+currentLengthData.addedLength){this.addSegment(shapePaths[i].v[j-1],shapePaths[i].o[j-1],shapePaths[i].i[j],shapePaths[i].v[j],shapePath,segmentCount,newShape);newShape=false;}else {segment=bez.getNewSegment(shapePaths[i].v[j-1],shapePaths[i].v[j],shapePaths[i].o[j-1],shapePaths[i].i[j],(shapeSegment.s-addedLength)/currentLengthData.addedLength,(shapeSegment.e-addedLength)/currentLengthData.addedLength,lengths[j-1]);this.addSegmentFromArray(segment,shapePath,segmentCount,newShape);// this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
		newShape=false;shapePath.c=false;}addedLength+=currentLengthData.addedLength;segmentCount+=1;}}if(shapePaths[i].c&&lengths.length){currentLengthData=lengths[j-1];if(addedLength<=shapeSegment.e){var segmentLength=lengths[j-1].addedLength;if(shapeSegment.s<=addedLength&&shapeSegment.e>=addedLength+segmentLength){this.addSegment(shapePaths[i].v[j-1],shapePaths[i].o[j-1],shapePaths[i].i[0],shapePaths[i].v[0],shapePath,segmentCount,newShape);newShape=false;}else {segment=bez.getNewSegment(shapePaths[i].v[j-1],shapePaths[i].v[0],shapePaths[i].o[j-1],shapePaths[i].i[0],(shapeSegment.s-addedLength)/segmentLength,(shapeSegment.e-addedLength)/segmentLength,lengths[j-1]);this.addSegmentFromArray(segment,shapePath,segmentCount,newShape);// this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
		newShape=false;shapePath.c=false;}}else {shapePath.c=false;}addedLength+=currentLengthData.addedLength;segmentCount+=1;}if(shapePath._length){shapePath.setXYAt(shapePath.v[initPos][0],shapePath.v[initPos][1],'i',initPos);shapePath.setXYAt(shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1],'o',shapePath._length-1);}if(addedLength>shapeSegment.e){break;}if(i<len-1){shapePath=shapePool.newElement();newShape=true;shapes.push(shapePath);segmentCount=0;}}return shapes;};function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier);PuckerAndBloatModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.amount=PropertyFactory.getProp(elem,data.a,0,null,this);this._isAnimated=!!this.amount.effectsSequence.length;};PuckerAndBloatModifier.prototype.processPath=function(path,amount){var percent=amount/100;var centerPoint=[0,0];var pathLength=path._length;var i=0;for(i=0;i<pathLength;i+=1){centerPoint[0]+=path.v[i][0];centerPoint[1]+=path.v[i][1];}centerPoint[0]/=pathLength;centerPoint[1]/=pathLength;var clonedPath=shapePool.newElement();clonedPath.c=path.c;var vX;var vY;var oX;var oY;var iX;var iY;for(i=0;i<pathLength;i+=1){vX=path.v[i][0]+(centerPoint[0]-path.v[i][0])*percent;vY=path.v[i][1]+(centerPoint[1]-path.v[i][1])*percent;oX=path.o[i][0]+(centerPoint[0]-path.o[i][0])*-percent;oY=path.o[i][1]+(centerPoint[1]-path.o[i][1])*-percent;iX=path.i[i][0]+(centerPoint[0]-path.i[i][0])*-percent;iY=path.i[i][1]+(centerPoint[1]-path.i[i][1])*-percent;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,i);}return clonedPath;};PuckerAndBloatModifier.prototype.processShapes=function(_isFirstFrame){var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var amount=this.amount.v;if(amount!==0){var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];localShapeCollection=shapeData.localShapeCollection;if(!(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame)){localShapeCollection.releaseShapes();shapeData.shape._mdf=true;shapePaths=shapeData.shape.paths.shapes;jLen=shapeData.shape.paths._length;for(j=0;j<jLen;j+=1){localShapeCollection.addShape(this.processPath(shapePaths[j],amount));}}shapeData.shape.paths=shapeData.localShapeCollection;}}if(!this.dynamicProperties.length){this._mdf=false;}};var TransformPropertyFactory=function(){var defaultVector=[0,0];function applyToMatrix(mat){var _mdf=this._mdf;this.iterateDynamicProperties();this._mdf=this._mdf||_mdf;if(this.a){mat.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);}if(this.s){mat.scale(this.s.v[0],this.s.v[1],this.s.v[2]);}if(this.sk){mat.skewFromAxis(-this.sk.v,this.sa.v);}if(this.r){mat.rotate(-this.r.v);}else {mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);}if(this.data.p.s){if(this.data.p.z){mat.translate(this.px.v,this.py.v,-this.pz.v);}else {mat.translate(this.px.v,this.py.v,0);}}else {mat.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);}}function processKeys(forceRender){if(this.elem.globalData.frameId===this.frameId){return;}if(this._isDirty){this.precalculateMatrix();this._isDirty=false;}this.iterateDynamicProperties();if(this._mdf||forceRender){var frameRate;this.v.cloneFromProps(this.pre.props);if(this.appliedTransformations<1){this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);}if(this.appliedTransformations<2){this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]);}if(this.sk&&this.appliedTransformations<3){this.v.skewFromAxis(-this.sk.v,this.sa.v);}if(this.r&&this.appliedTransformations<4){this.v.rotate(-this.r.v);}else if(!this.r&&this.appliedTransformations<4){this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);}if(this.autoOriented){var v1;var v2;frameRate=this.elem.globalData.frameRate;if(this.p&&this.p.keyframes&&this.p.getValueAtTime){if(this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t){v1=this.p.getValueAtTime((this.p.keyframes[0].t+0.01)/frameRate,0);v2=this.p.getValueAtTime(this.p.keyframes[0].t/frameRate,0);}else if(this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t){v1=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/frameRate,0);v2=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-0.05)/frameRate,0);}else {v1=this.p.pv;v2=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-0.01)/frameRate,this.p.offsetTime);}}else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){v1=[];v2=[];var px=this.px;var py=this.py;if(px._caching.lastFrame+px.offsetTime<=px.keyframes[0].t){v1[0]=px.getValueAtTime((px.keyframes[0].t+0.01)/frameRate,0);v1[1]=py.getValueAtTime((py.keyframes[0].t+0.01)/frameRate,0);v2[0]=px.getValueAtTime(px.keyframes[0].t/frameRate,0);v2[1]=py.getValueAtTime(py.keyframes[0].t/frameRate,0);}else if(px._caching.lastFrame+px.offsetTime>=px.keyframes[px.keyframes.length-1].t){v1[0]=px.getValueAtTime(px.keyframes[px.keyframes.length-1].t/frameRate,0);v1[1]=py.getValueAtTime(py.keyframes[py.keyframes.length-1].t/frameRate,0);v2[0]=px.getValueAtTime((px.keyframes[px.keyframes.length-1].t-0.01)/frameRate,0);v2[1]=py.getValueAtTime((py.keyframes[py.keyframes.length-1].t-0.01)/frameRate,0);}else {v1=[px.pv,py.pv];v2[0]=px.getValueAtTime((px._caching.lastFrame+px.offsetTime-0.01)/frameRate,px.offsetTime);v2[1]=py.getValueAtTime((py._caching.lastFrame+py.offsetTime-0.01)/frameRate,py.offsetTime);}}else {v2=defaultVector;v1=v2;}this.v.rotate(-Math.atan2(v1[1]-v2[1],v1[0]-v2[0]));}if(this.data.p&&this.data.p.s){if(this.data.p.z){this.v.translate(this.px.v,this.py.v,-this.pz.v);}else {this.v.translate(this.px.v,this.py.v,0);}}else {this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);}}this.frameId=this.elem.globalData.frameId;}function precalculateMatrix(){this.appliedTransformations=0;this.pre.reset();if(!this.a.effectsSequence.length){this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);this.appliedTransformations=1;}else {return;}if(!this.s.effectsSequence.length){this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]);this.appliedTransformations=2;}else {return;}if(this.sk){if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length){this.pre.skewFromAxis(-this.sk.v,this.sa.v);this.appliedTransformations=3;}else {return;}}if(this.r){if(!this.r.effectsSequence.length){this.pre.rotate(-this.r.v);this.appliedTransformations=4;}}else if(!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length){this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);this.appliedTransformations=4;}}function autoOrient(){//
		// var prevP = this.getValueAtTime();
		}function addDynamicProperty(prop){this._addDynamicProperty(prop);this.elem.addDynamicProperty(prop);this._isDirty=true;}function TransformProperty(elem,data,container){this.elem=elem;this.frameId=-1;this.propType='transform';this.data=data;this.v=new Matrix();// Precalculated matrix with non animated properties
		this.pre=new Matrix();this.appliedTransformations=0;this.initDynamicPropertyContainer(container||elem);if(data.p&&data.p.s){this.px=PropertyFactory.getProp(elem,data.p.x,0,0,this);this.py=PropertyFactory.getProp(elem,data.p.y,0,0,this);if(data.p.z){this.pz=PropertyFactory.getProp(elem,data.p.z,0,0,this);}}else {this.p=PropertyFactory.getProp(elem,data.p||{k:[0,0,0]},1,0,this);}if(data.rx){this.rx=PropertyFactory.getProp(elem,data.rx,0,degToRads,this);this.ry=PropertyFactory.getProp(elem,data.ry,0,degToRads,this);this.rz=PropertyFactory.getProp(elem,data.rz,0,degToRads,this);if(data.or.k[0].ti){var i;var len=data.or.k.length;for(i=0;i<len;i+=1){data.or.k[i].to=null;data.or.k[i].ti=null;}}this.or=PropertyFactory.getProp(elem,data.or,1,degToRads,this);// sh Indicates it needs to be capped between -180 and 180
		this.or.sh=true;}else {this.r=PropertyFactory.getProp(elem,data.r||{k:0},0,degToRads,this);}if(data.sk){this.sk=PropertyFactory.getProp(elem,data.sk,0,degToRads,this);this.sa=PropertyFactory.getProp(elem,data.sa,0,degToRads,this);}this.a=PropertyFactory.getProp(elem,data.a||{k:[0,0,0]},1,0,this);this.s=PropertyFactory.getProp(elem,data.s||{k:[100,100,100]},1,0.01,this);// Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.
		if(data.o){this.o=PropertyFactory.getProp(elem,data.o,0,0.01,elem);}else {this.o={_mdf:false,v:1};}this._isDirty=true;if(!this.dynamicProperties.length){this.getValue(true);}}TransformProperty.prototype={applyToMatrix:applyToMatrix,getValue:processKeys,precalculateMatrix:precalculateMatrix,autoOrient:autoOrient};extendPrototype([DynamicPropertyContainer],TransformProperty);TransformProperty.prototype.addDynamicProperty=addDynamicProperty;TransformProperty.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function getTransformProperty(elem,data,container){return new TransformProperty(elem,data,container);}return {getTransformProperty:getTransformProperty};}();function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier);RepeaterModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.c=PropertyFactory.getProp(elem,data.c,0,null,this);this.o=PropertyFactory.getProp(elem,data.o,0,null,this);this.tr=TransformPropertyFactory.getTransformProperty(elem,data.tr,this);this.so=PropertyFactory.getProp(elem,data.tr.so,0,0.01,this);this.eo=PropertyFactory.getProp(elem,data.tr.eo,0,0.01,this);this.data=data;if(!this.dynamicProperties.length){this.getValue(true);}this._isAnimated=!!this.dynamicProperties.length;this.pMatrix=new Matrix();this.rMatrix=new Matrix();this.sMatrix=new Matrix();this.tMatrix=new Matrix();this.matrix=new Matrix();};RepeaterModifier.prototype.applyTransforms=function(pMatrix,rMatrix,sMatrix,transform,perc,inv){var dir=inv?-1:1;var scaleX=transform.s.v[0]+(1-transform.s.v[0])*(1-perc);var scaleY=transform.s.v[1]+(1-transform.s.v[1])*(1-perc);pMatrix.translate(transform.p.v[0]*dir*perc,transform.p.v[1]*dir*perc,transform.p.v[2]);rMatrix.translate(-transform.a.v[0],-transform.a.v[1],transform.a.v[2]);rMatrix.rotate(-transform.r.v*dir*perc);rMatrix.translate(transform.a.v[0],transform.a.v[1],transform.a.v[2]);sMatrix.translate(-transform.a.v[0],-transform.a.v[1],transform.a.v[2]);sMatrix.scale(inv?1/scaleX:scaleX,inv?1/scaleY:scaleY);sMatrix.translate(transform.a.v[0],transform.a.v[1],transform.a.v[2]);};RepeaterModifier.prototype.init=function(elem,arr,pos,elemsData){this.elem=elem;this.arr=arr;this.pos=pos;this.elemsData=elemsData;this._currentCopies=0;this._elements=[];this._groups=[];this.frameId=-1;this.initDynamicPropertyContainer(elem);this.initModifierProperties(elem,arr[pos]);while(pos>0){pos-=1;// this._elements.unshift(arr.splice(pos,1)[0]);
		this._elements.unshift(arr[pos]);}if(this.dynamicProperties.length){this.k=true;}else {this.getValue(true);}};RepeaterModifier.prototype.resetElements=function(elements){var i;var len=elements.length;for(i=0;i<len;i+=1){elements[i]._processed=false;if(elements[i].ty==='gr'){this.resetElements(elements[i].it);}}};RepeaterModifier.prototype.cloneElements=function(elements){var newElements=JSON.parse(JSON.stringify(elements));this.resetElements(newElements);return newElements;};RepeaterModifier.prototype.changeGroupRender=function(elements,renderFlag){var i;var len=elements.length;for(i=0;i<len;i+=1){elements[i]._render=renderFlag;if(elements[i].ty==='gr'){this.changeGroupRender(elements[i].it,renderFlag);}}};RepeaterModifier.prototype.processShapes=function(_isFirstFrame){var items;var itemsTransform;var i;var dir;var cont;var hasReloaded=false;if(this._mdf||_isFirstFrame){var copies=Math.ceil(this.c.v);if(this._groups.length<copies){while(this._groups.length<copies){var group={it:this.cloneElements(this._elements),ty:'gr'};group.it.push({a:{a:0,ix:1,k:[0,0]},nm:'Transform',o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:'tr'});this.arr.splice(0,0,group);this._groups.splice(0,0,group);this._currentCopies+=1;}this.elem.reloadShapes();hasReloaded=true;}cont=0;var renderFlag;for(i=0;i<=this._groups.length-1;i+=1){renderFlag=cont<copies;this._groups[i]._render=renderFlag;this.changeGroupRender(this._groups[i].it,renderFlag);if(!renderFlag){var elems=this.elemsData[i].it;var transformData=elems[elems.length-1];if(transformData.transform.op.v!==0){transformData.transform.op._mdf=true;transformData.transform.op.v=0;}else {transformData.transform.op._mdf=false;}}cont+=1;}this._currentCopies=copies;/// /
		var offset=this.o.v;var offsetModulo=offset%1;var roundOffset=offset>0?Math.floor(offset):Math.ceil(offset);var pProps=this.pMatrix.props;var rProps=this.rMatrix.props;var sProps=this.sMatrix.props;this.pMatrix.reset();this.rMatrix.reset();this.sMatrix.reset();this.tMatrix.reset();this.matrix.reset();var iteration=0;if(offset>0){while(iteration<roundOffset){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,false);iteration+=1;}if(offsetModulo){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,offsetModulo,false);iteration+=offsetModulo;}}else if(offset<0){while(iteration>roundOffset){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,true);iteration-=1;}if(offsetModulo){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-offsetModulo,true);iteration-=offsetModulo;}}i=this.data.m===1?0:this._currentCopies-1;dir=this.data.m===1?1:-1;cont=this._currentCopies;var j;var jLen;while(cont){items=this.elemsData[i].it;itemsTransform=items[items.length-1].transform.mProps.v.props;jLen=itemsTransform.length;items[items.length-1].transform.mProps._mdf=true;items[items.length-1].transform.op._mdf=true;items[items.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1));if(iteration!==0){if(i!==0&&dir===1||i!==this._currentCopies-1&&dir===-1){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,false);}this.matrix.transform(rProps[0],rProps[1],rProps[2],rProps[3],rProps[4],rProps[5],rProps[6],rProps[7],rProps[8],rProps[9],rProps[10],rProps[11],rProps[12],rProps[13],rProps[14],rProps[15]);this.matrix.transform(sProps[0],sProps[1],sProps[2],sProps[3],sProps[4],sProps[5],sProps[6],sProps[7],sProps[8],sProps[9],sProps[10],sProps[11],sProps[12],sProps[13],sProps[14],sProps[15]);this.matrix.transform(pProps[0],pProps[1],pProps[2],pProps[3],pProps[4],pProps[5],pProps[6],pProps[7],pProps[8],pProps[9],pProps[10],pProps[11],pProps[12],pProps[13],pProps[14],pProps[15]);for(j=0;j<jLen;j+=1){itemsTransform[j]=this.matrix.props[j];}this.matrix.reset();}else {this.matrix.reset();for(j=0;j<jLen;j+=1){itemsTransform[j]=this.matrix.props[j];}}iteration+=1;cont-=1;i+=dir;}}else {cont=this._currentCopies;i=0;dir=1;while(cont){items=this.elemsData[i].it;itemsTransform=items[items.length-1].transform.mProps.v.props;items[items.length-1].transform.mProps._mdf=false;items[items.length-1].transform.op._mdf=false;cont-=1;i+=dir;}}return hasReloaded;};RepeaterModifier.prototype.addShape=function(){};function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier);RoundCornersModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.rd=PropertyFactory.getProp(elem,data.r,0,null,this);this._isAnimated=!!this.rd.effectsSequence.length;};RoundCornersModifier.prototype.processPath=function(path,round){var clonedPath=shapePool.newElement();clonedPath.c=path.c;var i;var len=path._length;var currentV;var currentI;var currentO;var closerV;var distance;var newPosPerc;var index=0;var vX;var vY;var oX;var oY;var iX;var iY;for(i=0;i<len;i+=1){currentV=path.v[i];currentO=path.o[i];currentI=path.i[i];if(currentV[0]===currentO[0]&&currentV[1]===currentO[1]&&currentV[0]===currentI[0]&&currentV[1]===currentI[1]){if((i===0||i===len-1)&&!path.c){clonedPath.setTripleAt(currentV[0],currentV[1],currentO[0],currentO[1],currentI[0],currentI[1],index);/* clonedPath.v[index] = currentV;
		                  clonedPath.o[index] = currentO;
		                  clonedPath.i[index] = currentI; */index+=1;}else {if(i===0){closerV=path.v[len-1];}else {closerV=path.v[i-1];}distance=Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));newPosPerc=distance?Math.min(distance/2,round)/distance:0;iX=currentV[0]+(closerV[0]-currentV[0])*newPosPerc;vX=iX;iY=currentV[1]-(currentV[1]-closerV[1])*newPosPerc;vY=iY;oX=vX-(vX-currentV[0])*roundCorner;oY=vY-(vY-currentV[1])*roundCorner;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,index);index+=1;if(i===len-1){closerV=path.v[0];}else {closerV=path.v[i+1];}distance=Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));newPosPerc=distance?Math.min(distance/2,round)/distance:0;oX=currentV[0]+(closerV[0]-currentV[0])*newPosPerc;vX=oX;oY=currentV[1]+(closerV[1]-currentV[1])*newPosPerc;vY=oY;iX=vX-(vX-currentV[0])*roundCorner;iY=vY-(vY-currentV[1])*roundCorner;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,index);index+=1;}}else {clonedPath.setTripleAt(path.v[i][0],path.v[i][1],path.o[i][0],path.o[i][1],path.i[i][0],path.i[i][1],index);index+=1;}}return clonedPath;};RoundCornersModifier.prototype.processShapes=function(_isFirstFrame){var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var rd=this.rd.v;if(rd!==0){var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];localShapeCollection=shapeData.localShapeCollection;if(!(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame)){localShapeCollection.releaseShapes();shapeData.shape._mdf=true;shapePaths=shapeData.shape.paths.shapes;jLen=shapeData.shape.paths._length;for(j=0;j<jLen;j+=1){localShapeCollection.addShape(this.processPath(shapePaths[j],rd));}}shapeData.shape.paths=shapeData.localShapeCollection;}}if(!this.dynamicProperties.length){this._mdf=false;}};function floatEqual(a,b){return Math.abs(a-b)*100000<=Math.min(Math.abs(a),Math.abs(b));}function floatZero(f){return Math.abs(f)<=0.00001;}function lerp(p0,p1,amount){return p0*(1-amount)+p1*amount;}function lerpPoint(p0,p1,amount){return [lerp(p0[0],p1[0],amount),lerp(p0[1],p1[1],amount)];}function quadRoots(a,b,c){// no root
		if(a===0)return [];var s=b*b-4*a*c;// Complex roots
		if(s<0)return [];var singleRoot=-b/(2*a);// 1 root
		if(s===0)return [singleRoot];var delta=Math.sqrt(s)/(2*a);// 2 roots
		return [singleRoot-delta,singleRoot+delta];}function polynomialCoefficients(p0,p1,p2,p3){return [-p0+3*p1-3*p2+p3,3*p0-6*p1+3*p2,-3*p0+3*p1,p0];}function singlePoint(p){return new PolynomialBezier(p,p,p,p,false);}function PolynomialBezier(p0,p1,p2,p3,linearize){if(linearize&&pointEqual(p0,p1)){p1=lerpPoint(p0,p3,1/3);}if(linearize&&pointEqual(p2,p3)){p2=lerpPoint(p0,p3,2/3);}var coeffx=polynomialCoefficients(p0[0],p1[0],p2[0],p3[0]);var coeffy=polynomialCoefficients(p0[1],p1[1],p2[1],p3[1]);this.a=[coeffx[0],coeffy[0]];this.b=[coeffx[1],coeffy[1]];this.c=[coeffx[2],coeffy[2]];this.d=[coeffx[3],coeffy[3]];this.points=[p0,p1,p2,p3];}PolynomialBezier.prototype.point=function(t){return [((this.a[0]*t+this.b[0])*t+this.c[0])*t+this.d[0],((this.a[1]*t+this.b[1])*t+this.c[1])*t+this.d[1]];};PolynomialBezier.prototype.derivative=function(t){return [(3*t*this.a[0]+2*this.b[0])*t+this.c[0],(3*t*this.a[1]+2*this.b[1])*t+this.c[1]];};PolynomialBezier.prototype.tangentAngle=function(t){var p=this.derivative(t);return Math.atan2(p[1],p[0]);};PolynomialBezier.prototype.normalAngle=function(t){var p=this.derivative(t);return Math.atan2(p[0],p[1]);};PolynomialBezier.prototype.inflectionPoints=function(){var denom=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(denom))return [];var tcusp=-0.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/denom;var square=tcusp*tcusp-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/denom;if(square<0)return [];var root=Math.sqrt(square);if(floatZero(root)){if(root>0&&root<1)return [tcusp];return [];}return [tcusp-root,tcusp+root].filter(function(r){return r>0&&r<1;});};PolynomialBezier.prototype.split=function(t){if(t<=0)return [singlePoint(this.points[0]),this];if(t>=1)return [this,singlePoint(this.points[this.points.length-1])];var p10=lerpPoint(this.points[0],this.points[1],t);var p11=lerpPoint(this.points[1],this.points[2],t);var p12=lerpPoint(this.points[2],this.points[3],t);var p20=lerpPoint(p10,p11,t);var p21=lerpPoint(p11,p12,t);var p3=lerpPoint(p20,p21,t);return [new PolynomialBezier(this.points[0],p10,p20,p3,true),new PolynomialBezier(p3,p21,p12,this.points[3],true)];};function extrema(bez,comp){var min=bez.points[0][comp];var max=bez.points[bez.points.length-1][comp];if(min>max){var e=max;max=min;min=e;}// Derivative roots to find min/max
		var f=quadRoots(3*bez.a[comp],2*bez.b[comp],bez.c[comp]);for(var i=0;i<f.length;i+=1){if(f[i]>0&&f[i]<1){var val=bez.point(f[i])[comp];if(val<min)min=val;else if(val>max)max=val;}}return {min:min,max:max};}PolynomialBezier.prototype.bounds=function(){return {x:extrema(this,0),y:extrema(this,1)};};PolynomialBezier.prototype.boundingBox=function(){var bounds=this.bounds();return {left:bounds.x.min,right:bounds.x.max,top:bounds.y.min,bottom:bounds.y.max,width:bounds.x.max-bounds.x.min,height:bounds.y.max-bounds.y.min,cx:(bounds.x.max+bounds.x.min)/2,cy:(bounds.y.max+bounds.y.min)/2};};function intersectData(bez,t1,t2){var box=bez.boundingBox();return {cx:box.cx,cy:box.cy,width:box.width,height:box.height,bez:bez,t:(t1+t2)/2,t1:t1,t2:t2};}function splitData(data){var split=data.bez.split(0.5);return [intersectData(split[0],data.t1,data.t),intersectData(split[1],data.t,data.t2)];}function boxIntersect(b1,b2){return Math.abs(b1.cx-b2.cx)*2<b1.width+b2.width&&Math.abs(b1.cy-b2.cy)*2<b1.height+b2.height;}function intersectsImpl(d1,d2,depth,tolerance,intersections,maxRecursion){if(!boxIntersect(d1,d2))return;if(depth>=maxRecursion||d1.width<=tolerance&&d1.height<=tolerance&&d2.width<=tolerance&&d2.height<=tolerance){intersections.push([d1.t,d2.t]);return;}var d1s=splitData(d1);var d2s=splitData(d2);intersectsImpl(d1s[0],d2s[0],depth+1,tolerance,intersections,maxRecursion);intersectsImpl(d1s[0],d2s[1],depth+1,tolerance,intersections,maxRecursion);intersectsImpl(d1s[1],d2s[0],depth+1,tolerance,intersections,maxRecursion);intersectsImpl(d1s[1],d2s[1],depth+1,tolerance,intersections,maxRecursion);}PolynomialBezier.prototype.intersections=function(other,tolerance,maxRecursion){if(tolerance===undefined)tolerance=2;if(maxRecursion===undefined)maxRecursion=7;var intersections=[];intersectsImpl(intersectData(this,0,1),intersectData(other,0,1),0,tolerance,intersections,maxRecursion);return intersections;};PolynomialBezier.shapeSegment=function(shapePath,index){var nextIndex=(index+1)%shapePath.length();return new PolynomialBezier(shapePath.v[index],shapePath.o[index],shapePath.i[nextIndex],shapePath.v[nextIndex],true);};PolynomialBezier.shapeSegmentInverted=function(shapePath,index){var nextIndex=(index+1)%shapePath.length();return new PolynomialBezier(shapePath.v[nextIndex],shapePath.i[nextIndex],shapePath.o[index],shapePath.v[index],true);};function crossProduct(a,b){return [a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]];}function lineIntersection(start1,end1,start2,end2){var v1=[start1[0],start1[1],1];var v2=[end1[0],end1[1],1];var v3=[start2[0],start2[1],1];var v4=[end2[0],end2[1],1];var r=crossProduct(crossProduct(v1,v2),crossProduct(v3,v4));if(floatZero(r[2]))return null;return [r[0]/r[2],r[1]/r[2]];}function polarOffset(p,angle,length){return [p[0]+Math.cos(angle)*length,p[1]-Math.sin(angle)*length];}function pointDistance(p1,p2){return Math.hypot(p1[0]-p2[0],p1[1]-p2[1]);}function pointEqual(p1,p2){return floatEqual(p1[0],p2[0])&&floatEqual(p1[1],p2[1]);}function ZigZagModifier(){}extendPrototype([ShapeModifier],ZigZagModifier);ZigZagModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.amplitude=PropertyFactory.getProp(elem,data.s,0,null,this);this.frequency=PropertyFactory.getProp(elem,data.r,0,null,this);this.pointsType=PropertyFactory.getProp(elem,data.pt,0,null,this);this._isAnimated=this.amplitude.effectsSequence.length!==0||this.frequency.effectsSequence.length!==0||this.pointsType.effectsSequence.length!==0;};function setPoint(outputBezier,point,angle,direction,amplitude,outAmplitude,inAmplitude){var angO=angle-Math.PI/2;var angI=angle+Math.PI/2;var px=point[0]+Math.cos(angle)*direction*amplitude;var py=point[1]-Math.sin(angle)*direction*amplitude;outputBezier.setTripleAt(px,py,px+Math.cos(angO)*outAmplitude,py-Math.sin(angO)*outAmplitude,px+Math.cos(angI)*inAmplitude,py-Math.sin(angI)*inAmplitude,outputBezier.length());}function getPerpendicularVector(pt1,pt2){var vector=[pt2[0]-pt1[0],pt2[1]-pt1[1]];var rot=-Math.PI*0.5;var rotatedVector=[Math.cos(rot)*vector[0]-Math.sin(rot)*vector[1],Math.sin(rot)*vector[0]+Math.cos(rot)*vector[1]];return rotatedVector;}function getProjectingAngle(path,cur){var prevIndex=cur===0?path.length()-1:cur-1;var nextIndex=(cur+1)%path.length();var prevPoint=path.v[prevIndex];var nextPoint=path.v[nextIndex];var pVector=getPerpendicularVector(prevPoint,nextPoint);return Math.atan2(0,1)-Math.atan2(pVector[1],pVector[0]);}function zigZagCorner(outputBezier,path,cur,amplitude,frequency,pointType,direction){var angle=getProjectingAngle(path,cur);var point=path.v[cur%path._length];var prevPoint=path.v[cur===0?path._length-1:cur-1];var nextPoint=path.v[(cur+1)%path._length];var prevDist=pointType===2?Math.sqrt(Math.pow(point[0]-prevPoint[0],2)+Math.pow(point[1]-prevPoint[1],2)):0;var nextDist=pointType===2?Math.sqrt(Math.pow(point[0]-nextPoint[0],2)+Math.pow(point[1]-nextPoint[1],2)):0;setPoint(outputBezier,path.v[cur%path._length],angle,direction,amplitude,nextDist/((frequency+1)*2),prevDist/((frequency+1)*2));}function zigZagSegment(outputBezier,segment,amplitude,frequency,pointType,direction){for(var i=0;i<frequency;i+=1){var t=(i+1)/(frequency+1);var dist=pointType===2?Math.sqrt(Math.pow(segment.points[3][0]-segment.points[0][0],2)+Math.pow(segment.points[3][1]-segment.points[0][1],2)):0;var angle=segment.normalAngle(t);var point=segment.point(t);setPoint(outputBezier,point,angle,direction,amplitude,dist/((frequency+1)*2),dist/((frequency+1)*2));direction=-direction;}return direction;}ZigZagModifier.prototype.processPath=function(path,amplitude,frequency,pointType){var count=path._length;var clonedPath=shapePool.newElement();clonedPath.c=path.c;if(!path.c){count-=1;}if(count===0)return clonedPath;var direction=-1;var segment=PolynomialBezier.shapeSegment(path,0);zigZagCorner(clonedPath,path,0,amplitude,frequency,pointType,direction);for(var i=0;i<count;i+=1){direction=zigZagSegment(clonedPath,segment,amplitude,frequency,pointType,-direction);if(i===count-1&&!path.c){segment=null;}else {segment=PolynomialBezier.shapeSegment(path,(i+1)%count);}zigZagCorner(clonedPath,path,i+1,amplitude,frequency,pointType,direction);}return clonedPath;};ZigZagModifier.prototype.processShapes=function(_isFirstFrame){var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var amplitude=this.amplitude.v;var frequency=Math.max(0,Math.round(this.frequency.v));var pointType=this.pointsType.v;if(amplitude!==0){var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];localShapeCollection=shapeData.localShapeCollection;if(!(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame)){localShapeCollection.releaseShapes();shapeData.shape._mdf=true;shapePaths=shapeData.shape.paths.shapes;jLen=shapeData.shape.paths._length;for(j=0;j<jLen;j+=1){localShapeCollection.addShape(this.processPath(shapePaths[j],amplitude,frequency,pointType));}}shapeData.shape.paths=shapeData.localShapeCollection;}}if(!this.dynamicProperties.length){this._mdf=false;}};function linearOffset(p1,p2,amount){var angle=Math.atan2(p2[0]-p1[0],p2[1]-p1[1]);return [polarOffset(p1,angle,amount),polarOffset(p2,angle,amount)];}function offsetSegment(segment,amount){var p0;var p1a;var p1b;var p2b;var p2a;var p3;var e;e=linearOffset(segment.points[0],segment.points[1],amount);p0=e[0];p1a=e[1];e=linearOffset(segment.points[1],segment.points[2],amount);p1b=e[0];p2b=e[1];e=linearOffset(segment.points[2],segment.points[3],amount);p2a=e[0];p3=e[1];var p1=lineIntersection(p0,p1a,p1b,p2b);if(p1===null)p1=p1a;var p2=lineIntersection(p2a,p3,p1b,p2b);if(p2===null)p2=p2a;return new PolynomialBezier(p0,p1,p2,p3);}function joinLines(outputBezier,seg1,seg2,lineJoin,miterLimit){var p0=seg1.points[3];var p1=seg2.points[0];// Bevel
		if(lineJoin===3)return p0;// Connected, they don't need a joint
		if(pointEqual(p0,p1))return p0;// Round
		if(lineJoin===2){var angleOut=-seg1.tangentAngle(1);var angleIn=-seg2.tangentAngle(0)+Math.PI;var center=lineIntersection(p0,polarOffset(p0,angleOut+Math.PI/2,100),p1,polarOffset(p1,angleOut+Math.PI/2,100));var radius=center?pointDistance(center,p0):pointDistance(p0,p1)/2;var tan=polarOffset(p0,angleOut,2*radius*roundCorner);outputBezier.setXYAt(tan[0],tan[1],'o',outputBezier.length()-1);tan=polarOffset(p1,angleIn,2*radius*roundCorner);outputBezier.setTripleAt(p1[0],p1[1],p1[0],p1[1],tan[0],tan[1],outputBezier.length());return p1;}// Miter
		var t0=pointEqual(p0,seg1.points[2])?seg1.points[0]:seg1.points[2];var t1=pointEqual(p1,seg2.points[1])?seg2.points[3]:seg2.points[1];var intersection=lineIntersection(t0,p0,p1,t1);if(intersection&&pointDistance(intersection,p0)<miterLimit){outputBezier.setTripleAt(intersection[0],intersection[1],intersection[0],intersection[1],intersection[0],intersection[1],outputBezier.length());return intersection;}return p0;}function getIntersection(a,b){var intersect=a.intersections(b);if(intersect.length&&floatEqual(intersect[0][0],1))intersect.shift();if(intersect.length)return intersect[0];return null;}function pruneSegmentIntersection(a,b){var outa=a.slice();var outb=b.slice();var intersect=getIntersection(a[a.length-1],b[0]);if(intersect){outa[a.length-1]=a[a.length-1].split(intersect[0])[0];outb[0]=b[0].split(intersect[1])[1];}if(a.length>1&&b.length>1){intersect=getIntersection(a[0],b[b.length-1]);if(intersect){return [[a[0].split(intersect[0])[0]],[b[b.length-1].split(intersect[1])[1]]];}}return [outa,outb];}function pruneIntersections(segments){var e;for(var i=1;i<segments.length;i+=1){e=pruneSegmentIntersection(segments[i-1],segments[i]);segments[i-1]=e[0];segments[i]=e[1];}if(segments.length>1){e=pruneSegmentIntersection(segments[segments.length-1],segments[0]);segments[segments.length-1]=e[0];segments[0]=e[1];}return segments;}function offsetSegmentSplit(segment,amount){/*
		      We split each bezier segment into smaller pieces based
		      on inflection points, this ensures the control point
		      polygon is convex.
		        (A cubic bezier can have none, one, or two inflection points)
		    */var flex=segment.inflectionPoints();var left;var right;var split;var mid;if(flex.length===0){return [offsetSegment(segment,amount)];}if(flex.length===1||floatEqual(flex[1],1)){split=segment.split(flex[0]);left=split[0];right=split[1];return [offsetSegment(left,amount),offsetSegment(right,amount)];}split=segment.split(flex[0]);left=split[0];var t=(flex[1]-flex[0])/(1-flex[0]);split=split[1].split(t);mid=split[0];right=split[1];return [offsetSegment(left,amount),offsetSegment(mid,amount),offsetSegment(right,amount)];}function OffsetPathModifier(){}extendPrototype([ShapeModifier],OffsetPathModifier);OffsetPathModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.amount=PropertyFactory.getProp(elem,data.a,0,null,this);this.miterLimit=PropertyFactory.getProp(elem,data.ml,0,null,this);this.lineJoin=data.lj;this._isAnimated=this.amount.effectsSequence.length!==0;};OffsetPathModifier.prototype.processPath=function(inputBezier,amount,lineJoin,miterLimit){var outputBezier=shapePool.newElement();outputBezier.c=inputBezier.c;var count=inputBezier.length();if(!inputBezier.c){count-=1;}var i;var j;var segment;var multiSegments=[];for(i=0;i<count;i+=1){segment=PolynomialBezier.shapeSegment(inputBezier,i);multiSegments.push(offsetSegmentSplit(segment,amount));}if(!inputBezier.c){for(i=count-1;i>=0;i-=1){segment=PolynomialBezier.shapeSegmentInverted(inputBezier,i);multiSegments.push(offsetSegmentSplit(segment,amount));}}multiSegments=pruneIntersections(multiSegments);// Add bezier segments to the output and apply line joints
		var lastPoint=null;var lastSeg=null;for(i=0;i<multiSegments.length;i+=1){var multiSegment=multiSegments[i];if(lastSeg)lastPoint=joinLines(outputBezier,lastSeg,multiSegment[0],lineJoin,miterLimit);lastSeg=multiSegment[multiSegment.length-1];for(j=0;j<multiSegment.length;j+=1){segment=multiSegment[j];if(lastPoint&&pointEqual(segment.points[0],lastPoint)){outputBezier.setXYAt(segment.points[1][0],segment.points[1][1],'o',outputBezier.length()-1);}else {outputBezier.setTripleAt(segment.points[0][0],segment.points[0][1],segment.points[1][0],segment.points[1][1],segment.points[0][0],segment.points[0][1],outputBezier.length());}outputBezier.setTripleAt(segment.points[3][0],segment.points[3][1],segment.points[3][0],segment.points[3][1],segment.points[2][0],segment.points[2][1],outputBezier.length());lastPoint=segment.points[3];}}if(multiSegments.length)joinLines(outputBezier,lastSeg,multiSegments[0][0],lineJoin,miterLimit);return outputBezier;};OffsetPathModifier.prototype.processShapes=function(_isFirstFrame){var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var amount=this.amount.v;var miterLimit=this.miterLimit.v;var lineJoin=this.lineJoin;if(amount!==0){var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];localShapeCollection=shapeData.localShapeCollection;if(!(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame)){localShapeCollection.releaseShapes();shapeData.shape._mdf=true;shapePaths=shapeData.shape.paths.shapes;jLen=shapeData.shape.paths._length;for(j=0;j<jLen;j+=1){localShapeCollection.addShape(this.processPath(shapePaths[j],amount,lineJoin,miterLimit));}}shapeData.shape.paths=shapeData.localShapeCollection;}}if(!this.dynamicProperties.length){this._mdf=false;}};function getFontProperties(fontData){var styles=fontData.fStyle?fontData.fStyle.split(' '):[];var fWeight='normal';var fStyle='normal';var len=styles.length;var styleName;for(var i=0;i<len;i+=1){styleName=styles[i].toLowerCase();switch(styleName){case'italic':fStyle='italic';break;case'bold':fWeight='700';break;case'black':fWeight='900';break;case'medium':fWeight='500';break;case'regular':case'normal':fWeight='400';break;case'light':case'thin':fWeight='200';break;}}return {style:fStyle,weight:fontData.fWeight||fWeight};}var FontManager=function(){var maxWaitingTime=5000;var emptyChar={w:0,size:0,shapes:[],data:{shapes:[]}};var combinedCharacters=[];// Hindi characters
		combinedCharacters=combinedCharacters.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var BLACK_FLAG_CODE_POINT=127988;var CANCEL_TAG_CODE_POINT=917631;var A_TAG_CODE_POINT=917601;var Z_TAG_CODE_POINT=917626;var VARIATION_SELECTOR_16_CODE_POINT=65039;var ZERO_WIDTH_JOINER_CODE_POINT=8205;var REGIONAL_CHARACTER_A_CODE_POINT=127462;var REGIONAL_CHARACTER_Z_CODE_POINT=127487;var surrogateModifiers=['d83cdffb','d83cdffc','d83cdffd','d83cdffe','d83cdfff'];function trimFontOptions(font){var familyArray=font.split(',');var i;var len=familyArray.length;var enabledFamilies=[];for(i=0;i<len;i+=1){if(familyArray[i]!=='sans-serif'&&familyArray[i]!=='monospace'){enabledFamilies.push(familyArray[i]);}}return enabledFamilies.join(',');}function setUpNode(font,family){var parentNode=createTag('span');// Node is invisible to screen readers.
		parentNode.setAttribute('aria-hidden',true);parentNode.style.fontFamily=family;var node=createTag('span');// Characters that vary significantly among different fonts
		node.innerText='giItT1WQy@!-/#';// Visible - so we can measure it - but not on the screen
		parentNode.style.position='absolute';parentNode.style.left='-10000px';parentNode.style.top='-10000px';// Large font size makes even subtle changes obvious
		parentNode.style.fontSize='300px';// Reset any font properties
		parentNode.style.fontVariant='normal';parentNode.style.fontStyle='normal';parentNode.style.fontWeight='normal';parentNode.style.letterSpacing='0';parentNode.appendChild(node);document.body.appendChild(parentNode);// Remember width with no applied web font
		var width=node.offsetWidth;node.style.fontFamily=trimFontOptions(font)+', '+family;return {node:node,w:width,parent:parentNode};}function checkLoadedFonts(){var i;var len=this.fonts.length;var node;var w;var loadedCount=len;for(i=0;i<len;i+=1){if(this.fonts[i].loaded){loadedCount-=1;}else if(this.fonts[i].fOrigin==='n'||this.fonts[i].origin===0){this.fonts[i].loaded=true;}else {node=this.fonts[i].monoCase.node;w=this.fonts[i].monoCase.w;if(node.offsetWidth!==w){loadedCount-=1;this.fonts[i].loaded=true;}else {node=this.fonts[i].sansCase.node;w=this.fonts[i].sansCase.w;if(node.offsetWidth!==w){loadedCount-=1;this.fonts[i].loaded=true;}}if(this.fonts[i].loaded){this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);}}}if(loadedCount!==0&&Date.now()-this.initTime<maxWaitingTime){setTimeout(this.checkLoadedFontsBinded,20);}else {setTimeout(this.setIsLoadedBinded,10);}}function createHelper(fontData,def){var engine=document.body&&def?'svg':'canvas';var helper;var fontProps=getFontProperties(fontData);if(engine==='svg'){var tHelper=createNS('text');tHelper.style.fontSize='100px';// tHelper.style.fontFamily = fontData.fFamily;
		tHelper.setAttribute('font-family',fontData.fFamily);tHelper.setAttribute('font-style',fontProps.style);tHelper.setAttribute('font-weight',fontProps.weight);tHelper.textContent='1';if(fontData.fClass){tHelper.style.fontFamily='inherit';tHelper.setAttribute('class',fontData.fClass);}else {tHelper.style.fontFamily=fontData.fFamily;}def.appendChild(tHelper);helper=tHelper;}else {var tCanvasHelper=new OffscreenCanvas(500,500).getContext('2d');tCanvasHelper.font=fontProps.style+' '+fontProps.weight+' 100px '+fontData.fFamily;helper=tCanvasHelper;}function measure(text){if(engine==='svg'){helper.textContent=text;return helper.getComputedTextLength();}return helper.measureText(text).width;}return {measureText:measure};}function addFonts(fontData,defs){if(!fontData){this.isLoaded=true;return;}if(this.chars){this.isLoaded=true;this.fonts=fontData.list;return;}if(!document.body){this.isLoaded=true;fontData.list.forEach(function(data){data.helper=createHelper(data);data.cache={};});this.fonts=fontData.list;return;}var fontArr=fontData.list;var i;var len=fontArr.length;var _pendingFonts=len;for(i=0;i<len;i+=1){var shouldLoadFont=true;var loadedSelector;var j;fontArr[i].loaded=false;fontArr[i].monoCase=setUpNode(fontArr[i].fFamily,'monospace');fontArr[i].sansCase=setUpNode(fontArr[i].fFamily,'sans-serif');if(!fontArr[i].fPath){fontArr[i].loaded=true;_pendingFonts-=1;}else if(fontArr[i].fOrigin==='p'||fontArr[i].origin===3){loadedSelector=document.querySelectorAll('style[f-forigin="p"][f-family="'+fontArr[i].fFamily+'"], style[f-origin="3"][f-family="'+fontArr[i].fFamily+'"]');if(loadedSelector.length>0){shouldLoadFont=false;}if(shouldLoadFont){var s=createTag('style');s.setAttribute('f-forigin',fontArr[i].fOrigin);s.setAttribute('f-origin',fontArr[i].origin);s.setAttribute('f-family',fontArr[i].fFamily);s.type='text/css';s.innerText='@font-face {font-family: '+fontArr[i].fFamily+"; font-style: normal; src: url('"+fontArr[i].fPath+"');}";defs.appendChild(s);}}else if(fontArr[i].fOrigin==='g'||fontArr[i].origin===1){loadedSelector=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');for(j=0;j<loadedSelector.length;j+=1){if(loadedSelector[j].href.indexOf(fontArr[i].fPath)!==-1){// Font is already loaded
		shouldLoadFont=false;}}if(shouldLoadFont){var l=createTag('link');l.setAttribute('f-forigin',fontArr[i].fOrigin);l.setAttribute('f-origin',fontArr[i].origin);l.type='text/css';l.rel='stylesheet';l.href=fontArr[i].fPath;document.body.appendChild(l);}}else if(fontArr[i].fOrigin==='t'||fontArr[i].origin===2){loadedSelector=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');for(j=0;j<loadedSelector.length;j+=1){if(fontArr[i].fPath===loadedSelector[j].src){// Font is already loaded
		shouldLoadFont=false;}}if(shouldLoadFont){var sc=createTag('link');sc.setAttribute('f-forigin',fontArr[i].fOrigin);sc.setAttribute('f-origin',fontArr[i].origin);sc.setAttribute('rel','stylesheet');sc.setAttribute('href',fontArr[i].fPath);defs.appendChild(sc);}}fontArr[i].helper=createHelper(fontArr[i],defs);fontArr[i].cache={};this.fonts.push(fontArr[i]);}if(_pendingFonts===0){this.isLoaded=true;}else {// On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
		// Adding this timeout seems to fix it
		setTimeout(this.checkLoadedFonts.bind(this),100);}}function addChars(chars){if(!chars){return;}if(!this.chars){this.chars=[];}var i;var len=chars.length;var j;var jLen=this.chars.length;var found;for(i=0;i<len;i+=1){j=0;found=false;while(j<jLen){if(this.chars[j].style===chars[i].style&&this.chars[j].fFamily===chars[i].fFamily&&this.chars[j].ch===chars[i].ch){found=true;}j+=1;}if(!found){this.chars.push(chars[i]);jLen+=1;}}}function getCharData(_char,style,font){var i=0;var len=this.chars.length;while(i<len){if(this.chars[i].ch===_char&&this.chars[i].style===style&&this.chars[i].fFamily===font){return this.chars[i];}i+=1;}if((typeof _char==='string'&&_char.charCodeAt(0)!==13||!_char)&&console&&console.warn// eslint-disable-line no-console
		&&!this._warned){this._warned=true;console.warn('Missing character from exported characters list: ',_char,style,font);// eslint-disable-line no-console
		}return emptyChar;}function measureText(_char2,fontName,size){var fontData=this.getFontByName(fontName);// Using the char instead of char.charCodeAt(0)
		// to avoid collisions between equal chars
		var index=_char2;if(!fontData.cache[index]){var tHelper=fontData.helper;if(_char2===' '){var doubleSize=tHelper.measureText('|'+_char2+'|');var singleSize=tHelper.measureText('||');fontData.cache[index]=(doubleSize-singleSize)/100;}else {fontData.cache[index]=tHelper.measureText(_char2)/100;}}return fontData.cache[index]*size;}function getFontByName(name){var i=0;var len=this.fonts.length;while(i<len){if(this.fonts[i].fName===name){return this.fonts[i];}i+=1;}return this.fonts[0];}function getCodePoint(string){var codePoint=0;var first=string.charCodeAt(0);if(first>=0xD800&&first<=0xDBFF){var second=string.charCodeAt(1);if(second>=0xDC00&&second<=0xDFFF){codePoint=(first-0xD800)*0x400+second-0xDC00+0x10000;}}return codePoint;}// Skin tone modifiers
		function isModifier(firstCharCode,secondCharCode){var sum=firstCharCode.toString(16)+secondCharCode.toString(16);return surrogateModifiers.indexOf(sum)!==-1;}function isZeroWidthJoiner(charCode){return charCode===ZERO_WIDTH_JOINER_CODE_POINT;}// This codepoint may change the appearance of the preceding character.
		// If that is a symbol, dingbat or emoji, U+FE0F forces it to be rendered
		// as a colorful image as compared to a monochrome text variant.
		function isVariationSelector(charCode){return charCode===VARIATION_SELECTOR_16_CODE_POINT;}// The regional indicator symbols are a set of 26 alphabetic Unicode
		/// characters (A–Z) intended to be used to encode ISO 3166-1 alpha-2
		// two-letter country codes in a way that allows optional special treatment.
		function isRegionalCode(string){var codePoint=getCodePoint(string);if(codePoint>=REGIONAL_CHARACTER_A_CODE_POINT&&codePoint<=REGIONAL_CHARACTER_Z_CODE_POINT){return true;}return false;}// Some Emoji implementations represent combinations of
		// two “regional indicator” letters as a single flag symbol.
		function isFlagEmoji(string){return isRegionalCode(string.substr(0,2))&&isRegionalCode(string.substr(2,2));}function isCombinedCharacter(_char3){return combinedCharacters.indexOf(_char3)!==-1;}// Regional flags start with a BLACK_FLAG_CODE_POINT
		// folowed by 5 chars in the TAG range
		// and end with a CANCEL_TAG_CODE_POINT
		function isRegionalFlag(text,index){var codePoint=getCodePoint(text.substr(index,2));if(codePoint!==BLACK_FLAG_CODE_POINT){return false;}var count=0;index+=2;while(count<5){codePoint=getCodePoint(text.substr(index,2));if(codePoint<A_TAG_CODE_POINT||codePoint>Z_TAG_CODE_POINT){return false;}count+=1;index+=2;}return getCodePoint(text.substr(index,2))===CANCEL_TAG_CODE_POINT;}function setIsLoaded(){this.isLoaded=true;}var Font=function Font(){this.fonts=[];this.chars=null;this.typekitLoaded=0;this.isLoaded=false;this._warned=false;this.initTime=Date.now();this.setIsLoadedBinded=this.setIsLoaded.bind(this);this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this);};Font.isModifier=isModifier;Font.isZeroWidthJoiner=isZeroWidthJoiner;Font.isFlagEmoji=isFlagEmoji;Font.isRegionalCode=isRegionalCode;Font.isCombinedCharacter=isCombinedCharacter;Font.isRegionalFlag=isRegionalFlag;Font.isVariationSelector=isVariationSelector;Font.BLACK_FLAG_CODE_POINT=BLACK_FLAG_CODE_POINT;var fontPrototype={addChars:addChars,addFonts:addFonts,getCharData:getCharData,getFontByName:getFontByName,measureText:measureText,checkLoadedFonts:checkLoadedFonts,setIsLoaded:setIsLoaded};Font.prototype=fontPrototype;return Font;}();function SlotManager(animationData){this.animationData=animationData;}SlotManager.prototype.getProp=function(data){if(this.animationData.slots&&this.animationData.slots[data.sid]){return Object.assign(data,this.animationData.slots[data.sid].p);}return data;};function slotFactory(animationData){return new SlotManager(animationData);}function RenderableElement(){}RenderableElement.prototype={initRenderable:function initRenderable(){// layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
		this.isInRange=false;// layer's display state
		this.hidden=false;// If layer's transparency equals 0, it can be hidden
		this.isTransparent=false;// list of animated components
		this.renderableComponents=[];},addRenderableComponent:function addRenderableComponent(component){if(this.renderableComponents.indexOf(component)===-1){this.renderableComponents.push(component);}},removeRenderableComponent:function removeRenderableComponent(component){if(this.renderableComponents.indexOf(component)!==-1){this.renderableComponents.splice(this.renderableComponents.indexOf(component),1);}},prepareRenderableFrame:function prepareRenderableFrame(num){this.checkLayerLimits(num);},checkTransparency:function checkTransparency(){if(this.finalTransform.mProp.o.v<=0){if(!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent){this.isTransparent=true;this.hide();}}else if(this.isTransparent){this.isTransparent=false;this.show();}},/**
		       * @function
		       * Initializes frame related properties.
		       *
		       * @param {number} num
		       * current frame number in Layer's time
		       *
		       */checkLayerLimits:function checkLayerLimits(num){if(this.data.ip-this.data.st<=num&&this.data.op-this.data.st>num){if(this.isInRange!==true){this.globalData._mdf=true;this._mdf=true;this.isInRange=true;this.show();}}else if(this.isInRange!==false){this.globalData._mdf=true;this.isInRange=false;this.hide();}},renderRenderable:function renderRenderable(){var i;var len=this.renderableComponents.length;for(i=0;i<len;i+=1){this.renderableComponents[i].renderFrame(this._isFirstFrame);}/* this.maskManager.renderFrame(this.finalTransform.mat);
		          this.renderableEffectsManager.renderFrame(this._isFirstFrame); */},sourceRectAtTime:function sourceRectAtTime(){return {top:0,left:0,width:100,height:100};},getLayerSize:function getLayerSize(){if(this.data.ty===5){return {w:this.data.textData.width,h:this.data.textData.height};}return {w:this.data.width,h:this.data.height};}};var getBlendMode=function(){var blendModeEnums={0:'source-over',1:'multiply',2:'screen',3:'overlay',4:'darken',5:'lighten',6:'color-dodge',7:'color-burn',8:'hard-light',9:'soft-light',10:'difference',11:'exclusion',12:'hue',13:'saturation',14:'color',15:'luminosity'};return function(mode){return blendModeEnums[mode]||'';};}();function SliderEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function AngleEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function ColorEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,1,0,container);}function PointEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,1,0,container);}function LayerIndexEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function MaskIndexEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function CheckboxEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function NoValueEffect(){this.p={};}function EffectsManager(data,element){var effects=data.ef||[];this.effectElements=[];var i;var len=effects.length;var effectItem;for(i=0;i<len;i+=1){effectItem=new GroupEffect(effects[i],element);this.effectElements.push(effectItem);}}function GroupEffect(data,element){this.init(data,element);}extendPrototype([DynamicPropertyContainer],GroupEffect);GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties;GroupEffect.prototype.init=function(data,element){this.data=data;this.effectElements=[];this.initDynamicPropertyContainer(element);var i;var len=this.data.ef.length;var eff;var effects=this.data.ef;for(i=0;i<len;i+=1){eff=null;switch(effects[i].ty){case 0:eff=new SliderEffect(effects[i],element,this);break;case 1:eff=new AngleEffect(effects[i],element,this);break;case 2:eff=new ColorEffect(effects[i],element,this);break;case 3:eff=new PointEffect(effects[i],element,this);break;case 4:case 7:eff=new CheckboxEffect(effects[i],element,this);break;case 10:eff=new LayerIndexEffect(effects[i],element,this);break;case 11:eff=new MaskIndexEffect(effects[i],element,this);break;case 5:eff=new EffectsManager(effects[i],element);break;// case 6:
		default:eff=new NoValueEffect(effects[i]);break;}if(eff){this.effectElements.push(eff);}}};function BaseElement(){}BaseElement.prototype={checkMasks:function checkMasks(){if(!this.data.hasMask){return false;}var i=0;var len=this.data.masksProperties.length;while(i<len){if(this.data.masksProperties[i].mode!=='n'&&this.data.masksProperties[i].cl!==false){return true;}i+=1;}return false;},initExpressions:function initExpressions(){var expressionsInterfaces=getExpressionInterfaces();if(!expressionsInterfaces){return;}var LayerExpressionInterface=expressionsInterfaces('layer');var EffectsExpressionInterface=expressionsInterfaces('effects');var ShapeExpressionInterface=expressionsInterfaces('shape');var TextExpressionInterface=expressionsInterfaces('text');var CompExpressionInterface=expressionsInterfaces('comp');this.layerInterface=LayerExpressionInterface(this);if(this.data.hasMask&&this.maskManager){this.layerInterface.registerMaskInterface(this.maskManager);}var effectsInterface=EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(effectsInterface);if(this.data.ty===0||this.data.xt){this.compInterface=CompExpressionInterface(this);}else if(this.data.ty===4){this.layerInterface.shapeInterface=ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface);this.layerInterface.content=this.layerInterface.shapeInterface;}else if(this.data.ty===5){this.layerInterface.textInterface=TextExpressionInterface(this);this.layerInterface.text=this.layerInterface.textInterface;}},setBlendMode:function setBlendMode(){var blendModeValue=getBlendMode(this.data.bm);var elem=this.baseElement||this.layerElement;elem.style['mix-blend-mode']=blendModeValue;},initBaseData:function initBaseData(data,globalData,comp){this.globalData=globalData;this.comp=comp;this.data=data;this.layerId=createElementID();// Stretch factor for old animations missing this property.
		if(!this.data.sr){this.data.sr=1;}// effects manager
		this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties);},getType:function getType(){return this.type;},sourceRectAtTime:function sourceRectAtTime(){}};/**
		   * @file
		   * Handles element's layer frame update.
		   * Checks layer in point and out point
		   *
		   */function FrameElement(){}FrameElement.prototype={/**
		       * @function
		       * Initializes frame related properties.
		       *
		       */initFrame:function initFrame(){// set to true when inpoint is rendered
		this._isFirstFrame=false;// list of animated properties
		this.dynamicProperties=[];// If layer has been modified in current tick this will be true
		this._mdf=false;},/**
		       * @function
		       * Calculates all dynamic values
		       *
		       * @param {number} num
		       * current frame number in Layer's time
		       * @param {boolean} isVisible
		       * if layers is currently in range
		       *
		       */prepareProperties:function prepareProperties(num,isVisible){var i;var len=this.dynamicProperties.length;for(i=0;i<len;i+=1){if(isVisible||this._isParent&&this.dynamicProperties[i].propType==='transform'){this.dynamicProperties[i].getValue();if(this.dynamicProperties[i]._mdf){this.globalData._mdf=true;this._mdf=true;}}}},addDynamicProperty:function addDynamicProperty(prop){if(this.dynamicProperties.indexOf(prop)===-1){this.dynamicProperties.push(prop);}}};function FootageElement(data,globalData,comp){this.initFrame();this.initRenderable();this.assetData=globalData.getAssetData(data.refId);this.footageData=globalData.imageLoader.getAsset(this.assetData);this.initBaseData(data,globalData,comp);}FootageElement.prototype.prepareFrame=function(){};extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement);FootageElement.prototype.getBaseElement=function(){return null;};FootageElement.prototype.renderFrame=function(){};FootageElement.prototype.destroy=function(){};FootageElement.prototype.initExpressions=function(){var expressionsInterfaces=getExpressionInterfaces();if(!expressionsInterfaces){return;}var FootageInterface=expressionsInterfaces('footage');this.layerInterface=FootageInterface(this);};FootageElement.prototype.getFootageData=function(){return this.footageData;};function AudioElement(data,globalData,comp){this.initFrame();this.initRenderable();this.assetData=globalData.getAssetData(data.refId);this.initBaseData(data,globalData,comp);this._isPlaying=false;this._canPlay=false;var assetPath=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(assetPath);this._currentTime=0;this.globalData.audioController.addAudio(this);this._volumeMultiplier=1;this._volume=1;this._previousVolume=null;this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};this.lv=PropertyFactory.getProp(this,data.au&&data.au.lv?data.au.lv:{k:[100]},1,0.01,this);}AudioElement.prototype.prepareFrame=function(num){this.prepareRenderableFrame(num,true);this.prepareProperties(num,true);if(!this.tm._placeholder){var timeRemapped=this.tm.v;this._currentTime=timeRemapped;}else {this._currentTime=num/this.data.sr;}this._volume=this.lv.v[0];var totalVolume=this._volume*this._volumeMultiplier;if(this._previousVolume!==totalVolume){this._previousVolume=totalVolume;this.audio.volume(totalVolume);}};extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement);AudioElement.prototype.renderFrame=function(){if(this.isInRange&&this._canPlay){if(!this._isPlaying){this.audio.play();this.audio.seek(this._currentTime/this.globalData.frameRate);this._isPlaying=true;}else if(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>0.1){this.audio.seek(this._currentTime/this.globalData.frameRate);}}};AudioElement.prototype.show=function(){// this.audio.play()
		};AudioElement.prototype.hide=function(){this.audio.pause();this._isPlaying=false;};AudioElement.prototype.pause=function(){this.audio.pause();this._isPlaying=false;this._canPlay=false;};AudioElement.prototype.resume=function(){this._canPlay=true;};AudioElement.prototype.setRate=function(rateValue){this.audio.rate(rateValue);};AudioElement.prototype.volume=function(volumeValue){this._volumeMultiplier=volumeValue;this._previousVolume=volumeValue*this._volume;this.audio.volume(this._previousVolume);};AudioElement.prototype.getBaseElement=function(){return null;};AudioElement.prototype.destroy=function(){};AudioElement.prototype.sourceRectAtTime=function(){};AudioElement.prototype.initExpressions=function(){};function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(num){var i;var len=this.layers.length;var data;this.completeLayers=true;for(i=len-1;i>=0;i-=1){if(!this.elements[i]){data=this.layers[i];if(data.ip-data.st<=num-this.layers[i].st&&data.op-data.st>num-this.layers[i].st){this.buildItem(i);}}this.completeLayers=this.elements[i]?this.completeLayers:false;}this.checkPendingElements();};BaseRenderer.prototype.createItem=function(layer){switch(layer.ty){case 2:return this.createImage(layer);case 0:return this.createComp(layer);case 1:return this.createSolid(layer);case 3:return this.createNull(layer);case 4:return this.createShape(layer);case 5:return this.createText(layer);case 6:return this.createAudio(layer);case 13:return this.createCamera(layer);case 15:return this.createFootage(layer);default:return this.createNull(layer);}};BaseRenderer.prototype.createCamera=function(){throw new Error('You\'re using a 3d camera. Try the html renderer.');};BaseRenderer.prototype.createAudio=function(data){return new AudioElement(data,this.globalData,this);};BaseRenderer.prototype.createFootage=function(data){return new FootageElement(data,this.globalData,this);};BaseRenderer.prototype.buildAllItems=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){this.buildItem(i);}this.checkPendingElements();};BaseRenderer.prototype.includeLayers=function(newLayers){this.completeLayers=false;var i;var len=newLayers.length;var j;var jLen=this.layers.length;for(i=0;i<len;i+=1){j=0;while(j<jLen){if(this.layers[j].id===newLayers[i].id){this.layers[j]=newLayers[i];break;}j+=1;}}};BaseRenderer.prototype.setProjectInterface=function(pInterface){this.globalData.projectInterface=pInterface;};BaseRenderer.prototype.initItems=function(){if(!this.globalData.progressiveLoad){this.buildAllItems();}};BaseRenderer.prototype.buildElementParenting=function(element,parentName,hierarchy){var elements=this.elements;var layers=this.layers;var i=0;var len=layers.length;while(i<len){if(layers[i].ind==parentName){// eslint-disable-line eqeqeq
		if(!elements[i]||elements[i]===true){this.buildItem(i);this.addPendingElement(element);}else {hierarchy.push(elements[i]);elements[i].setAsParent();if(layers[i].parent!==undefined){this.buildElementParenting(element,layers[i].parent,hierarchy);}else {element.setHierarchy(hierarchy);}}}i+=1;}};BaseRenderer.prototype.addPendingElement=function(element){this.pendingElements.push(element);};BaseRenderer.prototype.searchExtraCompositions=function(assets){var i;var len=assets.length;for(i=0;i<len;i+=1){if(assets[i].xt){var comp=this.createComp(assets[i]);comp.initExpressions();this.globalData.projectInterface.registerComposition(comp);}}};BaseRenderer.prototype.getElementById=function(ind){var i;var len=this.elements.length;for(i=0;i<len;i+=1){if(this.elements[i].data.ind===ind){return this.elements[i];}}return null;};BaseRenderer.prototype.getElementByPath=function(path){var pathValue=path.shift();var element;if(typeof pathValue==='number'){element=this.elements[pathValue];}else {var i;var len=this.elements.length;for(i=0;i<len;i+=1){if(this.elements[i].data.nm===pathValue){element=this.elements[i];break;}}}if(path.length===0){return element;}return element.getElementByPath(path);};BaseRenderer.prototype.setupGlobalData=function(animData,fontsContainer){this.globalData.fontManager=new FontManager();this.globalData.slotManager=slotFactory(animData);this.globalData.fontManager.addChars(animData.chars);this.globalData.fontManager.addFonts(animData.fonts,fontsContainer);this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem);this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem);this.globalData.imageLoader=this.animationItem.imagePreloader;this.globalData.audioController=this.animationItem.audioController;this.globalData.frameId=0;this.globalData.frameRate=animData.fr;this.globalData.nm=animData.nm;this.globalData.compSize={w:animData.w,h:animData.h};};var effectTypes={TRANSFORM_EFFECT:'transformEFfect'};function TransformElement(){}TransformElement.prototype={initTransform:function initTransform(){var mat=new Matrix();this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:false,_localMatMdf:false,_opMdf:false,mat:mat,localMat:mat,localOpacity:1};if(this.data.ao){this.finalTransform.mProp.autoOriented=true;}// TODO: check TYPE 11: Guided elements
		if(this.data.ty!==11);},renderTransform:function renderTransform(){this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame;this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame;if(this.hierarchy){var mat;var finalMat=this.finalTransform.mat;var i=0;var len=this.hierarchy.length;// Checking if any of the transformation matrices in the hierarchy chain has changed.
		if(!this.finalTransform._matMdf){while(i<len){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=true;break;}i+=1;}}if(this.finalTransform._matMdf){mat=this.finalTransform.mProp.v.props;finalMat.cloneFromProps(mat);for(i=0;i<len;i+=1){finalMat.multiply(this.hierarchy[i].finalTransform.mProp.v);}}}if(this.finalTransform._matMdf){this.finalTransform._localMatMdf=this.finalTransform._matMdf;}if(this.finalTransform._opMdf){this.finalTransform.localOpacity=this.finalTransform.mProp.o.v;}},renderLocalTransform:function renderLocalTransform(){if(this.localTransforms){var i=0;var len=this.localTransforms.length;this.finalTransform._localMatMdf=this.finalTransform._matMdf;if(!this.finalTransform._localMatMdf||!this.finalTransform._opMdf){while(i<len){if(this.localTransforms[i]._mdf){this.finalTransform._localMatMdf=true;}if(this.localTransforms[i]._opMdf&&!this.finalTransform._opMdf){this.finalTransform.localOpacity=this.finalTransform.mProp.o.v;this.finalTransform._opMdf=true;}i+=1;}}if(this.finalTransform._localMatMdf){var localMat=this.finalTransform.localMat;this.localTransforms[0].matrix.clone(localMat);for(i=1;i<len;i+=1){var lmat=this.localTransforms[i].matrix;localMat.multiply(lmat);}localMat.multiply(this.finalTransform.mat);}if(this.finalTransform._opMdf){var localOp=this.finalTransform.localOpacity;for(i=0;i<len;i+=1){localOp*=this.localTransforms[i].opacity*0.01;}this.finalTransform.localOpacity=localOp;}}},searchEffectTransforms:function searchEffectTransforms(){if(this.renderableEffectsManager){var transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(transformEffects.length){this.localTransforms=[];this.finalTransform.localMat=new Matrix();var i=0;var len=transformEffects.length;for(i=0;i<len;i+=1){this.localTransforms.push(transformEffects[i]);}}}},globalToLocal:function globalToLocal(pt){var transforms=[];transforms.push(this.finalTransform);var flag=true;var comp=this.comp;while(flag){if(comp.finalTransform){if(comp.data.hasMask){transforms.splice(0,0,comp.finalTransform);}comp=comp.comp;}else {flag=false;}}var i;var len=transforms.length;var ptNew;for(i=0;i<len;i+=1){ptNew=transforms[i].mat.applyToPointArray(0,0,0);// ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);
		pt=[pt[0]-ptNew[0],pt[1]-ptNew[1],0];}return pt;},mHelper:new Matrix()};function MaskElement(data,element,globalData){this.data=data;this.element=element;this.globalData=globalData;this.storedData=[];this.masksProperties=this.data.masksProperties||[];this.maskElement=null;var defs=this.globalData.defs;var i;var len=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(len);this.solidPath='';var path;var properties=this.masksProperties;var count=0;var currentMasks=[];var j;var jLen;var layerId=createElementID();var rect;var expansor;var feMorph;var x;var maskType='clipPath';var maskRef='clip-path';for(i=0;i<len;i+=1){if(properties[i].mode!=='a'&&properties[i].mode!=='n'||properties[i].inv||properties[i].o.k!==100||properties[i].o.x){maskType='mask';maskRef='mask';}if((properties[i].mode==='s'||properties[i].mode==='i')&&count===0){rect=createNS('rect');rect.setAttribute('fill','#ffffff');rect.setAttribute('width',this.element.comp.data.w||0);rect.setAttribute('height',this.element.comp.data.h||0);currentMasks.push(rect);}else {rect=null;}path=createNS('path');if(properties[i].mode==='n'){// TODO move this to a factory or to a constructor
		this.viewData[i]={op:PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),elem:path,lastPath:''};defs.appendChild(path);}else {count+=1;path.setAttribute('fill',properties[i].mode==='s'?'#000000':'#ffffff');path.setAttribute('clip-rule','nonzero');var filterID;if(properties[i].x.k!==0){maskType='mask';maskRef='mask';x=PropertyFactory.getProp(this.element,properties[i].x,0,null,this.element);filterID=createElementID();expansor=createNS('filter');expansor.setAttribute('id',filterID);feMorph=createNS('feMorphology');feMorph.setAttribute('operator','erode');feMorph.setAttribute('in','SourceGraphic');feMorph.setAttribute('radius','0');expansor.appendChild(feMorph);defs.appendChild(expansor);path.setAttribute('stroke',properties[i].mode==='s'?'#000000':'#ffffff');}else {feMorph=null;x=null;}// TODO move this to a factory or to a constructor
		this.storedData[i]={elem:path,x:x,expan:feMorph,lastPath:'',lastOperator:'',filterId:filterID,lastRadius:0};if(properties[i].mode==='i'){jLen=currentMasks.length;var g=createNS('g');for(j=0;j<jLen;j+=1){g.appendChild(currentMasks[j]);}var mask=createNS('mask');mask.setAttribute('mask-type','alpha');mask.setAttribute('id',layerId+'_'+count);mask.appendChild(path);defs.appendChild(mask);g.setAttribute('mask','url('+getLocationHref()+'#'+layerId+'_'+count+')');currentMasks.length=0;currentMasks.push(g);}else {currentMasks.push(path);}if(properties[i].inv&&!this.solidPath){this.solidPath=this.createLayerSolidPath();}// TODO move this to a factory or to a constructor
		this.viewData[i]={elem:path,lastPath:'',op:PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),invRect:rect};if(!this.viewData[i].prop.k){this.drawPath(properties[i],this.viewData[i].prop.v,this.viewData[i]);}}}this.maskElement=createNS(maskType);len=currentMasks.length;for(i=0;i<len;i+=1){this.maskElement.appendChild(currentMasks[i]);}if(count>0){this.maskElement.setAttribute('id',layerId);this.element.maskedElement.setAttribute(maskRef,'url('+getLocationHref()+'#'+layerId+')');defs.appendChild(this.maskElement);}if(this.viewData.length){this.element.addRenderableComponent(this);}}MaskElement.prototype.getMaskProperty=function(pos){return this.viewData[pos].prop;};MaskElement.prototype.renderFrame=function(isFirstFrame){var finalMat=this.element.finalTransform.mat;var i;var len=this.masksProperties.length;for(i=0;i<len;i+=1){if(this.viewData[i].prop._mdf||isFirstFrame){this.drawPath(this.masksProperties[i],this.viewData[i].prop.v,this.viewData[i]);}if(this.viewData[i].op._mdf||isFirstFrame){this.viewData[i].elem.setAttribute('fill-opacity',this.viewData[i].op.v);}if(this.masksProperties[i].mode!=='n'){if(this.viewData[i].invRect&&(this.element.finalTransform.mProp._mdf||isFirstFrame)){this.viewData[i].invRect.setAttribute('transform',finalMat.getInverseMatrix().to2dCSS());}if(this.storedData[i].x&&(this.storedData[i].x._mdf||isFirstFrame)){var feMorph=this.storedData[i].expan;if(this.storedData[i].x.v<0){if(this.storedData[i].lastOperator!=='erode'){this.storedData[i].lastOperator='erode';this.storedData[i].elem.setAttribute('filter','url('+getLocationHref()+'#'+this.storedData[i].filterId+')');}feMorph.setAttribute('radius',-this.storedData[i].x.v);}else {if(this.storedData[i].lastOperator!=='dilate'){this.storedData[i].lastOperator='dilate';this.storedData[i].elem.setAttribute('filter',null);}this.storedData[i].elem.setAttribute('stroke-width',this.storedData[i].x.v*2);}}}}};MaskElement.prototype.getMaskelement=function(){return this.maskElement;};MaskElement.prototype.createLayerSolidPath=function(){var path='M0,0 ';path+=' h'+this.globalData.compSize.w;path+=' v'+this.globalData.compSize.h;path+=' h-'+this.globalData.compSize.w;path+=' v-'+this.globalData.compSize.h+' ';return path;};MaskElement.prototype.drawPath=function(pathData,pathNodes,viewData){var pathString=' M'+pathNodes.v[0][0]+','+pathNodes.v[0][1];var i;var len;len=pathNodes._length;for(i=1;i<len;i+=1){// pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
		pathString+=' C'+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1]+' '+pathNodes.i[i][0]+','+pathNodes.i[i][1]+' '+pathNodes.v[i][0]+','+pathNodes.v[i][1];}// pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
		if(pathNodes.c&&len>1){pathString+=' C'+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1]+' '+pathNodes.i[0][0]+','+pathNodes.i[0][1]+' '+pathNodes.v[0][0]+','+pathNodes.v[0][1];}// pathNodes.__renderedString = pathString;
		if(viewData.lastPath!==pathString){var pathShapeValue='';if(viewData.elem){if(pathNodes.c){pathShapeValue=pathData.inv?this.solidPath+pathString:pathString;}viewData.elem.setAttribute('d',pathShapeValue);}viewData.lastPath=pathString;}};MaskElement.prototype.destroy=function(){this.element=null;this.globalData=null;this.maskElement=null;this.data=null;this.masksProperties=null;};var filtersFactory=function(){var ob={};ob.createFilter=createFilter;ob.createAlphaToLuminanceFilter=createAlphaToLuminanceFilter;function createFilter(filId,skipCoordinates){var fil=createNS('filter');fil.setAttribute('id',filId);if(skipCoordinates!==true){fil.setAttribute('filterUnits','objectBoundingBox');fil.setAttribute('x','0%');fil.setAttribute('y','0%');fil.setAttribute('width','100%');fil.setAttribute('height','100%');}return fil;}function createAlphaToLuminanceFilter(){var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');return feColorMatrix;}return ob;}();var featureSupport=function(){var ob={maskType:true,svgLumaHidden:true,offscreenCanvas:typeof OffscreenCanvas!=='undefined'};if(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent)){ob.maskType=false;}if(/firefox/i.test(navigator.userAgent)){ob.svgLumaHidden=false;}return ob;}();var registeredEffects$1={};var idPrefix='filter_result_';function SVGEffects(elem){var i;var source='SourceGraphic';var len=elem.data.ef?elem.data.ef.length:0;var filId=createElementID();var fil=filtersFactory.createFilter(filId,true);var count=0;this.filters=[];var filterManager;for(i=0;i<len;i+=1){filterManager=null;var type=elem.data.ef[i].ty;if(registeredEffects$1[type]){var Effect=registeredEffects$1[type].effect;filterManager=new Effect(fil,elem.effectsManager.effectElements[i],elem,idPrefix+count,source);source=idPrefix+count;if(registeredEffects$1[type].countsAsEffect){count+=1;}}if(filterManager){this.filters.push(filterManager);}}if(count){elem.globalData.defs.appendChild(fil);elem.layerElement.setAttribute('filter','url('+getLocationHref()+'#'+filId+')');}if(this.filters.length){elem.addRenderableComponent(this);}}SVGEffects.prototype.renderFrame=function(_isFirstFrame){var i;var len=this.filters.length;for(i=0;i<len;i+=1){this.filters[i].renderFrame(_isFirstFrame);}};SVGEffects.prototype.getEffects=function(type){var i;var len=this.filters.length;var effects=[];for(i=0;i<len;i+=1){if(this.filters[i].type===type){effects.push(this.filters[i]);}}return effects;};function registerEffect$1(id,effect,countsAsEffect){registeredEffects$1[id]={effect:effect,countsAsEffect:countsAsEffect};}function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function initRendererElement(){this.layerElement=createNS('g');},createContainerElements:function createContainerElements(){this.matteElement=createNS('g');this.transformedElement=this.layerElement;this.maskedElement=this.layerElement;this._sizeChanged=false;var layerElementParent=null;// If this layer acts as a mask for the following layer
		if(this.data.td){this.matteMasks={};var gg=createNS('g');gg.setAttribute('id',this.layerId);gg.appendChild(this.layerElement);layerElementParent=gg;this.globalData.defs.appendChild(gg);}else if(this.data.tt){this.matteElement.appendChild(this.layerElement);layerElementParent=this.matteElement;this.baseElement=this.matteElement;}else {this.baseElement=this.layerElement;}if(this.data.ln){this.layerElement.setAttribute('id',this.data.ln);}if(this.data.cl){this.layerElement.setAttribute('class',this.data.cl);}// Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped
		if(this.data.ty===0&&!this.data.hd){var cp=createNS('clipPath');var pt=createNS('path');pt.setAttribute('d','M0,0 L'+this.data.w+',0 L'+this.data.w+','+this.data.h+' L0,'+this.data.h+'z');var clipId=createElementID();cp.setAttribute('id',clipId);cp.appendChild(pt);this.globalData.defs.appendChild(cp);if(this.checkMasks()){var cpGroup=createNS('g');cpGroup.setAttribute('clip-path','url('+getLocationHref()+'#'+clipId+')');cpGroup.appendChild(this.layerElement);this.transformedElement=cpGroup;if(layerElementParent){layerElementParent.appendChild(this.transformedElement);}else {this.baseElement=this.transformedElement;}}else {this.layerElement.setAttribute('clip-path','url('+getLocationHref()+'#'+clipId+')');}}if(this.data.bm!==0){this.setBlendMode();}},renderElement:function renderElement(){if(this.finalTransform._localMatMdf){this.transformedElement.setAttribute('transform',this.finalTransform.localMat.to2dCSS());}if(this.finalTransform._opMdf){this.transformedElement.setAttribute('opacity',this.finalTransform.localOpacity);}},destroyBaseElement:function destroyBaseElement(){this.layerElement=null;this.matteElement=null;this.maskManager.destroy();},getBaseElement:function getBaseElement(){if(this.data.hd){return null;}return this.baseElement;},createRenderableComponents:function createRenderableComponents(){this.maskManager=new MaskElement(this.data,this,this.globalData);this.renderableEffectsManager=new SVGEffects(this);this.searchEffectTransforms();},getMatte:function getMatte(matteType){// This should not be a common case. But for backward compatibility, we'll create the matte object.
		// It solves animations that have two consecutive layers marked as matte masks.
		// Which is an undefined behavior in AE.
		if(!this.matteMasks){this.matteMasks={};}if(!this.matteMasks[matteType]){var id=this.layerId+'_'+matteType;var filId;var fil;var useElement;var gg;if(matteType===1||matteType===3){var masker=createNS('mask');masker.setAttribute('id',id);masker.setAttribute('mask-type',matteType===3?'luminance':'alpha');useElement=createNS('use');useElement.setAttributeNS('http://www.w3.org/1999/xlink','href','#'+this.layerId);masker.appendChild(useElement);this.globalData.defs.appendChild(masker);if(!featureSupport.maskType&&matteType===1){masker.setAttribute('mask-type','luminance');filId=createElementID();fil=filtersFactory.createFilter(filId);this.globalData.defs.appendChild(fil);fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());gg=createNS('g');gg.appendChild(useElement);masker.appendChild(gg);gg.setAttribute('filter','url('+getLocationHref()+'#'+filId+')');}}else if(matteType===2){var maskGroup=createNS('mask');maskGroup.setAttribute('id',id);maskGroup.setAttribute('mask-type','alpha');var maskGrouper=createNS('g');maskGroup.appendChild(maskGrouper);filId=createElementID();fil=filtersFactory.createFilter(filId);/// /
		var feCTr=createNS('feComponentTransfer');feCTr.setAttribute('in','SourceGraphic');fil.appendChild(feCTr);var feFunc=createNS('feFuncA');feFunc.setAttribute('type','table');feFunc.setAttribute('tableValues','1.0 0.0');feCTr.appendChild(feFunc);/// /
		this.globalData.defs.appendChild(fil);var alphaRect=createNS('rect');alphaRect.setAttribute('width',this.comp.data.w);alphaRect.setAttribute('height',this.comp.data.h);alphaRect.setAttribute('x','0');alphaRect.setAttribute('y','0');alphaRect.setAttribute('fill','#ffffff');alphaRect.setAttribute('opacity','0');maskGrouper.setAttribute('filter','url('+getLocationHref()+'#'+filId+')');maskGrouper.appendChild(alphaRect);useElement=createNS('use');useElement.setAttributeNS('http://www.w3.org/1999/xlink','href','#'+this.layerId);maskGrouper.appendChild(useElement);if(!featureSupport.maskType){maskGroup.setAttribute('mask-type','luminance');fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());gg=createNS('g');maskGrouper.appendChild(alphaRect);gg.appendChild(this.layerElement);maskGrouper.appendChild(gg);}this.globalData.defs.appendChild(maskGroup);}this.matteMasks[matteType]=id;}return this.matteMasks[matteType];},setMatte:function setMatte(id){if(!this.matteElement){return;}this.matteElement.setAttribute('mask','url('+getLocationHref()+'#'+id+')');}};/**
		   * @file
		   * Handles AE's layer parenting property.
		   *
		   */function HierarchyElement(){}HierarchyElement.prototype={/**
		       * @function
		       * Initializes hierarchy properties
		       *
		       */initHierarchy:function initHierarchy(){// element's parent list
		this.hierarchy=[];// if element is parent of another layer _isParent will be true
		this._isParent=false;this.checkParenting();},/**
		       * @function
		       * Sets layer's hierarchy.
		       * @param {array} hierarch
		       * layer's parent list
		       *
		       */setHierarchy:function setHierarchy(hierarchy){this.hierarchy=hierarchy;},/**
		       * @function
		       * Sets layer as parent.
		       *
		       */setAsParent:function setAsParent(){this._isParent=true;},/**
		       * @function
		       * Searches layer's parenting chain
		       *
		       */checkParenting:function checkParenting(){if(this.data.parent!==undefined){this.comp.buildElementParenting(this,this.data.parent,[]);}}};function RenderableDOMElement(){}(function(){var _prototype={initElement:function initElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initTransform(data,globalData,comp);this.initHierarchy();this.initRenderable();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();this.createContent();this.hide();},hide:function hide(){// console.log('HIDE', this);
		if(!this.hidden&&(!this.isInRange||this.isTransparent)){var elem=this.baseElement||this.layerElement;elem.style.display='none';this.hidden=true;}},show:function show(){// console.log('SHOW', this);
		if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var elem=this.baseElement||this.layerElement;elem.style.display='block';}this.hidden=false;this._isFirstFrame=true;}},renderFrame:function renderFrame(){// If it is exported as hidden (data.hd === true) no need to render
		// If it is not visible no need to render
		if(this.data.hd||this.hidden){return;}this.renderTransform();this.renderRenderable();this.renderLocalTransform();this.renderElement();this.renderInnerContent();if(this._isFirstFrame){this._isFirstFrame=false;}},renderInnerContent:function renderInnerContent(){},prepareFrame:function prepareFrame(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);this.checkTransparency();},destroy:function destroy(){this.innerElem=null;this.destroyBaseElement();}};extendPrototype([RenderableElement,createProxyFunction(_prototype)],RenderableDOMElement);})();function IImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);if(this.assetData&&this.assetData.sid){this.assetData=globalData.slotManager.getProp(this.assetData);}this.initElement(data,globalData,comp);this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h};}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement);IImageElement.prototype.createContent=function(){var assetPath=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS('image');this.innerElem.setAttribute('width',this.assetData.w+'px');this.innerElem.setAttribute('height',this.assetData.h+'px');this.innerElem.setAttribute('preserveAspectRatio',this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio);this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);this.layerElement.appendChild(this.innerElem);};IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect;};function ProcessedElement(element,position){this.elem=element;this.pos=position;}function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function addShapeToModifiers(data){var i;var len=this.shapeModifiers.length;for(i=0;i<len;i+=1){this.shapeModifiers[i].addShape(data);}},isShapeInAnimatedModifiers:function isShapeInAnimatedModifiers(data){var i=0;var len=this.shapeModifiers.length;while(i<len){if(this.shapeModifiers[i].isAnimatedWithShape(data)){return true;}}return false;},renderModifiers:function renderModifiers(){if(!this.shapeModifiers.length){return;}var i;var len=this.shapes.length;for(i=0;i<len;i+=1){this.shapes[i].sh.reset();}len=this.shapeModifiers.length;var shouldBreakProcess;for(i=len-1;i>=0;i-=1){shouldBreakProcess=this.shapeModifiers[i].processShapes(this._isFirstFrame);// workaround to fix cases where a repeater resets the shape so the following processes get called twice
		// TODO: find a better solution for this
		if(shouldBreakProcess){break;}}},searchProcessedElement:function searchProcessedElement(elem){var elements=this.processedElements;var i=0;var len=elements.length;while(i<len){if(elements[i].elem===elem){return elements[i].pos;}i+=1;}return 0;},addProcessedElement:function addProcessedElement(elem,pos){var elements=this.processedElements;var i=elements.length;while(i){i-=1;if(elements[i].elem===elem){elements[i].pos=pos;return;}}elements.push(new ProcessedElement(elem,pos));},prepareFrame:function prepareFrame(num){this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);}};var lineCapEnum={1:'butt',2:'round',3:'square'};var lineJoinEnum={1:'miter',2:'round',3:'bevel'};function SVGShapeData(transformers,level,shape){this.caches=[];this.styles=[];this.transformers=transformers;this.lStr='';this.sh=shape;this.lvl=level;// TODO find if there are some cases where _isAnimated can be false.
		// For now, since shapes add up with other shapes. They have to be calculated every time.
		// One way of finding out is checking if all styles associated to this shape depend only of this shape
		this._isAnimated=!!shape.k;// TODO: commenting this for now since all shapes are animated
		var i=0;var len=transformers.length;while(i<len){if(transformers[i].mProps.dynamicProperties.length){this._isAnimated=true;break;}i+=1;}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=true;};function SVGStyleData(data,level){this.data=data;this.type=data.ty;this.d='';this.lvl=level;this._mdf=false;this.closed=data.hd===true;this.pElem=createNS('path');this.msElem=null;}SVGStyleData.prototype.reset=function(){this.d='';this._mdf=false;};function DashProperty(elem,data,renderer,container){this.elem=elem;this.frameId=-1;this.dataProps=createSizedArray(data.length);this.renderer=renderer;this.k=false;this.dashStr='';this.dashArray=createTypedArray('float32',data.length?data.length-1:0);this.dashoffset=createTypedArray('float32',1);this.initDynamicPropertyContainer(container);var i;var len=data.length||0;var prop;for(i=0;i<len;i+=1){prop=PropertyFactory.getProp(elem,data[i].v,0,0,this);this.k=prop.k||this.k;this.dataProps[i]={n:data[i].n,p:prop};}if(!this.k){this.getValue(true);}this._isAnimated=this.k;}DashProperty.prototype.getValue=function(forceRender){if(this.elem.globalData.frameId===this.frameId&&!forceRender){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();this._mdf=this._mdf||forceRender;if(this._mdf){var i=0;var len=this.dataProps.length;if(this.renderer==='svg'){this.dashStr='';}for(i=0;i<len;i+=1){if(this.dataProps[i].n!=='o'){if(this.renderer==='svg'){this.dashStr+=' '+this.dataProps[i].p.v;}else {this.dashArray[i]=this.dataProps[i].p.v;}}else {this.dashoffset[0]=this.dataProps[i].p.v;}}}};extendPrototype([DynamicPropertyContainer],DashProperty);function SVGStrokeStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.w=PropertyFactory.getProp(elem,data.w,0,null,this);this.d=new DashProperty(elem,data.d||{},'svg',this);this.c=PropertyFactory.getProp(elem,data.c,1,255,this);this.style=styleOb;this._isAnimated=!!this._isAnimated;}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);function SVGFillStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.c=PropertyFactory.getProp(elem,data.c,1,255,this);this.style=styleOb;}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);function SVGNoStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.style=styleOb;}extendPrototype([DynamicPropertyContainer],SVGNoStyleData);function GradientProperty(elem,data,container){this.data=data;this.c=createTypedArray('uint8c',data.p*4);var cLength=data.k.k[0].s?data.k.k[0].s.length-data.p*4:data.k.k.length-data.p*4;this.o=createTypedArray('float32',cLength);this._cmdf=false;this._omdf=false;this._collapsable=this.checkCollapsable();this._hasOpacity=cLength;this.initDynamicPropertyContainer(container);this.prop=PropertyFactory.getProp(elem,data.k,1,null,this);this.k=this.prop.k;this.getValue(true);}GradientProperty.prototype.comparePoints=function(values,points){var i=0;var len=this.o.length/2;var diff;while(i<len){diff=Math.abs(values[i*4]-values[points*4+i*2]);if(diff>0.01){return false;}i+=1;}return true;};GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4){return false;}if(this.data.k.k[0].s){var i=0;var len=this.data.k.k.length;while(i<len){if(!this.comparePoints(this.data.k.k[i].s,this.data.p)){return false;}i+=1;}}else if(!this.comparePoints(this.data.k.k,this.data.p)){return false;}return true;};GradientProperty.prototype.getValue=function(forceRender){this.prop.getValue();this._mdf=false;this._cmdf=false;this._omdf=false;if(this.prop._mdf||forceRender){var i;var len=this.data.p*4;var mult;var val;for(i=0;i<len;i+=1){mult=i%4===0?100:255;val=Math.round(this.prop.v[i]*mult);if(this.c[i]!==val){this.c[i]=val;this._cmdf=!forceRender;}}if(this.o.length){len=this.prop.v.length;for(i=this.data.p*4;i<len;i+=1){mult=i%2===0?100:1;val=i%2===0?Math.round(this.prop.v[i]*100):this.prop.v[i];if(this.o[i-this.data.p*4]!==val){this.o[i-this.data.p*4]=val;this._omdf=!forceRender;}}}this._mdf=!forceRender;}};extendPrototype([DynamicPropertyContainer],GradientProperty);function SVGGradientFillStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.initGradientData(elem,data,styleOb);}SVGGradientFillStyleData.prototype.initGradientData=function(elem,data,styleOb){this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.s=PropertyFactory.getProp(elem,data.s,1,null,this);this.e=PropertyFactory.getProp(elem,data.e,1,null,this);this.h=PropertyFactory.getProp(elem,data.h||{k:0},0,0.01,this);this.a=PropertyFactory.getProp(elem,data.a||{k:0},0,degToRads,this);this.g=new GradientProperty(elem,data.g,this);this.style=styleOb;this.stops=[];this.setGradientData(styleOb.pElem,data);this.setGradientOpacity(data,styleOb);this._isAnimated=!!this._isAnimated;};SVGGradientFillStyleData.prototype.setGradientData=function(pathElement,data){var gradientId=createElementID();var gfill=createNS(data.t===1?'linearGradient':'radialGradient');gfill.setAttribute('id',gradientId);gfill.setAttribute('spreadMethod','pad');gfill.setAttribute('gradientUnits','userSpaceOnUse');var stops=[];var stop;var j;var jLen;jLen=data.g.p*4;for(j=0;j<jLen;j+=4){stop=createNS('stop');gfill.appendChild(stop);stops.push(stop);}pathElement.setAttribute(data.ty==='gf'?'fill':'stroke','url('+getLocationHref()+'#'+gradientId+')');this.gf=gfill;this.cst=stops;};SVGGradientFillStyleData.prototype.setGradientOpacity=function(data,styleOb){if(this.g._hasOpacity&&!this.g._collapsable){var stop;var j;var jLen;var mask=createNS('mask');var maskElement=createNS('path');mask.appendChild(maskElement);var opacityId=createElementID();var maskId=createElementID();mask.setAttribute('id',maskId);var opFill=createNS(data.t===1?'linearGradient':'radialGradient');opFill.setAttribute('id',opacityId);opFill.setAttribute('spreadMethod','pad');opFill.setAttribute('gradientUnits','userSpaceOnUse');jLen=data.g.k.k[0].s?data.g.k.k[0].s.length:data.g.k.k.length;var stops=this.stops;for(j=data.g.p*4;j<jLen;j+=2){stop=createNS('stop');stop.setAttribute('stop-color','rgb(255,255,255)');opFill.appendChild(stop);stops.push(stop);}maskElement.setAttribute(data.ty==='gf'?'fill':'stroke','url('+getLocationHref()+'#'+opacityId+')');if(data.ty==='gs'){maskElement.setAttribute('stroke-linecap',lineCapEnum[data.lc||2]);maskElement.setAttribute('stroke-linejoin',lineJoinEnum[data.lj||2]);if(data.lj===1){maskElement.setAttribute('stroke-miterlimit',data.ml);}}this.of=opFill;this.ms=mask;this.ost=stops;this.maskId=maskId;styleOb.msElem=maskElement;}};extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);function SVGGradientStrokeStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.w=PropertyFactory.getProp(elem,data.w,0,null,this);this.d=new DashProperty(elem,data.d||{},'svg',this);this.initGradientData(elem,data,styleOb);this._isAnimated=!!this._isAnimated;}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);function ShapeGroupData(){this.it=[];this.prevViewData=[];this.gr=createNS('g');}function SVGTransformData(mProps,op,container){this.transform={mProps:mProps,op:op,container:container};this.elements=[];this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length;}var buildShapeString=function buildShapeString(pathNodes,length,closed,mat){if(length===0){return '';}var _o=pathNodes.o;var _i=pathNodes.i;var _v=pathNodes.v;var i;var shapeString=' M'+mat.applyToPointStringified(_v[0][0],_v[0][1]);for(i=1;i<length;i+=1){shapeString+=' C'+mat.applyToPointStringified(_o[i-1][0],_o[i-1][1])+' '+mat.applyToPointStringified(_i[i][0],_i[i][1])+' '+mat.applyToPointStringified(_v[i][0],_v[i][1]);}if(closed&&length){shapeString+=' C'+mat.applyToPointStringified(_o[i-1][0],_o[i-1][1])+' '+mat.applyToPointStringified(_i[0][0],_i[0][1])+' '+mat.applyToPointStringified(_v[0][0],_v[0][1]);shapeString+='z';}return shapeString;};var SVGElementsRenderer=function(){var _identityMatrix=new Matrix();var _matrixHelper=new Matrix();var ob={createRenderFunction:createRenderFunction};function createRenderFunction(data){switch(data.ty){case'fl':return renderFill;case'gf':return renderGradient;case'gs':return renderGradientStroke;case'st':return renderStroke;case'sh':case'el':case'rc':case'sr':return renderPath;case'tr':return renderContentTransform;case'no':return renderNoop;default:return null;}}function renderContentTransform(styleData,itemData,isFirstFrame){if(isFirstFrame||itemData.transform.op._mdf){itemData.transform.container.setAttribute('opacity',itemData.transform.op.v);}if(isFirstFrame||itemData.transform.mProps._mdf){itemData.transform.container.setAttribute('transform',itemData.transform.mProps.v.to2dCSS());}}function renderNoop(){}function renderPath(styleData,itemData,isFirstFrame){var j;var jLen;var pathStringTransformed;var redraw;var pathNodes;var l;var lLen=itemData.styles.length;var lvl=itemData.lvl;var paths;var mat;var iterations;var k;for(l=0;l<lLen;l+=1){redraw=itemData.sh._mdf||isFirstFrame;if(itemData.styles[l].lvl<lvl){mat=_matrixHelper.reset();iterations=lvl-itemData.styles[l].lvl;k=itemData.transformers.length-1;while(!redraw&&iterations>0){redraw=itemData.transformers[k].mProps._mdf||redraw;iterations-=1;k-=1;}if(redraw){iterations=lvl-itemData.styles[l].lvl;k=itemData.transformers.length-1;while(iterations>0){mat.multiply(itemData.transformers[k].mProps.v);iterations-=1;k-=1;}}}else {mat=_identityMatrix;}paths=itemData.sh.paths;jLen=paths._length;if(redraw){pathStringTransformed='';for(j=0;j<jLen;j+=1){pathNodes=paths.shapes[j];if(pathNodes&&pathNodes._length){pathStringTransformed+=buildShapeString(pathNodes,pathNodes._length,pathNodes.c,mat);}}itemData.caches[l]=pathStringTransformed;}else {pathStringTransformed=itemData.caches[l];}itemData.styles[l].d+=styleData.hd===true?'':pathStringTransformed;itemData.styles[l]._mdf=redraw||itemData.styles[l]._mdf;}}function renderFill(styleData,itemData,isFirstFrame){var styleElem=itemData.style;if(itemData.c._mdf||isFirstFrame){styleElem.pElem.setAttribute('fill','rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')');}if(itemData.o._mdf||isFirstFrame){styleElem.pElem.setAttribute('fill-opacity',itemData.o.v);}}function renderGradientStroke(styleData,itemData,isFirstFrame){renderGradient(styleData,itemData,isFirstFrame);renderStroke(styleData,itemData,isFirstFrame);}function renderGradient(styleData,itemData,isFirstFrame){var gfill=itemData.gf;var hasOpacity=itemData.g._hasOpacity;var pt1=itemData.s.v;var pt2=itemData.e.v;if(itemData.o._mdf||isFirstFrame){var attr=styleData.ty==='gf'?'fill-opacity':'stroke-opacity';itemData.style.pElem.setAttribute(attr,itemData.o.v);}if(itemData.s._mdf||isFirstFrame){var attr1=styleData.t===1?'x1':'cx';var attr2=attr1==='x1'?'y1':'cy';gfill.setAttribute(attr1,pt1[0]);gfill.setAttribute(attr2,pt1[1]);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute(attr1,pt1[0]);itemData.of.setAttribute(attr2,pt1[1]);}}var stops;var i;var len;var stop;if(itemData.g._cmdf||isFirstFrame){stops=itemData.cst;var cValues=itemData.g.c;len=stops.length;for(i=0;i<len;i+=1){stop=stops[i];stop.setAttribute('offset',cValues[i*4]+'%');stop.setAttribute('stop-color','rgb('+cValues[i*4+1]+','+cValues[i*4+2]+','+cValues[i*4+3]+')');}}if(hasOpacity&&(itemData.g._omdf||isFirstFrame)){var oValues=itemData.g.o;if(itemData.g._collapsable){stops=itemData.cst;}else {stops=itemData.ost;}len=stops.length;for(i=0;i<len;i+=1){stop=stops[i];if(!itemData.g._collapsable){stop.setAttribute('offset',oValues[i*2]+'%');}stop.setAttribute('stop-opacity',oValues[i*2+1]);}}if(styleData.t===1){if(itemData.e._mdf||isFirstFrame){gfill.setAttribute('x2',pt2[0]);gfill.setAttribute('y2',pt2[1]);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('x2',pt2[0]);itemData.of.setAttribute('y2',pt2[1]);}}}else {var rad;if(itemData.s._mdf||itemData.e._mdf||isFirstFrame){rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));gfill.setAttribute('r',rad);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('r',rad);}}if(itemData.e._mdf||itemData.h._mdf||itemData.a._mdf||isFirstFrame){if(!rad){rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));}var ang=Math.atan2(pt2[1]-pt1[1],pt2[0]-pt1[0]);var percent=itemData.h.v;if(percent>=1){percent=0.99;}else if(percent<=-1){percent=-0.99;}var dist=rad*percent;var x=Math.cos(ang+itemData.a.v)*dist+pt1[0];var y=Math.sin(ang+itemData.a.v)*dist+pt1[1];gfill.setAttribute('fx',x);gfill.setAttribute('fy',y);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('fx',x);itemData.of.setAttribute('fy',y);}}// gfill.setAttribute('fy','200');
		}}function renderStroke(styleData,itemData,isFirstFrame){var styleElem=itemData.style;var d=itemData.d;if(d&&(d._mdf||isFirstFrame)&&d.dashStr){styleElem.pElem.setAttribute('stroke-dasharray',d.dashStr);styleElem.pElem.setAttribute('stroke-dashoffset',d.dashoffset[0]);}if(itemData.c&&(itemData.c._mdf||isFirstFrame)){styleElem.pElem.setAttribute('stroke','rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')');}if(itemData.o._mdf||isFirstFrame){styleElem.pElem.setAttribute('stroke-opacity',itemData.o.v);}if(itemData.w._mdf||isFirstFrame){styleElem.pElem.setAttribute('stroke-width',itemData.w.v);if(styleElem.msElem){styleElem.msElem.setAttribute('stroke-width',itemData.w.v);}}}return ob;}();function SVGShapeElement(data,globalData,comp){// List of drawable elements
		this.shapes=[];// Full shape data
		this.shapesData=data.shapes;// List of styles that will be applied to shapes
		this.stylesList=[];// List of modifiers that will be applied to shapes
		this.shapeModifiers=[];// List of items in shape tree
		this.itemsData=[];// List of items in previous shape tree
		this.processedElements=[];// List of animated components
		this.animatedContents=[];this.initElement(data,globalData,comp);// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
		// List of elements that have been created
		this.prevViewData=[];// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
		}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement);SVGShapeElement.prototype.initSecondaryElement=function(){};SVGShapeElement.prototype.identityMatrix=new Matrix();SVGShapeElement.prototype.buildExpressionInterface=function(){};SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],true);this.filterUniqueShapes();};/*
		  This method searches for multiple shapes that affect a single element and one of them is animated
		  */SVGShapeElement.prototype.filterUniqueShapes=function(){var i;var len=this.shapes.length;var shape;var j;var jLen=this.stylesList.length;var style;var tempShapes=[];var areAnimated=false;for(j=0;j<jLen;j+=1){style=this.stylesList[j];areAnimated=false;tempShapes.length=0;for(i=0;i<len;i+=1){shape=this.shapes[i];if(shape.styles.indexOf(style)!==-1){tempShapes.push(shape);areAnimated=shape._isAnimated||areAnimated;}}if(tempShapes.length>1&&areAnimated){this.setShapesAsAnimated(tempShapes);}}};SVGShapeElement.prototype.setShapesAsAnimated=function(shapes){var i;var len=shapes.length;for(i=0;i<len;i+=1){shapes[i].setAsAnimated();}};SVGShapeElement.prototype.createStyleElement=function(data,level){// TODO: prevent drawing of hidden styles
		var elementData;var styleOb=new SVGStyleData(data,level);var pathElement=styleOb.pElem;if(data.ty==='st'){elementData=new SVGStrokeStyleData(this,data,styleOb);}else if(data.ty==='fl'){elementData=new SVGFillStyleData(this,data,styleOb);}else if(data.ty==='gf'||data.ty==='gs'){var GradientConstructor=data.ty==='gf'?SVGGradientFillStyleData:SVGGradientStrokeStyleData;elementData=new GradientConstructor(this,data,styleOb);this.globalData.defs.appendChild(elementData.gf);if(elementData.maskId){this.globalData.defs.appendChild(elementData.ms);this.globalData.defs.appendChild(elementData.of);pathElement.setAttribute('mask','url('+getLocationHref()+'#'+elementData.maskId+')');}}else if(data.ty==='no'){elementData=new SVGNoStyleData(this,data,styleOb);}if(data.ty==='st'||data.ty==='gs'){pathElement.setAttribute('stroke-linecap',lineCapEnum[data.lc||2]);pathElement.setAttribute('stroke-linejoin',lineJoinEnum[data.lj||2]);pathElement.setAttribute('fill-opacity','0');if(data.lj===1){pathElement.setAttribute('stroke-miterlimit',data.ml);}}if(data.r===2){pathElement.setAttribute('fill-rule','evenodd');}if(data.ln){pathElement.setAttribute('id',data.ln);}if(data.cl){pathElement.setAttribute('class',data.cl);}if(data.bm){pathElement.style['mix-blend-mode']=getBlendMode(data.bm);}this.stylesList.push(styleOb);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.createGroupElement=function(data){var elementData=new ShapeGroupData();if(data.ln){elementData.gr.setAttribute('id',data.ln);}if(data.cl){elementData.gr.setAttribute('class',data.cl);}if(data.bm){elementData.gr.style['mix-blend-mode']=getBlendMode(data.bm);}return elementData;};SVGShapeElement.prototype.createTransformElement=function(data,container){var transformProperty=TransformPropertyFactory.getTransformProperty(this,data,this);var elementData=new SVGTransformData(transformProperty,transformProperty.o,container);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.createShapeElement=function(data,ownTransformers,level){var ty=4;if(data.ty==='rc'){ty=5;}else if(data.ty==='el'){ty=6;}else if(data.ty==='sr'){ty=7;}var shapeProperty=ShapePropertyFactory.getShapeProp(this,data,ty,this);var elementData=new SVGShapeData(ownTransformers,level,shapeProperty);this.shapes.push(elementData);this.addShapeToModifiers(elementData);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.addToAnimatedContents=function(data,element){var i=0;var len=this.animatedContents.length;while(i<len){if(this.animatedContents[i].element===element){return;}i+=1;}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(data),element:element,data:data});};SVGShapeElement.prototype.setElementStyles=function(elementData){var arr=elementData.styles;var j;var jLen=this.stylesList.length;for(j=0;j<jLen;j+=1){if(!this.stylesList[j].closed){arr.push(this.stylesList[j]);}}};SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=true;var i;var len=this.itemsData.length;for(i=0;i<len;i+=1){this.prevViewData[i]=this.itemsData[i];}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],true);this.filterUniqueShapes();len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();}this.renderModifiers();};SVGShapeElement.prototype.searchShapes=function(arr,itemsData,prevViewData,container,level,transformers,render){var ownTransformers=[].concat(transformers);var i;var len=arr.length-1;var j;var jLen;var ownStyles=[];var ownModifiers=[];var currentTransform;var modifier;var processedPos;for(i=len;i>=0;i-=1){processedPos=this.searchProcessedElement(arr[i]);if(!processedPos){arr[i]._render=render;}else {itemsData[i]=prevViewData[processedPos-1];}if(arr[i].ty==='fl'||arr[i].ty==='st'||arr[i].ty==='gf'||arr[i].ty==='gs'||arr[i].ty==='no'){if(!processedPos){itemsData[i]=this.createStyleElement(arr[i],level);}else {itemsData[i].style.closed=false;}if(arr[i]._render){if(itemsData[i].style.pElem.parentNode!==container){container.appendChild(itemsData[i].style.pElem);}}ownStyles.push(itemsData[i].style);}else if(arr[i].ty==='gr'){if(!processedPos){itemsData[i]=this.createGroupElement(arr[i]);}else {jLen=itemsData[i].it.length;for(j=0;j<jLen;j+=1){itemsData[i].prevViewData[j]=itemsData[i].it[j];}}this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,itemsData[i].gr,level+1,ownTransformers,render);if(arr[i]._render){if(itemsData[i].gr.parentNode!==container){container.appendChild(itemsData[i].gr);}}}else if(arr[i].ty==='tr'){if(!processedPos){itemsData[i]=this.createTransformElement(arr[i],container);}currentTransform=itemsData[i].transform;ownTransformers.push(currentTransform);}else if(arr[i].ty==='sh'||arr[i].ty==='rc'||arr[i].ty==='el'||arr[i].ty==='sr'){if(!processedPos){itemsData[i]=this.createShapeElement(arr[i],ownTransformers,level);}this.setElementStyles(itemsData[i]);}else if(arr[i].ty==='tm'||arr[i].ty==='rd'||arr[i].ty==='ms'||arr[i].ty==='pb'||arr[i].ty==='zz'||arr[i].ty==='op'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);modifier.init(this,arr[i]);itemsData[i]=modifier;this.shapeModifiers.push(modifier);}else {modifier=itemsData[i];modifier.closed=false;}ownModifiers.push(modifier);}else if(arr[i].ty==='rp'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);itemsData[i]=modifier;modifier.init(this,arr,i,itemsData);this.shapeModifiers.push(modifier);render=false;}else {modifier=itemsData[i];modifier.closed=true;}ownModifiers.push(modifier);}this.addProcessedElement(arr[i],i+1);}len=ownStyles.length;for(i=0;i<len;i+=1){ownStyles[i].closed=true;}len=ownModifiers.length;for(i=0;i<len;i+=1){ownModifiers[i].closed=true;}};SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){this.stylesList[i].reset();}this.renderShape();for(i=0;i<len;i+=1){if(this.stylesList[i]._mdf||this._isFirstFrame){if(this.stylesList[i].msElem){this.stylesList[i].msElem.setAttribute('d',this.stylesList[i].d);// Adding M0 0 fixes same mask bug on all browsers
		this.stylesList[i].d='M0 0'+this.stylesList[i].d;}this.stylesList[i].pElem.setAttribute('d',this.stylesList[i].d||'M0 0');}}};SVGShapeElement.prototype.renderShape=function(){var i;var len=this.animatedContents.length;var animatedContent;for(i=0;i<len;i+=1){animatedContent=this.animatedContents[i];if((this._isFirstFrame||animatedContent.element._isAnimated)&&animatedContent.data!==true){animatedContent.fn(animatedContent.data,animatedContent.element,this._isFirstFrame);}}};SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement();this.shapesData=null;this.itemsData=null;};function LetterProps(o,sw,sc,fc,m,p){this.o=o;this.sw=sw;this.sc=sc;this.fc=fc;this.m=m;this.p=p;this._mdf={o:true,sw:!!sw,sc:!!sc,fc:!!fc,m:true,p:true};}LetterProps.prototype.update=function(o,sw,sc,fc,m,p){this._mdf.o=false;this._mdf.sw=false;this._mdf.sc=false;this._mdf.fc=false;this._mdf.m=false;this._mdf.p=false;var updated=false;if(this.o!==o){this.o=o;this._mdf.o=true;updated=true;}if(this.sw!==sw){this.sw=sw;this._mdf.sw=true;updated=true;}if(this.sc!==sc){this.sc=sc;this._mdf.sc=true;updated=true;}if(this.fc!==fc){this.fc=fc;this._mdf.fc=true;updated=true;}if(this.m!==m){this.m=m;this._mdf.m=true;updated=true;}if(p.length&&(this.p[0]!==p[0]||this.p[1]!==p[1]||this.p[4]!==p[4]||this.p[5]!==p[5]||this.p[12]!==p[12]||this.p[13]!==p[13])){this.p=p;this._mdf.p=true;updated=true;}return updated;};function TextProperty(elem,data){this._frameId=initialDefaultFrame;this.pv='';this.v='';this.kf=false;this._isFirstFrame=true;this._mdf=false;if(data.d&&data.d.sid){data.d=elem.globalData.slotManager.getProp(data.d);}this.data=data;this.elem=elem;this.comp=this.elem.comp;this.keysIndex=0;this.canResize=false;this.minimumFontSize=1;this.effectsSequence=[];this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:'',fStyle:'',fWeight:'',fc:'',j:'',justifyOffset:'',l:[],lh:0,lineWidths:[],ls:'',of:'',s:'',sc:'',sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:false,strokeColorAnim:false,strokeWidthAnim:false,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:false};this.copyData(this.currentData,this.data.d.k[0].s);if(!this.searchProperty()){this.completeTextData(this.currentData);}}TextProperty.prototype.defaultBoxWidth=[0,0];TextProperty.prototype.copyData=function(obj,data){for(var s in data){if(Object.prototype.hasOwnProperty.call(data,s)){obj[s]=data[s];}}return obj;};TextProperty.prototype.setCurrentData=function(data){if(!data.__complete){this.completeTextData(data);}this.currentData=data;this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth;this._mdf=true;};TextProperty.prototype.searchProperty=function(){return this.searchKeyframes();};TextProperty.prototype.searchKeyframes=function(){this.kf=this.data.d.k.length>1;if(this.kf){this.addEffect(this.getKeyframeValue.bind(this));}return this.kf;};TextProperty.prototype.addEffect=function(effectFunction){this.effectsSequence.push(effectFunction);this.elem.addDynamicProperty(this);};TextProperty.prototype.getValue=function(_finalValue){if((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!_finalValue){return;}this.currentData.t=this.data.d.k[this.keysIndex].s.t;var currentValue=this.currentData;var currentIndex=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return;}this.lock=true;this._mdf=false;var i;var len=this.effectsSequence.length;var finalValue=_finalValue||this.data.d.k[this.keysIndex].s;for(i=0;i<len;i+=1){// Checking if index changed to prevent creating a new object every time the expression updates.
		if(currentIndex!==this.keysIndex){finalValue=this.effectsSequence[i](finalValue,finalValue.t);}else {finalValue=this.effectsSequence[i](this.currentData,finalValue.t);}}if(currentValue!==finalValue){this.setCurrentData(finalValue);}this.v=this.currentData;this.pv=this.v;this.lock=false;this.frameId=this.elem.globalData.frameId;};TextProperty.prototype.getKeyframeValue=function(){var textKeys=this.data.d.k;var frameNum=this.elem.comp.renderedFrame;var i=0;var len=textKeys.length;while(i<=len-1){if(i===len-1||textKeys[i+1].t>frameNum){break;}i+=1;}if(this.keysIndex!==i){this.keysIndex=i;}return this.data.d.k[this.keysIndex].s;};TextProperty.prototype.buildFinalText=function(text){var charactersArray=[];var i=0;var len=text.length;var charCode;var secondCharCode;var shouldCombine=false;var shouldCombineNext=false;var currentChars='';while(i<len){shouldCombine=shouldCombineNext;shouldCombineNext=false;charCode=text.charCodeAt(i);currentChars=text.charAt(i);if(FontManager.isCombinedCharacter(charCode)){shouldCombine=true;// It's a potential surrogate pair (this is the High surrogate)
		}else if(charCode>=0xD800&&charCode<=0xDBFF){if(FontManager.isRegionalFlag(text,i)){currentChars=text.substr(i,14);}else {secondCharCode=text.charCodeAt(i+1);// It's a surrogate pair (this is the Low surrogate)
		if(secondCharCode>=0xDC00&&secondCharCode<=0xDFFF){if(FontManager.isModifier(charCode,secondCharCode)){currentChars=text.substr(i,2);shouldCombine=true;}else if(FontManager.isFlagEmoji(text.substr(i,4))){currentChars=text.substr(i,4);}else {currentChars=text.substr(i,2);}}}}else if(charCode>0xDBFF){secondCharCode=text.charCodeAt(i+1);if(FontManager.isVariationSelector(charCode)){shouldCombine=true;}}else if(FontManager.isZeroWidthJoiner(charCode)){shouldCombine=true;shouldCombineNext=true;}if(shouldCombine){charactersArray[charactersArray.length-1]+=currentChars;shouldCombine=false;}else {charactersArray.push(currentChars);}i+=currentChars.length;}return charactersArray;};TextProperty.prototype.completeTextData=function(documentData){documentData.__complete=true;var fontManager=this.elem.globalData.fontManager;var data=this.data;var letters=[];var i;var len;var newLineFlag;var index=0;var val;var anchorGrouping=data.m.g;var currentSize=0;var currentPos=0;var currentLine=0;var lineWidths=[];var lineWidth=0;var maxLineWidth=0;var j;var jLen;var fontData=fontManager.getFontByName(documentData.f);var charData;var cLength=0;var fontProps=getFontProperties(fontData);documentData.fWeight=fontProps.weight;documentData.fStyle=fontProps.style;documentData.finalSize=documentData.s;documentData.finalText=this.buildFinalText(documentData.t);len=documentData.finalText.length;documentData.finalLineHeight=documentData.lh;var trackingOffset=documentData.tr/1000*documentData.finalSize;var charCode;if(documentData.sz){var flag=true;var boxWidth=documentData.sz[0];var boxHeight=documentData.sz[1];var currentHeight;var finalText;while(flag){finalText=this.buildFinalText(documentData.t);currentHeight=0;lineWidth=0;len=finalText.length;trackingOffset=documentData.tr/1000*documentData.finalSize;var lastSpaceIndex=-1;for(i=0;i<len;i+=1){charCode=finalText[i].charCodeAt(0);newLineFlag=false;if(finalText[i]===' '){lastSpaceIndex=i;}else if(charCode===13||charCode===3){lineWidth=0;newLineFlag=true;currentHeight+=documentData.finalLineHeight||documentData.finalSize*1.2;}if(fontManager.chars){charData=fontManager.getCharData(finalText[i],fontData.fStyle,fontData.fFamily);cLength=newLineFlag?0:charData.w*documentData.finalSize/100;}else {// tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
		cLength=fontManager.measureText(finalText[i],documentData.f,documentData.finalSize);}if(lineWidth+cLength>boxWidth&&finalText[i]!==' '){if(lastSpaceIndex===-1){len+=1;}else {i=lastSpaceIndex;}currentHeight+=documentData.finalLineHeight||documentData.finalSize*1.2;finalText.splice(i,lastSpaceIndex===i?1:0,'\r');// finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);
		lastSpaceIndex=-1;lineWidth=0;}else {lineWidth+=cLength;lineWidth+=trackingOffset;}}currentHeight+=fontData.ascent*documentData.finalSize/100;if(this.canResize&&documentData.finalSize>this.minimumFontSize&&boxHeight<currentHeight){documentData.finalSize-=1;documentData.finalLineHeight=documentData.finalSize*documentData.lh/documentData.s;}else {documentData.finalText=finalText;len=documentData.finalText.length;flag=false;}}}lineWidth=-trackingOffset;cLength=0;var uncollapsedSpaces=0;var currentChar;for(i=0;i<len;i+=1){newLineFlag=false;currentChar=documentData.finalText[i];charCode=currentChar.charCodeAt(0);if(charCode===13||charCode===3){uncollapsedSpaces=0;lineWidths.push(lineWidth);maxLineWidth=lineWidth>maxLineWidth?lineWidth:maxLineWidth;lineWidth=-2*trackingOffset;val='';newLineFlag=true;currentLine+=1;}else {val=currentChar;}if(fontManager.chars){charData=fontManager.getCharData(currentChar,fontData.fStyle,fontManager.getFontByName(documentData.f).fFamily);cLength=newLineFlag?0:charData.w*documentData.finalSize/100;}else {// var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
		// tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
		cLength=fontManager.measureText(val,documentData.f,documentData.finalSize);}//
		if(currentChar===' '){uncollapsedSpaces+=cLength+trackingOffset;}else {lineWidth+=cLength+trackingOffset+uncollapsedSpaces;uncollapsedSpaces=0;}letters.push({l:cLength,an:cLength,add:currentSize,n:newLineFlag,anIndexes:[],val:val,line:currentLine,animatorJustifyOffset:0});if(anchorGrouping==2){// eslint-disable-line eqeqeq
		currentSize+=cLength;if(val===''||val===' '||i===len-1){if(val===''||val===' '){currentSize-=cLength;}while(currentPos<=i){letters[currentPos].an=currentSize;letters[currentPos].ind=index;letters[currentPos].extra=cLength;currentPos+=1;}index+=1;currentSize=0;}}else if(anchorGrouping==3){// eslint-disable-line eqeqeq
		currentSize+=cLength;if(val===''||i===len-1){if(val===''){currentSize-=cLength;}while(currentPos<=i){letters[currentPos].an=currentSize;letters[currentPos].ind=index;letters[currentPos].extra=cLength;currentPos+=1;}currentSize=0;index+=1;}}else {letters[index].ind=index;letters[index].extra=0;index+=1;}}documentData.l=letters;maxLineWidth=lineWidth>maxLineWidth?lineWidth:maxLineWidth;lineWidths.push(lineWidth);if(documentData.sz){documentData.boxWidth=documentData.sz[0];documentData.justifyOffset=0;}else {documentData.boxWidth=maxLineWidth;switch(documentData.j){case 1:documentData.justifyOffset=-documentData.boxWidth;break;case 2:documentData.justifyOffset=-documentData.boxWidth/2;break;default:documentData.justifyOffset=0;}}documentData.lineWidths=lineWidths;var animators=data.a;var animatorData;var letterData;jLen=animators.length;var based;var ind;var indexes=[];for(j=0;j<jLen;j+=1){animatorData=animators[j];if(animatorData.a.sc){documentData.strokeColorAnim=true;}if(animatorData.a.sw){documentData.strokeWidthAnim=true;}if(animatorData.a.fc||animatorData.a.fh||animatorData.a.fs||animatorData.a.fb){documentData.fillColorAnim=true;}ind=0;based=animatorData.s.b;for(i=0;i<len;i+=1){letterData=letters[i];letterData.anIndexes[j]=ind;if(based==1&&letterData.val!==''||based==2&&letterData.val!==''&&letterData.val!==' '||based==3&&(letterData.n||letterData.val==' '||i==len-1)||based==4&&(letterData.n||i==len-1)){// eslint-disable-line eqeqeq
		if(animatorData.s.rn===1){indexes.push(ind);}ind+=1;}}data.a[j].s.totalChars=ind;var currentInd=-1;var newInd;if(animatorData.s.rn===1){for(i=0;i<len;i+=1){letterData=letters[i];if(currentInd!=letterData.anIndexes[j]){// eslint-disable-line eqeqeq
		currentInd=letterData.anIndexes[j];newInd=indexes.splice(Math.floor(Math.random()*indexes.length),1)[0];}letterData.anIndexes[j]=newInd;}}}documentData.yOffset=documentData.finalLineHeight||documentData.finalSize*1.2;documentData.ls=documentData.ls||0;documentData.ascent=fontData.ascent*documentData.finalSize/100;};TextProperty.prototype.updateDocumentData=function(newData,index){index=index===undefined?this.keysIndex:index;var dData=this.copyData({},this.data.d.k[index].s);dData=this.copyData(dData,newData);this.data.d.k[index].s=dData;this.recalculate(index);this.setCurrentData(dData);this.elem.addDynamicProperty(this);};TextProperty.prototype.recalculate=function(index){var dData=this.data.d.k[index].s;dData.__complete=false;this.keysIndex=0;this._isFirstFrame=true;this.getValue(dData);};TextProperty.prototype.canResizeFont=function(_canResize){this.canResize=_canResize;this.recalculate(this.keysIndex);this.elem.addDynamicProperty(this);};TextProperty.prototype.setMinimumFontSize=function(_fontValue){this.minimumFontSize=Math.floor(_fontValue)||1;this.recalculate(this.keysIndex);this.elem.addDynamicProperty(this);};var TextSelectorProp=function(){var max=Math.max;var min=Math.min;var floor=Math.floor;function TextSelectorPropFactory(elem,data){this._currentTextLength=-1;this.k=false;this.data=data;this.elem=elem;this.comp=elem.comp;this.finalS=0;this.finalE=0;this.initDynamicPropertyContainer(elem);this.s=PropertyFactory.getProp(elem,data.s||{k:0},0,0,this);if('e'in data){this.e=PropertyFactory.getProp(elem,data.e,0,0,this);}else {this.e={v:100};}this.o=PropertyFactory.getProp(elem,data.o||{k:0},0,0,this);this.xe=PropertyFactory.getProp(elem,data.xe||{k:0},0,0,this);this.ne=PropertyFactory.getProp(elem,data.ne||{k:0},0,0,this);this.sm=PropertyFactory.getProp(elem,data.sm||{k:100},0,0,this);this.a=PropertyFactory.getProp(elem,data.a,0,0.01,this);if(!this.dynamicProperties.length){this.getValue();}}TextSelectorPropFactory.prototype={getMult:function getMult(ind){if(this._currentTextLength!==this.elem.textProperty.currentData.l.length){this.getValue();}var x1=0;var y1=0;var x2=1;var y2=1;if(this.ne.v>0){x1=this.ne.v/100.0;}else {y1=-this.ne.v/100.0;}if(this.xe.v>0){x2=1.0-this.xe.v/100.0;}else {y2=1.0+this.xe.v/100.0;}var easer=BezierFactory.getBezierEasing(x1,y1,x2,y2).get;var mult=0;var s=this.finalS;var e=this.finalE;var type=this.data.sh;if(type===2){if(e===s){mult=ind>=e?1:0;}else {mult=max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));}mult=easer(mult);}else if(type===3){if(e===s){mult=ind>=e?0:1;}else {mult=1-max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));}mult=easer(mult);}else if(type===4){if(e===s){mult=0;}else {mult=max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));if(mult<0.5){mult*=2;}else {mult=1-2*(mult-0.5);}}mult=easer(mult);}else if(type===5){if(e===s){mult=0;}else {var tot=e-s;/* ind += 0.5;
		                      mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind; */ind=min(max(0,ind+0.5-s),e-s);var x=-tot/2+ind;var a=tot/2;mult=Math.sqrt(1-x*x/(a*a));}mult=easer(mult);}else if(type===6){if(e===s){mult=0;}else {ind=min(max(0,ind+0.5-s),e-s);mult=(1+Math.cos(Math.PI+Math.PI*2*ind/(e-s)))/2;// eslint-disable-line
		}mult=easer(mult);}else {if(ind>=floor(s)){if(ind-s<0){mult=max(0,min(min(e,1)-(s-ind),1));}else {mult=max(0,min(e-ind,1));}}mult=easer(mult);}// Smoothness implementation.
		// The smoothness represents a reduced range of the original [0; 1] range.
		// if smoothness is 25%, the new range will be [0.375; 0.625]
		// Steps are:
		// - find the lower value of the new range (threshold)
		// - if multiplier is smaller than that value, floor it to 0
		// - if it is larger,
		//     - subtract the threshold
		//     - divide it by the smoothness (this will return the range to [0; 1])
		// Note: If it doesn't work on some scenarios, consider applying it before the easer.
		if(this.sm.v!==100){var smoothness=this.sm.v*0.01;if(smoothness===0){smoothness=0.00000001;}var threshold=0.5-smoothness*0.5;if(mult<threshold){mult=0;}else {mult=(mult-threshold)/smoothness;if(mult>1){mult=1;}}}return mult*this.a.v;},getValue:function getValue(newCharsFlag){this.iterateDynamicProperties();this._mdf=newCharsFlag||this._mdf;this._currentTextLength=this.elem.textProperty.currentData.l.length||0;if(newCharsFlag&&this.data.r===2){this.e.v=this._currentTextLength;}var divisor=this.data.r===2?1:100/this.data.totalChars;var o=this.o.v/divisor;var s=this.s.v/divisor+o;var e=this.e.v/divisor+o;if(s>e){var _s=s;s=e;e=_s;}this.finalS=s;this.finalE=e;}};extendPrototype([DynamicPropertyContainer],TextSelectorPropFactory);function getTextSelectorProp(elem,data,arr){return new TextSelectorPropFactory(elem,data);}return {getTextSelectorProp:getTextSelectorProp};}();function TextAnimatorDataProperty(elem,animatorProps,container){var defaultData={propType:false};var getProp=PropertyFactory.getProp;var textAnimatorAnimatables=animatorProps.a;this.a={r:textAnimatorAnimatables.r?getProp(elem,textAnimatorAnimatables.r,0,degToRads,container):defaultData,rx:textAnimatorAnimatables.rx?getProp(elem,textAnimatorAnimatables.rx,0,degToRads,container):defaultData,ry:textAnimatorAnimatables.ry?getProp(elem,textAnimatorAnimatables.ry,0,degToRads,container):defaultData,sk:textAnimatorAnimatables.sk?getProp(elem,textAnimatorAnimatables.sk,0,degToRads,container):defaultData,sa:textAnimatorAnimatables.sa?getProp(elem,textAnimatorAnimatables.sa,0,degToRads,container):defaultData,s:textAnimatorAnimatables.s?getProp(elem,textAnimatorAnimatables.s,1,0.01,container):defaultData,a:textAnimatorAnimatables.a?getProp(elem,textAnimatorAnimatables.a,1,0,container):defaultData,o:textAnimatorAnimatables.o?getProp(elem,textAnimatorAnimatables.o,0,0.01,container):defaultData,p:textAnimatorAnimatables.p?getProp(elem,textAnimatorAnimatables.p,1,0,container):defaultData,sw:textAnimatorAnimatables.sw?getProp(elem,textAnimatorAnimatables.sw,0,0,container):defaultData,sc:textAnimatorAnimatables.sc?getProp(elem,textAnimatorAnimatables.sc,1,0,container):defaultData,fc:textAnimatorAnimatables.fc?getProp(elem,textAnimatorAnimatables.fc,1,0,container):defaultData,fh:textAnimatorAnimatables.fh?getProp(elem,textAnimatorAnimatables.fh,0,0,container):defaultData,fs:textAnimatorAnimatables.fs?getProp(elem,textAnimatorAnimatables.fs,0,0.01,container):defaultData,fb:textAnimatorAnimatables.fb?getProp(elem,textAnimatorAnimatables.fb,0,0.01,container):defaultData,t:textAnimatorAnimatables.t?getProp(elem,textAnimatorAnimatables.t,0,0,container):defaultData};this.s=TextSelectorProp.getTextSelectorProp(elem,animatorProps.s,container);this.s.t=animatorProps.s.t;}function TextAnimatorProperty(textData,renderType,elem){this._isFirstFrame=true;this._hasMaskedPath=false;this._frameId=-1;this._textData=textData;this._renderType=renderType;this._elem=elem;this._animatorsData=createSizedArray(this._textData.a.length);this._pathData={};this._moreOptions={alignment:{}};this.renderedLetters=[];this.lettersChangedFlag=false;this.initDynamicPropertyContainer(elem);}TextAnimatorProperty.prototype.searchProperties=function(){var i;var len=this._textData.a.length;var animatorProps;var getProp=PropertyFactory.getProp;for(i=0;i<len;i+=1){animatorProps=this._textData.a[i];this._animatorsData[i]=new TextAnimatorDataProperty(this._elem,animatorProps,this);}if(this._textData.p&&'m'in this._textData.p){this._pathData={a:getProp(this._elem,this._textData.p.a,0,0,this),f:getProp(this._elem,this._textData.p.f,0,0,this),l:getProp(this._elem,this._textData.p.l,0,0,this),r:getProp(this._elem,this._textData.p.r,0,0,this),p:getProp(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)};this._hasMaskedPath=true;}else {this._hasMaskedPath=false;}this._moreOptions.alignment=getProp(this._elem,this._textData.m.a,1,0,this);};TextAnimatorProperty.prototype.getMeasures=function(documentData,lettersChangedFlag){this.lettersChangedFlag=lettersChangedFlag;if(!this._mdf&&!this._isFirstFrame&&!lettersChangedFlag&&(!this._hasMaskedPath||!this._pathData.m._mdf)){return;}this._isFirstFrame=false;var alignment=this._moreOptions.alignment.v;var animators=this._animatorsData;var textData=this._textData;var matrixHelper=this.mHelper;var renderType=this._renderType;var renderedLettersCount=this.renderedLetters.length;var xPos;var yPos;var i;var len;var letters=documentData.l;var pathInfo;var currentLength;var currentPoint;var segmentLength;var flag;var pointInd;var segmentInd;var prevPoint;var points;var segments;var partialLength;var totalLength;var perc;var tanAngle;var mask;if(this._hasMaskedPath){mask=this._pathData.m;if(!this._pathData.n||this._pathData._mdf){var paths=mask.v;if(this._pathData.r.v){paths=paths.reverse();}// TODO: release bezier data cached from previous pathInfo: this._pathData.pi
		pathInfo={tLength:0,segments:[]};len=paths._length-1;var bezierData;totalLength=0;for(i=0;i<len;i+=1){bezierData=bez.buildBezierData(paths.v[i],paths.v[i+1],[paths.o[i][0]-paths.v[i][0],paths.o[i][1]-paths.v[i][1]],[paths.i[i+1][0]-paths.v[i+1][0],paths.i[i+1][1]-paths.v[i+1][1]]);pathInfo.tLength+=bezierData.segmentLength;pathInfo.segments.push(bezierData);totalLength+=bezierData.segmentLength;}i=len;if(mask.v.c){bezierData=bez.buildBezierData(paths.v[i],paths.v[0],[paths.o[i][0]-paths.v[i][0],paths.o[i][1]-paths.v[i][1]],[paths.i[0][0]-paths.v[0][0],paths.i[0][1]-paths.v[0][1]]);pathInfo.tLength+=bezierData.segmentLength;pathInfo.segments.push(bezierData);totalLength+=bezierData.segmentLength;}this._pathData.pi=pathInfo;}pathInfo=this._pathData.pi;currentLength=this._pathData.f.v;segmentInd=0;pointInd=1;segmentLength=0;flag=true;segments=pathInfo.segments;if(currentLength<0&&mask.v.c){if(pathInfo.tLength<Math.abs(currentLength)){currentLength=-Math.abs(currentLength)%pathInfo.tLength;}segmentInd=segments.length-1;points=segments[segmentInd].points;pointInd=points.length-1;while(currentLength<0){currentLength+=points[pointInd].partialLength;pointInd-=1;if(pointInd<0){segmentInd-=1;points=segments[segmentInd].points;pointInd=points.length-1;}}}points=segments[segmentInd].points;prevPoint=points[pointInd-1];currentPoint=points[pointInd];partialLength=currentPoint.partialLength;}len=letters.length;xPos=0;yPos=0;var yOff=documentData.finalSize*1.2*0.714;var firstLine=true;var animatorProps;var animatorSelector;var j;var jLen;var letterValue;jLen=animators.length;var mult;var ind=-1;var offf;var xPathPos;var yPathPos;var initPathPos=currentLength;var initSegmentInd=segmentInd;var initPointInd=pointInd;var currentLine=-1;var elemOpacity;var sc;var sw;var fc;var k;var letterSw;var letterSc;var letterFc;var letterM='';var letterP=this.defaultPropsArray;var letterO;//
		if(documentData.j===2||documentData.j===1){var animatorJustifyOffset=0;var animatorFirstCharOffset=0;var justifyOffsetMult=documentData.j===2?-0.5:-1;var lastIndex=0;var isNewLine=true;for(i=0;i<len;i+=1){if(letters[i].n){if(animatorJustifyOffset){animatorJustifyOffset+=animatorFirstCharOffset;}while(lastIndex<i){letters[lastIndex].animatorJustifyOffset=animatorJustifyOffset;lastIndex+=1;}animatorJustifyOffset=0;isNewLine=true;}else {for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.t.propType){if(isNewLine&&documentData.j===2){animatorFirstCharOffset+=animatorProps.t.v*justifyOffsetMult;}animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorJustifyOffset+=animatorProps.t.v*mult[0]*justifyOffsetMult;}else {animatorJustifyOffset+=animatorProps.t.v*mult*justifyOffsetMult;}}}isNewLine=false;}}if(animatorJustifyOffset){animatorJustifyOffset+=animatorFirstCharOffset;}while(lastIndex<i){letters[lastIndex].animatorJustifyOffset=animatorJustifyOffset;lastIndex+=1;}}//
		for(i=0;i<len;i+=1){matrixHelper.reset();elemOpacity=1;if(letters[i].n){xPos=0;yPos+=documentData.yOffset;yPos+=firstLine?1:0;currentLength=initPathPos;firstLine=false;if(this._hasMaskedPath){segmentInd=initSegmentInd;pointInd=initPointInd;points=segments[segmentInd].points;prevPoint=points[pointInd-1];currentPoint=points[pointInd];partialLength=currentPoint.partialLength;segmentLength=0;}letterM='';letterFc='';letterSw='';letterO='';letterP=this.defaultPropsArray;}else {if(this._hasMaskedPath){if(currentLine!==letters[i].line){switch(documentData.j){case 1:currentLength+=totalLength-documentData.lineWidths[letters[i].line];break;case 2:currentLength+=(totalLength-documentData.lineWidths[letters[i].line])/2;break;}currentLine=letters[i].line;}if(ind!==letters[i].ind){if(letters[ind]){currentLength+=letters[ind].extra;}currentLength+=letters[i].an/2;ind=letters[i].ind;}currentLength+=alignment[0]*letters[i].an*0.005;var animatorOffset=0;for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.p.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorOffset+=animatorProps.p.v[0]*mult[0];}else {animatorOffset+=animatorProps.p.v[0]*mult;}}if(animatorProps.a.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorOffset+=animatorProps.a.v[0]*mult[0];}else {animatorOffset+=animatorProps.a.v[0]*mult;}}}flag=true;// Force alignment only works with a single line for now
		if(this._pathData.a.v){currentLength=letters[0].an*0.5+(totalLength-this._pathData.f.v-letters[0].an*0.5-letters[letters.length-1].an*0.5)*ind/(len-1);currentLength+=this._pathData.f.v;}while(flag){if(segmentLength+partialLength>=currentLength+animatorOffset||!points){perc=(currentLength+animatorOffset-segmentLength)/currentPoint.partialLength;xPathPos=prevPoint.point[0]+(currentPoint.point[0]-prevPoint.point[0])*perc;yPathPos=prevPoint.point[1]+(currentPoint.point[1]-prevPoint.point[1])*perc;matrixHelper.translate(-alignment[0]*letters[i].an*0.005,-(alignment[1]*yOff)*0.01);flag=false;}else if(points){segmentLength+=currentPoint.partialLength;pointInd+=1;if(pointInd>=points.length){pointInd=0;segmentInd+=1;if(!segments[segmentInd]){if(mask.v.c){pointInd=0;segmentInd=0;points=segments[segmentInd].points;}else {segmentLength-=currentPoint.partialLength;points=null;}}else {points=segments[segmentInd].points;}}if(points){prevPoint=currentPoint;currentPoint=points[pointInd];partialLength=currentPoint.partialLength;}}}offf=letters[i].an/2-letters[i].add;matrixHelper.translate(-offf,0,0);}else {offf=letters[i].an/2-letters[i].add;matrixHelper.translate(-offf,0,0);// Grouping alignment
		matrixHelper.translate(-alignment[0]*letters[i].an*0.005,-alignment[1]*yOff*0.01,0);}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.t.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);// This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"
		if(xPos!==0||documentData.j!==0){if(this._hasMaskedPath){if(mult.length){currentLength+=animatorProps.t.v*mult[0];}else {currentLength+=animatorProps.t.v*mult;}}else if(mult.length){xPos+=animatorProps.t.v*mult[0];}else {xPos+=animatorProps.t.v*mult;}}}}if(documentData.strokeWidthAnim){sw=documentData.sw||0;}if(documentData.strokeColorAnim){if(documentData.sc){sc=[documentData.sc[0],documentData.sc[1],documentData.sc[2]];}else {sc=[0,0,0];}}if(documentData.fillColorAnim&&documentData.fc){fc=[documentData.fc[0],documentData.fc[1],documentData.fc[2]];}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.a.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){matrixHelper.translate(-animatorProps.a.v[0]*mult[0],-animatorProps.a.v[1]*mult[1],animatorProps.a.v[2]*mult[2]);}else {matrixHelper.translate(-animatorProps.a.v[0]*mult,-animatorProps.a.v[1]*mult,animatorProps.a.v[2]*mult);}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.s.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){matrixHelper.scale(1+(animatorProps.s.v[0]-1)*mult[0],1+(animatorProps.s.v[1]-1)*mult[1],1);}else {matrixHelper.scale(1+(animatorProps.s.v[0]-1)*mult,1+(animatorProps.s.v[1]-1)*mult,1);}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(animatorProps.sk.propType){if(mult.length){matrixHelper.skewFromAxis(-animatorProps.sk.v*mult[0],animatorProps.sa.v*mult[1]);}else {matrixHelper.skewFromAxis(-animatorProps.sk.v*mult,animatorProps.sa.v*mult);}}if(animatorProps.r.propType){if(mult.length){matrixHelper.rotateZ(-animatorProps.r.v*mult[2]);}else {matrixHelper.rotateZ(-animatorProps.r.v*mult);}}if(animatorProps.ry.propType){if(mult.length){matrixHelper.rotateY(animatorProps.ry.v*mult[1]);}else {matrixHelper.rotateY(animatorProps.ry.v*mult);}}if(animatorProps.rx.propType){if(mult.length){matrixHelper.rotateX(animatorProps.rx.v*mult[0]);}else {matrixHelper.rotateX(animatorProps.rx.v*mult);}}if(animatorProps.o.propType){if(mult.length){elemOpacity+=(animatorProps.o.v*mult[0]-elemOpacity)*mult[0];}else {elemOpacity+=(animatorProps.o.v*mult-elemOpacity)*mult;}}if(documentData.strokeWidthAnim&&animatorProps.sw.propType){if(mult.length){sw+=animatorProps.sw.v*mult[0];}else {sw+=animatorProps.sw.v*mult;}}if(documentData.strokeColorAnim&&animatorProps.sc.propType){for(k=0;k<3;k+=1){if(mult.length){sc[k]+=(animatorProps.sc.v[k]-sc[k])*mult[0];}else {sc[k]+=(animatorProps.sc.v[k]-sc[k])*mult;}}}if(documentData.fillColorAnim&&documentData.fc){if(animatorProps.fc.propType){for(k=0;k<3;k+=1){if(mult.length){fc[k]+=(animatorProps.fc.v[k]-fc[k])*mult[0];}else {fc[k]+=(animatorProps.fc.v[k]-fc[k])*mult;}}}if(animatorProps.fh.propType){if(mult.length){fc=addHueToRGB(fc,animatorProps.fh.v*mult[0]);}else {fc=addHueToRGB(fc,animatorProps.fh.v*mult);}}if(animatorProps.fs.propType){if(mult.length){fc=addSaturationToRGB(fc,animatorProps.fs.v*mult[0]);}else {fc=addSaturationToRGB(fc,animatorProps.fs.v*mult);}}if(animatorProps.fb.propType){if(mult.length){fc=addBrightnessToRGB(fc,animatorProps.fb.v*mult[0]);}else {fc=addBrightnessToRGB(fc,animatorProps.fb.v*mult);}}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.p.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(this._hasMaskedPath){if(mult.length){matrixHelper.translate(0,animatorProps.p.v[1]*mult[0],-animatorProps.p.v[2]*mult[1]);}else {matrixHelper.translate(0,animatorProps.p.v[1]*mult,-animatorProps.p.v[2]*mult);}}else if(mult.length){matrixHelper.translate(animatorProps.p.v[0]*mult[0],animatorProps.p.v[1]*mult[1],-animatorProps.p.v[2]*mult[2]);}else {matrixHelper.translate(animatorProps.p.v[0]*mult,animatorProps.p.v[1]*mult,-animatorProps.p.v[2]*mult);}}}if(documentData.strokeWidthAnim){letterSw=sw<0?0:sw;}if(documentData.strokeColorAnim){letterSc='rgb('+Math.round(sc[0]*255)+','+Math.round(sc[1]*255)+','+Math.round(sc[2]*255)+')';}if(documentData.fillColorAnim&&documentData.fc){letterFc='rgb('+Math.round(fc[0]*255)+','+Math.round(fc[1]*255)+','+Math.round(fc[2]*255)+')';}if(this._hasMaskedPath){matrixHelper.translate(0,-documentData.ls);matrixHelper.translate(0,alignment[1]*yOff*0.01+yPos,0);if(this._pathData.p.v){tanAngle=(currentPoint.point[1]-prevPoint.point[1])/(currentPoint.point[0]-prevPoint.point[0]);var rot=Math.atan(tanAngle)*180/Math.PI;if(currentPoint.point[0]<prevPoint.point[0]){rot+=180;}matrixHelper.rotate(-rot*Math.PI/180);}matrixHelper.translate(xPathPos,yPathPos,0);currentLength-=alignment[0]*letters[i].an*0.005;if(letters[i+1]&&ind!==letters[i+1].ind){currentLength+=letters[i].an/2;currentLength+=documentData.tr*0.001*documentData.finalSize;}}else {matrixHelper.translate(xPos,yPos,0);if(documentData.ps){// matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
		matrixHelper.translate(documentData.ps[0],documentData.ps[1]+documentData.ascent,0);}switch(documentData.j){case 1:matrixHelper.translate(letters[i].animatorJustifyOffset+documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[letters[i].line]),0,0);break;case 2:matrixHelper.translate(letters[i].animatorJustifyOffset+documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[letters[i].line])/2,0,0);break;}matrixHelper.translate(0,-documentData.ls);matrixHelper.translate(offf,0,0);matrixHelper.translate(alignment[0]*letters[i].an*0.005,alignment[1]*yOff*0.01,0);xPos+=letters[i].l+documentData.tr*0.001*documentData.finalSize;}if(renderType==='html'){letterM=matrixHelper.toCSS();}else if(renderType==='svg'){letterM=matrixHelper.to2dCSS();}else {letterP=[matrixHelper.props[0],matrixHelper.props[1],matrixHelper.props[2],matrixHelper.props[3],matrixHelper.props[4],matrixHelper.props[5],matrixHelper.props[6],matrixHelper.props[7],matrixHelper.props[8],matrixHelper.props[9],matrixHelper.props[10],matrixHelper.props[11],matrixHelper.props[12],matrixHelper.props[13],matrixHelper.props[14],matrixHelper.props[15]];}letterO=elemOpacity;}if(renderedLettersCount<=i){letterValue=new LetterProps(letterO,letterSw,letterSc,letterFc,letterM,letterP);this.renderedLetters.push(letterValue);renderedLettersCount+=1;this.lettersChangedFlag=true;}else {letterValue=this.renderedLetters[i];this.lettersChangedFlag=letterValue.update(letterO,letterSw,letterSc,letterFc,letterM,letterP)||this.lettersChangedFlag;}}};TextAnimatorProperty.prototype.getValue=function(){if(this._elem.globalData.frameId===this._frameId){return;}this._frameId=this._elem.globalData.frameId;this.iterateDynamicProperties();};TextAnimatorProperty.prototype.mHelper=new Matrix();TextAnimatorProperty.prototype.defaultPropsArray=[];extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);function ITextElement(){}ITextElement.prototype.initElement=function(data,globalData,comp){this.lettersChangedFlag=true;this.initFrame();this.initBaseData(data,globalData,comp);this.textProperty=new TextProperty(this,data.t,this.dynamicProperties);this.textAnimator=new TextAnimatorProperty(data.t,this.renderType,this);this.initTransform(data,globalData,comp);this.initHierarchy();this.initRenderable();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();this.createContent();this.hide();this.textAnimator.searchProperties(this.dynamicProperties);};ITextElement.prototype.prepareFrame=function(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);};ITextElement.prototype.createPathShape=function(matrixHelper,shapes){var j;var jLen=shapes.length;var pathNodes;var shapeStr='';for(j=0;j<jLen;j+=1){if(shapes[j].ty==='sh'){pathNodes=shapes[j].ks.k;shapeStr+=buildShapeString(pathNodes,pathNodes.i.length,true,matrixHelper);}}return shapeStr;};ITextElement.prototype.updateDocumentData=function(newData,index){this.textProperty.updateDocumentData(newData,index);};ITextElement.prototype.canResizeFont=function(_canResize){this.textProperty.canResizeFont(_canResize);};ITextElement.prototype.setMinimumFontSize=function(_fontSize){this.textProperty.setMinimumFontSize(_fontSize);};ITextElement.prototype.applyTextPropertiesToMatrix=function(documentData,matrixHelper,lineNumber,xPos,yPos){if(documentData.ps){matrixHelper.translate(documentData.ps[0],documentData.ps[1]+documentData.ascent,0);}matrixHelper.translate(0,-documentData.ls,0);switch(documentData.j){case 1:matrixHelper.translate(documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[lineNumber]),0,0);break;case 2:matrixHelper.translate(documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[lineNumber])/2,0,0);break;}matrixHelper.translate(xPos,yPos,0);};ITextElement.prototype.buildColor=function(colorData){return 'rgb('+Math.round(colorData[0]*255)+','+Math.round(colorData[1]*255)+','+Math.round(colorData[2]*255)+')';};ITextElement.prototype.emptyProp=new LetterProps();ITextElement.prototype.destroy=function(){};ITextElement.prototype.validateText=function(){if(this.textProperty._mdf||this.textProperty._isFirstFrame){this.buildNewText();this.textProperty._isFirstFrame=false;this.textProperty._mdf=false;}};var emptyShapeData={shapes:[]};function SVGTextLottieElement(data,globalData,comp){this.textSpans=[];this.renderType='svg';this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement);SVGTextLottieElement.prototype.createContent=function(){if(this.data.singleShape&&!this.globalData.fontManager.chars){this.textContainer=createNS('text');}};SVGTextLottieElement.prototype.buildTextContents=function(textArray){var i=0;var len=textArray.length;var textContents=[];var currentTextContent='';while(i<len){if(textArray[i]===String.fromCharCode(13)||textArray[i]===String.fromCharCode(3)){textContents.push(currentTextContent);currentTextContent='';}else {currentTextContent+=textArray[i];}i+=1;}textContents.push(currentTextContent);return textContents;};SVGTextLottieElement.prototype.buildShapeData=function(data,scale){// data should probably be cloned to apply scale separately to each instance of a text on different layers
		// but since text internal content gets only rendered once and then it's never rerendered,
		// it's probably safe not to clone data and reuse always the same instance even if the object is mutated.
		// Avoiding cloning is preferred since cloning each character shape data is expensive
		if(data.shapes&&data.shapes.length){var shape=data.shapes[0];if(shape.it){var shapeItem=shape.it[shape.it.length-1];if(shapeItem.s){shapeItem.s.k[0]=scale;shapeItem.s.k[1]=scale;}}}return data;};SVGTextLottieElement.prototype.buildNewText=function(){this.addDynamicProperty(this);var i;var len;var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData?documentData.l.length:0);if(documentData.fc){this.layerElement.setAttribute('fill',this.buildColor(documentData.fc));}else {this.layerElement.setAttribute('fill','rgba(0,0,0,0)');}if(documentData.sc){this.layerElement.setAttribute('stroke',this.buildColor(documentData.sc));this.layerElement.setAttribute('stroke-width',documentData.sw);}this.layerElement.setAttribute('font-size',documentData.finalSize);var fontData=this.globalData.fontManager.getFontByName(documentData.f);if(fontData.fClass){this.layerElement.setAttribute('class',fontData.fClass);}else {this.layerElement.setAttribute('font-family',fontData.fFamily);var fWeight=documentData.fWeight;var fStyle=documentData.fStyle;this.layerElement.setAttribute('font-style',fStyle);this.layerElement.setAttribute('font-weight',fWeight);}this.layerElement.setAttribute('aria-label',documentData.t);var letters=documentData.l||[];var usesGlyphs=!!this.globalData.fontManager.chars;len=letters.length;var tSpan;var matrixHelper=this.mHelper;var shapeStr='';var singleShape=this.data.singleShape;var xPos=0;var yPos=0;var firstLine=true;var trackingOffset=documentData.tr*0.001*documentData.finalSize;if(singleShape&&!usesGlyphs&&!documentData.sz){var tElement=this.textContainer;var justify='start';switch(documentData.j){case 1:justify='end';break;case 2:justify='middle';break;default:justify='start';break;}tElement.setAttribute('text-anchor',justify);tElement.setAttribute('letter-spacing',trackingOffset);var textContent=this.buildTextContents(documentData.finalText);len=textContent.length;yPos=documentData.ps?documentData.ps[1]+documentData.ascent:0;for(i=0;i<len;i+=1){tSpan=this.textSpans[i].span||createNS('tspan');tSpan.textContent=textContent[i];tSpan.setAttribute('x',0);tSpan.setAttribute('y',yPos);tSpan.style.display='inherit';tElement.appendChild(tSpan);if(!this.textSpans[i]){this.textSpans[i]={span:null,glyph:null};}this.textSpans[i].span=tSpan;yPos+=documentData.finalLineHeight;}this.layerElement.appendChild(tElement);}else {var cachedSpansLength=this.textSpans.length;var charData;for(i=0;i<len;i+=1){if(!this.textSpans[i]){this.textSpans[i]={span:null,childSpan:null,glyph:null};}if(!usesGlyphs||!singleShape||i===0){tSpan=cachedSpansLength>i?this.textSpans[i].span:createNS(usesGlyphs?'g':'text');if(cachedSpansLength<=i){tSpan.setAttribute('stroke-linecap','butt');tSpan.setAttribute('stroke-linejoin','round');tSpan.setAttribute('stroke-miterlimit','4');this.textSpans[i].span=tSpan;if(usesGlyphs){var childSpan=createNS('g');tSpan.appendChild(childSpan);this.textSpans[i].childSpan=childSpan;}this.textSpans[i].span=tSpan;this.layerElement.appendChild(tSpan);}tSpan.style.display='inherit';}matrixHelper.reset();if(singleShape){if(letters[i].n){xPos=-trackingOffset;yPos+=documentData.yOffset;yPos+=firstLine?1:0;firstLine=false;}this.applyTextPropertiesToMatrix(documentData,matrixHelper,letters[i].line,xPos,yPos);xPos+=letters[i].l||0;// xPos += letters[i].val === ' ' ? 0 : trackingOffset;
		xPos+=trackingOffset;}if(usesGlyphs){charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);var glyphElement;// t === 1 means the character has been replaced with an animated shaped
		if(charData.t===1){glyphElement=new SVGCompElement(charData.data,this.globalData,this);}else {var data=emptyShapeData;if(charData.data&&charData.data.shapes){data=this.buildShapeData(charData.data,documentData.finalSize);}glyphElement=new SVGShapeElement(data,this.globalData,this);}if(this.textSpans[i].glyph){var glyph=this.textSpans[i].glyph;this.textSpans[i].childSpan.removeChild(glyph.layerElement);glyph.destroy();}this.textSpans[i].glyph=glyphElement;glyphElement._debug=true;glyphElement.prepareFrame(0);glyphElement.renderFrame();this.textSpans[i].childSpan.appendChild(glyphElement.layerElement);// when using animated shapes, the layer will be scaled instead of replacing the internal scale
		// this might have issues with strokes and might need a different solution
		if(charData.t===1){this.textSpans[i].childSpan.setAttribute('transform','scale('+documentData.finalSize/100+','+documentData.finalSize/100+')');}}else {if(singleShape){tSpan.setAttribute('transform','translate('+matrixHelper.props[12]+','+matrixHelper.props[13]+')');}tSpan.textContent=letters[i].val;tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace','xml:space','preserve');}//
		}if(singleShape&&tSpan){tSpan.setAttribute('d',shapeStr);}}while(i<this.textSpans.length){this.textSpans[i].span.style.display='none';i+=1;}this._sizeChanged=true;};SVGTextLottieElement.prototype.sourceRectAtTime=function(){this.prepareFrame(this.comp.renderedFrame-this.data.st);this.renderInnerContent();if(this._sizeChanged){this._sizeChanged=false;var textBox=this.layerElement.getBBox();this.bbox={top:textBox.y,left:textBox.x,width:textBox.width,height:textBox.height};}return this.bbox;};SVGTextLottieElement.prototype.getValue=function(){var i;var len=this.textSpans.length;var glyphElement;this.renderedFrame=this.comp.renderedFrame;for(i=0;i<len;i+=1){glyphElement=this.textSpans[i].glyph;if(glyphElement){glyphElement.prepareFrame(this.comp.renderedFrame-this.data.st);if(glyphElement._mdf){this._mdf=true;}}}};SVGTextLottieElement.prototype.renderInnerContent=function(){this.validateText();if(!this.data.singleShape||this._mdf){this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);if(this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){this._sizeChanged=true;var i;var len;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var textSpan;var glyphElement;for(i=0;i<len;i+=1){if(!letters[i].n){renderedLetter=renderedLetters[i];textSpan=this.textSpans[i].span;glyphElement=this.textSpans[i].glyph;if(glyphElement){glyphElement.renderFrame();}if(renderedLetter._mdf.m){textSpan.setAttribute('transform',renderedLetter.m);}if(renderedLetter._mdf.o){textSpan.setAttribute('opacity',renderedLetter.o);}if(renderedLetter._mdf.sw){textSpan.setAttribute('stroke-width',renderedLetter.sw);}if(renderedLetter._mdf.sc){textSpan.setAttribute('stroke',renderedLetter.sc);}if(renderedLetter._mdf.fc){textSpan.setAttribute('fill',renderedLetter.fc);}}}}}};function ISolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([IImageElement],ISolidElement);ISolidElement.prototype.createContent=function(){var rect=createNS('rect');/// /rect.style.width = this.data.sw;
		/// /rect.style.height = this.data.sh;
		/// /rect.style.fill = this.data.sc;
		rect.setAttribute('width',this.data.sw);rect.setAttribute('height',this.data.sh);rect.setAttribute('fill',this.data.sc);this.layerElement.appendChild(rect);};function NullElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initFrame();this.initTransform(data,globalData,comp);this.initHierarchy();}NullElement.prototype.prepareFrame=function(num){this.prepareProperties(num,true);};NullElement.prototype.renderFrame=function(){};NullElement.prototype.getBaseElement=function(){return null;};NullElement.prototype.destroy=function(){};NullElement.prototype.sourceRectAtTime=function(){};NullElement.prototype.hide=function(){};extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);function SVGRendererBase(){}extendPrototype([BaseRenderer],SVGRendererBase);SVGRendererBase.prototype.createNull=function(data){return new NullElement(data,this.globalData,this);};SVGRendererBase.prototype.createShape=function(data){return new SVGShapeElement(data,this.globalData,this);};SVGRendererBase.prototype.createText=function(data){return new SVGTextLottieElement(data,this.globalData,this);};SVGRendererBase.prototype.createImage=function(data){return new IImageElement(data,this.globalData,this);};SVGRendererBase.prototype.createSolid=function(data){return new ISolidElement(data,this.globalData,this);};SVGRendererBase.prototype.configAnimation=function(animData){this.svgElement.setAttribute('xmlns','http://www.w3.org/2000/svg');this.svgElement.setAttribute('xmlns:xlink','http://www.w3.org/1999/xlink');if(this.renderConfig.viewBoxSize){this.svgElement.setAttribute('viewBox',this.renderConfig.viewBoxSize);}else {this.svgElement.setAttribute('viewBox','0 0 '+animData.w+' '+animData.h);}if(!this.renderConfig.viewBoxOnly){this.svgElement.setAttribute('width',animData.w);this.svgElement.setAttribute('height',animData.h);this.svgElement.style.width='100%';this.svgElement.style.height='100%';this.svgElement.style.transform='translate3d(0,0,0)';this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility;}if(this.renderConfig.width){this.svgElement.setAttribute('width',this.renderConfig.width);}if(this.renderConfig.height){this.svgElement.setAttribute('height',this.renderConfig.height);}if(this.renderConfig.className){this.svgElement.setAttribute('class',this.renderConfig.className);}if(this.renderConfig.id){this.svgElement.setAttribute('id',this.renderConfig.id);}if(this.renderConfig.focusable!==undefined){this.svgElement.setAttribute('focusable',this.renderConfig.focusable);}this.svgElement.setAttribute('preserveAspectRatio',this.renderConfig.preserveAspectRatio);// this.layerElement.style.transform = 'translate3d(0,0,0)';
		// this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";
		this.animationItem.wrapper.appendChild(this.svgElement);// Mask animation
		var defs=this.globalData.defs;this.setupGlobalData(animData,defs);this.globalData.progressiveLoad=this.renderConfig.progressiveLoad;this.data=animData;var maskElement=createNS('clipPath');var rect=createNS('rect');rect.setAttribute('width',animData.w);rect.setAttribute('height',animData.h);rect.setAttribute('x',0);rect.setAttribute('y',0);var maskId=createElementID();maskElement.setAttribute('id',maskId);maskElement.appendChild(rect);this.layerElement.setAttribute('clip-path','url('+getLocationHref()+'#'+maskId+')');defs.appendChild(maskElement);this.layers=animData.layers;this.elements=createSizedArray(animData.layers.length);};SVGRendererBase.prototype.destroy=function(){if(this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}this.layerElement=null;this.globalData.defs=null;var i;var len=this.layers?this.layers.length:0;for(i=0;i<len;i+=1){if(this.elements[i]&&this.elements[i].destroy){this.elements[i].destroy();}}this.elements.length=0;this.destroyed=true;this.animationItem=null;};SVGRendererBase.prototype.updateContainerSize=function(){};SVGRendererBase.prototype.findIndexByInd=function(ind){var i=0;var len=this.layers.length;for(i=0;i<len;i+=1){if(this.layers[i].ind===ind){return i;}}return -1;};SVGRendererBase.prototype.buildItem=function(pos){var elements=this.elements;if(elements[pos]||this.layers[pos].ty===99){return;}elements[pos]=true;var element=this.createItem(this.layers[pos]);elements[pos]=element;if(getExpressionsPlugin()){if(this.layers[pos].ty===0){this.globalData.projectInterface.registerComposition(element);}element.initExpressions();}this.appendElementInPos(element,pos);if(this.layers[pos].tt){var elementIndex='tp'in this.layers[pos]?this.findIndexByInd(this.layers[pos].tp):pos-1;if(elementIndex===-1){return;}if(!this.elements[elementIndex]||this.elements[elementIndex]===true){this.buildItem(elementIndex);this.addPendingElement(element);}else {var matteElement=elements[elementIndex];var matteMask=matteElement.getMatte(this.layers[pos].tt);element.setMatte(matteMask);}}};SVGRendererBase.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();if(element.data.tt){var i=0;var len=this.elements.length;while(i<len){if(this.elements[i]===element){var elementIndex='tp'in element.data?this.findIndexByInd(element.data.tp):i-1;var matteElement=this.elements[elementIndex];var matteMask=matteElement.getMatte(this.layers[i].tt);element.setMatte(matteMask);break;}i+=1;}}}};SVGRendererBase.prototype.renderFrame=function(num){if(this.renderedFrame===num||this.destroyed){return;}if(num===null){num=this.renderedFrame;}else {this.renderedFrame=num;}// console.log('-------');
		// console.log('FRAME ',num);
		this.globalData.frameNum=num;this.globalData.frameId+=1;this.globalData.projectInterface.currentFrame=num;this.globalData._mdf=false;var i;var len=this.layers.length;if(!this.completeLayers){this.checkLayers(num);}for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(num-this.layers[i].st);}}if(this.globalData._mdf){for(i=0;i<len;i+=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}}};SVGRendererBase.prototype.appendElementInPos=function(element,pos){var newElement=element.getBaseElement();if(!newElement){return;}var i=0;var nextElement;while(i<pos){if(this.elements[i]&&this.elements[i]!==true&&this.elements[i].getBaseElement()){nextElement=this.elements[i].getBaseElement();}i+=1;}if(nextElement){this.layerElement.insertBefore(newElement,nextElement);}else {this.layerElement.appendChild(newElement);}};SVGRendererBase.prototype.hide=function(){this.layerElement.style.display='none';};SVGRendererBase.prototype.show=function(){this.layerElement.style.display='block';};function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement);ICompElement.prototype.initElement=function(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initTransform(data,globalData,comp);this.initRenderable();this.initHierarchy();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();if(this.data.xt||!globalData.progressiveLoad){this.buildAllItems();}this.hide();};/* ICompElement.prototype.hide = function(){
		      if(!this.hidden){
		          this.hideElement();
		          var i,len = this.elements.length;
		          for( i = 0; i < len; i+=1 ){
		              if(this.elements[i]){
		                  this.elements[i].hide();
		              }
		          }
		      }
		  }; */ICompElement.prototype.prepareFrame=function(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);if(!this.isInRange&&!this.data.xt){return;}if(!this.tm._placeholder){var timeRemapped=this.tm.v;if(timeRemapped===this.data.op){timeRemapped=this.data.op-1;}this.renderedFrame=timeRemapped;}else {this.renderedFrame=num/this.data.sr;}var i;var len=this.elements.length;if(!this.completeLayers){this.checkLayers(this.renderedFrame);}// This iteration needs to be backwards because of how expressions connect between each other
		for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(this.renderedFrame-this.layers[i].st);if(this.elements[i]._mdf){this._mdf=true;}}}};ICompElement.prototype.renderInnerContent=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}};ICompElement.prototype.setElements=function(elems){this.elements=elems;};ICompElement.prototype.getElements=function(){return this.elements;};ICompElement.prototype.destroyElements=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){if(this.elements[i]){this.elements[i].destroy();}}};ICompElement.prototype.destroy=function(){this.destroyElements();this.destroyBaseElement();};function SVGCompElement(data,globalData,comp){this.layers=data.layers;this.supports3d=true;this.completeLayers=false;this.pendingElements=[];this.elements=this.layers?createSizedArray(this.layers.length):[];this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement);SVGCompElement.prototype.createComp=function(data){return new SVGCompElement(data,this.globalData,this);};function SVGRenderer(animationItem,config){this.animationItem=animationItem;this.layers=null;this.renderedFrame=-1;this.svgElement=createNS('svg');var ariaLabel='';if(config&&config.title){var titleElement=createNS('title');var titleId=createElementID();titleElement.setAttribute('id',titleId);titleElement.textContent=config.title;this.svgElement.appendChild(titleElement);ariaLabel+=titleId;}if(config&&config.description){var descElement=createNS('desc');var descId=createElementID();descElement.setAttribute('id',descId);descElement.textContent=config.description;this.svgElement.appendChild(descElement);ariaLabel+=' '+descId;}if(ariaLabel){this.svgElement.setAttribute('aria-labelledby',ariaLabel);}var defs=createNS('defs');this.svgElement.appendChild(defs);var maskElement=createNS('g');this.svgElement.appendChild(maskElement);this.layerElement=maskElement;this.renderConfig={preserveAspectRatio:config&&config.preserveAspectRatio||'xMidYMid meet',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',contentVisibility:config&&config.contentVisibility||'visible',progressiveLoad:config&&config.progressiveLoad||false,hideOnTransparent:!(config&&config.hideOnTransparent===false),viewBoxOnly:config&&config.viewBoxOnly||false,viewBoxSize:config&&config.viewBoxSize||false,className:config&&config.className||'',id:config&&config.id||'',focusable:config&&config.focusable,filterSize:{width:config&&config.filterSize&&config.filterSize.width||'100%',height:config&&config.filterSize&&config.filterSize.height||'100%',x:config&&config.filterSize&&config.filterSize.x||'0%',y:config&&config.filterSize&&config.filterSize.y||'0%'},width:config&&config.width,height:config&&config.height,runExpressions:!config||config.runExpressions===undefined||config.runExpressions};this.globalData={_mdf:false,frameNum:-1,defs:defs,renderConfig:this.renderConfig};this.elements=[];this.pendingElements=[];this.destroyed=false;this.rendererType='svg';}extendPrototype([SVGRendererBase],SVGRenderer);SVGRenderer.prototype.createComp=function(data){return new SVGCompElement(data,this.globalData,this);};function ShapeTransformManager(){this.sequences={};this.sequenceList=[];this.transform_key_count=0;}ShapeTransformManager.prototype={addTransformSequence:function addTransformSequence(transforms){var i;var len=transforms.length;var key='_';for(i=0;i<len;i+=1){key+=transforms[i].transform.key+'_';}var sequence=this.sequences[key];if(!sequence){sequence={transforms:[].concat(transforms),finalTransform:new Matrix(),_mdf:false};this.sequences[key]=sequence;this.sequenceList.push(sequence);}return sequence;},processSequence:function processSequence(sequence,isFirstFrame){var i=0;var len=sequence.transforms.length;var _mdf=isFirstFrame;while(i<len&&!isFirstFrame){if(sequence.transforms[i].transform.mProps._mdf){_mdf=true;break;}i+=1;}if(_mdf){sequence.finalTransform.reset();for(i=len-1;i>=0;i-=1){sequence.finalTransform.multiply(sequence.transforms[i].transform.mProps.v);}}sequence._mdf=_mdf;},processSequences:function processSequences(isFirstFrame){var i;var len=this.sequenceList.length;for(i=0;i<len;i+=1){this.processSequence(this.sequenceList[i],isFirstFrame);}},getNewKey:function getNewKey(){this.transform_key_count+=1;return '_'+this.transform_key_count;}};var lumaLoader=function lumaLoader(){var id='__lottie_element_luma_buffer';var lumaBuffer=null;var lumaBufferCtx=null;var svg=null;// This alternate solution has a slight delay before the filter is applied, resulting in a flicker on the first frame.
		// Keeping this here for reference, and in the future, if offscreen canvas supports url filters, this can be used.
		// For now, neither of them work for offscreen canvas, so canvas workers can't support the luma track matte mask.
		// Naming it solution 2 to mark the extra comment lines.
		/*
		    var svgString = [
		      '<svg xmlns="http://www.w3.org/2000/svg">',
		      '<filter id="' + id + '">',
		      '<feColorMatrix type="matrix" color-interpolation-filters="sRGB" values="',
		      '0.3, 0.3, 0.3, 0, 0, ',
		      '0.3, 0.3, 0.3, 0, 0, ',
		      '0.3, 0.3, 0.3, 0, 0, ',
		      '0.3, 0.3, 0.3, 0, 0',
		      '"/>',
		      '</filter>',
		      '</svg>',
		    ].join('');
		    var blob = new Blob([svgString], { type: 'image/svg+xml' });
		    var url = URL.createObjectURL(blob);
		    */function createLumaSvgFilter(){var _svg=createNS('svg');var fil=createNS('filter');var matrix=createNS('feColorMatrix');fil.setAttribute('id',id);matrix.setAttribute('type','matrix');matrix.setAttribute('color-interpolation-filters','sRGB');matrix.setAttribute('values','0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0');fil.appendChild(matrix);_svg.appendChild(fil);_svg.setAttribute('id',id+'_svg');if(featureSupport.svgLumaHidden){_svg.style.display='none';}return _svg;}function loadLuma(){if(!lumaBuffer){svg=createLumaSvgFilter();document.body.appendChild(svg);lumaBuffer=createTag('canvas');lumaBufferCtx=lumaBuffer.getContext('2d');// lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2
		lumaBufferCtx.filter='url(#'+id+')';lumaBufferCtx.fillStyle='rgba(0,0,0,0)';lumaBufferCtx.fillRect(0,0,1,1);}}function getLuma(canvas){if(!lumaBuffer){loadLuma();}lumaBuffer.width=canvas.width;lumaBuffer.height=canvas.height;// lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2
		lumaBufferCtx.filter='url(#'+id+')';return lumaBuffer;}return {load:loadLuma,get:getLuma};};function createCanvas(width,height){if(featureSupport.offscreenCanvas){return new OffscreenCanvas(width,height);}var canvas=createTag('canvas');canvas.width=width;canvas.height=height;return canvas;}var assetLoader=function(){return {loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas:createCanvas};}();var registeredEffects={};function CVEffects(elem){var i;var len=elem.data.ef?elem.data.ef.length:0;this.filters=[];var filterManager;for(i=0;i<len;i+=1){filterManager=null;var type=elem.data.ef[i].ty;if(registeredEffects[type]){var Effect=registeredEffects[type].effect;filterManager=new Effect(elem.effectsManager.effectElements[i],elem);}if(filterManager){this.filters.push(filterManager);}}if(this.filters.length){elem.addRenderableComponent(this);}}CVEffects.prototype.renderFrame=function(_isFirstFrame){var i;var len=this.filters.length;for(i=0;i<len;i+=1){this.filters[i].renderFrame(_isFirstFrame);}};CVEffects.prototype.getEffects=function(type){var i;var len=this.filters.length;var effects=[];for(i=0;i<len;i+=1){if(this.filters[i].type===type){effects.push(this.filters[i]);}}return effects;};function registerEffect(id,effect){registeredEffects[id]={effect:effect};}function CVMaskElement(data,element){this.data=data;this.element=element;this.masksProperties=this.data.masksProperties||[];this.viewData=createSizedArray(this.masksProperties.length);var i;var len=this.masksProperties.length;var hasMasks=false;for(i=0;i<len;i+=1){if(this.masksProperties[i].mode!=='n'){hasMasks=true;}this.viewData[i]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[i],3);}this.hasMasks=hasMasks;if(hasMasks){this.element.addRenderableComponent(this);}}CVMaskElement.prototype.renderFrame=function(){if(!this.hasMasks){return;}var transform=this.element.finalTransform.mat;var ctx=this.element.canvasContext;var i;var len=this.masksProperties.length;var pt;var pts;var data;ctx.beginPath();for(i=0;i<len;i+=1){if(this.masksProperties[i].mode!=='n'){if(this.masksProperties[i].inv){ctx.moveTo(0,0);ctx.lineTo(this.element.globalData.compSize.w,0);ctx.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h);ctx.lineTo(0,this.element.globalData.compSize.h);ctx.lineTo(0,0);}data=this.viewData[i].v;pt=transform.applyToPointArray(data.v[0][0],data.v[0][1],0);ctx.moveTo(pt[0],pt[1]);var j;var jLen=data._length;for(j=1;j<jLen;j+=1){pts=transform.applyToTriplePoints(data.o[j-1],data.i[j],data.v[j]);ctx.bezierCurveTo(pts[0],pts[1],pts[2],pts[3],pts[4],pts[5]);}pts=transform.applyToTriplePoints(data.o[j-1],data.i[0],data.v[0]);ctx.bezierCurveTo(pts[0],pts[1],pts[2],pts[3],pts[4],pts[5]);}}this.element.globalData.renderer.save(true);ctx.clip();};CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty;CVMaskElement.prototype.destroy=function(){this.element=null;};function CVBaseElement(){}var operationsMap={1:'source-in',2:'source-out',3:'source-in',4:'source-out'};CVBaseElement.prototype={createElements:function createElements(){},initRendererElement:function initRendererElement(){},createContainerElements:function createContainerElements(){// If the layer is masked we will use two buffers to store each different states of the drawing
		// This solution is not ideal for several reason. But unfortunately, because of the recursive
		// nature of the render tree, it's the only simple way to make sure one inner mask doesn't override an outer mask.
		// TODO: try to reduce the size of these buffers to the size of the composition contaning the layer
		// It might be challenging because the layer most likely is transformed in some way
		if(this.data.tt>=1){this.buffers=[];var canvasContext=this.globalData.canvasContext;var bufferCanvas=assetLoader.createCanvas(canvasContext.canvas.width,canvasContext.canvas.height);this.buffers.push(bufferCanvas);var bufferCanvas2=assetLoader.createCanvas(canvasContext.canvas.width,canvasContext.canvas.height);this.buffers.push(bufferCanvas2);if(this.data.tt>=3&&!document._isProxy){assetLoader.loadLumaCanvas();}}this.canvasContext=this.globalData.canvasContext;this.transformCanvas=this.globalData.transformCanvas;this.renderableEffectsManager=new CVEffects(this);this.searchEffectTransforms();},createContent:function createContent(){},setBlendMode:function setBlendMode(){var globalData=this.globalData;if(globalData.blendMode!==this.data.bm){globalData.blendMode=this.data.bm;var blendModeValue=getBlendMode(this.data.bm);globalData.canvasContext.globalCompositeOperation=blendModeValue;}},createRenderableComponents:function createRenderableComponents(){this.maskManager=new CVMaskElement(this.data,this);this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);},hideElement:function hideElement(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){this.hidden=true;}},showElement:function showElement(){if(this.isInRange&&!this.isTransparent){this.hidden=false;this._isFirstFrame=true;this.maskManager._isFirstFrame=true;}},clearCanvas:function clearCanvas(canvasContext){canvasContext.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy);},prepareLayer:function prepareLayer(){if(this.data.tt>=1){var buffer=this.buffers[0];var bufferCtx=buffer.getContext('2d');this.clearCanvas(bufferCtx);// on the first buffer we store the current state of the global drawing
		bufferCtx.drawImage(this.canvasContext.canvas,0,0);// The next four lines are to clear the canvas
		// TODO: Check if there is a way to clear the canvas without resetting the transform
		this.currentTransform=this.canvasContext.getTransform();this.canvasContext.setTransform(1,0,0,1,0,0);this.clearCanvas(this.canvasContext);this.canvasContext.setTransform(this.currentTransform);}},exitLayer:function exitLayer(){if(this.data.tt>=1){var buffer=this.buffers[1];// On the second buffer we store the current state of the global drawing
		// that only contains the content of this layer
		// (if it is a composition, it also includes the nested layers)
		var bufferCtx=buffer.getContext('2d');this.clearCanvas(bufferCtx);bufferCtx.drawImage(this.canvasContext.canvas,0,0);// We clear the canvas again
		this.canvasContext.setTransform(1,0,0,1,0,0);this.clearCanvas(this.canvasContext);this.canvasContext.setTransform(this.currentTransform);// We draw the mask
		var mask=this.comp.getElementById('tp'in this.data?this.data.tp:this.data.ind-1);mask.renderFrame(true);// We draw the second buffer (that contains the content of this layer)
		this.canvasContext.setTransform(1,0,0,1,0,0);// If the mask is a Luma matte, we need to do two extra painting operations
		// the _isProxy check is to avoid drawing a fake canvas in workers that will throw an error
		if(this.data.tt>=3&&!document._isProxy){// We copy the painted mask to a buffer that has a color matrix filter applied to it
		// that applies the rgb values to the alpha channel
		var lumaBuffer=assetLoader.getLumaCanvas(this.canvasContext.canvas);var lumaBufferCtx=lumaBuffer.getContext('2d');lumaBufferCtx.drawImage(this.canvasContext.canvas,0,0);this.clearCanvas(this.canvasContext);// we repaint the context with the mask applied to it
		this.canvasContext.drawImage(lumaBuffer,0,0);}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt];this.canvasContext.drawImage(buffer,0,0);// We finally draw the first buffer (that contains the content of the global drawing)
		// We use destination-over to draw the global drawing below the current layer
		this.canvasContext.globalCompositeOperation='destination-over';this.canvasContext.drawImage(this.buffers[0],0,0);this.canvasContext.setTransform(this.currentTransform);// We reset the globalCompositeOperation to source-over, the standard type of operation
		this.canvasContext.globalCompositeOperation='source-over';}},renderFrame:function renderFrame(forceRender){if(this.hidden||this.data.hd){return;}if(this.data.td===1&&!forceRender){return;}this.renderTransform();this.renderRenderable();this.renderLocalTransform();this.setBlendMode();var forceRealStack=this.data.ty===0;this.prepareLayer();this.globalData.renderer.save(forceRealStack);this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);this.renderInnerContent();this.globalData.renderer.restore(forceRealStack);this.exitLayer();if(this.maskManager.hasMasks){this.globalData.renderer.restore(true);}if(this._isFirstFrame){this._isFirstFrame=false;}},destroy:function destroy(){this.canvasContext=null;this.data=null;this.globalData=null;this.maskManager.destroy();},mHelper:new Matrix()};CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement;CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;function CVShapeData(element,data,styles,transformsManager){this.styledShapes=[];this.tr=[0,0,0,0,0,0];var ty=4;if(data.ty==='rc'){ty=5;}else if(data.ty==='el'){ty=6;}else if(data.ty==='sr'){ty=7;}this.sh=ShapePropertyFactory.getShapeProp(element,data,ty,element);var i;var len=styles.length;var styledShape;for(i=0;i<len;i+=1){if(!styles[i].closed){styledShape={transforms:transformsManager.addTransformSequence(styles[i].transforms),trNodes:[]};this.styledShapes.push(styledShape);styles[i].elements.push(styledShape);}}}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;function CVShapeElement(data,globalData,comp){this.shapes=[];this.shapesData=data.shapes;this.stylesList=[];this.itemsData=[];this.prevViewData=[];this.shapeModifiers=[];this.processedElements=[];this.transformsManager=new ShapeTransformManager();this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement);CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement;CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:false};CVShapeElement.prototype.dashResetter=[];CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,true,[]);};CVShapeElement.prototype.createStyleElement=function(data,transforms){var styleElem={data:data,type:data.ty,preTransforms:this.transformsManager.addTransformSequence(transforms),transforms:[],elements:[],closed:data.hd===true};var elementData={};if(data.ty==='fl'||data.ty==='st'){elementData.c=PropertyFactory.getProp(this,data.c,1,255,this);if(!elementData.c.k){styleElem.co='rgb('+bmFloor(elementData.c.v[0])+','+bmFloor(elementData.c.v[1])+','+bmFloor(elementData.c.v[2])+')';}}else if(data.ty==='gf'||data.ty==='gs'){elementData.s=PropertyFactory.getProp(this,data.s,1,null,this);elementData.e=PropertyFactory.getProp(this,data.e,1,null,this);elementData.h=PropertyFactory.getProp(this,data.h||{k:0},0,0.01,this);elementData.a=PropertyFactory.getProp(this,data.a||{k:0},0,degToRads,this);elementData.g=new GradientProperty(this,data.g,this);}elementData.o=PropertyFactory.getProp(this,data.o,0,0.01,this);if(data.ty==='st'||data.ty==='gs'){styleElem.lc=lineCapEnum[data.lc||2];styleElem.lj=lineJoinEnum[data.lj||2];if(data.lj==1){// eslint-disable-line eqeqeq
		styleElem.ml=data.ml;}elementData.w=PropertyFactory.getProp(this,data.w,0,null,this);if(!elementData.w.k){styleElem.wi=elementData.w.v;}if(data.d){var d=new DashProperty(this,data.d,'canvas',this);elementData.d=d;if(!elementData.d.k){styleElem.da=elementData.d.dashArray;styleElem["do"]=elementData.d.dashoffset[0];}}}else {styleElem.r=data.r===2?'evenodd':'nonzero';}this.stylesList.push(styleElem);elementData.style=styleElem;return elementData;};CVShapeElement.prototype.createGroupElement=function(){var elementData={it:[],prevViewData:[]};return elementData;};CVShapeElement.prototype.createTransformElement=function(data){var elementData={transform:{opacity:1,_opMdf:false,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,data.o,0,0.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,data,this)}};return elementData;};CVShapeElement.prototype.createShapeElement=function(data){var elementData=new CVShapeData(this,data,this.stylesList,this.transformsManager);this.shapes.push(elementData);this.addShapeToModifiers(elementData);return elementData;};CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=true;var i;var len=this.itemsData.length;for(i=0;i<len;i+=1){this.prevViewData[i]=this.itemsData[i];}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,true,[]);len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();}this.renderModifiers();this.transformsManager.processSequences(this._isFirstFrame);};CVShapeElement.prototype.addTransformToStyleList=function(transform){var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){if(!this.stylesList[i].closed){this.stylesList[i].transforms.push(transform);}}};CVShapeElement.prototype.removeTransformFromStyleList=function(){var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){if(!this.stylesList[i].closed){this.stylesList[i].transforms.pop();}}};CVShapeElement.prototype.closeStyles=function(styles){var i;var len=styles.length;for(i=0;i<len;i+=1){styles[i].closed=true;}};CVShapeElement.prototype.searchShapes=function(arr,itemsData,prevViewData,shouldRender,transforms){var i;var len=arr.length-1;var j;var jLen;var ownStyles=[];var ownModifiers=[];var processedPos;var modifier;var currentTransform;var ownTransforms=[].concat(transforms);for(i=len;i>=0;i-=1){processedPos=this.searchProcessedElement(arr[i]);if(!processedPos){arr[i]._shouldRender=shouldRender;}else {itemsData[i]=prevViewData[processedPos-1];}if(arr[i].ty==='fl'||arr[i].ty==='st'||arr[i].ty==='gf'||arr[i].ty==='gs'){if(!processedPos){itemsData[i]=this.createStyleElement(arr[i],ownTransforms);}else {itemsData[i].style.closed=false;}ownStyles.push(itemsData[i].style);}else if(arr[i].ty==='gr'){if(!processedPos){itemsData[i]=this.createGroupElement(arr[i]);}else {jLen=itemsData[i].it.length;for(j=0;j<jLen;j+=1){itemsData[i].prevViewData[j]=itemsData[i].it[j];}}this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,shouldRender,ownTransforms);}else if(arr[i].ty==='tr'){if(!processedPos){currentTransform=this.createTransformElement(arr[i]);itemsData[i]=currentTransform;}ownTransforms.push(itemsData[i]);this.addTransformToStyleList(itemsData[i]);}else if(arr[i].ty==='sh'||arr[i].ty==='rc'||arr[i].ty==='el'||arr[i].ty==='sr'){if(!processedPos){itemsData[i]=this.createShapeElement(arr[i]);}}else if(arr[i].ty==='tm'||arr[i].ty==='rd'||arr[i].ty==='pb'||arr[i].ty==='zz'||arr[i].ty==='op'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);modifier.init(this,arr[i]);itemsData[i]=modifier;this.shapeModifiers.push(modifier);}else {modifier=itemsData[i];modifier.closed=false;}ownModifiers.push(modifier);}else if(arr[i].ty==='rp'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);itemsData[i]=modifier;modifier.init(this,arr,i,itemsData);this.shapeModifiers.push(modifier);shouldRender=false;}else {modifier=itemsData[i];modifier.closed=true;}ownModifiers.push(modifier);}this.addProcessedElement(arr[i],i+1);}this.removeTransformFromStyleList();this.closeStyles(ownStyles);len=ownModifiers.length;for(i=0;i<len;i+=1){ownModifiers[i].closed=true;}};CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1;this.transformHelper._opMdf=false;this.renderModifiers();this.transformsManager.processSequences(this._isFirstFrame);this.renderShape(this.transformHelper,this.shapesData,this.itemsData,true);};CVShapeElement.prototype.renderShapeTransform=function(parentTransform,groupTransform){if(parentTransform._opMdf||groupTransform.op._mdf||this._isFirstFrame){groupTransform.opacity=parentTransform.opacity;groupTransform.opacity*=groupTransform.op.v;groupTransform._opMdf=true;}};CVShapeElement.prototype.drawLayer=function(){var i;var len=this.stylesList.length;var j;var jLen;var k;var kLen;var elems;var nodes;var renderer=this.globalData.renderer;var ctx=this.globalData.canvasContext;var type;var currentStyle;for(i=0;i<len;i+=1){currentStyle=this.stylesList[i];type=currentStyle.type;// Skipping style when
		// Stroke width equals 0
		// style should not be rendered (extra unused repeaters)
		// current opacity equals 0
		// global opacity equals 0
		if(!((type==='st'||type==='gs')&&currentStyle.wi===0||!currentStyle.data._shouldRender||currentStyle.coOp===0||this.globalData.currentGlobalAlpha===0)){renderer.save();elems=currentStyle.elements;if(type==='st'||type==='gs'){renderer.ctxStrokeStyle(type==='st'?currentStyle.co:currentStyle.grd);// ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;
		renderer.ctxLineWidth(currentStyle.wi);// ctx.lineWidth = currentStyle.wi;
		renderer.ctxLineCap(currentStyle.lc);// ctx.lineCap = currentStyle.lc;
		renderer.ctxLineJoin(currentStyle.lj);// ctx.lineJoin = currentStyle.lj;
		renderer.ctxMiterLimit(currentStyle.ml||0);// ctx.miterLimit = currentStyle.ml || 0;
		}else {renderer.ctxFillStyle(type==='fl'?currentStyle.co:currentStyle.grd);// ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;
		}renderer.ctxOpacity(currentStyle.coOp);if(type!=='st'&&type!=='gs'){ctx.beginPath();}renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);jLen=elems.length;for(j=0;j<jLen;j+=1){if(type==='st'||type==='gs'){ctx.beginPath();if(currentStyle.da){ctx.setLineDash(currentStyle.da);ctx.lineDashOffset=currentStyle["do"];}}nodes=elems[j].trNodes;kLen=nodes.length;for(k=0;k<kLen;k+=1){if(nodes[k].t==='m'){ctx.moveTo(nodes[k].p[0],nodes[k].p[1]);}else if(nodes[k].t==='c'){ctx.bezierCurveTo(nodes[k].pts[0],nodes[k].pts[1],nodes[k].pts[2],nodes[k].pts[3],nodes[k].pts[4],nodes[k].pts[5]);}else {ctx.closePath();}}if(type==='st'||type==='gs'){// ctx.stroke();
		renderer.ctxStroke();if(currentStyle.da){ctx.setLineDash(this.dashResetter);}}}if(type!=='st'&&type!=='gs'){// ctx.fill(currentStyle.r);
		this.globalData.renderer.ctxFill(currentStyle.r);}renderer.restore();}}};CVShapeElement.prototype.renderShape=function(parentTransform,items,data,isMain){var i;var len=items.length-1;var groupTransform;groupTransform=parentTransform;for(i=len;i>=0;i-=1){if(items[i].ty==='tr'){groupTransform=data[i].transform;this.renderShapeTransform(parentTransform,groupTransform);}else if(items[i].ty==='sh'||items[i].ty==='el'||items[i].ty==='rc'||items[i].ty==='sr'){this.renderPath(items[i],data[i]);}else if(items[i].ty==='fl'){this.renderFill(items[i],data[i],groupTransform);}else if(items[i].ty==='st'){this.renderStroke(items[i],data[i],groupTransform);}else if(items[i].ty==='gf'||items[i].ty==='gs'){this.renderGradientFill(items[i],data[i],groupTransform);}else if(items[i].ty==='gr'){this.renderShape(groupTransform,items[i].it,data[i].it);}else if(items[i].ty==='tm');}if(isMain){this.drawLayer();}};CVShapeElement.prototype.renderStyledShape=function(styledShape,shape){if(this._isFirstFrame||shape._mdf||styledShape.transforms._mdf){var shapeNodes=styledShape.trNodes;var paths=shape.paths;var i;var len;var j;var jLen=paths._length;shapeNodes.length=0;var groupTransformMat=styledShape.transforms.finalTransform;for(j=0;j<jLen;j+=1){var pathNodes=paths.shapes[j];if(pathNodes&&pathNodes.v){len=pathNodes._length;for(i=1;i<len;i+=1){if(i===1){shapeNodes.push({t:'m',p:groupTransformMat.applyToPointArray(pathNodes.v[0][0],pathNodes.v[0][1],0)});}shapeNodes.push({t:'c',pts:groupTransformMat.applyToTriplePoints(pathNodes.o[i-1],pathNodes.i[i],pathNodes.v[i])});}if(len===1){shapeNodes.push({t:'m',p:groupTransformMat.applyToPointArray(pathNodes.v[0][0],pathNodes.v[0][1],0)});}if(pathNodes.c&&len){shapeNodes.push({t:'c',pts:groupTransformMat.applyToTriplePoints(pathNodes.o[i-1],pathNodes.i[0],pathNodes.v[0])});shapeNodes.push({t:'z'});}}}styledShape.trNodes=shapeNodes;}};CVShapeElement.prototype.renderPath=function(pathData,itemData){if(pathData.hd!==true&&pathData._shouldRender){var i;var len=itemData.styledShapes.length;for(i=0;i<len;i+=1){this.renderStyledShape(itemData.styledShapes[i],itemData.sh);}}};CVShapeElement.prototype.renderFill=function(styleData,itemData,groupTransform){var styleElem=itemData.style;if(itemData.c._mdf||this._isFirstFrame){styleElem.co='rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')';}if(itemData.o._mdf||groupTransform._opMdf||this._isFirstFrame){styleElem.coOp=itemData.o.v*groupTransform.opacity;}};CVShapeElement.prototype.renderGradientFill=function(styleData,itemData,groupTransform){var styleElem=itemData.style;var grd;if(!styleElem.grd||itemData.g._mdf||itemData.s._mdf||itemData.e._mdf||styleData.t!==1&&(itemData.h._mdf||itemData.a._mdf)){var ctx=this.globalData.canvasContext;var pt1=itemData.s.v;var pt2=itemData.e.v;if(styleData.t===1){grd=ctx.createLinearGradient(pt1[0],pt1[1],pt2[0],pt2[1]);}else {var rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));var ang=Math.atan2(pt2[1]-pt1[1],pt2[0]-pt1[0]);var percent=itemData.h.v;if(percent>=1){percent=0.99;}else if(percent<=-1){percent=-0.99;}var dist=rad*percent;var x=Math.cos(ang+itemData.a.v)*dist+pt1[0];var y=Math.sin(ang+itemData.a.v)*dist+pt1[1];grd=ctx.createRadialGradient(x,y,0,pt1[0],pt1[1],rad);}var i;var len=styleData.g.p;var cValues=itemData.g.c;var opacity=1;for(i=0;i<len;i+=1){if(itemData.g._hasOpacity&&itemData.g._collapsable){opacity=itemData.g.o[i*2+1];}grd.addColorStop(cValues[i*4]/100,'rgba('+cValues[i*4+1]+','+cValues[i*4+2]+','+cValues[i*4+3]+','+opacity+')');}styleElem.grd=grd;}styleElem.coOp=itemData.o.v*groupTransform.opacity;};CVShapeElement.prototype.renderStroke=function(styleData,itemData,groupTransform){var styleElem=itemData.style;var d=itemData.d;if(d&&(d._mdf||this._isFirstFrame)){styleElem.da=d.dashArray;styleElem["do"]=d.dashoffset[0];}if(itemData.c._mdf||this._isFirstFrame){styleElem.co='rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')';}if(itemData.o._mdf||groupTransform._opMdf||this._isFirstFrame){styleElem.coOp=itemData.o.v*groupTransform.opacity;}if(itemData.w._mdf||this._isFirstFrame){styleElem.wi=itemData.w.v;}};CVShapeElement.prototype.destroy=function(){this.shapesData=null;this.globalData=null;this.canvasContext=null;this.stylesList.length=0;this.itemsData.length=0;};function CVTextElement(data,globalData,comp){this.textSpans=[];this.yOffset=0;this.fillColorAnim=false;this.strokeColorAnim=false;this.strokeWidthAnim=false;this.stroke=false;this.fill=false;this.justifyOffset=0;this.currentRender=null;this.renderType='canvas';this.values={fill:'rgba(0,0,0,0)',stroke:'rgba(0,0,0,0)',sWidth:0,fValue:''};this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement);CVTextElement.prototype.tHelper=createTag('canvas').getContext('2d');CVTextElement.prototype.buildNewText=function(){var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData.l?documentData.l.length:0);var hasFill=false;if(documentData.fc){hasFill=true;this.values.fill=this.buildColor(documentData.fc);}else {this.values.fill='rgba(0,0,0,0)';}this.fill=hasFill;var hasStroke=false;if(documentData.sc){hasStroke=true;this.values.stroke=this.buildColor(documentData.sc);this.values.sWidth=documentData.sw;}var fontData=this.globalData.fontManager.getFontByName(documentData.f);var i;var len;var letters=documentData.l;var matrixHelper=this.mHelper;this.stroke=hasStroke;this.values.fValue=documentData.finalSize+'px '+this.globalData.fontManager.getFontByName(documentData.f).fFamily;len=documentData.finalText.length;// this.tHelper.font = this.values.fValue;
		var charData;var shapeData;var k;var kLen;var shapes;var j;var jLen;var pathNodes;var commands;var pathArr;var singleShape=this.data.singleShape;var trackingOffset=documentData.tr*0.001*documentData.finalSize;var xPos=0;var yPos=0;var firstLine=true;var cnt=0;for(i=0;i<len;i+=1){charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);shapeData=charData&&charData.data||{};matrixHelper.reset();if(singleShape&&letters[i].n){xPos=-trackingOffset;yPos+=documentData.yOffset;yPos+=firstLine?1:0;firstLine=false;}shapes=shapeData.shapes?shapeData.shapes[0].it:[];jLen=shapes.length;matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);if(singleShape){this.applyTextPropertiesToMatrix(documentData,matrixHelper,letters[i].line,xPos,yPos);}commands=createSizedArray(jLen-1);var commandsCounter=0;for(j=0;j<jLen;j+=1){if(shapes[j].ty==='sh'){kLen=shapes[j].ks.k.i.length;pathNodes=shapes[j].ks.k;pathArr=[];for(k=1;k<kLen;k+=1){if(k===1){pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));}pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToY(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToX(pathNodes.v[k][0],pathNodes.v[k][1],0),matrixHelper.applyToY(pathNodes.v[k][0],pathNodes.v[k][1],0));}pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToY(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));commands[commandsCounter]=pathArr;commandsCounter+=1;}}if(singleShape){xPos+=letters[i].l;xPos+=trackingOffset;}if(this.textSpans[cnt]){this.textSpans[cnt].elem=commands;}else {this.textSpans[cnt]={elem:commands};}cnt+=1;}};CVTextElement.prototype.renderInnerContent=function(){this.validateText();var ctx=this.canvasContext;ctx.font=this.values.fValue;this.globalData.renderer.ctxLineCap('butt');// ctx.lineCap = 'butt';
		this.globalData.renderer.ctxLineJoin('miter');// ctx.lineJoin = 'miter';
		this.globalData.renderer.ctxMiterLimit(4);// ctx.miterLimit = 4;
		if(!this.data.singleShape){this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);}var i;var len;var j;var jLen;var k;var kLen;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var lastFill=null;var lastStroke=null;var lastStrokeW=null;var commands;var pathArr;var renderer=this.globalData.renderer;for(i=0;i<len;i+=1){if(!letters[i].n){renderedLetter=renderedLetters[i];if(renderedLetter){renderer.save();renderer.ctxTransform(renderedLetter.p);renderer.ctxOpacity(renderedLetter.o);}if(this.fill){if(renderedLetter&&renderedLetter.fc){if(lastFill!==renderedLetter.fc){renderer.ctxFillStyle(renderedLetter.fc);lastFill=renderedLetter.fc;// ctx.fillStyle = renderedLetter.fc;
		}}else if(lastFill!==this.values.fill){lastFill=this.values.fill;renderer.ctxFillStyle(this.values.fill);// ctx.fillStyle = this.values.fill;
		}commands=this.textSpans[i].elem;jLen=commands.length;this.globalData.canvasContext.beginPath();for(j=0;j<jLen;j+=1){pathArr=commands[j];kLen=pathArr.length;this.globalData.canvasContext.moveTo(pathArr[0],pathArr[1]);for(k=2;k<kLen;k+=6){this.globalData.canvasContext.bezierCurveTo(pathArr[k],pathArr[k+1],pathArr[k+2],pathArr[k+3],pathArr[k+4],pathArr[k+5]);}}this.globalData.canvasContext.closePath();renderer.ctxFill();// this.globalData.canvasContext.fill();
		/// ctx.fillText(this.textSpans[i].val,0,0);
		}if(this.stroke){if(renderedLetter&&renderedLetter.sw){if(lastStrokeW!==renderedLetter.sw){lastStrokeW=renderedLetter.sw;renderer.ctxLineWidth(renderedLetter.sw);// ctx.lineWidth = renderedLetter.sw;
		}}else if(lastStrokeW!==this.values.sWidth){lastStrokeW=this.values.sWidth;renderer.ctxLineWidth(this.values.sWidth);// ctx.lineWidth = this.values.sWidth;
		}if(renderedLetter&&renderedLetter.sc){if(lastStroke!==renderedLetter.sc){lastStroke=renderedLetter.sc;renderer.ctxStrokeStyle(renderedLetter.sc);// ctx.strokeStyle = renderedLetter.sc;
		}}else if(lastStroke!==this.values.stroke){lastStroke=this.values.stroke;renderer.ctxStrokeStyle(this.values.stroke);// ctx.strokeStyle = this.values.stroke;
		}commands=this.textSpans[i].elem;jLen=commands.length;this.globalData.canvasContext.beginPath();for(j=0;j<jLen;j+=1){pathArr=commands[j];kLen=pathArr.length;this.globalData.canvasContext.moveTo(pathArr[0],pathArr[1]);for(k=2;k<kLen;k+=6){this.globalData.canvasContext.bezierCurveTo(pathArr[k],pathArr[k+1],pathArr[k+2],pathArr[k+3],pathArr[k+4],pathArr[k+5]);}}this.globalData.canvasContext.closePath();renderer.ctxStroke();// this.globalData.canvasContext.stroke();
		/// ctx.strokeText(letters[i].val,0,0);
		}if(renderedLetter){this.globalData.renderer.restore();}}}};function CVImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);this.img=globalData.imageLoader.getAsset(this.assetData);this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement);CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement;CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame;CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var canvas=createTag('canvas');canvas.width=this.assetData.w;canvas.height=this.assetData.h;var ctx=canvas.getContext('2d');var imgW=this.img.width;var imgH=this.img.height;var imgRel=imgW/imgH;var canvasRel=this.assetData.w/this.assetData.h;var widthCrop;var heightCrop;var par=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;if(imgRel>canvasRel&&par==='xMidYMid slice'||imgRel<canvasRel&&par!=='xMidYMid slice'){heightCrop=imgH;widthCrop=heightCrop*canvasRel;}else {widthCrop=imgW;heightCrop=widthCrop/canvasRel;}ctx.drawImage(this.img,(imgW-widthCrop)/2,(imgH-heightCrop)/2,widthCrop,heightCrop,0,0,this.assetData.w,this.assetData.h);this.img=canvas;}};CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0);};CVImageElement.prototype.destroy=function(){this.img=null;};function CVSolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement);CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement;CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame;CVSolidElement.prototype.renderInnerContent=function(){// var ctx = this.canvasContext;
		this.globalData.renderer.ctxFillStyle(this.data.sc);// ctx.fillStyle = this.data.sc;
		this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh);// ctx.fillRect(0, 0, this.data.sw, this.data.sh);
		//
		};function CanvasRendererBase(){}extendPrototype([BaseRenderer],CanvasRendererBase);CanvasRendererBase.prototype.createShape=function(data){return new CVShapeElement(data,this.globalData,this);};CanvasRendererBase.prototype.createText=function(data){return new CVTextElement(data,this.globalData,this);};CanvasRendererBase.prototype.createImage=function(data){return new CVImageElement(data,this.globalData,this);};CanvasRendererBase.prototype.createSolid=function(data){return new CVSolidElement(data,this.globalData,this);};CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull;CanvasRendererBase.prototype.ctxTransform=function(props){if(props[0]===1&&props[1]===0&&props[4]===0&&props[5]===1&&props[12]===0&&props[13]===0){return;}this.canvasContext.transform(props[0],props[1],props[4],props[5],props[12],props[13]);};CanvasRendererBase.prototype.ctxOpacity=function(op){this.canvasContext.globalAlpha*=op<0?0:op;};CanvasRendererBase.prototype.ctxFillStyle=function(value){this.canvasContext.fillStyle=value;};CanvasRendererBase.prototype.ctxStrokeStyle=function(value){this.canvasContext.strokeStyle=value;};CanvasRendererBase.prototype.ctxLineWidth=function(value){this.canvasContext.lineWidth=value;};CanvasRendererBase.prototype.ctxLineCap=function(value){this.canvasContext.lineCap=value;};CanvasRendererBase.prototype.ctxLineJoin=function(value){this.canvasContext.lineJoin=value;};CanvasRendererBase.prototype.ctxMiterLimit=function(value){this.canvasContext.miterLimit=value;};CanvasRendererBase.prototype.ctxFill=function(rule){this.canvasContext.fill(rule);};CanvasRendererBase.prototype.ctxFillRect=function(x,y,w,h){this.canvasContext.fillRect(x,y,w,h);};CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke();};CanvasRendererBase.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return;}this.contextData.reset();};CanvasRendererBase.prototype.save=function(){this.canvasContext.save();};CanvasRendererBase.prototype.restore=function(actionFlag){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return;}if(actionFlag){this.globalData.blendMode='source-over';}this.contextData.restore(actionFlag);};CanvasRendererBase.prototype.configAnimation=function(animData){if(this.animationItem.wrapper){this.animationItem.container=createTag('canvas');var containerStyle=this.animationItem.container.style;containerStyle.width='100%';containerStyle.height='100%';var origin='0px 0px 0px';containerStyle.transformOrigin=origin;containerStyle.mozTransformOrigin=origin;containerStyle.webkitTransformOrigin=origin;containerStyle['-webkit-transform']=origin;containerStyle.contentVisibility=this.renderConfig.contentVisibility;this.animationItem.wrapper.appendChild(this.animationItem.container);this.canvasContext=this.animationItem.container.getContext('2d');if(this.renderConfig.className){this.animationItem.container.setAttribute('class',this.renderConfig.className);}if(this.renderConfig.id){this.animationItem.container.setAttribute('id',this.renderConfig.id);}}else {this.canvasContext=this.renderConfig.context;}this.contextData.setContext(this.canvasContext);this.data=animData;this.layers=animData.layers;this.transformCanvas={w:animData.w,h:animData.h,sx:0,sy:0,tx:0,ty:0};this.setupGlobalData(animData,document.body);this.globalData.canvasContext=this.canvasContext;this.globalData.renderer=this;this.globalData.isDashed=false;this.globalData.progressiveLoad=this.renderConfig.progressiveLoad;this.globalData.transformCanvas=this.transformCanvas;this.elements=createSizedArray(animData.layers.length);this.updateContainerSize();};CanvasRendererBase.prototype.updateContainerSize=function(width,height){this.reset();var elementWidth;var elementHeight;if(width){elementWidth=width;elementHeight=height;this.canvasContext.canvas.width=elementWidth;this.canvasContext.canvas.height=elementHeight;}else {if(this.animationItem.wrapper&&this.animationItem.container){elementWidth=this.animationItem.wrapper.offsetWidth;elementHeight=this.animationItem.wrapper.offsetHeight;}else {elementWidth=this.canvasContext.canvas.width;elementHeight=this.canvasContext.canvas.height;}this.canvasContext.canvas.width=elementWidth*this.renderConfig.dpr;this.canvasContext.canvas.height=elementHeight*this.renderConfig.dpr;}var elementRel;var animationRel;if(this.renderConfig.preserveAspectRatio.indexOf('meet')!==-1||this.renderConfig.preserveAspectRatio.indexOf('slice')!==-1){var par=this.renderConfig.preserveAspectRatio.split(' ');var fillType=par[1]||'meet';var pos=par[0]||'xMidYMid';var xPos=pos.substr(0,4);var yPos=pos.substr(4);elementRel=elementWidth/elementHeight;animationRel=this.transformCanvas.w/this.transformCanvas.h;if(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice'){this.transformCanvas.sx=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);this.transformCanvas.sy=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);}else {this.transformCanvas.sx=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);this.transformCanvas.sy=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);}if(xPos==='xMid'&&(animationRel<elementRel&&fillType==='meet'||animationRel>elementRel&&fillType==='slice')){this.transformCanvas.tx=(elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))/2*this.renderConfig.dpr;}else if(xPos==='xMax'&&(animationRel<elementRel&&fillType==='meet'||animationRel>elementRel&&fillType==='slice')){this.transformCanvas.tx=(elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))*this.renderConfig.dpr;}else {this.transformCanvas.tx=0;}if(yPos==='YMid'&&(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice')){this.transformCanvas.ty=(elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))/2*this.renderConfig.dpr;}else if(yPos==='YMax'&&(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice')){this.transformCanvas.ty=(elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))*this.renderConfig.dpr;}else {this.transformCanvas.ty=0;}}else if(this.renderConfig.preserveAspectRatio==='none'){this.transformCanvas.sx=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);this.transformCanvas.sy=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);this.transformCanvas.tx=0;this.transformCanvas.ty=0;}else {this.transformCanvas.sx=this.renderConfig.dpr;this.transformCanvas.sy=this.renderConfig.dpr;this.transformCanvas.tx=0;this.transformCanvas.ty=0;}this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1];/* var i, len = this.elements.length;
		      for(i=0;i<len;i+=1){
		          if(this.elements[i] && this.elements[i].data.ty === 0){
		              this.elements[i].resize(this.globalData.transformCanvas);
		          }
		      } */this.ctxTransform(this.transformCanvas.props);this.canvasContext.beginPath();this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h);this.canvasContext.closePath();this.canvasContext.clip();this.renderFrame(this.renderedFrame,true);};CanvasRendererBase.prototype.destroy=function(){if(this.renderConfig.clearCanvas&&this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}var i;var len=this.layers?this.layers.length:0;for(i=len-1;i>=0;i-=1){if(this.elements[i]&&this.elements[i].destroy){this.elements[i].destroy();}}this.elements.length=0;this.globalData.canvasContext=null;this.animationItem.container=null;this.destroyed=true;};CanvasRendererBase.prototype.renderFrame=function(num,forceRender){if(this.renderedFrame===num&&this.renderConfig.clearCanvas===true&&!forceRender||this.destroyed||num===-1){return;}this.renderedFrame=num;this.globalData.frameNum=num-this.animationItem._isFirstFrame;this.globalData.frameId+=1;this.globalData._mdf=!this.renderConfig.clearCanvas||forceRender;this.globalData.projectInterface.currentFrame=num;// console.log('--------');
		// console.log('NEW: ',num);
		var i;var len=this.layers.length;if(!this.completeLayers){this.checkLayers(num);}for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(num-this.layers[i].st);}}if(this.globalData._mdf){if(this.renderConfig.clearCanvas===true){this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h);}else {this.save();}for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}if(this.renderConfig.clearCanvas!==true){this.restore();}}};CanvasRendererBase.prototype.buildItem=function(pos){var elements=this.elements;if(elements[pos]||this.layers[pos].ty===99){return;}var element=this.createItem(this.layers[pos],this,this.globalData);elements[pos]=element;element.initExpressions();/* if(this.layers[pos].ty === 0){
		          element.resize(this.globalData.transformCanvas);
		      } */};CanvasRendererBase.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();}};CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display='none';};CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display='block';};function CanvasContext(){this.opacity=-1;this.transform=createTypedArray('float32',16);this.fillStyle='';this.strokeStyle='';this.lineWidth='';this.lineCap='';this.lineJoin='';this.miterLimit='';this.id=Math.random();}function CVContextData(){this.stack=[];this.cArrPos=0;this.cTr=new Matrix();var i;var len=15;for(i=0;i<len;i+=1){var canvasContext=new CanvasContext();this.stack[i]=canvasContext;}this._length=len;this.nativeContext=null;this.transformMat=new Matrix();this.currentOpacity=1;//
		this.currentFillStyle='';this.appliedFillStyle='';//
		this.currentStrokeStyle='';this.appliedStrokeStyle='';//
		this.currentLineWidth='';this.appliedLineWidth='';//
		this.currentLineCap='';this.appliedLineCap='';//
		this.currentLineJoin='';this.appliedLineJoin='';//
		this.appliedMiterLimit='';this.currentMiterLimit='';}CVContextData.prototype.duplicate=function(){var newLength=this._length*2;var i=0;for(i=this._length;i<newLength;i+=1){this.stack[i]=new CanvasContext();}this._length=newLength;};CVContextData.prototype.reset=function(){this.cArrPos=0;this.cTr.reset();this.stack[this.cArrPos].opacity=1;};CVContextData.prototype.restore=function(forceRestore){this.cArrPos-=1;var currentContext=this.stack[this.cArrPos];var transform=currentContext.transform;var i;var arr=this.cTr.props;for(i=0;i<16;i+=1){arr[i]=transform[i];}if(forceRestore){this.nativeContext.restore();var prevStack=this.stack[this.cArrPos+1];this.appliedFillStyle=prevStack.fillStyle;this.appliedStrokeStyle=prevStack.strokeStyle;this.appliedLineWidth=prevStack.lineWidth;this.appliedLineCap=prevStack.lineCap;this.appliedLineJoin=prevStack.lineJoin;this.appliedMiterLimit=prevStack.miterLimit;}this.nativeContext.setTransform(transform[0],transform[1],transform[4],transform[5],transform[12],transform[13]);if(forceRestore||currentContext.opacity!==-1&&this.currentOpacity!==currentContext.opacity){this.nativeContext.globalAlpha=currentContext.opacity;this.currentOpacity=currentContext.opacity;}this.currentFillStyle=currentContext.fillStyle;this.currentStrokeStyle=currentContext.strokeStyle;this.currentLineWidth=currentContext.lineWidth;this.currentLineCap=currentContext.lineCap;this.currentLineJoin=currentContext.lineJoin;this.currentMiterLimit=currentContext.miterLimit;};CVContextData.prototype.save=function(saveOnNativeFlag){if(saveOnNativeFlag){this.nativeContext.save();}var props=this.cTr.props;if(this._length<=this.cArrPos){this.duplicate();}var currentStack=this.stack[this.cArrPos];var i;for(i=0;i<16;i+=1){currentStack.transform[i]=props[i];}this.cArrPos+=1;var newStack=this.stack[this.cArrPos];newStack.opacity=currentStack.opacity;newStack.fillStyle=currentStack.fillStyle;newStack.strokeStyle=currentStack.strokeStyle;newStack.lineWidth=currentStack.lineWidth;newStack.lineCap=currentStack.lineCap;newStack.lineJoin=currentStack.lineJoin;newStack.miterLimit=currentStack.miterLimit;};CVContextData.prototype.setOpacity=function(value){this.stack[this.cArrPos].opacity=value;};CVContextData.prototype.setContext=function(value){this.nativeContext=value;};CVContextData.prototype.fillStyle=function(value){if(this.stack[this.cArrPos].fillStyle!==value){this.currentFillStyle=value;this.stack[this.cArrPos].fillStyle=value;}};CVContextData.prototype.strokeStyle=function(value){if(this.stack[this.cArrPos].strokeStyle!==value){this.currentStrokeStyle=value;this.stack[this.cArrPos].strokeStyle=value;}};CVContextData.prototype.lineWidth=function(value){if(this.stack[this.cArrPos].lineWidth!==value){this.currentLineWidth=value;this.stack[this.cArrPos].lineWidth=value;}};CVContextData.prototype.lineCap=function(value){if(this.stack[this.cArrPos].lineCap!==value){this.currentLineCap=value;this.stack[this.cArrPos].lineCap=value;}};CVContextData.prototype.lineJoin=function(value){if(this.stack[this.cArrPos].lineJoin!==value){this.currentLineJoin=value;this.stack[this.cArrPos].lineJoin=value;}};CVContextData.prototype.miterLimit=function(value){if(this.stack[this.cArrPos].miterLimit!==value){this.currentMiterLimit=value;this.stack[this.cArrPos].miterLimit=value;}};CVContextData.prototype.transform=function(props){this.transformMat.cloneFromProps(props);// Taking the last transform value from the stored stack of transforms
		var currentTransform=this.cTr;// Applying the last transform value after the new transform to respect the order of transformations
		this.transformMat.multiply(currentTransform);// Storing the new transformed value in the stored transform
		currentTransform.cloneFromProps(this.transformMat.props);var trProps=currentTransform.props;// Applying the new transform to the canvas
		this.nativeContext.setTransform(trProps[0],trProps[1],trProps[4],trProps[5],trProps[12],trProps[13]);};CVContextData.prototype.opacity=function(op){var currentOpacity=this.stack[this.cArrPos].opacity;currentOpacity*=op<0?0:op;if(this.stack[this.cArrPos].opacity!==currentOpacity){if(this.currentOpacity!==op){this.nativeContext.globalAlpha=op;this.currentOpacity=op;}this.stack[this.cArrPos].opacity=currentOpacity;}};CVContextData.prototype.fill=function(rule){if(this.appliedFillStyle!==this.currentFillStyle){this.appliedFillStyle=this.currentFillStyle;this.nativeContext.fillStyle=this.appliedFillStyle;}this.nativeContext.fill(rule);};CVContextData.prototype.fillRect=function(x,y,w,h){if(this.appliedFillStyle!==this.currentFillStyle){this.appliedFillStyle=this.currentFillStyle;this.nativeContext.fillStyle=this.appliedFillStyle;}this.nativeContext.fillRect(x,y,w,h);};CVContextData.prototype.stroke=function(){if(this.appliedStrokeStyle!==this.currentStrokeStyle){this.appliedStrokeStyle=this.currentStrokeStyle;this.nativeContext.strokeStyle=this.appliedStrokeStyle;}if(this.appliedLineWidth!==this.currentLineWidth){this.appliedLineWidth=this.currentLineWidth;this.nativeContext.lineWidth=this.appliedLineWidth;}if(this.appliedLineCap!==this.currentLineCap){this.appliedLineCap=this.currentLineCap;this.nativeContext.lineCap=this.appliedLineCap;}if(this.appliedLineJoin!==this.currentLineJoin){this.appliedLineJoin=this.currentLineJoin;this.nativeContext.lineJoin=this.appliedLineJoin;}if(this.appliedMiterLimit!==this.currentMiterLimit){this.appliedMiterLimit=this.currentMiterLimit;this.nativeContext.miterLimit=this.appliedMiterLimit;}this.nativeContext.stroke();};function CVCompElement(data,globalData,comp){this.completeLayers=false;this.layers=data.layers;this.pendingElements=[];this.elements=createSizedArray(this.layers.length);this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement);CVCompElement.prototype.renderInnerContent=function(){var ctx=this.canvasContext;ctx.beginPath();ctx.moveTo(0,0);ctx.lineTo(this.data.w,0);ctx.lineTo(this.data.w,this.data.h);ctx.lineTo(0,this.data.h);ctx.lineTo(0,0);ctx.clip();var i;var len=this.layers.length;for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}};CVCompElement.prototype.destroy=function(){var i;var len=this.layers.length;for(i=len-1;i>=0;i-=1){if(this.elements[i]){this.elements[i].destroy();}}this.layers=null;this.elements=null;};CVCompElement.prototype.createComp=function(data){return new CVCompElement(data,this.globalData,this);};function CanvasRenderer(animationItem,config){this.animationItem=animationItem;this.renderConfig={clearCanvas:config&&config.clearCanvas!==undefined?config.clearCanvas:true,context:config&&config.context||null,progressiveLoad:config&&config.progressiveLoad||false,preserveAspectRatio:config&&config.preserveAspectRatio||'xMidYMid meet',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',contentVisibility:config&&config.contentVisibility||'visible',className:config&&config.className||'',id:config&&config.id||'',runExpressions:!config||config.runExpressions===undefined||config.runExpressions};this.renderConfig.dpr=config&&config.dpr||1;if(this.animationItem.wrapper){this.renderConfig.dpr=config&&config.dpr||window.devicePixelRatio||1;}this.renderedFrame=-1;this.globalData={frameNum:-1,_mdf:false,renderConfig:this.renderConfig,currentGlobalAlpha:-1};this.contextData=new CVContextData();this.elements=[];this.pendingElements=[];this.transformMat=new Matrix();this.completeLayers=false;this.rendererType='canvas';if(this.renderConfig.clearCanvas){this.ctxTransform=this.contextData.transform.bind(this.contextData);this.ctxOpacity=this.contextData.opacity.bind(this.contextData);this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData);this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData);this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData);this.ctxLineCap=this.contextData.lineCap.bind(this.contextData);this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData);this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData);this.ctxFill=this.contextData.fill.bind(this.contextData);this.ctxFillRect=this.contextData.fillRect.bind(this.contextData);this.ctxStroke=this.contextData.stroke.bind(this.contextData);this.save=this.contextData.save.bind(this.contextData);}}extendPrototype([CanvasRendererBase],CanvasRenderer);CanvasRenderer.prototype.createComp=function(data){return new CVCompElement(data,this.globalData,this);};function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function checkBlendMode(){},initRendererElement:function initRendererElement(){this.baseElement=createTag(this.data.tg||'div');if(this.data.hasMask){this.svgElement=createNS('svg');this.layerElement=createNS('g');this.maskedElement=this.layerElement;this.svgElement.appendChild(this.layerElement);this.baseElement.appendChild(this.svgElement);}else {this.layerElement=this.baseElement;}styleDiv(this.baseElement);},createContainerElements:function createContainerElements(){this.renderableEffectsManager=new CVEffects(this);this.transformedElement=this.baseElement;this.maskedElement=this.layerElement;if(this.data.ln){this.layerElement.setAttribute('id',this.data.ln);}if(this.data.cl){this.layerElement.setAttribute('class',this.data.cl);}if(this.data.bm!==0){this.setBlendMode();}},renderElement:function renderElement(){var transformedElementStyle=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var matrixValue=this.finalTransform.mat.toCSS();transformedElementStyle.transform=matrixValue;transformedElementStyle.webkitTransform=matrixValue;}if(this.finalTransform._opMdf){transformedElementStyle.opacity=this.finalTransform.mProp.o.v;}},renderFrame:function renderFrame(){// If it is exported as hidden (data.hd === true) no need to render
		// If it is not visible no need to render
		if(this.data.hd||this.hidden){return;}this.renderTransform();this.renderRenderable();this.renderElement();this.renderInnerContent();if(this._isFirstFrame){this._isFirstFrame=false;}},destroy:function destroy(){this.layerElement=null;this.transformedElement=null;if(this.matteElement){this.matteElement=null;}if(this.maskManager){this.maskManager.destroy();this.maskManager=null;}},createRenderableComponents:function createRenderableComponents(){this.maskManager=new MaskElement(this.data,this,this.globalData);},addEffects:function addEffects(){},setMatte:function setMatte(){}};HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement;HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy;HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting;function HSolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement);HSolidElement.prototype.createContent=function(){var rect;if(this.data.hasMask){rect=createNS('rect');rect.setAttribute('width',this.data.sw);rect.setAttribute('height',this.data.sh);rect.setAttribute('fill',this.data.sc);this.svgElement.setAttribute('width',this.data.sw);this.svgElement.setAttribute('height',this.data.sh);}else {rect=createTag('div');rect.style.width=this.data.sw+'px';rect.style.height=this.data.sh+'px';rect.style.backgroundColor=this.data.sc;}this.layerElement.appendChild(rect);};function HShapeElement(data,globalData,comp){// List of drawable elements
		this.shapes=[];// Full shape data
		this.shapesData=data.shapes;// List of styles that will be applied to shapes
		this.stylesList=[];// List of modifiers that will be applied to shapes
		this.shapeModifiers=[];// List of items in shape tree
		this.itemsData=[];// List of items in previous shape tree
		this.processedElements=[];// List of animated components
		this.animatedContents=[];this.shapesContainer=createNS('g');this.initElement(data,globalData,comp);// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
		// List of elements that have been created
		this.prevViewData=[];this.currentBBox={x:999999,y:-999999,h:0,w:0};}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement);HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent;HShapeElement.prototype.createContent=function(){var cont;this.baseElement.style.fontSize=0;if(this.data.hasMask){this.layerElement.appendChild(this.shapesContainer);cont=this.svgElement;}else {cont=createNS('svg');var size=this.comp.data?this.comp.data:this.globalData.compSize;cont.setAttribute('width',size.w);cont.setAttribute('height',size.h);cont.appendChild(this.shapesContainer);this.layerElement.appendChild(cont);}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],true);this.filterUniqueShapes();this.shapeCont=cont;};HShapeElement.prototype.getTransformedPoint=function(transformers,point){var i;var len=transformers.length;for(i=0;i<len;i+=1){point=transformers[i].mProps.v.applyToPointArray(point[0],point[1],0);}return point;};HShapeElement.prototype.calculateShapeBoundingBox=function(item,boundingBox){var shape=item.sh.v;var transformers=item.transformers;var i;var len=shape._length;var vPoint;var oPoint;var nextIPoint;var nextVPoint;if(len<=1){return;}for(i=0;i<len-1;i+=1){vPoint=this.getTransformedPoint(transformers,shape.v[i]);oPoint=this.getTransformedPoint(transformers,shape.o[i]);nextIPoint=this.getTransformedPoint(transformers,shape.i[i+1]);nextVPoint=this.getTransformedPoint(transformers,shape.v[i+1]);this.checkBounds(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox);}if(shape.c){vPoint=this.getTransformedPoint(transformers,shape.v[i]);oPoint=this.getTransformedPoint(transformers,shape.o[i]);nextIPoint=this.getTransformedPoint(transformers,shape.i[0]);nextVPoint=this.getTransformedPoint(transformers,shape.v[0]);this.checkBounds(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox);}};HShapeElement.prototype.checkBounds=function(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox){this.getBoundsOfCurve(vPoint,oPoint,nextIPoint,nextVPoint);var bounds=this.shapeBoundingBox;boundingBox.x=bmMin(bounds.left,boundingBox.x);boundingBox.xMax=bmMax(bounds.right,boundingBox.xMax);boundingBox.y=bmMin(bounds.top,boundingBox.y);boundingBox.yMax=bmMax(bounds.bottom,boundingBox.yMax);};HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0};HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0};HShapeElement.prototype.getBoundsOfCurve=function(p0,p1,p2,p3){var bounds=[[p0[0],p3[0]],[p0[1],p3[1]]];for(var a,b,c,t,b2ac,t1,t2,i=0;i<2;++i){// eslint-disable-line no-plusplus
		b=6*p0[i]-12*p1[i]+6*p2[i];a=-3*p0[i]+9*p1[i]-9*p2[i]+3*p3[i];c=3*p1[i]-3*p0[i];b|=0;// eslint-disable-line no-bitwise
		a|=0;// eslint-disable-line no-bitwise
		c|=0;// eslint-disable-line no-bitwise
		if(a===0&&b===0);else if(a===0){t=-c/b;if(t>0&&t<1){bounds[i].push(this.calculateF(t,p0,p1,p2,p3,i));}}else {b2ac=b*b-4*c*a;if(b2ac>=0){t1=(-b+bmSqrt(b2ac))/(2*a);if(t1>0&&t1<1)bounds[i].push(this.calculateF(t1,p0,p1,p2,p3,i));t2=(-b-bmSqrt(b2ac))/(2*a);if(t2>0&&t2<1)bounds[i].push(this.calculateF(t2,p0,p1,p2,p3,i));}}}this.shapeBoundingBox.left=bmMin.apply(null,bounds[0]);this.shapeBoundingBox.top=bmMin.apply(null,bounds[1]);this.shapeBoundingBox.right=bmMax.apply(null,bounds[0]);this.shapeBoundingBox.bottom=bmMax.apply(null,bounds[1]);};HShapeElement.prototype.calculateF=function(t,p0,p1,p2,p3,i){return bmPow(1-t,3)*p0[i]+3*bmPow(1-t,2)*t*p1[i]+3*(1-t)*bmPow(t,2)*p2[i]+bmPow(t,3)*p3[i];};HShapeElement.prototype.calculateBoundingBox=function(itemsData,boundingBox){var i;var len=itemsData.length;for(i=0;i<len;i+=1){if(itemsData[i]&&itemsData[i].sh){this.calculateShapeBoundingBox(itemsData[i],boundingBox);}else if(itemsData[i]&&itemsData[i].it){this.calculateBoundingBox(itemsData[i].it,boundingBox);}else if(itemsData[i]&&itemsData[i].style&&itemsData[i].w){this.expandStrokeBoundingBox(itemsData[i].w,boundingBox);}}};HShapeElement.prototype.expandStrokeBoundingBox=function(widthProperty,boundingBox){var width=0;if(widthProperty.keyframes){for(var i=0;i<widthProperty.keyframes.length;i+=1){var kfw=widthProperty.keyframes[i].s;if(kfw>width){width=kfw;}}width*=widthProperty.mult;}else {width=widthProperty.v*widthProperty.mult;}boundingBox.x-=width;boundingBox.xMax+=width;boundingBox.y-=width;boundingBox.yMax+=width;};HShapeElement.prototype.currentBoxContains=function(box){return this.currentBBox.x<=box.x&&this.currentBBox.y<=box.y&&this.currentBBox.width+this.currentBBox.x>=box.x+box.width&&this.currentBBox.height+this.currentBBox.y>=box.y+box.height;};HShapeElement.prototype.renderInnerContent=function(){this._renderShapeFrame();if(!this.hidden&&(this._isFirstFrame||this._mdf)){var tempBoundingBox=this.tempBoundingBox;var max=999999;tempBoundingBox.x=max;tempBoundingBox.xMax=-max;tempBoundingBox.y=max;tempBoundingBox.yMax=-max;this.calculateBoundingBox(this.itemsData,tempBoundingBox);tempBoundingBox.width=tempBoundingBox.xMax<tempBoundingBox.x?0:tempBoundingBox.xMax-tempBoundingBox.x;tempBoundingBox.height=tempBoundingBox.yMax<tempBoundingBox.y?0:tempBoundingBox.yMax-tempBoundingBox.y;// var tempBoundingBox = this.shapeCont.getBBox();
		if(this.currentBoxContains(tempBoundingBox)){return;}var changed=false;if(this.currentBBox.w!==tempBoundingBox.width){this.currentBBox.w=tempBoundingBox.width;this.shapeCont.setAttribute('width',tempBoundingBox.width);changed=true;}if(this.currentBBox.h!==tempBoundingBox.height){this.currentBBox.h=tempBoundingBox.height;this.shapeCont.setAttribute('height',tempBoundingBox.height);changed=true;}if(changed||this.currentBBox.x!==tempBoundingBox.x||this.currentBBox.y!==tempBoundingBox.y){this.currentBBox.w=tempBoundingBox.width;this.currentBBox.h=tempBoundingBox.height;this.currentBBox.x=tempBoundingBox.x;this.currentBBox.y=tempBoundingBox.y;this.shapeCont.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);var shapeStyle=this.shapeCont.style;var shapeTransform='translate('+this.currentBBox.x+'px,'+this.currentBBox.y+'px)';shapeStyle.transform=shapeTransform;shapeStyle.webkitTransform=shapeTransform;}}};function HTextElement(data,globalData,comp){this.textSpans=[];this.textPaths=[];this.currentBBox={x:999999,y:-999999,h:0,w:0};this.renderType='svg';this.isMasked=false;this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement);HTextElement.prototype.createContent=function(){this.isMasked=this.checkMasks();if(this.isMasked){this.renderType='svg';this.compW=this.comp.data.w;this.compH=this.comp.data.h;this.svgElement.setAttribute('width',this.compW);this.svgElement.setAttribute('height',this.compH);var g=createNS('g');this.maskedElement.appendChild(g);this.innerElem=g;}else {this.renderType='html';this.innerElem=this.layerElement;}this.checkParenting();};HTextElement.prototype.buildNewText=function(){var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData.l?documentData.l.length:0);var innerElemStyle=this.innerElem.style;var textColor=documentData.fc?this.buildColor(documentData.fc):'rgba(0,0,0,0)';innerElemStyle.fill=textColor;innerElemStyle.color=textColor;if(documentData.sc){innerElemStyle.stroke=this.buildColor(documentData.sc);innerElemStyle.strokeWidth=documentData.sw+'px';}var fontData=this.globalData.fontManager.getFontByName(documentData.f);if(!this.globalData.fontManager.chars){innerElemStyle.fontSize=documentData.finalSize+'px';innerElemStyle.lineHeight=documentData.finalSize+'px';if(fontData.fClass){this.innerElem.className=fontData.fClass;}else {innerElemStyle.fontFamily=fontData.fFamily;var fWeight=documentData.fWeight;var fStyle=documentData.fStyle;innerElemStyle.fontStyle=fStyle;innerElemStyle.fontWeight=fWeight;}}var i;var len;var letters=documentData.l;len=letters.length;var tSpan;var tParent;var tCont;var matrixHelper=this.mHelper;var shapes;var shapeStr='';var cnt=0;for(i=0;i<len;i+=1){if(this.globalData.fontManager.chars){if(!this.textPaths[cnt]){tSpan=createNS('path');tSpan.setAttribute('stroke-linecap',lineCapEnum[1]);tSpan.setAttribute('stroke-linejoin',lineJoinEnum[2]);tSpan.setAttribute('stroke-miterlimit','4');}else {tSpan=this.textPaths[cnt];}if(!this.isMasked){if(this.textSpans[cnt]){tParent=this.textSpans[cnt];tCont=tParent.children[0];}else {tParent=createTag('div');tParent.style.lineHeight=0;tCont=createNS('svg');tCont.appendChild(tSpan);styleDiv(tParent);}}}else if(!this.isMasked){if(this.textSpans[cnt]){tParent=this.textSpans[cnt];tSpan=this.textPaths[cnt];}else {tParent=createTag('span');styleDiv(tParent);tSpan=createTag('span');styleDiv(tSpan);tParent.appendChild(tSpan);}}else {tSpan=this.textPaths[cnt]?this.textPaths[cnt]:createNS('text');}// tSpan.setAttribute('visibility', 'hidden');
		if(this.globalData.fontManager.chars){var charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);var shapeData;if(charData){shapeData=charData.data;}else {shapeData=null;}matrixHelper.reset();if(shapeData&&shapeData.shapes&&shapeData.shapes.length){shapes=shapeData.shapes[0].it;matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);shapeStr=this.createPathShape(matrixHelper,shapes);tSpan.setAttribute('d',shapeStr);}if(!this.isMasked){this.innerElem.appendChild(tParent);if(shapeData&&shapeData.shapes){// document.body.appendChild is needed to get exact measure of shape
		document.body.appendChild(tCont);var boundingBox=tCont.getBBox();tCont.setAttribute('width',boundingBox.width+2);tCont.setAttribute('height',boundingBox.height+2);tCont.setAttribute('viewBox',boundingBox.x-1+' '+(boundingBox.y-1)+' '+(boundingBox.width+2)+' '+(boundingBox.height+2));var tContStyle=tCont.style;var tContTranslation='translate('+(boundingBox.x-1)+'px,'+(boundingBox.y-1)+'px)';tContStyle.transform=tContTranslation;tContStyle.webkitTransform=tContTranslation;letters[i].yOffset=boundingBox.y-1;}else {tCont.setAttribute('width',1);tCont.setAttribute('height',1);}tParent.appendChild(tCont);}else {this.innerElem.appendChild(tSpan);}}else {tSpan.textContent=letters[i].val;tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace','xml:space','preserve');if(!this.isMasked){this.innerElem.appendChild(tParent);//
		var tStyle=tSpan.style;var tSpanTranslation='translate3d(0,'+-documentData.finalSize/1.2+'px,0)';tStyle.transform=tSpanTranslation;tStyle.webkitTransform=tSpanTranslation;}else {this.innerElem.appendChild(tSpan);}}//
		if(!this.isMasked){this.textSpans[cnt]=tParent;}else {this.textSpans[cnt]=tSpan;}this.textSpans[cnt].style.display='block';this.textPaths[cnt]=tSpan;cnt+=1;}while(cnt<this.textSpans.length){this.textSpans[cnt].style.display='none';cnt+=1;}};HTextElement.prototype.renderInnerContent=function(){this.validateText();var svgStyle;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag){return;}if(this.isMasked&&this.finalTransform._matMdf){// Todo Benchmark if using this is better than getBBox
		this.svgElement.setAttribute('viewBox',-this.finalTransform.mProp.p.v[0]+' '+-this.finalTransform.mProp.p.v[1]+' '+this.compW+' '+this.compH);svgStyle=this.svgElement.style;var translation='translate('+-this.finalTransform.mProp.p.v[0]+'px,'+-this.finalTransform.mProp.p.v[1]+'px)';svgStyle.transform=translation;svgStyle.webkitTransform=translation;}}this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);if(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag){return;}var i;var len;var count=0;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var textSpan;var textPath;for(i=0;i<len;i+=1){if(letters[i].n){count+=1;}else {textSpan=this.textSpans[i];textPath=this.textPaths[i];renderedLetter=renderedLetters[count];count+=1;if(renderedLetter._mdf.m){if(!this.isMasked){textSpan.style.webkitTransform=renderedLetter.m;textSpan.style.transform=renderedLetter.m;}else {textSpan.setAttribute('transform',renderedLetter.m);}}/// /textSpan.setAttribute('opacity',renderedLetter.o);
		textSpan.style.opacity=renderedLetter.o;if(renderedLetter.sw&&renderedLetter._mdf.sw){textPath.setAttribute('stroke-width',renderedLetter.sw);}if(renderedLetter.sc&&renderedLetter._mdf.sc){textPath.setAttribute('stroke',renderedLetter.sc);}if(renderedLetter.fc&&renderedLetter._mdf.fc){textPath.setAttribute('fill',renderedLetter.fc);textPath.style.color=renderedLetter.fc;}}}if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var boundingBox=this.innerElem.getBBox();if(this.currentBBox.w!==boundingBox.width){this.currentBBox.w=boundingBox.width;this.svgElement.setAttribute('width',boundingBox.width);}if(this.currentBBox.h!==boundingBox.height){this.currentBBox.h=boundingBox.height;this.svgElement.setAttribute('height',boundingBox.height);}var margin=1;if(this.currentBBox.w!==boundingBox.width+margin*2||this.currentBBox.h!==boundingBox.height+margin*2||this.currentBBox.x!==boundingBox.x-margin||this.currentBBox.y!==boundingBox.y-margin){this.currentBBox.w=boundingBox.width+margin*2;this.currentBBox.h=boundingBox.height+margin*2;this.currentBBox.x=boundingBox.x-margin;this.currentBBox.y=boundingBox.y-margin;this.svgElement.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);svgStyle=this.svgElement.style;var svgTransform='translate('+this.currentBBox.x+'px,'+this.currentBBox.y+'px)';svgStyle.transform=svgTransform;svgStyle.webkitTransform=svgTransform;}}};function HCameraElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initHierarchy();var getProp=PropertyFactory.getProp;this.pe=getProp(this,data.pe,0,0,this);if(data.ks.p.s){this.px=getProp(this,data.ks.p.x,1,0,this);this.py=getProp(this,data.ks.p.y,1,0,this);this.pz=getProp(this,data.ks.p.z,1,0,this);}else {this.p=getProp(this,data.ks.p,1,0,this);}if(data.ks.a){this.a=getProp(this,data.ks.a,1,0,this);}if(data.ks.or.k.length&&data.ks.or.k[0].to){var i;var len=data.ks.or.k.length;for(i=0;i<len;i+=1){data.ks.or.k[i].to=null;data.ks.or.k[i].ti=null;}}this.or=getProp(this,data.ks.or,1,degToRads,this);this.or.sh=true;this.rx=getProp(this,data.ks.rx,0,degToRads,this);this.ry=getProp(this,data.ks.ry,0,degToRads,this);this.rz=getProp(this,data.ks.rz,0,degToRads,this);this.mat=new Matrix();this._prevMat=new Matrix();this._isFirstFrame=true;// TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.
		this.finalTransform={mProp:this};}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement);HCameraElement.prototype.setup=function(){var i;var len=this.comp.threeDElements.length;var comp;var perspectiveStyle;var containerStyle;for(i=0;i<len;i+=1){// [perspectiveElem,container]
		comp=this.comp.threeDElements[i];if(comp.type==='3d'){perspectiveStyle=comp.perspectiveElem.style;containerStyle=comp.container.style;var perspective=this.pe.v+'px';var origin='0px 0px 0px';var matrix='matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';perspectiveStyle.perspective=perspective;perspectiveStyle.webkitPerspective=perspective;containerStyle.transformOrigin=origin;containerStyle.mozTransformOrigin=origin;containerStyle.webkitTransformOrigin=origin;perspectiveStyle.transform=matrix;perspectiveStyle.webkitTransform=matrix;}}};HCameraElement.prototype.createElements=function(){};HCameraElement.prototype.hide=function(){};HCameraElement.prototype.renderFrame=function(){var _mdf=this._isFirstFrame;var i;var len;if(this.hierarchy){len=this.hierarchy.length;for(i=0;i<len;i+=1){_mdf=this.hierarchy[i].finalTransform.mProp._mdf||_mdf;}}if(_mdf||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){this.mat.reset();if(this.hierarchy){len=this.hierarchy.length-1;for(i=len;i>=0;i-=1){var mTransf=this.hierarchy[i].finalTransform.mProp;this.mat.translate(-mTransf.p.v[0],-mTransf.p.v[1],mTransf.p.v[2]);this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);this.mat.scale(1/mTransf.s.v[0],1/mTransf.s.v[1],1/mTransf.s.v[2]);this.mat.translate(mTransf.a.v[0],mTransf.a.v[1],mTransf.a.v[2]);}}if(this.p){this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]);}else {this.mat.translate(-this.px.v,-this.py.v,this.pz.v);}if(this.a){var diffVector;if(this.p){diffVector=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]];}else {diffVector=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];}var mag=Math.sqrt(Math.pow(diffVector[0],2)+Math.pow(diffVector[1],2)+Math.pow(diffVector[2],2));// var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));
		var lookDir=[diffVector[0]/mag,diffVector[1]/mag,diffVector[2]/mag];var lookLengthOnXZ=Math.sqrt(lookDir[2]*lookDir[2]+lookDir[0]*lookDir[0]);var mRotationX=Math.atan2(lookDir[1],lookLengthOnXZ);var mRotationY=Math.atan2(lookDir[0],-lookDir[2]);this.mat.rotateY(mRotationY).rotateX(-mRotationX);}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0);this.mat.translate(0,0,this.pe.v);var hasMatrixChanged=!this._prevMat.equals(this.mat);if((hasMatrixChanged||this.pe._mdf)&&this.comp.threeDElements){len=this.comp.threeDElements.length;var comp;var perspectiveStyle;var containerStyle;for(i=0;i<len;i+=1){comp=this.comp.threeDElements[i];if(comp.type==='3d'){if(hasMatrixChanged){var matValue=this.mat.toCSS();containerStyle=comp.container.style;containerStyle.transform=matValue;containerStyle.webkitTransform=matValue;}if(this.pe._mdf){perspectiveStyle=comp.perspectiveElem.style;perspectiveStyle.perspective=this.pe.v+'px';perspectiveStyle.webkitPerspective=this.pe.v+'px';}}}this.mat.clone(this._prevMat);}}this._isFirstFrame=false;};HCameraElement.prototype.prepareFrame=function(num){this.prepareProperties(num,true);};HCameraElement.prototype.destroy=function(){};HCameraElement.prototype.getBaseElement=function(){return null;};function HImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement);HImageElement.prototype.createContent=function(){var assetPath=this.globalData.getAssetsPath(this.assetData);var img=new Image();if(this.data.hasMask){this.imageElem=createNS('image');this.imageElem.setAttribute('width',this.assetData.w+'px');this.imageElem.setAttribute('height',this.assetData.h+'px');this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);this.layerElement.appendChild(this.imageElem);this.baseElement.setAttribute('width',this.assetData.w);this.baseElement.setAttribute('height',this.assetData.h);}else {this.layerElement.appendChild(img);}img.crossOrigin='anonymous';img.src=assetPath;if(this.data.ln){this.baseElement.setAttribute('id',this.data.ln);}};function HybridRendererBase(animationItem,config){this.animationItem=animationItem;this.layers=null;this.renderedFrame=-1;this.renderConfig={className:config&&config.className||'',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',hideOnTransparent:!(config&&config.hideOnTransparent===false),filterSize:{width:config&&config.filterSize&&config.filterSize.width||'400%',height:config&&config.filterSize&&config.filterSize.height||'400%',x:config&&config.filterSize&&config.filterSize.x||'-100%',y:config&&config.filterSize&&config.filterSize.y||'-100%'}};this.globalData={_mdf:false,frameNum:-1,renderConfig:this.renderConfig};this.pendingElements=[];this.elements=[];this.threeDElements=[];this.destroyed=false;this.camera=null;this.supports3d=true;this.rendererType='html';}extendPrototype([BaseRenderer],HybridRendererBase);HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem;HybridRendererBase.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();}};HybridRendererBase.prototype.appendElementInPos=function(element,pos){var newDOMElement=element.getBaseElement();if(!newDOMElement){return;}var layer=this.layers[pos];if(!layer.ddd||!this.supports3d){if(this.threeDElements){this.addTo3dContainer(newDOMElement,pos);}else {var i=0;var nextDOMElement;var nextLayer;var tmpDOMElement;while(i<pos){if(this.elements[i]&&this.elements[i]!==true&&this.elements[i].getBaseElement){nextLayer=this.elements[i];tmpDOMElement=this.layers[i].ddd?this.getThreeDContainerByPos(i):nextLayer.getBaseElement();nextDOMElement=tmpDOMElement||nextDOMElement;}i+=1;}if(nextDOMElement){if(!layer.ddd||!this.supports3d){this.layerElement.insertBefore(newDOMElement,nextDOMElement);}}else if(!layer.ddd||!this.supports3d){this.layerElement.appendChild(newDOMElement);}}}else {this.addTo3dContainer(newDOMElement,pos);}};HybridRendererBase.prototype.createShape=function(data){if(!this.supports3d){return new SVGShapeElement(data,this.globalData,this);}return new HShapeElement(data,this.globalData,this);};HybridRendererBase.prototype.createText=function(data){if(!this.supports3d){return new SVGTextLottieElement(data,this.globalData,this);}return new HTextElement(data,this.globalData,this);};HybridRendererBase.prototype.createCamera=function(data){this.camera=new HCameraElement(data,this.globalData,this);return this.camera;};HybridRendererBase.prototype.createImage=function(data){if(!this.supports3d){return new IImageElement(data,this.globalData,this);}return new HImageElement(data,this.globalData,this);};HybridRendererBase.prototype.createSolid=function(data){if(!this.supports3d){return new ISolidElement(data,this.globalData,this);}return new HSolidElement(data,this.globalData,this);};HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull;HybridRendererBase.prototype.getThreeDContainerByPos=function(pos){var i=0;var len=this.threeDElements.length;while(i<len){if(this.threeDElements[i].startPos<=pos&&this.threeDElements[i].endPos>=pos){return this.threeDElements[i].perspectiveElem;}i+=1;}return null;};HybridRendererBase.prototype.createThreeDContainer=function(pos,type){var perspectiveElem=createTag('div');var style;var containerStyle;styleDiv(perspectiveElem);var container=createTag('div');styleDiv(container);if(type==='3d'){style=perspectiveElem.style;style.width=this.globalData.compSize.w+'px';style.height=this.globalData.compSize.h+'px';var center='50% 50%';style.webkitTransformOrigin=center;style.mozTransformOrigin=center;style.transformOrigin=center;containerStyle=container.style;var matrix='matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';containerStyle.transform=matrix;containerStyle.webkitTransform=matrix;}perspectiveElem.appendChild(container);// this.resizerElem.appendChild(perspectiveElem);
		var threeDContainerData={container:container,perspectiveElem:perspectiveElem,startPos:pos,endPos:pos,type:type};this.threeDElements.push(threeDContainerData);return threeDContainerData;};HybridRendererBase.prototype.build3dContainers=function(){var i;var len=this.layers.length;var lastThreeDContainerData;var currentContainer='';for(i=0;i<len;i+=1){if(this.layers[i].ddd&&this.layers[i].ty!==3){if(currentContainer!=='3d'){currentContainer='3d';lastThreeDContainerData=this.createThreeDContainer(i,'3d');}lastThreeDContainerData.endPos=Math.max(lastThreeDContainerData.endPos,i);}else {if(currentContainer!=='2d'){currentContainer='2d';lastThreeDContainerData=this.createThreeDContainer(i,'2d');}lastThreeDContainerData.endPos=Math.max(lastThreeDContainerData.endPos,i);}}len=this.threeDElements.length;for(i=len-1;i>=0;i-=1){this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);}};HybridRendererBase.prototype.addTo3dContainer=function(elem,pos){var i=0;var len=this.threeDElements.length;while(i<len){if(pos<=this.threeDElements[i].endPos){var j=this.threeDElements[i].startPos;var nextElement;while(j<pos){if(this.elements[j]&&this.elements[j].getBaseElement){nextElement=this.elements[j].getBaseElement();}j+=1;}if(nextElement){this.threeDElements[i].container.insertBefore(elem,nextElement);}else {this.threeDElements[i].container.appendChild(elem);}break;}i+=1;}};HybridRendererBase.prototype.configAnimation=function(animData){var resizerElem=createTag('div');var wrapper=this.animationItem.wrapper;var style=resizerElem.style;style.width=animData.w+'px';style.height=animData.h+'px';this.resizerElem=resizerElem;styleDiv(resizerElem);style.transformStyle='flat';style.mozTransformStyle='flat';style.webkitTransformStyle='flat';if(this.renderConfig.className){resizerElem.setAttribute('class',this.renderConfig.className);}wrapper.appendChild(resizerElem);style.overflow='hidden';var svg=createNS('svg');svg.setAttribute('width','1');svg.setAttribute('height','1');styleDiv(svg);this.resizerElem.appendChild(svg);var defs=createNS('defs');svg.appendChild(defs);this.data=animData;// Mask animation
		this.setupGlobalData(animData,svg);this.globalData.defs=defs;this.layers=animData.layers;this.layerElement=this.resizerElem;this.build3dContainers();this.updateContainerSize();};HybridRendererBase.prototype.destroy=function(){if(this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}this.animationItem.container=null;this.globalData.defs=null;var i;var len=this.layers?this.layers.length:0;for(i=0;i<len;i+=1){if(this.elements[i]&&this.elements[i].destroy){this.elements[i].destroy();}}this.elements.length=0;this.destroyed=true;this.animationItem=null;};HybridRendererBase.prototype.updateContainerSize=function(){var elementWidth=this.animationItem.wrapper.offsetWidth;var elementHeight=this.animationItem.wrapper.offsetHeight;var elementRel=elementWidth/elementHeight;var animationRel=this.globalData.compSize.w/this.globalData.compSize.h;var sx;var sy;var tx;var ty;if(animationRel>elementRel){sx=elementWidth/this.globalData.compSize.w;sy=elementWidth/this.globalData.compSize.w;tx=0;ty=(elementHeight-this.globalData.compSize.h*(elementWidth/this.globalData.compSize.w))/2;}else {sx=elementHeight/this.globalData.compSize.h;sy=elementHeight/this.globalData.compSize.h;tx=(elementWidth-this.globalData.compSize.w*(elementHeight/this.globalData.compSize.h))/2;ty=0;}var style=this.resizerElem.style;style.webkitTransform='matrix3d('+sx+',0,0,0,0,'+sy+',0,0,0,0,1,0,'+tx+','+ty+',0,1)';style.transform=style.webkitTransform;};HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame;HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display='none';};HybridRendererBase.prototype.show=function(){this.resizerElem.style.display='block';};HybridRendererBase.prototype.initItems=function(){this.buildAllItems();if(this.camera){this.camera.setup();}else {var cWidth=this.globalData.compSize.w;var cHeight=this.globalData.compSize.h;var i;var len=this.threeDElements.length;for(i=0;i<len;i+=1){var style=this.threeDElements[i].perspectiveElem.style;style.webkitPerspective=Math.sqrt(Math.pow(cWidth,2)+Math.pow(cHeight,2))+'px';style.perspective=style.webkitPerspective;}}};HybridRendererBase.prototype.searchExtraCompositions=function(assets){var i;var len=assets.length;var floatingContainer=createTag('div');for(i=0;i<len;i+=1){if(assets[i].xt){var comp=this.createComp(assets[i],floatingContainer,this.globalData.comp,null);comp.initExpressions();this.globalData.projectInterface.registerComposition(comp);}}};function HCompElement(data,globalData,comp){this.layers=data.layers;this.supports3d=!data.hasMask;this.completeLayers=false;this.pendingElements=[];this.elements=this.layers?createSizedArray(this.layers.length):[];this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement);HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements;HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements();// divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';
		if(this.data.hasMask){this.svgElement.setAttribute('width',this.data.w);this.svgElement.setAttribute('height',this.data.h);this.transformedElement=this.baseElement;}else {this.transformedElement=this.layerElement;}};HCompElement.prototype.addTo3dContainer=function(elem,pos){var j=0;var nextElement;while(j<pos){if(this.elements[j]&&this.elements[j].getBaseElement){nextElement=this.elements[j].getBaseElement();}j+=1;}if(nextElement){this.layerElement.insertBefore(elem,nextElement);}else {this.layerElement.appendChild(elem);}};HCompElement.prototype.createComp=function(data){if(!this.supports3d){return new SVGCompElement(data,this.globalData,this);}return new HCompElement(data,this.globalData,this);};function HybridRenderer(animationItem,config){this.animationItem=animationItem;this.layers=null;this.renderedFrame=-1;this.renderConfig={className:config&&config.className||'',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',hideOnTransparent:!(config&&config.hideOnTransparent===false),filterSize:{width:config&&config.filterSize&&config.filterSize.width||'400%',height:config&&config.filterSize&&config.filterSize.height||'400%',x:config&&config.filterSize&&config.filterSize.x||'-100%',y:config&&config.filterSize&&config.filterSize.y||'-100%'},runExpressions:!config||config.runExpressions===undefined||config.runExpressions};this.globalData={_mdf:false,frameNum:-1,renderConfig:this.renderConfig};this.pendingElements=[];this.elements=[];this.threeDElements=[];this.destroyed=false;this.camera=null;this.supports3d=true;this.rendererType='html';}extendPrototype([HybridRendererBase],HybridRenderer);HybridRenderer.prototype.createComp=function(data){if(!this.supports3d){return new SVGCompElement(data,this.globalData,this);}return new HCompElement(data,this.globalData,this);};var CompExpressionInterface=function(){return function(comp){function _thisLayerFunction(name){var i=0;var len=comp.layers.length;while(i<len){if(comp.layers[i].nm===name||comp.layers[i].ind===name){return comp.elements[i].layerInterface;}i+=1;}return null;// return {active:false};
		}Object.defineProperty(_thisLayerFunction,'_name',{value:comp.data.nm});_thisLayerFunction.layer=_thisLayerFunction;_thisLayerFunction.pixelAspect=1;_thisLayerFunction.height=comp.data.h||comp.globalData.compSize.h;_thisLayerFunction.width=comp.data.w||comp.globalData.compSize.w;_thisLayerFunction.pixelAspect=1;_thisLayerFunction.frameDuration=1/comp.globalData.frameRate;_thisLayerFunction.displayStartTime=0;_thisLayerFunction.numLayers=comp.layers.length;return _thisLayerFunction;};}();function _typeof$2(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof$2=function _typeof(obj){return typeof obj;};}else {_typeof$2=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof$2(obj);}/* eslint-disable *//*
		   Copyright 2014 David Bau.

		   Permission is hereby granted, free of charge, to any person obtaining
		   a copy of this software and associated documentation files (the
		   "Software"), to deal in the Software without restriction, including
		   without limitation the rights to use, copy, modify, merge, publish,
		   distribute, sublicense, and/or sell copies of the Software, and to
		   permit persons to whom the Software is furnished to do so, subject to
		   the following conditions:

		   The above copyright notice and this permission notice shall be
		   included in all copies or substantial portions of the Software.

		   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
		   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
		   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
		   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
		   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
		   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

		   */function seedRandom(pool,math){//
		// The following constants are related to IEEE 754 limits.
		//
		var global=this,width=256,// each RC4 output is 0 <= x < 256
		chunks=6,// at least six RC4 outputs for each double
		digits=52,// there are 52 significant digits in a double
		rngname='random',// rngname: name for Math.random and Math.seedrandom
		startdenom=math.pow(width,chunks),significance=math.pow(2,digits),overflow=significance*2,mask=width-1,nodecrypto;// node.js crypto module, initialized at the bottom.
		//
		// seedrandom()
		// This is the seedrandom function described above.
		//
		function seedrandom(seed,options,callback){var key=[];options=options===true?{entropy:true}:options||{};// Flatten the seed string or build one from local entropy if needed.
		var shortseed=mixkey(flatten(options.entropy?[seed,tostring(pool)]:seed===null?autoseed():seed,3),key);// Use the seed to initialize an ARC4 generator.
		var arc4=new ARC4(key);// This function returns a random double in [0, 1) that contains
		// randomness in every bit of the mantissa of the IEEE 754 value.
		var prng=function prng(){var n=arc4.g(chunks),// Start with a numerator n < 2 ^ 48
		d=startdenom,//   and denominator d = 2 ^ 48.
		x=0;//   and no 'extra last byte'.
		while(n<significance){// Fill up all significant digits by
		n=(n+x)*width;//   shifting numerator and
		d*=width;//   denominator and generating a
		x=arc4.g(1);//   new least-significant-byte.
		}while(n>=overflow){// To avoid rounding up, before adding
		n/=2;//   last byte, shift everything
		d/=2;//   right using integer math until
		x>>>=1;//   we have exactly the desired bits.
		}return (n+x)/d;// Form the number within [0, 1).
		};prng.int32=function(){return arc4.g(4)|0;};prng.quick=function(){return arc4.g(4)/0x100000000;};prng["double"]=prng;// Mix the randomness into accumulated entropy.
		mixkey(tostring(arc4.S),pool);// Calling convention: what to return as a function of prng, seed, is_math.
		return (options.pass||callback||function(prng,seed,is_math_call,state){if(state){// Load the arc4 state from the given state if it has an S array.
		if(state.S){copy(state,arc4);}// Only provide the .state method if requested via options.state.
		prng.state=function(){return copy(arc4,{});};}// If called as a method of Math (Math.seedrandom()), mutate
		// Math.random because that is how seedrandom.js has worked since v1.0.
		if(is_math_call){math[rngname]=prng;return seed;}// Otherwise, it is a newer calling convention, so return the
		// prng directly.
		else return prng;})(prng,shortseed,'global'in options?options.global:this==math,options.state);}math['seed'+rngname]=seedrandom;//
		// ARC4
		//
		// An ARC4 implementation.  The constructor takes a key in the form of
		// an array of at most (width) integers that should be 0 <= x < (width).
		//
		// The g(count) method returns a pseudorandom integer that concatenates
		// the next (count) outputs from ARC4.  Its return value is a number x
		// that is in the range 0 <= x < (width ^ count).
		//
		function ARC4(key){var t,keylen=key.length,me=this,i=0,j=me.i=me.j=0,s=me.S=[];// The empty key [] is treated as [0].
		if(!keylen){key=[keylen++];}// Set up S using the standard key scheduling algorithm.
		while(i<width){s[i]=i++;}for(i=0;i<width;i++){s[i]=s[j=mask&j+key[i%keylen]+(t=s[i])];s[j]=t;}// The "g" method returns the next (count) outputs as one number.
		me.g=function(count){// Using instance members instead of closure state nearly doubles speed.
		var t,r=0,i=me.i,j=me.j,s=me.S;while(count--){t=s[i=mask&i+1];r=r*width+s[mask&(s[i]=s[j=mask&j+t])+(s[j]=t)];}me.i=i;me.j=j;return r;// For robust unpredictability, the function call below automatically
		// discards an initial batch of values.  This is called RC4-drop[256].
		// See http://google.com/search?q=rsa+fluhrer+response&btnI
		};}//
		// copy()
		// Copies internal state of ARC4 to or from a plain object.
		//
		function copy(f,t){t.i=f.i;t.j=f.j;t.S=f.S.slice();return t;}//
		// flatten()
		// Converts an object tree to nested arrays of strings.
		//
		function flatten(obj,depth){var result=[],typ=_typeof$2(obj),prop;if(depth&&typ=='object'){for(prop in obj){try{result.push(flatten(obj[prop],depth-1));}catch(e){}}}return result.length?result:typ=='string'?obj:obj+'\0';}//
		// mixkey()
		// Mixes a string seed into a key that is an array of integers, and
		// returns a shortened string seed that is equivalent to the result key.
		//
		function mixkey(seed,key){var stringseed=seed+'',smear,j=0;while(j<stringseed.length){key[mask&j]=mask&(smear^=key[mask&j]*19)+stringseed.charCodeAt(j++);}return tostring(key);}//
		// autoseed()
		// Returns an object for autoseeding, using window.crypto and Node crypto
		// module if available.
		//
		function autoseed(){try{if(nodecrypto);var out=new Uint8Array(width);(global.crypto||global.msCrypto).getRandomValues(out);return tostring(out);}catch(e){var browser=global.navigator,plugins=browser&&browser.plugins;return [+new Date(),global,plugins,global.screen,tostring(pool)];}}//
		// tostring()
		// Converts an array of charcodes to a string
		//
		function tostring(a){return String.fromCharCode.apply(0,a);}//
		// When seedrandom.js is loaded, we immediately mix a few bits
		// from the built-in RNG into the entropy pool.  Because we do
		// not want to interfere with deterministic PRNG state later,
		// seedrandom will not call math.random on its own again after
		// initialization.
		//
		mixkey(math.random(),pool);//
		// Nodejs and AMD support: export the implementation as a module using
		// either convention.
		//
		// End anonymous scope, and pass initial values.
		}function initialize$2(BMMath){seedRandom([],BMMath);}var propTypes={SHAPE:'shape'};function _typeof$1(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof$1=function _typeof(obj){return typeof obj;};}else {_typeof$1=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof$1(obj);}var ExpressionManager=function(){var ob={};var Math=BMMath;var window=null;var document=null;var XMLHttpRequest=null;var fetch=null;var frames=null;var _lottieGlobal={};initialize$2(BMMath);function resetFrame(){_lottieGlobal={};}function $bm_isInstanceOfArray(arr){return arr.constructor===Array||arr.constructor===Float32Array;}function isNumerable(tOfV,v){return tOfV==='number'||v instanceof Number||tOfV==='boolean'||tOfV==='string';}function $bm_neg(a){var tOfA=_typeof$1(a);if(tOfA==='number'||a instanceof Number||tOfA==='boolean'){return -a;}if($bm_isInstanceOfArray(a)){var i;var lenA=a.length;var retArr=[];for(i=0;i<lenA;i+=1){retArr[i]=-a[i];}return retArr;}if(a.propType){return a.v;}return -a;}var easeInBez=BezierFactory.getBezierEasing(0.333,0,0.833,0.833,'easeIn').get;var easeOutBez=BezierFactory.getBezierEasing(0.167,0.167,0.667,1,'easeOut').get;var easeInOutBez=BezierFactory.getBezierEasing(0.33,0,0.667,1,'easeInOut').get;function sum(a,b){var tOfA=_typeof$1(a);var tOfB=_typeof$1(b);if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)||tOfA==='string'||tOfB==='string'){return a+b;}if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){a=a.slice(0);a[0]+=b;return a;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){b=b.slice(0);b[0]=a+b[0];return b;}if($bm_isInstanceOfArray(a)&&$bm_isInstanceOfArray(b)){var i=0;var lenA=a.length;var lenB=b.length;var retArr=[];while(i<lenA||i<lenB){if((typeof a[i]==='number'||a[i]instanceof Number)&&(typeof b[i]==='number'||b[i]instanceof Number)){retArr[i]=a[i]+b[i];}else {retArr[i]=b[i]===undefined?a[i]:a[i]||b[i];}i+=1;}return retArr;}return 0;}var add=sum;function sub(a,b){var tOfA=_typeof$1(a);var tOfB=_typeof$1(b);if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){if(tOfA==='string'){a=parseInt(a,10);}if(tOfB==='string'){b=parseInt(b,10);}return a-b;}if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){a=a.slice(0);a[0]-=b;return a;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){b=b.slice(0);b[0]=a-b[0];return b;}if($bm_isInstanceOfArray(a)&&$bm_isInstanceOfArray(b)){var i=0;var lenA=a.length;var lenB=b.length;var retArr=[];while(i<lenA||i<lenB){if((typeof a[i]==='number'||a[i]instanceof Number)&&(typeof b[i]==='number'||b[i]instanceof Number)){retArr[i]=a[i]-b[i];}else {retArr[i]=b[i]===undefined?a[i]:a[i]||b[i];}i+=1;}return retArr;}return 0;}function mul(a,b){var tOfA=_typeof$1(a);var tOfB=_typeof$1(b);var arr;if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){return a*b;}var i;var len;if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){len=a.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a[i]*b;}return arr;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){len=b.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a*b[i];}return arr;}return 0;}function div(a,b){var tOfA=_typeof$1(a);var tOfB=_typeof$1(b);var arr;if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){return a/b;}var i;var len;if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){len=a.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a[i]/b;}return arr;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){len=b.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a/b[i];}return arr;}return 0;}function mod(a,b){if(typeof a==='string'){a=parseInt(a,10);}if(typeof b==='string'){b=parseInt(b,10);}return a%b;}var $bm_sum=sum;var $bm_sub=sub;var $bm_mul=mul;var $bm_div=div;var $bm_mod=mod;function clamp(num,min,max){if(min>max){var mm=max;max=min;min=mm;}return Math.min(Math.max(num,min),max);}function radiansToDegrees(val){return val/degToRads;}var radians_to_degrees=radiansToDegrees;function degreesToRadians(val){return val*degToRads;}var degrees_to_radians=radiansToDegrees;var helperLengthArray=[0,0,0,0,0,0];function length(arr1,arr2){if(typeof arr1==='number'||arr1 instanceof Number){arr2=arr2||0;return Math.abs(arr1-arr2);}if(!arr2){arr2=helperLengthArray;}var i;var len=Math.min(arr1.length,arr2.length);var addedLength=0;for(i=0;i<len;i+=1){addedLength+=Math.pow(arr2[i]-arr1[i],2);}return Math.sqrt(addedLength);}function normalize(vec){return div(vec,length(vec));}function rgbToHsl(val){var r=val[0];var g=val[1];var b=val[2];var max=Math.max(r,g,b);var min=Math.min(r,g,b);var h;var s;var l=(max+min)/2;if(max===min){h=0;// achromatic
		s=0;// achromatic
		}else {var d=max-min;s=l>0.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;}h/=6;}return [h,s,l,val[3]];}function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*(2/3-t)*6;return p;}function hslToRgb(val){var h=val[0];var s=val[1];var l=val[2];var r;var g;var b;if(s===0){r=l;// achromatic
		b=l;// achromatic
		g=l;// achromatic
		}else {var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}return [r,g,b,val[3]];}function linear(t,tMin,tMax,value1,value2){if(value1===undefined||value2===undefined){value1=tMin;value2=tMax;tMin=0;tMax=1;}if(tMax<tMin){var _tMin=tMax;tMax=tMin;tMin=_tMin;}if(t<=tMin){return value1;}if(t>=tMax){return value2;}var perc=tMax===tMin?0:(t-tMin)/(tMax-tMin);if(!value1.length){return value1+(value2-value1)*perc;}var i;var len=value1.length;var arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=value1[i]+(value2[i]-value1[i])*perc;}return arr;}function random(min,max){if(max===undefined){if(min===undefined){min=0;max=1;}else {max=min;min=undefined;}}if(max.length){var i;var len=max.length;if(!min){min=createTypedArray('float32',len);}var arr=createTypedArray('float32',len);var rnd=BMMath.random();for(i=0;i<len;i+=1){arr[i]=min[i]+rnd*(max[i]-min[i]);}return arr;}if(min===undefined){min=0;}var rndm=BMMath.random();return min+rndm*(max-min);}function createPath(points,inTangents,outTangents,closed){var i;var len=points.length;var path=shapePool.newElement();path.setPathData(!!closed,len);var arrPlaceholder=[0,0];var inVertexPoint;var outVertexPoint;for(i=0;i<len;i+=1){inVertexPoint=inTangents&&inTangents[i]?inTangents[i]:arrPlaceholder;outVertexPoint=outTangents&&outTangents[i]?outTangents[i]:arrPlaceholder;path.setTripleAt(points[i][0],points[i][1],outVertexPoint[0]+points[i][0],outVertexPoint[1]+points[i][1],inVertexPoint[0]+points[i][0],inVertexPoint[1]+points[i][1],i,true);}return path;}function initiateExpression(elem,data,property){// Bail out if we don't want expressions
		function noOp(_value){return _value;}if(!elem.globalData.renderConfig.runExpressions){return noOp;}var val=data.x;var needsVelocity=/velocity(?![\w\d])/.test(val);var _needsRandom=val.indexOf('random')!==-1;var elemType=elem.data.ty;var transform;var $bm_transform;var content;var effect;var thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime;Object.defineProperty(thisProperty,'value',{get:function get(){return thisProperty.v;}});elem.comp.frameDuration=1/elem.comp.globalData.frameRate;elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate;var outPoint=elem.data.op/elem.comp.globalData.frameRate;var width=elem.data.sw?elem.data.sw:0;var height=elem.data.sh?elem.data.sh:0;var name=elem.data.nm;var loopIn;var loop_in;var loopOut;var loop_out;var smooth;var toWorld;var fromWorld;var fromComp;var toComp;var fromCompToSurface;var position;var rotation;var anchorPoint;var scale;var thisLayer;var thisComp;var mask;var valueAtTime;var velocityAtTime;var scoped_bm_rt;// val = val.replace(/(\\?"|')((http)(s)?(:\/))?\/.*?(\\?"|')/g, "\"\""); // deter potential network calls
		// var expression_function = eval('[function _expression_function(){' + val + ';scoped_bm_rt=$bm_rt}]')[0]; // eslint-disable-line no-eval
		var expression_function=new Function('scoped_bm_rt',val+'; return $bm_rt;');// eslint-disable-line no-eval
		var numKeys=property.kf?data.k.length:0;var active=!this.data||this.data.hd!==true;var wiggle=function wiggle(freq,amp){var iWiggle;var j;var lenWiggle=this.pv.length?this.pv.length:1;var addedAmps=createTypedArray('float32',lenWiggle);freq=5;var iterations=Math.floor(time*freq);iWiggle=0;j=0;while(iWiggle<iterations){// var rnd = BMMath.random();
		for(j=0;j<lenWiggle;j+=1){addedAmps[j]+=-amp+amp*2*BMMath.random();// addedAmps[j] += -amp + amp*2*rnd;
		}iWiggle+=1;}// var rnd2 = BMMath.random();
		var periods=time*freq;var perc=periods-Math.floor(periods);var arr=createTypedArray('float32',lenWiggle);if(lenWiggle>1){for(j=0;j<lenWiggle;j+=1){arr[j]=this.pv[j]+addedAmps[j]+(-amp+amp*2*BMMath.random())*perc;// arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
		// arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
		}return arr;}return this.pv+addedAmps[0]+(-amp+amp*2*BMMath.random())*perc;}.bind(this);if(thisProperty.loopIn){loopIn=thisProperty.loopIn.bind(thisProperty);loop_in=loopIn;}if(thisProperty.loopOut){loopOut=thisProperty.loopOut.bind(thisProperty);loop_out=loopOut;}if(thisProperty.smooth){smooth=thisProperty.smooth.bind(thisProperty);}function loopInDuration(type,duration){return loopIn(type,duration,true);}function loopOutDuration(type,duration){return loopOut(type,duration,true);}if(this.getValueAtTime){valueAtTime=this.getValueAtTime.bind(this);}if(this.getVelocityAtTime){velocityAtTime=this.getVelocityAtTime.bind(this);}var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(elem1,elem2){var fVec=[elem2[0]-elem1[0],elem2[1]-elem1[1],elem2[2]-elem1[2]];var pitch=Math.atan2(fVec[0],Math.sqrt(fVec[1]*fVec[1]+fVec[2]*fVec[2]))/degToRads;var yaw=-Math.atan2(fVec[1],fVec[2])/degToRads;return [yaw,pitch,0];}function easeOut(t,tMin,tMax,val1,val2){return applyEase(easeOutBez,t,tMin,tMax,val1,val2);}function easeIn(t,tMin,tMax,val1,val2){return applyEase(easeInBez,t,tMin,tMax,val1,val2);}function ease(t,tMin,tMax,val1,val2){return applyEase(easeInOutBez,t,tMin,tMax,val1,val2);}function applyEase(fn,t,tMin,tMax,val1,val2){if(val1===undefined){val1=tMin;val2=tMax;}else {t=(t-tMin)/(tMax-tMin);}if(t>1){t=1;}else if(t<0){t=0;}var mult=fn(t);if($bm_isInstanceOfArray(val1)){var iKey;var lenKey=val1.length;var arr=createTypedArray('float32',lenKey);for(iKey=0;iKey<lenKey;iKey+=1){arr[iKey]=(val2[iKey]-val1[iKey])*mult+val1[iKey];}return arr;}return (val2-val1)*mult+val1;}function nearestKey(time){var iKey;var lenKey=data.k.length;var index;var keyTime;if(!data.k.length||typeof data.k[0]==='number'){index=0;keyTime=0;}else {index=-1;time*=elem.comp.globalData.frameRate;if(time<data.k[0].t){index=1;keyTime=data.k[0].t;}else {for(iKey=0;iKey<lenKey-1;iKey+=1){if(time===data.k[iKey].t){index=iKey+1;keyTime=data.k[iKey].t;break;}else if(time>data.k[iKey].t&&time<data.k[iKey+1].t){if(time-data.k[iKey].t>data.k[iKey+1].t-time){index=iKey+2;keyTime=data.k[iKey+1].t;}else {index=iKey+1;keyTime=data.k[iKey].t;}break;}}if(index===-1){index=iKey+1;keyTime=data.k[iKey].t;}}}var obKey={};obKey.index=index;obKey.time=keyTime/elem.comp.globalData.frameRate;return obKey;}function key(ind){var obKey;var iKey;var lenKey;if(!data.k.length||typeof data.k[0]==='number'){throw new Error('The property has no keyframe at index '+ind);}ind-=1;obKey={time:data.k[ind].t/elem.comp.globalData.frameRate,value:[]};var arr=Object.prototype.hasOwnProperty.call(data.k[ind],'s')?data.k[ind].s:data.k[ind-1].e;lenKey=arr.length;for(iKey=0;iKey<lenKey;iKey+=1){obKey[iKey]=arr[iKey];obKey.value[iKey]=arr[iKey];}return obKey;}function framesToTime(fr,fps){if(!fps){fps=elem.comp.globalData.frameRate;}return fr/fps;}function timeToFrames(t,fps){if(!t&&t!==0){t=time;}if(!fps){fps=elem.comp.globalData.frameRate;}return t*fps;}function seedRandom(seed){BMMath.seedrandom(randSeed+seed);}function sourceRectAtTime(){return elem.sourceRectAtTime();}function substring(init,end){if(typeof value==='string'){if(end===undefined){return value.substring(init);}return value.substring(init,end);}return '';}function substr(init,end){if(typeof value==='string'){if(end===undefined){return value.substr(init);}return value.substr(init,end);}return '';}function posterizeTime(framesPerSecond){time=framesPerSecond===0?0:Math.floor(time*framesPerSecond)/framesPerSecond;value=valueAtTime(time);}var time;var velocity;var value;var text;var textIndex;var textTotal;var selectorValue;var index=elem.data.ind;var hasParent=!!(elem.hierarchy&&elem.hierarchy.length);var parent;var randSeed=Math.floor(Math.random()*1000000);var globalData=elem.globalData;function executeExpression(_value){// globalData.pushExpression();
		value=_value;if(this.frameExpressionId===elem.globalData.frameId&&this.propType!=='textSelector'){return value;}if(this.propType==='textSelector'){textIndex=this.textIndex;textTotal=this.textTotal;selectorValue=this.selectorValue;}if(!thisLayer){text=elem.layerInterface.text;thisLayer=elem.layerInterface;thisComp=elem.comp.compInterface;toWorld=thisLayer.toWorld.bind(thisLayer);fromWorld=thisLayer.fromWorld.bind(thisLayer);fromComp=thisLayer.fromComp.bind(thisLayer);toComp=thisLayer.toComp.bind(thisLayer);mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null;fromCompToSurface=fromComp;}if(!transform){transform=elem.layerInterface('ADBE Transform Group');$bm_transform=transform;if(transform){anchorPoint=transform.anchorPoint;/* position = transform.position;
		                      rotation = transform.rotation;
		                      scale = transform.scale; */}}if(elemType===4&&!content){content=thisLayer('ADBE Root Vectors Group');}if(!effect){effect=thisLayer(4);}hasParent=!!(elem.hierarchy&&elem.hierarchy.length);if(hasParent&&!parent){parent=elem.hierarchy[0].layerInterface;}time=this.comp.renderedFrame/this.comp.globalData.frameRate;if(_needsRandom){seedRandom(randSeed+time);}if(needsVelocity){velocity=velocityAtTime(time);}expression_function();this.frameExpressionId=elem.globalData.frameId;// TODO: Check if it's possible to return on ShapeInterface the .v value
		// Changed this to a ternary operation because Rollup failed compiling it correctly
		scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt;return scoped_bm_rt;}// Bundlers will see these as dead code and unless we reference them
		executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData];return executeExpression;}ob.initiateExpression=initiateExpression;ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal];ob.resetFrame=resetFrame;return ob;}();var Expressions=function(){var ob={};ob.initExpressions=initExpressions;ob.resetFrame=ExpressionManager.resetFrame;function initExpressions(animation){var stackCount=0;var registers=[];function pushExpression(){stackCount+=1;}function popExpression(){stackCount-=1;if(stackCount===0){releaseInstances();}}function registerExpressionProperty(expression){if(registers.indexOf(expression)===-1){registers.push(expression);}}function releaseInstances(){var i;var len=registers.length;for(i=0;i<len;i+=1){registers[i].release();}registers.length=0;}animation.renderer.compInterface=CompExpressionInterface(animation.renderer);animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);animation.renderer.globalData.pushExpression=pushExpression;animation.renderer.globalData.popExpression=popExpression;animation.renderer.globalData.registerExpressionProperty=registerExpressionProperty;}return ob;}();var MaskManagerInterface=function(){function MaskInterface(mask,data){this._mask=mask;this._data=data;}Object.defineProperty(MaskInterface.prototype,'maskPath',{get:function get(){if(this._mask.prop.k){this._mask.prop.getValue();}return this._mask.prop;}});Object.defineProperty(MaskInterface.prototype,'maskOpacity',{get:function get(){if(this._mask.op.k){this._mask.op.getValue();}return this._mask.op.v*100;}});var MaskManager=function MaskManager(maskManager){var _masksInterfaces=createSizedArray(maskManager.viewData.length);var i;var len=maskManager.viewData.length;for(i=0;i<len;i+=1){_masksInterfaces[i]=new MaskInterface(maskManager.viewData[i],maskManager.masksProperties[i]);}var maskFunction=function maskFunction(name){i=0;while(i<len){if(maskManager.masksProperties[i].nm===name){return _masksInterfaces[i];}i+=1;}return null;};return maskFunction;};return MaskManager;}();var ExpressionPropertyInterface=function(){var defaultUnidimensionalValue={pv:0,v:0,mult:1};var defaultMultidimensionalValue={pv:[0,0,0],v:[0,0,0],mult:1};function completeProperty(expressionValue,property,type){Object.defineProperty(expressionValue,'velocity',{get:function get(){return property.getVelocityAtTime(property.comp.currentFrame);}});expressionValue.numKeys=property.keyframes?property.keyframes.length:0;expressionValue.key=function(pos){if(!expressionValue.numKeys){return 0;}var value='';if('s'in property.keyframes[pos-1]){value=property.keyframes[pos-1].s;}else if('e'in property.keyframes[pos-2]){value=property.keyframes[pos-2].e;}else {value=property.keyframes[pos-2].s;}var valueProp=type==='unidimensional'?new Number(value):Object.assign({},value);// eslint-disable-line no-new-wrappers
		valueProp.time=property.keyframes[pos-1].t/property.elem.comp.globalData.frameRate;valueProp.value=type==='unidimensional'?value[0]:value;return valueProp;};expressionValue.valueAtTime=property.getValueAtTime;expressionValue.speedAtTime=property.getSpeedAtTime;expressionValue.velocityAtTime=property.getVelocityAtTime;expressionValue.propertyGroup=property.propertyGroup;}function UnidimensionalPropertyInterface(property){if(!property||!('pv'in property)){property=defaultUnidimensionalValue;}var mult=1/property.mult;var val=property.pv*mult;var expressionValue=new Number(val);// eslint-disable-line no-new-wrappers
		expressionValue.value=val;completeProperty(expressionValue,property,'unidimensional');return function(){if(property.k){property.getValue();}val=property.v*mult;if(expressionValue.value!==val){expressionValue=new Number(val);// eslint-disable-line no-new-wrappers
		expressionValue.value=val;completeProperty(expressionValue,property,'unidimensional');}return expressionValue;};}function MultidimensionalPropertyInterface(property){if(!property||!('pv'in property)){property=defaultMultidimensionalValue;}var mult=1/property.mult;var len=property.data&&property.data.l||property.pv.length;var expressionValue=createTypedArray('float32',len);var arrValue=createTypedArray('float32',len);expressionValue.value=arrValue;completeProperty(expressionValue,property,'multidimensional');return function(){if(property.k){property.getValue();}for(var i=0;i<len;i+=1){arrValue[i]=property.v[i]*mult;expressionValue[i]=arrValue[i];}return expressionValue;};}// TODO: try to avoid using this getter
		function defaultGetter(){return defaultUnidimensionalValue;}return function(property){if(!property){return defaultGetter;}if(property.propType==='unidimensional'){return UnidimensionalPropertyInterface(property);}return MultidimensionalPropertyInterface(property);};}();var TransformExpressionInterface=function(){return function(transform){function _thisFunction(name){switch(name){case'scale':case'Scale':case'ADBE Scale':case 6:return _thisFunction.scale;case'rotation':case'Rotation':case'ADBE Rotation':case'ADBE Rotate Z':case 10:return _thisFunction.rotation;case'ADBE Rotate X':return _thisFunction.xRotation;case'ADBE Rotate Y':return _thisFunction.yRotation;case'position':case'Position':case'ADBE Position':case 2:return _thisFunction.position;case'ADBE Position_0':return _thisFunction.xPosition;case'ADBE Position_1':return _thisFunction.yPosition;case'ADBE Position_2':return _thisFunction.zPosition;case'anchorPoint':case'AnchorPoint':case'Anchor Point':case'ADBE AnchorPoint':case 1:return _thisFunction.anchorPoint;case'opacity':case'Opacity':case 11:return _thisFunction.opacity;default:return null;}}Object.defineProperty(_thisFunction,'rotation',{get:ExpressionPropertyInterface(transform.r||transform.rz)});Object.defineProperty(_thisFunction,'zRotation',{get:ExpressionPropertyInterface(transform.rz||transform.r)});Object.defineProperty(_thisFunction,'xRotation',{get:ExpressionPropertyInterface(transform.rx)});Object.defineProperty(_thisFunction,'yRotation',{get:ExpressionPropertyInterface(transform.ry)});Object.defineProperty(_thisFunction,'scale',{get:ExpressionPropertyInterface(transform.s)});var _px;var _py;var _pz;var _transformFactory;if(transform.p){_transformFactory=ExpressionPropertyInterface(transform.p);}else {_px=ExpressionPropertyInterface(transform.px);_py=ExpressionPropertyInterface(transform.py);if(transform.pz){_pz=ExpressionPropertyInterface(transform.pz);}}Object.defineProperty(_thisFunction,'position',{get:function get(){if(transform.p){return _transformFactory();}return [_px(),_py(),_pz?_pz():0];}});Object.defineProperty(_thisFunction,'xPosition',{get:ExpressionPropertyInterface(transform.px)});Object.defineProperty(_thisFunction,'yPosition',{get:ExpressionPropertyInterface(transform.py)});Object.defineProperty(_thisFunction,'zPosition',{get:ExpressionPropertyInterface(transform.pz)});Object.defineProperty(_thisFunction,'anchorPoint',{get:ExpressionPropertyInterface(transform.a)});Object.defineProperty(_thisFunction,'opacity',{get:ExpressionPropertyInterface(transform.o)});Object.defineProperty(_thisFunction,'skew',{get:ExpressionPropertyInterface(transform.sk)});Object.defineProperty(_thisFunction,'skewAxis',{get:ExpressionPropertyInterface(transform.sa)});Object.defineProperty(_thisFunction,'orientation',{get:ExpressionPropertyInterface(transform.or)});return _thisFunction;};}();var LayerExpressionInterface=function(){function getMatrix(time){var toWorldMat=new Matrix();if(time!==undefined){var propMatrix=this._elem.finalTransform.mProp.getValueAtTime(time);propMatrix.clone(toWorldMat);}else {var transformMat=this._elem.finalTransform.mProp;transformMat.applyToMatrix(toWorldMat);}return toWorldMat;}function toWorldVec(arr,time){var toWorldMat=this.getMatrix(time);toWorldMat.props[12]=0;toWorldMat.props[13]=0;toWorldMat.props[14]=0;return this.applyPoint(toWorldMat,arr);}function toWorld(arr,time){var toWorldMat=this.getMatrix(time);return this.applyPoint(toWorldMat,arr);}function fromWorldVec(arr,time){var toWorldMat=this.getMatrix(time);toWorldMat.props[12]=0;toWorldMat.props[13]=0;toWorldMat.props[14]=0;return this.invertPoint(toWorldMat,arr);}function fromWorld(arr,time){var toWorldMat=this.getMatrix(time);return this.invertPoint(toWorldMat,arr);}function applyPoint(matrix,arr){if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);}}return matrix.applyToPointArray(arr[0],arr[1],arr[2]||0);}function invertPoint(matrix,arr){if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);}}return matrix.inversePoint(arr);}function fromComp(arr){var toWorldMat=new Matrix();toWorldMat.reset();this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);}return toWorldMat.inversePoint(arr);}return toWorldMat.inversePoint(arr);}function sampleImage(){return [1,1,1,1];}return function(elem){var transformInterface;function _registerMaskInterface(maskManager){_thisLayerFunction.mask=new MaskManagerInterface(maskManager,elem);}function _registerEffectsInterface(effects){_thisLayerFunction.effect=effects;}function _thisLayerFunction(name){switch(name){case'ADBE Root Vectors Group':case'Contents':case 2:return _thisLayerFunction.shapeInterface;case 1:case 6:case'Transform':case'transform':case'ADBE Transform Group':return transformInterface;case 4:case'ADBE Effect Parade':case'effects':case'Effects':return _thisLayerFunction.effect;case'ADBE Text Properties':return _thisLayerFunction.textInterface;default:return null;}}_thisLayerFunction.getMatrix=getMatrix;_thisLayerFunction.invertPoint=invertPoint;_thisLayerFunction.applyPoint=applyPoint;_thisLayerFunction.toWorld=toWorld;_thisLayerFunction.toWorldVec=toWorldVec;_thisLayerFunction.fromWorld=fromWorld;_thisLayerFunction.fromWorldVec=fromWorldVec;_thisLayerFunction.toComp=toWorld;_thisLayerFunction.fromComp=fromComp;_thisLayerFunction.sampleImage=sampleImage;_thisLayerFunction.sourceRectAtTime=elem.sourceRectAtTime.bind(elem);_thisLayerFunction._elem=elem;transformInterface=TransformExpressionInterface(elem.finalTransform.mProp);var anchorPointDescriptor=getDescriptor(transformInterface,'anchorPoint');Object.defineProperties(_thisLayerFunction,{hasParent:{get:function get(){return elem.hierarchy.length;}},parent:{get:function get(){return elem.hierarchy[0].layerInterface;}},rotation:getDescriptor(transformInterface,'rotation'),scale:getDescriptor(transformInterface,'scale'),position:getDescriptor(transformInterface,'position'),opacity:getDescriptor(transformInterface,'opacity'),anchorPoint:anchorPointDescriptor,anchor_point:anchorPointDescriptor,transform:{get:function get(){return transformInterface;}},active:{get:function get(){return elem.isInRange;}}});_thisLayerFunction.startTime=elem.data.st;_thisLayerFunction.index=elem.data.ind;_thisLayerFunction.source=elem.data.refId;_thisLayerFunction.height=elem.data.ty===0?elem.data.h:100;_thisLayerFunction.width=elem.data.ty===0?elem.data.w:100;_thisLayerFunction.inPoint=elem.data.ip/elem.comp.globalData.frameRate;_thisLayerFunction.outPoint=elem.data.op/elem.comp.globalData.frameRate;_thisLayerFunction._name=elem.data.nm;_thisLayerFunction.registerMaskInterface=_registerMaskInterface;_thisLayerFunction.registerEffectsInterface=_registerEffectsInterface;return _thisLayerFunction;};}();var propertyGroupFactory=function(){return function(interfaceFunction,parentPropertyGroup){return function(val){val=val===undefined?1:val;if(val<=0){return interfaceFunction;}return parentPropertyGroup(val-1);};};}();var PropertyInterface=function(){return function(propertyName,propertyGroup){var interfaceFunction={_name:propertyName};function _propertyGroup(val){val=val===undefined?1:val;if(val<=0){return interfaceFunction;}return propertyGroup(val-1);}return _propertyGroup;};}();var EffectsExpressionInterface=function(){var ob={createEffectsInterface:createEffectsInterface};function createEffectsInterface(elem,propertyGroup){if(elem.effectsManager){var effectElements=[];var effectsData=elem.data.ef;var i;var len=elem.effectsManager.effectElements.length;for(i=0;i<len;i+=1){effectElements.push(createGroupInterface(effectsData[i],elem.effectsManager.effectElements[i],propertyGroup,elem));}var effects=elem.data.ef||[];var groupInterface=function groupInterface(name){i=0;len=effects.length;while(i<len){if(name===effects[i].nm||name===effects[i].mn||name===effects[i].ix){return effectElements[i];}i+=1;}return null;};Object.defineProperty(groupInterface,'numProperties',{get:function get(){return effects.length;}});return groupInterface;}return null;}function createGroupInterface(data,elements,propertyGroup,elem){function groupInterface(name){var effects=data.ef;var i=0;var len=effects.length;while(i<len){if(name===effects[i].nm||name===effects[i].mn||name===effects[i].ix){if(effects[i].ty===5){return effectElements[i];}return effectElements[i]();}i+=1;}throw new Error();}var _propertyGroup=propertyGroupFactory(groupInterface,propertyGroup);var effectElements=[];var i;var len=data.ef.length;for(i=0;i<len;i+=1){if(data.ef[i].ty===5){effectElements.push(createGroupInterface(data.ef[i],elements.effectElements[i],elements.effectElements[i].propertyGroup,elem));}else {effectElements.push(createValueInterface(elements.effectElements[i],data.ef[i].ty,elem,_propertyGroup));}}if(data.mn==='ADBE Color Control'){Object.defineProperty(groupInterface,'color',{get:function get(){return effectElements[0]();}});}Object.defineProperties(groupInterface,{numProperties:{get:function get(){return data.np;}},_name:{value:data.nm},propertyGroup:{value:_propertyGroup}});groupInterface.enabled=data.en!==0;groupInterface.active=groupInterface.enabled;return groupInterface;}function createValueInterface(element,type,elem,propertyGroup){var expressionProperty=ExpressionPropertyInterface(element.p);function interfaceFunction(){if(type===10){return elem.comp.compInterface(element.p.v);}return expressionProperty();}if(element.p.setGroupProperty){element.p.setGroupProperty(PropertyInterface('',propertyGroup));}return interfaceFunction;}return ob;}();var ShapePathInterface=function(){return function pathInterfaceFactory(shape,view,propertyGroup){var prop=view.sh;function interfaceFunction(val){if(val==='Shape'||val==='shape'||val==='Path'||val==='path'||val==='ADBE Vector Shape'||val===2){return interfaceFunction.path;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);prop.setGroupProperty(PropertyInterface('Path',_propertyGroup));Object.defineProperties(interfaceFunction,{path:{get:function get(){if(prop.k){prop.getValue();}return prop;}},shape:{get:function get(){if(prop.k){prop.getValue();}return prop;}},_name:{value:shape.nm},ix:{value:shape.ix},propertyIndex:{value:shape.ix},mn:{value:shape.mn},propertyGroup:{value:propertyGroup}});return interfaceFunction;};}();var ShapeExpressionInterface=function(){function iterateElements(shapes,view,propertyGroup){var arr=[];var i;var len=shapes?shapes.length:0;for(i=0;i<len;i+=1){if(shapes[i].ty==='gr'){arr.push(groupInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='fl'){arr.push(fillInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='st'){arr.push(strokeInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='tm'){arr.push(trimInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='tr');else if(shapes[i].ty==='el'){arr.push(ellipseInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='sr'){arr.push(starInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='sh'){arr.push(ShapePathInterface(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rc'){arr.push(rectInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rd'){arr.push(roundedInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rp'){arr.push(repeaterInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='gf'){arr.push(gradientFillInterfaceFactory(shapes[i],view[i],propertyGroup));}else {arr.push(defaultInterfaceFactory(shapes[i],view[i]));}}return arr;}function contentsInterfaceFactory(shape,view,propertyGroup){var interfaces;var interfaceFunction=function _interfaceFunction(value){var i=0;var len=interfaces.length;while(i<len){if(interfaces[i]._name===value||interfaces[i].mn===value||interfaces[i].propertyIndex===value||interfaces[i].ix===value||interfaces[i].ind===value){return interfaces[i];}i+=1;}if(typeof value==='number'){return interfaces[value-1];}return null;};interfaceFunction.propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaces=iterateElements(shape.it,view.it,interfaceFunction.propertyGroup);interfaceFunction.numProperties=interfaces.length;var transformInterface=transformInterfaceFactory(shape.it[shape.it.length-1],view.it[view.it.length-1],interfaceFunction.propertyGroup);interfaceFunction.transform=transformInterface;interfaceFunction.propertyIndex=shape.cix;interfaceFunction._name=shape.nm;return interfaceFunction;}function groupInterfaceFactory(shape,view,propertyGroup){var interfaceFunction=function _interfaceFunction(value){switch(value){case'ADBE Vectors Group':case'Contents':case 2:return interfaceFunction.content;// Not necessary for now. Keeping them here in case a new case appears
		// case 'ADBE Vector Transform Group':
		// case 3:
		default:return interfaceFunction.transform;}};interfaceFunction.propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var content=contentsInterfaceFactory(shape,view,interfaceFunction.propertyGroup);var transformInterface=transformInterfaceFactory(shape.it[shape.it.length-1],view.it[view.it.length-1],interfaceFunction.propertyGroup);interfaceFunction.content=content;interfaceFunction.transform=transformInterface;Object.defineProperty(interfaceFunction,'_name',{get:function get(){return shape.nm;}});// interfaceFunction.content = interfaceFunction;
		interfaceFunction.numProperties=shape.np;interfaceFunction.propertyIndex=shape.ix;interfaceFunction.nm=shape.nm;interfaceFunction.mn=shape.mn;return interfaceFunction;}function fillInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(val){if(val==='Color'||val==='color'){return interfaceFunction.color;}if(val==='Opacity'||val==='opacity'){return interfaceFunction.opacity;}return null;}Object.defineProperties(interfaceFunction,{color:{get:ExpressionPropertyInterface(view.c)},opacity:{get:ExpressionPropertyInterface(view.o)},_name:{value:shape.nm},mn:{value:shape.mn}});view.c.setGroupProperty(PropertyInterface('Color',propertyGroup));view.o.setGroupProperty(PropertyInterface('Opacity',propertyGroup));return interfaceFunction;}function gradientFillInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(val){if(val==='Start Point'||val==='start point'){return interfaceFunction.startPoint;}if(val==='End Point'||val==='end point'){return interfaceFunction.endPoint;}if(val==='Opacity'||val==='opacity'){return interfaceFunction.opacity;}return null;}Object.defineProperties(interfaceFunction,{startPoint:{get:ExpressionPropertyInterface(view.s)},endPoint:{get:ExpressionPropertyInterface(view.e)},opacity:{get:ExpressionPropertyInterface(view.o)},type:{get:function get(){return 'a';}},_name:{value:shape.nm},mn:{value:shape.mn}});view.s.setGroupProperty(PropertyInterface('Start Point',propertyGroup));view.e.setGroupProperty(PropertyInterface('End Point',propertyGroup));view.o.setGroupProperty(PropertyInterface('Opacity',propertyGroup));return interfaceFunction;}function defaultInterfaceFactory(){function interfaceFunction(){return null;}return interfaceFunction;}function strokeInterfaceFactory(shape,view,propertyGroup){var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var _dashPropertyGroup=propertyGroupFactory(dashOb,_propertyGroup);function addPropertyToDashOb(i){Object.defineProperty(dashOb,shape.d[i].nm,{get:ExpressionPropertyInterface(view.d.dataProps[i].p)});}var i;var len=shape.d?shape.d.length:0;var dashOb={};for(i=0;i<len;i+=1){addPropertyToDashOb(i);view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);}function interfaceFunction(val){if(val==='Color'||val==='color'){return interfaceFunction.color;}if(val==='Opacity'||val==='opacity'){return interfaceFunction.opacity;}if(val==='Stroke Width'||val==='stroke width'){return interfaceFunction.strokeWidth;}return null;}Object.defineProperties(interfaceFunction,{color:{get:ExpressionPropertyInterface(view.c)},opacity:{get:ExpressionPropertyInterface(view.o)},strokeWidth:{get:ExpressionPropertyInterface(view.w)},dash:{get:function get(){return dashOb;}},_name:{value:shape.nm},mn:{value:shape.mn}});view.c.setGroupProperty(PropertyInterface('Color',_propertyGroup));view.o.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));view.w.setGroupProperty(PropertyInterface('Stroke Width',_propertyGroup));return interfaceFunction;}function trimInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(val){if(val===shape.e.ix||val==='End'||val==='end'){return interfaceFunction.end;}if(val===shape.s.ix){return interfaceFunction.start;}if(val===shape.o.ix){return interfaceFunction.offset;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaceFunction.propertyIndex=shape.ix;view.s.setGroupProperty(PropertyInterface('Start',_propertyGroup));view.e.setGroupProperty(PropertyInterface('End',_propertyGroup));view.o.setGroupProperty(PropertyInterface('Offset',_propertyGroup));interfaceFunction.propertyIndex=shape.ix;interfaceFunction.propertyGroup=propertyGroup;Object.defineProperties(interfaceFunction,{start:{get:ExpressionPropertyInterface(view.s)},end:{get:ExpressionPropertyInterface(view.e)},offset:{get:ExpressionPropertyInterface(view.o)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function transformInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.a.ix===value||value==='Anchor Point'){return interfaceFunction.anchorPoint;}if(shape.o.ix===value||value==='Opacity'){return interfaceFunction.opacity;}if(shape.p.ix===value||value==='Position'){return interfaceFunction.position;}if(shape.r.ix===value||value==='Rotation'||value==='ADBE Vector Rotation'){return interfaceFunction.rotation;}if(shape.s.ix===value||value==='Scale'){return interfaceFunction.scale;}if(shape.sk&&shape.sk.ix===value||value==='Skew'){return interfaceFunction.skew;}if(shape.sa&&shape.sa.ix===value||value==='Skew Axis'){return interfaceFunction.skewAxis;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);view.transform.mProps.o.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));view.transform.mProps.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));view.transform.mProps.a.setGroupProperty(PropertyInterface('Anchor Point',_propertyGroup));view.transform.mProps.s.setGroupProperty(PropertyInterface('Scale',_propertyGroup));view.transform.mProps.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));if(view.transform.mProps.sk){view.transform.mProps.sk.setGroupProperty(PropertyInterface('Skew',_propertyGroup));view.transform.mProps.sa.setGroupProperty(PropertyInterface('Skew Angle',_propertyGroup));}view.transform.op.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));Object.defineProperties(interfaceFunction,{opacity:{get:ExpressionPropertyInterface(view.transform.mProps.o)},position:{get:ExpressionPropertyInterface(view.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(view.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(view.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(view.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(view.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(view.transform.mProps.sa)},_name:{value:shape.nm}});interfaceFunction.ty='tr';interfaceFunction.mn=shape.mn;interfaceFunction.propertyGroup=propertyGroup;return interfaceFunction;}function ellipseInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.s.ix===value){return interfaceFunction.size;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaceFunction.propertyIndex=shape.ix;var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;prop.s.setGroupProperty(PropertyInterface('Size',_propertyGroup));prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));Object.defineProperties(interfaceFunction,{size:{get:ExpressionPropertyInterface(prop.s)},position:{get:ExpressionPropertyInterface(prop.p)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function starInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.r.ix===value){return interfaceFunction.rotation;}if(shape.pt.ix===value){return interfaceFunction.points;}if(shape.or.ix===value||value==='ADBE Vector Star Outer Radius'){return interfaceFunction.outerRadius;}if(shape.os.ix===value){return interfaceFunction.outerRoundness;}if(shape.ir&&(shape.ir.ix===value||value==='ADBE Vector Star Inner Radius')){return interfaceFunction.innerRadius;}if(shape.is&&shape.is.ix===value){return interfaceFunction.innerRoundness;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;interfaceFunction.propertyIndex=shape.ix;prop.or.setGroupProperty(PropertyInterface('Outer Radius',_propertyGroup));prop.os.setGroupProperty(PropertyInterface('Outer Roundness',_propertyGroup));prop.pt.setGroupProperty(PropertyInterface('Points',_propertyGroup));prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));prop.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));if(shape.ir){prop.ir.setGroupProperty(PropertyInterface('Inner Radius',_propertyGroup));prop.is.setGroupProperty(PropertyInterface('Inner Roundness',_propertyGroup));}Object.defineProperties(interfaceFunction,{position:{get:ExpressionPropertyInterface(prop.p)},rotation:{get:ExpressionPropertyInterface(prop.r)},points:{get:ExpressionPropertyInterface(prop.pt)},outerRadius:{get:ExpressionPropertyInterface(prop.or)},outerRoundness:{get:ExpressionPropertyInterface(prop.os)},innerRadius:{get:ExpressionPropertyInterface(prop.ir)},innerRoundness:{get:ExpressionPropertyInterface(prop.is)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function rectInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.r.ix===value){return interfaceFunction.roundness;}if(shape.s.ix===value||value==='Size'||value==='ADBE Vector Rect Size'){return interfaceFunction.size;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;interfaceFunction.propertyIndex=shape.ix;prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));prop.s.setGroupProperty(PropertyInterface('Size',_propertyGroup));prop.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));Object.defineProperties(interfaceFunction,{position:{get:ExpressionPropertyInterface(prop.p)},roundness:{get:ExpressionPropertyInterface(prop.r)},size:{get:ExpressionPropertyInterface(prop.s)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function roundedInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.r.ix===value||value==='Round Corners 1'){return interfaceFunction.radius;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view;interfaceFunction.propertyIndex=shape.ix;prop.rd.setGroupProperty(PropertyInterface('Radius',_propertyGroup));Object.defineProperties(interfaceFunction,{radius:{get:ExpressionPropertyInterface(prop.rd)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function repeaterInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.c.ix===value||value==='Copies'){return interfaceFunction.copies;}if(shape.o.ix===value||value==='Offset'){return interfaceFunction.offset;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view;interfaceFunction.propertyIndex=shape.ix;prop.c.setGroupProperty(PropertyInterface('Copies',_propertyGroup));prop.o.setGroupProperty(PropertyInterface('Offset',_propertyGroup));Object.defineProperties(interfaceFunction,{copies:{get:ExpressionPropertyInterface(prop.c)},offset:{get:ExpressionPropertyInterface(prop.o)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}return function(shapes,view,propertyGroup){var interfaces;function _interfaceFunction(value){if(typeof value==='number'){value=value===undefined?1:value;if(value===0){return propertyGroup;}return interfaces[value-1];}var i=0;var len=interfaces.length;while(i<len){if(interfaces[i]._name===value){return interfaces[i];}i+=1;}return null;}function parentGroupWrapper(){return propertyGroup;}_interfaceFunction.propertyGroup=propertyGroupFactory(_interfaceFunction,parentGroupWrapper);interfaces=iterateElements(shapes,view,_interfaceFunction.propertyGroup);_interfaceFunction.numProperties=interfaces.length;_interfaceFunction._name='Contents';return _interfaceFunction;};}();var TextExpressionInterface=function(){return function(elem){var _sourceText;function _thisLayerFunction(name){switch(name){case'ADBE Text Document':return _thisLayerFunction.sourceText;default:return null;}}Object.defineProperty(_thisLayerFunction,'sourceText',{get:function get(){elem.textProperty.getValue();var stringValue=elem.textProperty.currentData.t;if(!_sourceText||stringValue!==_sourceText.value){_sourceText=new String(stringValue);// eslint-disable-line no-new-wrappers
		// If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive
		_sourceText.value=stringValue||new String(stringValue);// eslint-disable-line no-new-wrappers
		Object.defineProperty(_sourceText,'style',{get:function get(){return {fillColor:elem.textProperty.currentData.fc};}});}return _sourceText;}});return _thisLayerFunction;};}();function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else {_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}var FootageInterface=function(){var outlineInterfaceFactory=function outlineInterfaceFactory(elem){var currentPropertyName='';var currentProperty=elem.getFootageData();function init(){currentPropertyName='';currentProperty=elem.getFootageData();return searchProperty;}function searchProperty(value){if(currentProperty[value]){currentPropertyName=value;currentProperty=currentProperty[value];if(_typeof(currentProperty)==='object'){return searchProperty;}return currentProperty;}var propertyNameIndex=value.indexOf(currentPropertyName);if(propertyNameIndex!==-1){var index=parseInt(value.substr(propertyNameIndex+currentPropertyName.length),10);currentProperty=currentProperty[index];if(_typeof(currentProperty)==='object'){return searchProperty;}return currentProperty;}return '';}return init;};var dataInterfaceFactory=function dataInterfaceFactory(elem){function interfaceFunction(value){if(value==='Outline'){return interfaceFunction.outlineInterface();}return null;}interfaceFunction._name='Outline';interfaceFunction.outlineInterface=outlineInterfaceFactory(elem);return interfaceFunction;};return function(elem){function _interfaceFunction(value){if(value==='Data'){return _interfaceFunction.dataInterface;}return null;}_interfaceFunction._name='Data';_interfaceFunction.dataInterface=dataInterfaceFactory(elem);return _interfaceFunction;};}();var interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(type){return interfaces[type]||null;}var expressionHelpers=function(){function searchExpressions(elem,data,prop){if(data.x){prop.k=true;prop.x=true;prop.initiateExpression=ExpressionManager.initiateExpression;prop.effectsSequence.push(prop.initiateExpression(elem,data,prop).bind(prop));}}function getValueAtTime(frameNum){frameNum*=this.elem.globalData.frameRate;frameNum-=this.offsetTime;if(frameNum!==this._cachingAtTime.lastFrame){this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<frameNum?this._cachingAtTime.lastIndex:0;this._cachingAtTime.value=this.interpolateValue(frameNum,this._cachingAtTime);this._cachingAtTime.lastFrame=frameNum;}return this._cachingAtTime.value;}function getSpeedAtTime(frameNum){var delta=-0.01;var v1=this.getValueAtTime(frameNum);var v2=this.getValueAtTime(frameNum+delta);var speed=0;if(v1.length){var i;for(i=0;i<v1.length;i+=1){speed+=Math.pow(v2[i]-v1[i],2);}speed=Math.sqrt(speed)*100;}else {speed=0;}return speed;}function getVelocityAtTime(frameNum){if(this.vel!==undefined){return this.vel;}var delta=-0.001;// frameNum += this.elem.data.st;
		var v1=this.getValueAtTime(frameNum);var v2=this.getValueAtTime(frameNum+delta);var velocity;if(v1.length){velocity=createTypedArray('float32',v1.length);var i;for(i=0;i<v1.length;i+=1){// removing frameRate
		// if needed, don't add it here
		// velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
		velocity[i]=(v2[i]-v1[i])/delta;}}else {velocity=(v2-v1)/delta;}return velocity;}function getStaticValueAtTime(){return this.pv;}function setGroupProperty(propertyGroup){this.propertyGroup=propertyGroup;}return {searchExpressions:searchExpressions,getSpeedAtTime:getSpeedAtTime,getVelocityAtTime:getVelocityAtTime,getValueAtTime:getValueAtTime,getStaticValueAtTime:getStaticValueAtTime,setGroupProperty:setGroupProperty};}();function addPropertyDecorator(){function loopOut(type,duration,durationFlag){if(!this.k||!this.keyframes){return this.pv;}type=type?type.toLowerCase():'';var currentFrame=this.comp.renderedFrame;var keyframes=this.keyframes;var lastKeyFrame=keyframes[keyframes.length-1].t;if(currentFrame<=lastKeyFrame){return this.pv;}var cycleDuration;var firstKeyFrame;if(!durationFlag){if(!duration||duration>keyframes.length-1){duration=keyframes.length-1;}firstKeyFrame=keyframes[keyframes.length-1-duration].t;cycleDuration=lastKeyFrame-firstKeyFrame;}else {if(!duration){cycleDuration=Math.max(0,lastKeyFrame-this.elem.data.ip);}else {cycleDuration=Math.abs(lastKeyFrame-this.elem.comp.globalData.frameRate*duration);}firstKeyFrame=lastKeyFrame-cycleDuration;}var i;var len;var ret;if(type==='pingpong'){var iterations=Math.floor((currentFrame-firstKeyFrame)/cycleDuration);if(iterations%2!==0){return this.getValueAtTime((cycleDuration-(currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
		}}else if(type==='offset'){var initV=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var endV=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var current=this.getValueAtTime(((currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
		var repeats=Math.floor((currentFrame-firstKeyFrame)/cycleDuration);if(this.pv.length){ret=new Array(initV.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=(endV[i]-initV[i])*repeats+current[i];}return ret;}return (endV-initV)*repeats+current;}else if(type==='continue'){var lastValue=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var nextLastValue=this.getValueAtTime((lastKeyFrame-0.001)/this.comp.globalData.frameRate,0);if(this.pv.length){ret=new Array(lastValue.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=lastValue[i]+(lastValue[i]-nextLastValue[i])*((currentFrame-lastKeyFrame)/this.comp.globalData.frameRate)/0.0005;// eslint-disable-line
		}return ret;}return lastValue+(lastValue-nextLastValue)*((currentFrame-lastKeyFrame)/0.001);}return this.getValueAtTime(((currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
		}function loopIn(type,duration,durationFlag){if(!this.k){return this.pv;}type=type?type.toLowerCase():'';var currentFrame=this.comp.renderedFrame;var keyframes=this.keyframes;var firstKeyFrame=keyframes[0].t;if(currentFrame>=firstKeyFrame){return this.pv;}var cycleDuration;var lastKeyFrame;if(!durationFlag){if(!duration||duration>keyframes.length-1){duration=keyframes.length-1;}lastKeyFrame=keyframes[duration].t;cycleDuration=lastKeyFrame-firstKeyFrame;}else {if(!duration){cycleDuration=Math.max(0,this.elem.data.op-firstKeyFrame);}else {cycleDuration=Math.abs(this.elem.comp.globalData.frameRate*duration);}lastKeyFrame=firstKeyFrame+cycleDuration;}var i;var len;var ret;if(type==='pingpong'){var iterations=Math.floor((firstKeyFrame-currentFrame)/cycleDuration);if(iterations%2===0){return this.getValueAtTime(((firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
		}}else if(type==='offset'){var initV=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var endV=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var current=this.getValueAtTime((cycleDuration-(firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);var repeats=Math.floor((firstKeyFrame-currentFrame)/cycleDuration)+1;if(this.pv.length){ret=new Array(initV.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=current[i]-(endV[i]-initV[i])*repeats;}return ret;}return current-(endV-initV)*repeats;}else if(type==='continue'){var firstValue=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var nextFirstValue=this.getValueAtTime((firstKeyFrame+0.001)/this.comp.globalData.frameRate,0);if(this.pv.length){ret=new Array(firstValue.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=firstValue[i]+(firstValue[i]-nextFirstValue[i])*(firstKeyFrame-currentFrame)/0.001;}return ret;}return firstValue+(firstValue-nextFirstValue)*(firstKeyFrame-currentFrame)/0.001;}return this.getValueAtTime((cycleDuration-((firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame))/this.comp.globalData.frameRate,0);// eslint-disable-line
		}function smooth(width,samples){if(!this.k){return this.pv;}width=(width||0.4)*0.5;samples=Math.floor(samples||5);if(samples<=1){return this.pv;}var currentTime=this.comp.renderedFrame/this.comp.globalData.frameRate;var initFrame=currentTime-width;var endFrame=currentTime+width;var sampleFrequency=samples>1?(endFrame-initFrame)/(samples-1):1;var i=0;var j=0;var value;if(this.pv.length){value=createTypedArray('float32',this.pv.length);}else {value=0;}var sampleValue;while(i<samples){sampleValue=this.getValueAtTime(initFrame+i*sampleFrequency);if(this.pv.length){for(j=0;j<this.pv.length;j+=1){value[j]+=sampleValue[j];}}else {value+=sampleValue;}i+=1;}if(this.pv.length){for(j=0;j<this.pv.length;j+=1){value[j]/=samples;}}else {value/=samples;}return value;}function getTransformValueAtTime(time){if(!this._transformCachingAtTime){this._transformCachingAtTime={v:new Matrix()};}/// /
		var matrix=this._transformCachingAtTime.v;matrix.cloneFromProps(this.pre.props);if(this.appliedTransformations<1){var anchor=this.a.getValueAtTime(time);matrix.translate(-anchor[0]*this.a.mult,-anchor[1]*this.a.mult,anchor[2]*this.a.mult);}if(this.appliedTransformations<2){var scale=this.s.getValueAtTime(time);matrix.scale(scale[0]*this.s.mult,scale[1]*this.s.mult,scale[2]*this.s.mult);}if(this.sk&&this.appliedTransformations<3){var skew=this.sk.getValueAtTime(time);var skewAxis=this.sa.getValueAtTime(time);matrix.skewFromAxis(-skew*this.sk.mult,skewAxis*this.sa.mult);}if(this.r&&this.appliedTransformations<4){var rotation=this.r.getValueAtTime(time);matrix.rotate(-rotation*this.r.mult);}else if(!this.r&&this.appliedTransformations<4){var rotationZ=this.rz.getValueAtTime(time);var rotationY=this.ry.getValueAtTime(time);var rotationX=this.rx.getValueAtTime(time);var orientation=this.or.getValueAtTime(time);matrix.rotateZ(-rotationZ*this.rz.mult).rotateY(rotationY*this.ry.mult).rotateX(rotationX*this.rx.mult).rotateZ(-orientation[2]*this.or.mult).rotateY(orientation[1]*this.or.mult).rotateX(orientation[0]*this.or.mult);}if(this.data.p&&this.data.p.s){var positionX=this.px.getValueAtTime(time);var positionY=this.py.getValueAtTime(time);if(this.data.p.z){var positionZ=this.pz.getValueAtTime(time);matrix.translate(positionX*this.px.mult,positionY*this.py.mult,-positionZ*this.pz.mult);}else {matrix.translate(positionX*this.px.mult,positionY*this.py.mult,0);}}else {var position=this.p.getValueAtTime(time);matrix.translate(position[0]*this.p.mult,position[1]*this.p.mult,-position[2]*this.p.mult);}return matrix;/// /
		}function getTransformStaticValueAtTime(){return this.v.clone(new Matrix());}var getTransformProperty=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(elem,data,container){var prop=getTransformProperty(elem,data,container);if(prop.dynamicProperties.length){prop.getValueAtTime=getTransformValueAtTime.bind(prop);}else {prop.getValueAtTime=getTransformStaticValueAtTime.bind(prop);}prop.setGroupProperty=expressionHelpers.setGroupProperty;return prop;};var propertyGetProp=PropertyFactory.getProp;PropertyFactory.getProp=function(elem,data,type,mult,container){var prop=propertyGetProp(elem,data,type,mult,container);// prop.getVelocityAtTime = getVelocityAtTime;
		// prop.loopOut = loopOut;
		// prop.loopIn = loopIn;
		if(prop.kf){prop.getValueAtTime=expressionHelpers.getValueAtTime.bind(prop);}else {prop.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(prop);}prop.setGroupProperty=expressionHelpers.setGroupProperty;prop.loopOut=loopOut;prop.loopIn=loopIn;prop.smooth=smooth;prop.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(prop);prop.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(prop);prop.numKeys=data.a===1?data.k.length:0;prop.propertyIndex=data.ix;var value=0;if(type!==0){value=createTypedArray('float32',data.a===1?data.k[0].s.length:data.k.length);}prop._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:value};expressionHelpers.searchExpressions(elem,data,prop);if(prop.k){container.addDynamicProperty(prop);}return prop;};function getShapeValueAtTime(frameNum){// For now this caching object is created only when needed instead of creating it when the shape is initialized.
		if(!this._cachingAtTime){this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame};}frameNum*=this.elem.globalData.frameRate;frameNum-=this.offsetTime;if(frameNum!==this._cachingAtTime.lastTime){this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<frameNum?this._caching.lastIndex:0;this._cachingAtTime.lastTime=frameNum;this.interpolateShape(frameNum,this._cachingAtTime.shapeValue,this._cachingAtTime);}return this._cachingAtTime.shapeValue;}var ShapePropertyConstructorFunction=ShapePropertyFactory.getConstructorFunction();var KeyframedShapePropertyConstructorFunction=ShapePropertyFactory.getKeyframedConstructorFunction();function ShapeExpressions(){}ShapeExpressions.prototype={vertices:function vertices(prop,time){if(this.k){this.getValue();}var shapePath=this.v;if(time!==undefined){shapePath=this.getValueAtTime(time,0);}var i;var len=shapePath._length;var vertices=shapePath[prop];var points=shapePath.v;var arr=createSizedArray(len);for(i=0;i<len;i+=1){if(prop==='i'||prop==='o'){arr[i]=[vertices[i][0]-points[i][0],vertices[i][1]-points[i][1]];}else {arr[i]=[vertices[i][0],vertices[i][1]];}}return arr;},points:function points(time){return this.vertices('v',time);},inTangents:function inTangents(time){return this.vertices('i',time);},outTangents:function outTangents(time){return this.vertices('o',time);},isClosed:function isClosed(){return this.v.c;},pointOnPath:function pointOnPath(perc,time){var shapePath=this.v;if(time!==undefined){shapePath=this.getValueAtTime(time,0);}if(!this._segmentsLength){this._segmentsLength=bez.getSegmentsLength(shapePath);}var segmentsLength=this._segmentsLength;var lengths=segmentsLength.lengths;var lengthPos=segmentsLength.totalLength*perc;var i=0;var len=lengths.length;var accumulatedLength=0;var pt;while(i<len){if(accumulatedLength+lengths[i].addedLength>lengthPos){var initIndex=i;var endIndex=shapePath.c&&i===len-1?0:i+1;var segmentPerc=(lengthPos-accumulatedLength)/lengths[i].addedLength;pt=bez.getPointInSegment(shapePath.v[initIndex],shapePath.v[endIndex],shapePath.o[initIndex],shapePath.i[endIndex],segmentPerc,lengths[i]);break;}else {accumulatedLength+=lengths[i].addedLength;}i+=1;}if(!pt){pt=shapePath.c?[shapePath.v[0][0],shapePath.v[0][1]]:[shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1]];}return pt;},vectorOnPath:function vectorOnPath(perc,time,vectorType){// perc doesn't use triple equality because it can be a Number object as well as a primitive.
		if(perc==1){// eslint-disable-line eqeqeq
		perc=this.v.c;}else if(perc==0){// eslint-disable-line eqeqeq
		perc=0.999;}var pt1=this.pointOnPath(perc,time);var pt2=this.pointOnPath(perc+0.001,time);var xLength=pt2[0]-pt1[0];var yLength=pt2[1]-pt1[1];var magnitude=Math.sqrt(Math.pow(xLength,2)+Math.pow(yLength,2));if(magnitude===0){return [0,0];}var unitVector=vectorType==='tangent'?[xLength/magnitude,yLength/magnitude]:[-yLength/magnitude,xLength/magnitude];return unitVector;},tangentOnPath:function tangentOnPath(perc,time){return this.vectorOnPath(perc,time,'tangent');},normalOnPath:function normalOnPath(perc,time){return this.vectorOnPath(perc,time,'normal');},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime};extendPrototype([ShapeExpressions],ShapePropertyConstructorFunction);extendPrototype([ShapeExpressions],KeyframedShapePropertyConstructorFunction);KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime=getShapeValueAtTime;KeyframedShapePropertyConstructorFunction.prototype.initiateExpression=ExpressionManager.initiateExpression;var propertyGetShapeProp=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(elem,data,type,arr,trims){var prop=propertyGetShapeProp(elem,data,type,arr,trims);prop.propertyIndex=data.ix;prop.lock=false;if(type===3){expressionHelpers.searchExpressions(elem,data.pt,prop);}else if(type===4){expressionHelpers.searchExpressions(elem,data.ks,prop);}if(prop.k){elem.addDynamicProperty(prop);}return prop;};}function initialize$1(){addPropertyDecorator();}function addDecorator(){function searchExpressions(){if(this.data.d.x){this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this);this.addEffect(this.getExpressionValue.bind(this));return true;}return null;}TextProperty.prototype.getExpressionValue=function(currentValue,text){var newValue=this.calculateExpression(text);if(currentValue.t!==newValue){var newData={};this.copyData(newData,currentValue);newData.t=newValue.toString();newData.__complete=false;return newData;}return currentValue;};TextProperty.prototype.searchProperty=function(){var isKeyframed=this.searchKeyframes();var hasExpressions=this.searchExpressions();this.kf=isKeyframed||hasExpressions;return this.kf;};TextProperty.prototype.searchExpressions=searchExpressions;}function initialize(){addDecorator();}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function createMergeNode(resultId,ins){var feMerge=createNS('feMerge');feMerge.setAttribute('result',resultId);var feMergeNode;var i;for(i=0;i<ins.length;i+=1){feMergeNode=createNS('feMergeNode');feMergeNode.setAttribute('in',ins[i]);feMerge.appendChild(feMergeNode);feMerge.appendChild(feMergeNode);}return feMerge;}};var linearFilterValue='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0';function SVGTintFilter(filter,filterManager,elem,id,source){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');feColorMatrix.setAttribute('values',linearFilterValue+' 1 0');this.linearFilter=feColorMatrix;feColorMatrix.setAttribute('result',id+'_tint_1');filter.appendChild(feColorMatrix);feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');feColorMatrix.setAttribute('result',id+'_tint_2');filter.appendChild(feColorMatrix);this.matrixFilter=feColorMatrix;var feMerge=this.createMergeNode(id,[source,id+'_tint_1',id+'_tint_2']);filter.appendChild(feMerge);}extendPrototype([SVGComposableEffect],SVGTintFilter);SVGTintFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var colorBlack=this.filterManager.effectElements[0].p.v;var colorWhite=this.filterManager.effectElements[1].p.v;var opacity=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute('values',linearFilterValue+' '+opacity+' 0');this.matrixFilter.setAttribute('values',colorWhite[0]-colorBlack[0]+' 0 0 0 '+colorBlack[0]+' '+(colorWhite[1]-colorBlack[1])+' 0 0 0 '+colorBlack[1]+' '+(colorWhite[2]-colorBlack[2])+' 0 0 0 '+colorBlack[2]+' 0 0 0 1 0');}};function SVGFillFilter(filter,filterManager,elem,id){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');feColorMatrix.setAttribute('result',id);filter.appendChild(feColorMatrix);this.matrixFilter=feColorMatrix;}SVGFillFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var color=this.filterManager.effectElements[2].p.v;var opacity=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute('values','0 0 0 0 '+color[0]+' 0 0 0 0 '+color[1]+' 0 0 0 0 '+color[2]+' 0 0 0 '+opacity+' 0');}};function SVGStrokeEffect(fil,filterManager,elem){this.initialized=false;this.filterManager=filterManager;this.elem=elem;this.paths=[];}SVGStrokeEffect.prototype.initialize=function(){var elemChildren=this.elem.layerElement.children||this.elem.layerElement.childNodes;var path;var groupPath;var i;var len;if(this.filterManager.effectElements[1].p.v===1){len=this.elem.maskManager.masksProperties.length;i=0;}else {i=this.filterManager.effectElements[0].p.v-1;len=i+1;}groupPath=createNS('g');groupPath.setAttribute('fill','none');groupPath.setAttribute('stroke-linecap','round');groupPath.setAttribute('stroke-dashoffset',1);for(i;i<len;i+=1){path=createNS('path');groupPath.appendChild(path);this.paths.push({p:path,m:i});}if(this.filterManager.effectElements[10].p.v===3){var mask=createNS('mask');var id=createElementID();mask.setAttribute('id',id);mask.setAttribute('mask-type','alpha');mask.appendChild(groupPath);this.elem.globalData.defs.appendChild(mask);var g=createNS('g');g.setAttribute('mask','url('+getLocationHref()+'#'+id+')');while(elemChildren[0]){g.appendChild(elemChildren[0]);}this.elem.layerElement.appendChild(g);this.masker=mask;groupPath.setAttribute('stroke','#fff');}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2){elemChildren=this.elem.layerElement.children||this.elem.layerElement.childNodes;while(elemChildren.length){this.elem.layerElement.removeChild(elemChildren[0]);}}this.elem.layerElement.appendChild(groupPath);this.elem.layerElement.removeAttribute('mask');groupPath.setAttribute('stroke','#fff');}this.initialized=true;this.pathMasker=groupPath;};SVGStrokeEffect.prototype.renderFrame=function(forceRender){if(!this.initialized){this.initialize();}var i;var len=this.paths.length;var mask;var path;for(i=0;i<len;i+=1){if(this.paths[i].m!==-1){mask=this.elem.maskManager.viewData[this.paths[i].m];path=this.paths[i].p;if(forceRender||this.filterManager._mdf||mask.prop._mdf){path.setAttribute('d',mask.lastPath);}if(forceRender||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||mask.prop._mdf){var dasharrayValue;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var s=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*0.01;var e=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*0.01;var l=path.getTotalLength();dasharrayValue='0 0 0 '+l*s+' ';var lineLength=l*(e-s);var segment=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01;var units=Math.floor(lineLength/segment);var j;for(j=0;j<units;j+=1){dasharrayValue+='1 '+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01+' ';}dasharrayValue+='0 '+l*10+' 0 0';}else {dasharrayValue='1 '+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01;}path.setAttribute('stroke-dasharray',dasharrayValue);}}}if(forceRender||this.filterManager.effectElements[4].p._mdf){this.pathMasker.setAttribute('stroke-width',this.filterManager.effectElements[4].p.v*2);}if(forceRender||this.filterManager.effectElements[6].p._mdf){this.pathMasker.setAttribute('opacity',this.filterManager.effectElements[6].p.v);}if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(forceRender||this.filterManager.effectElements[3].p._mdf){var color=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute('stroke','rgb('+bmFloor(color[0]*255)+','+bmFloor(color[1]*255)+','+bmFloor(color[2]*255)+')');}}};function SVGTritoneFilter(filter,filterManager,elem,id){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');filter.appendChild(feColorMatrix);var feComponentTransfer=createNS('feComponentTransfer');feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');feComponentTransfer.setAttribute('result',id);this.matrixFilter=feComponentTransfer;var feFuncR=createNS('feFuncR');feFuncR.setAttribute('type','table');feComponentTransfer.appendChild(feFuncR);this.feFuncR=feFuncR;var feFuncG=createNS('feFuncG');feFuncG.setAttribute('type','table');feComponentTransfer.appendChild(feFuncG);this.feFuncG=feFuncG;var feFuncB=createNS('feFuncB');feFuncB.setAttribute('type','table');feComponentTransfer.appendChild(feFuncB);this.feFuncB=feFuncB;filter.appendChild(feComponentTransfer);}SVGTritoneFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var color1=this.filterManager.effectElements[0].p.v;var color2=this.filterManager.effectElements[1].p.v;var color3=this.filterManager.effectElements[2].p.v;var tableR=color3[0]+' '+color2[0]+' '+color1[0];var tableG=color3[1]+' '+color2[1]+' '+color1[1];var tableB=color3[2]+' '+color2[2]+' '+color1[2];this.feFuncR.setAttribute('tableValues',tableR);this.feFuncG.setAttribute('tableValues',tableG);this.feFuncB.setAttribute('tableValues',tableB);}};function SVGProLevelsFilter(filter,filterManager,elem,id){this.filterManager=filterManager;var effectElements=this.filterManager.effectElements;var feComponentTransfer=createNS('feComponentTransfer');// Red
		if(effectElements[10].p.k||effectElements[10].p.v!==0||effectElements[11].p.k||effectElements[11].p.v!==1||effectElements[12].p.k||effectElements[12].p.v!==1||effectElements[13].p.k||effectElements[13].p.v!==0||effectElements[14].p.k||effectElements[14].p.v!==1){this.feFuncR=this.createFeFunc('feFuncR',feComponentTransfer);}// Green
		if(effectElements[17].p.k||effectElements[17].p.v!==0||effectElements[18].p.k||effectElements[18].p.v!==1||effectElements[19].p.k||effectElements[19].p.v!==1||effectElements[20].p.k||effectElements[20].p.v!==0||effectElements[21].p.k||effectElements[21].p.v!==1){this.feFuncG=this.createFeFunc('feFuncG',feComponentTransfer);}// Blue
		if(effectElements[24].p.k||effectElements[24].p.v!==0||effectElements[25].p.k||effectElements[25].p.v!==1||effectElements[26].p.k||effectElements[26].p.v!==1||effectElements[27].p.k||effectElements[27].p.v!==0||effectElements[28].p.k||effectElements[28].p.v!==1){this.feFuncB=this.createFeFunc('feFuncB',feComponentTransfer);}// Alpha
		if(effectElements[31].p.k||effectElements[31].p.v!==0||effectElements[32].p.k||effectElements[32].p.v!==1||effectElements[33].p.k||effectElements[33].p.v!==1||effectElements[34].p.k||effectElements[34].p.v!==0||effectElements[35].p.k||effectElements[35].p.v!==1){this.feFuncA=this.createFeFunc('feFuncA',feComponentTransfer);}// RGB
		if(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA){feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');filter.appendChild(feComponentTransfer);}if(effectElements[3].p.k||effectElements[3].p.v!==0||effectElements[4].p.k||effectElements[4].p.v!==1||effectElements[5].p.k||effectElements[5].p.v!==1||effectElements[6].p.k||effectElements[6].p.v!==0||effectElements[7].p.k||effectElements[7].p.v!==1){feComponentTransfer=createNS('feComponentTransfer');feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');feComponentTransfer.setAttribute('result',id);filter.appendChild(feComponentTransfer);this.feFuncRComposed=this.createFeFunc('feFuncR',feComponentTransfer);this.feFuncGComposed=this.createFeFunc('feFuncG',feComponentTransfer);this.feFuncBComposed=this.createFeFunc('feFuncB',feComponentTransfer);}}SVGProLevelsFilter.prototype.createFeFunc=function(type,feComponentTransfer){var feFunc=createNS(type);feFunc.setAttribute('type','table');feComponentTransfer.appendChild(feFunc);return feFunc;};SVGProLevelsFilter.prototype.getTableValue=function(inputBlack,inputWhite,gamma,outputBlack,outputWhite){var cnt=0;var segments=256;var perc;var min=Math.min(inputBlack,inputWhite);var max=Math.max(inputBlack,inputWhite);var table=Array.call(null,{length:segments});var colorValue;var pos=0;var outputDelta=outputWhite-outputBlack;var inputDelta=inputWhite-inputBlack;while(cnt<=256){perc=cnt/256;if(perc<=min){colorValue=inputDelta<0?outputWhite:outputBlack;}else if(perc>=max){colorValue=inputDelta<0?outputBlack:outputWhite;}else {colorValue=outputBlack+outputDelta*Math.pow((perc-inputBlack)/inputDelta,1/gamma);}table[pos]=colorValue;pos+=1;cnt+=256/(segments-1);}return table.join(' ');};SVGProLevelsFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var val;var effectElements=this.filterManager.effectElements;if(this.feFuncRComposed&&(forceRender||effectElements[3].p._mdf||effectElements[4].p._mdf||effectElements[5].p._mdf||effectElements[6].p._mdf||effectElements[7].p._mdf)){val=this.getTableValue(effectElements[3].p.v,effectElements[4].p.v,effectElements[5].p.v,effectElements[6].p.v,effectElements[7].p.v);this.feFuncRComposed.setAttribute('tableValues',val);this.feFuncGComposed.setAttribute('tableValues',val);this.feFuncBComposed.setAttribute('tableValues',val);}if(this.feFuncR&&(forceRender||effectElements[10].p._mdf||effectElements[11].p._mdf||effectElements[12].p._mdf||effectElements[13].p._mdf||effectElements[14].p._mdf)){val=this.getTableValue(effectElements[10].p.v,effectElements[11].p.v,effectElements[12].p.v,effectElements[13].p.v,effectElements[14].p.v);this.feFuncR.setAttribute('tableValues',val);}if(this.feFuncG&&(forceRender||effectElements[17].p._mdf||effectElements[18].p._mdf||effectElements[19].p._mdf||effectElements[20].p._mdf||effectElements[21].p._mdf)){val=this.getTableValue(effectElements[17].p.v,effectElements[18].p.v,effectElements[19].p.v,effectElements[20].p.v,effectElements[21].p.v);this.feFuncG.setAttribute('tableValues',val);}if(this.feFuncB&&(forceRender||effectElements[24].p._mdf||effectElements[25].p._mdf||effectElements[26].p._mdf||effectElements[27].p._mdf||effectElements[28].p._mdf)){val=this.getTableValue(effectElements[24].p.v,effectElements[25].p.v,effectElements[26].p.v,effectElements[27].p.v,effectElements[28].p.v);this.feFuncB.setAttribute('tableValues',val);}if(this.feFuncA&&(forceRender||effectElements[31].p._mdf||effectElements[32].p._mdf||effectElements[33].p._mdf||effectElements[34].p._mdf||effectElements[35].p._mdf)){val=this.getTableValue(effectElements[31].p.v,effectElements[32].p.v,effectElements[33].p.v,effectElements[34].p.v,effectElements[35].p.v);this.feFuncA.setAttribute('tableValues',val);}}};function SVGDropShadowEffect(filter,filterManager,elem,id,source){var globalFilterSize=filterManager.container.globalData.renderConfig.filterSize;var filterSize=filterManager.data.fs||globalFilterSize;filter.setAttribute('x',filterSize.x||globalFilterSize.x);filter.setAttribute('y',filterSize.y||globalFilterSize.y);filter.setAttribute('width',filterSize.width||globalFilterSize.width);filter.setAttribute('height',filterSize.height||globalFilterSize.height);this.filterManager=filterManager;var feGaussianBlur=createNS('feGaussianBlur');feGaussianBlur.setAttribute('in','SourceAlpha');feGaussianBlur.setAttribute('result',id+'_drop_shadow_1');feGaussianBlur.setAttribute('stdDeviation','0');this.feGaussianBlur=feGaussianBlur;filter.appendChild(feGaussianBlur);var feOffset=createNS('feOffset');feOffset.setAttribute('dx','25');feOffset.setAttribute('dy','0');feOffset.setAttribute('in',id+'_drop_shadow_1');feOffset.setAttribute('result',id+'_drop_shadow_2');this.feOffset=feOffset;filter.appendChild(feOffset);var feFlood=createNS('feFlood');feFlood.setAttribute('flood-color','#00ff00');feFlood.setAttribute('flood-opacity','1');feFlood.setAttribute('result',id+'_drop_shadow_3');this.feFlood=feFlood;filter.appendChild(feFlood);var feComposite=createNS('feComposite');feComposite.setAttribute('in',id+'_drop_shadow_3');feComposite.setAttribute('in2',id+'_drop_shadow_2');feComposite.setAttribute('operator','in');feComposite.setAttribute('result',id+'_drop_shadow_4');filter.appendChild(feComposite);var feMerge=this.createMergeNode(id,[id+'_drop_shadow_4',source]);filter.appendChild(feMerge);//
		}extendPrototype([SVGComposableEffect],SVGDropShadowEffect);SVGDropShadowEffect.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){if(forceRender||this.filterManager.effectElements[4].p._mdf){this.feGaussianBlur.setAttribute('stdDeviation',this.filterManager.effectElements[4].p.v/4);}if(forceRender||this.filterManager.effectElements[0].p._mdf){var col=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute('flood-color',rgbToHex(Math.round(col[0]*255),Math.round(col[1]*255),Math.round(col[2]*255)));}if(forceRender||this.filterManager.effectElements[1].p._mdf){this.feFlood.setAttribute('flood-opacity',this.filterManager.effectElements[1].p.v/255);}if(forceRender||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var distance=this.filterManager.effectElements[3].p.v;var angle=(this.filterManager.effectElements[2].p.v-90)*degToRads;var x=distance*Math.cos(angle);var y=distance*Math.sin(angle);this.feOffset.setAttribute('dx',x);this.feOffset.setAttribute('dy',y);}}};var _svgMatteSymbols=[];function SVGMatte3Effect(filterElem,filterManager,elem){this.initialized=false;this.filterManager=filterManager;this.filterElem=filterElem;this.elem=elem;elem.matteElement=createNS('g');elem.matteElement.appendChild(elem.layerElement);elem.matteElement.appendChild(elem.transformedElement);elem.baseElement=elem.matteElement;}SVGMatte3Effect.prototype.findSymbol=function(mask){var i=0;var len=_svgMatteSymbols.length;while(i<len){if(_svgMatteSymbols[i]===mask){return _svgMatteSymbols[i];}i+=1;}return null;};SVGMatte3Effect.prototype.replaceInParent=function(mask,symbolId){var parentNode=mask.layerElement.parentNode;if(!parentNode){return;}var children=parentNode.children;var i=0;var len=children.length;while(i<len){if(children[i]===mask.layerElement){break;}i+=1;}var nextChild;if(i<=len-2){nextChild=children[i+1];}var useElem=createNS('use');useElem.setAttribute('href','#'+symbolId);if(nextChild){parentNode.insertBefore(useElem,nextChild);}else {parentNode.appendChild(useElem);}};SVGMatte3Effect.prototype.setElementAsMask=function(elem,mask){if(!this.findSymbol(mask)){var symbolId=createElementID();var masker=createNS('mask');masker.setAttribute('id',mask.layerId);masker.setAttribute('mask-type','alpha');_svgMatteSymbols.push(mask);var defs=elem.globalData.defs;defs.appendChild(masker);var symbol=createNS('symbol');symbol.setAttribute('id',symbolId);this.replaceInParent(mask,symbolId);symbol.appendChild(mask.layerElement);defs.appendChild(symbol);var useElem=createNS('use');useElem.setAttribute('href','#'+symbolId);masker.appendChild(useElem);mask.data.hd=false;mask.show();}elem.setMatte(mask.layerId);};SVGMatte3Effect.prototype.initialize=function(){var ind=this.filterManager.effectElements[0].p.v;var elements=this.elem.comp.elements;var i=0;var len=elements.length;while(i<len){if(elements[i]&&elements[i].data.ind===ind){this.setElementAsMask(this.elem,elements[i]);}i+=1;}this.initialized=true;};SVGMatte3Effect.prototype.renderFrame=function(){if(!this.initialized){this.initialize();}};function SVGGaussianBlurEffect(filter,filterManager,elem,id){// Outset the filter region by 100% on all sides to accommodate blur expansion.
		filter.setAttribute('x','-100%');filter.setAttribute('y','-100%');filter.setAttribute('width','300%');filter.setAttribute('height','300%');this.filterManager=filterManager;var feGaussianBlur=createNS('feGaussianBlur');feGaussianBlur.setAttribute('result',id);filter.appendChild(feGaussianBlur);this.feGaussianBlur=feGaussianBlur;}SVGGaussianBlurEffect.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){// Empirical value, matching AE's blur appearance.
		var kBlurrinessToSigma=0.3;var sigma=this.filterManager.effectElements[0].p.v*kBlurrinessToSigma;// Dimensions mapping:
		//
		//   1 -> horizontal & vertical
		//   2 -> horizontal only
		//   3 -> vertical only
		//
		var dimensions=this.filterManager.effectElements[1].p.v;var sigmaX=dimensions==3?0:sigma;// eslint-disable-line eqeqeq
		var sigmaY=dimensions==2?0:sigma;// eslint-disable-line eqeqeq
		this.feGaussianBlur.setAttribute('stdDeviation',sigmaX+' '+sigmaY);// Repeat edges mapping:
		//
		//   0 -> off -> duplicate
		//   1 -> on  -> wrap
		var edgeMode=this.filterManager.effectElements[2].p.v==1?'wrap':'duplicate';// eslint-disable-line eqeqeq
		this.feGaussianBlur.setAttribute('edgeMode',edgeMode);}};function TransformEffect(){}TransformEffect.prototype.init=function(effectsManager){this.effectsManager=effectsManager;this.type=effectTypes.TRANSFORM_EFFECT;this.matrix=new Matrix();this.opacity=-1;this._mdf=false;this._opMdf=false;};TransformEffect.prototype.renderFrame=function(forceFrame){this._opMdf=false;this._mdf=false;if(forceFrame||this.effectsManager._mdf){var effectElements=this.effectsManager.effectElements;var anchor=effectElements[0].p.v;var position=effectElements[1].p.v;var isUniformScale=effectElements[2].p.v===1;var scaleHeight=effectElements[3].p.v;var scaleWidth=isUniformScale?scaleHeight:effectElements[4].p.v;var skew=effectElements[5].p.v;var skewAxis=effectElements[6].p.v;var rotation=effectElements[7].p.v;this.matrix.reset();this.matrix.translate(-anchor[0],-anchor[1],anchor[2]);this.matrix.scale(scaleWidth*0.01,scaleHeight*0.01,1);this.matrix.rotate(-rotation*degToRads);this.matrix.skewFromAxis(-skew*degToRads,(skewAxis+90)*degToRads);this.matrix.translate(position[0],position[1],0);this._mdf=true;if(this.opacity!==effectElements[8].p.v){this.opacity=effectElements[8].p.v;this._opMdf=true;}}};function SVGTransformEffect(_,filterManager){this.init(filterManager);}extendPrototype([TransformEffect],SVGTransformEffect);function CVTransformEffect(effectsManager){this.init(effectsManager);}extendPrototype([TransformEffect],CVTransformEffect);registerRenderer('canvas',CanvasRenderer);registerRenderer('html',HybridRenderer);registerRenderer('svg',SVGRenderer);// Registering shape modifiers
		ShapeModifiers.registerModifier('tm',TrimModifier);ShapeModifiers.registerModifier('pb',PuckerAndBloatModifier);ShapeModifiers.registerModifier('rp',RepeaterModifier);ShapeModifiers.registerModifier('rd',RoundCornersModifier);ShapeModifiers.registerModifier('zz',ZigZagModifier);ShapeModifiers.registerModifier('op',OffsetPathModifier);// Registering expression plugin
		setExpressionsPlugin(Expressions);setExpressionInterfaces(getInterface);initialize$1();initialize();// Registering svg effects
		registerEffect$1(20,SVGTintFilter,true);registerEffect$1(21,SVGFillFilter,true);registerEffect$1(22,SVGStrokeEffect,false);registerEffect$1(23,SVGTritoneFilter,true);registerEffect$1(24,SVGProLevelsFilter,true);registerEffect$1(25,SVGDropShadowEffect,true);registerEffect$1(28,SVGMatte3Effect,false);registerEffect$1(29,SVGGaussianBlurEffect,true);registerEffect$1(35,SVGTransformEffect,false);registerEffect(35,CVTransformEffect);return lottie;}); 
	} (lottie$1, lottie$1.exports));
	return lottie$1.exports;
}

var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist;
	hasRequiredDist = 1;

	Object.defineProperty(dist, "__esModule", {
	  value: true
	});
	var _extends2 = require_extends();
	var _extends3 = _interopRequireDefault(_extends2);
	var _getPrototypeOf = requireGetPrototypeOf();
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	var _classCallCheck2 = requireClassCallCheck();
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	var _createClass2 = requireCreateClass();
	var _createClass3 = _interopRequireDefault(_createClass2);
	var _possibleConstructorReturn2 = requirePossibleConstructorReturn();
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	var _inherits2 = requireInherits();
	var _inherits3 = _interopRequireDefault(_inherits2);
	var _react = require('react');
	var _react2 = _interopRequireDefault(_react);
	var _propTypes = /*@__PURE__*/ requirePropTypes();
	var _propTypes2 = _interopRequireDefault(_propTypes);
	var _lottieWeb = requireLottie();
	var _lottieWeb2 = _interopRequireDefault(_lottieWeb);
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	var Lottie = function (_React$Component) {
	  (0, _inherits3.default)(Lottie, _React$Component);
	  function Lottie() {
	    var _ref;
	    var _temp, _this, _ret;
	    (0, _classCallCheck3.default)(this, Lottie);
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Lottie.__proto__ || (0, _getPrototypeOf2.default)(Lottie)).call.apply(_ref, [this].concat(args))), _this), _this.handleClickToPause = function () {
	      // The pause() method is for handling pausing by passing a prop isPaused
	      // This method is for handling the ability to pause by clicking on the animation
	      if (_this.anim.isPaused) {
	        _this.anim.play();
	      } else {
	        _this.anim.pause();
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	  (0, _createClass3.default)(Lottie, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props,
	        options = _props.options,
	        eventListeners = _props.eventListeners;
	      var loop = options.loop,
	        autoplay = options.autoplay,
	        animationData = options.animationData,
	        rendererSettings = options.rendererSettings,
	        segments = options.segments;
	      this.options = {
	        container: this.el,
	        renderer: 'svg',
	        loop: loop !== false,
	        autoplay: autoplay !== false,
	        segments: segments !== false,
	        animationData: animationData,
	        rendererSettings: rendererSettings
	      };
	      this.options = (0, _extends3.default)({}, this.options, options);
	      this.anim = _lottieWeb2.default.loadAnimation(this.options);
	      this.registerEvents(eventListeners);
	      this.setSpeed();
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps /* , nextState */) {
	      /* Recreate the animation handle if the data is changed */
	      if (this.options.animationData !== nextProps.options.animationData) {
	        this.deRegisterEvents(this.props.eventListeners);
	        this.destroy();
	        this.options = (0, _extends3.default)({}, this.options, nextProps.options);
	        this.anim = _lottieWeb2.default.loadAnimation(this.options);
	        this.registerEvents(nextProps.eventListeners);
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.props.isStopped) {
	        this.stop();
	      } else if (this.props.segments) {
	        this.playSegments();
	      } else {
	        this.play();
	      }
	      this.pause();
	      this.setSpeed();
	      this.setDirection();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.deRegisterEvents(this.props.eventListeners);
	      this.destroy();
	      this.options.animationData = null;
	      this.anim = null;
	    }
	  }, {
	    key: 'setSpeed',
	    value: function setSpeed() {
	      this.anim.setSpeed(this.props.speed);
	    }
	  }, {
	    key: 'setDirection',
	    value: function setDirection() {
	      this.anim.setDirection(this.props.direction);
	    }
	  }, {
	    key: 'play',
	    value: function play() {
	      this.anim.play();
	    }
	  }, {
	    key: 'playSegments',
	    value: function playSegments() {
	      this.anim.playSegments(this.props.segments);
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      this.anim.stop();
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	      if (this.props.isPaused && !this.anim.isPaused) {
	        this.anim.pause();
	      } else if (!this.props.isPaused && this.anim.isPaused) {
	        this.anim.pause();
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.anim.destroy();
	    }
	  }, {
	    key: 'registerEvents',
	    value: function registerEvents(eventListeners) {
	      var _this2 = this;
	      eventListeners.forEach(function (eventListener) {
	        _this2.anim.addEventListener(eventListener.eventName, eventListener.callback);
	      });
	    }
	  }, {
	    key: 'deRegisterEvents',
	    value: function deRegisterEvents(eventListeners) {
	      var _this3 = this;
	      eventListeners.forEach(function (eventListener) {
	        _this3.anim.removeEventListener(eventListener.eventName, eventListener.callback);
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;
	      var _props2 = this.props,
	        width = _props2.width,
	        height = _props2.height,
	        ariaRole = _props2.ariaRole,
	        ariaLabel = _props2.ariaLabel,
	        isClickToPauseDisabled = _props2.isClickToPauseDisabled,
	        title = _props2.title;
	      var getSize = function getSize(initial) {
	        var size = void 0;
	        if (typeof initial === 'number') {
	          size = initial + 'px';
	        } else {
	          size = initial || '100%';
	        }
	        return size;
	      };
	      var lottieStyles = (0, _extends3.default)({
	        width: getSize(width),
	        height: getSize(height),
	        overflow: 'hidden',
	        margin: '0 auto',
	        outline: 'none'
	      }, this.props.style);
	      var onClickHandler = isClickToPauseDisabled ? function () {
	        return null;
	      } : this.handleClickToPause;
	      return (
	        // Bug with eslint rules https://github.com/airbnb/javascript/issues/1374
	        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
	        _react2.default.createElement('div', {
	          ref: function ref(c) {
	            _this4.el = c;
	          },
	          style: lottieStyles,
	          onClick: onClickHandler,
	          title: title,
	          role: ariaRole,
	          'aria-label': ariaLabel,
	          tabIndex: '0'
	        })
	      );
	    }
	  }]);
	  return Lottie;
	}(_react2.default.Component);
	dist.default = Lottie;
	Lottie.propTypes = {
	  eventListeners: _propTypes2.default.arrayOf(_propTypes2.default.object),
	  options: _propTypes2.default.object.isRequired,
	  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  isStopped: _propTypes2.default.bool,
	  isPaused: _propTypes2.default.bool,
	  speed: _propTypes2.default.number,
	  segments: _propTypes2.default.arrayOf(_propTypes2.default.number),
	  direction: _propTypes2.default.number,
	  ariaRole: _propTypes2.default.string,
	  ariaLabel: _propTypes2.default.string,
	  isClickToPauseDisabled: _propTypes2.default.bool,
	  title: _propTypes2.default.string,
	  style: _propTypes2.default.object
	};
	Lottie.defaultProps = {
	  eventListeners: [],
	  isStopped: false,
	  isPaused: false,
	  speed: 1,
	  ariaRole: 'button',
	  ariaLabel: 'animation',
	  isClickToPauseDisabled: false,
	  title: ''
	};
	return dist;
}

var distExports = requireDist();
var Lottie = /*@__PURE__*/getDefaultExportFromCjs(distExports);

// Manually modify node_modules/lottie-web/build/player/lottie.js
// from
// var expression_function = eval('[function _expression_function(){' + val + ';scoped_bm_rt=$bm_rt}]')[0]; // eslint-disable-line no-eval
// to
// var expression_function = new Function('scoped_bm_rt', val + '; return $bm_rt;'); // eslint-disable-line no-eval
function LottieAnimations({
  fileVisibility,
  lottieFile,
  imageFullPage,
  imageHeight,
  imageWidth
}) {
  const [visible, setVisible] = useState(false);
  useEffect(() => {
    if (fileVisibility && fileVisibility.status === "available" && fileVisibility.value === false) {
      setVisible(false);
    } else if (fileVisibility && fileVisibility.status === "available" && fileVisibility.value === true) {
      setVisible(true);
    } else {
      setVisible(true);
    }
  }, [fileVisibility, visible]);
  if (lottieFile) {
    const defaultOptions = {
      loop: true,
      autoplay: true,
      animationData: JSON.parse(lottieFile),
      rendererSettings: {
        preserveAspectRatio: "xMidYMid slice"
      }
    };
    return createElement("div", {
      className: visible ? "full-container" : "hidden"
    }, createElement(Lottie, {
      options: defaultOptions,
      height: imageHeight,
      width: imageWidth
    }));
  } else return null;
}

export { LottieAnimations };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG90dGllQW5pbWF0aW9ucy5tanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1leHQuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL2hhcy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb3R0aWUtd2ViL2J1aWxkL3BsYXllci9sb3R0aWUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtbG90dGllL2Rpc3QvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9zcmMvTG90dGllQW5pbWF0aW9ucy5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xMicgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuYXNzaWduO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ25cIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvYXNzaWduXCIpO1xuXG52YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfYXNzaWduMi5kZWZhdWx0IHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTsiLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKSB7XG4gIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7IiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgRE9NSXRlcmFibGVzID0gKCdDU1NSdWxlTGlzdCxDU1NTdHlsZURlY2xhcmF0aW9uLENTU1ZhbHVlTGlzdCxDbGllbnRSZWN0TGlzdCxET01SZWN0TGlzdCxET01TdHJpbmdMaXN0LCcgK1xuICAnRE9NVG9rZW5MaXN0LERhdGFUcmFuc2Zlckl0ZW1MaXN0LEZpbGVMaXN0LEhUTUxBbGxDb2xsZWN0aW9uLEhUTUxDb2xsZWN0aW9uLEhUTUxGb3JtRWxlbWVudCxIVE1MU2VsZWN0RWxlbWVudCwnICtcbiAgJ01lZGlhTGlzdCxNaW1lVHlwZUFycmF5LE5hbWVkTm9kZU1hcCxOb2RlTGlzdCxQYWludFJlcXVlc3RMaXN0LFBsdWdpbixQbHVnaW5BcnJheSxTVkdMZW5ndGhMaXN0LFNWR051bWJlckxpc3QsJyArXG4gICdTVkdQYXRoU2VnTGlzdCxTVkdQb2ludExpc3QsU1ZHU3RyaW5nTGlzdCxTVkdUcmFuc2Zvcm1MaXN0LFNvdXJjZUJ1ZmZlckxpc3QsU3R5bGVTaGVldExpc3QsVGV4dFRyYWNrQ3VlTGlzdCwnICtcbiAgJ1RleHRUcmFja0xpc3QsVG91Y2hMaXN0Jykuc3BsaXQoJywnKTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBET01JdGVyYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBET01JdGVyYWJsZXNbaV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufVxuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07IiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7XG5cbnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCA/ICgwLCBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucG9ydGFsJykgOiAweGVhY2E7XG52YXIgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50JykgOiAweGVhY2I7XG52YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN0cmljdF9tb2RlJykgOiAweGVhY2M7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb2ZpbGVyJykgOiAweGVhZDI7XG52YXIgUkVBQ1RfUFJPVklERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJykgOiAweGVhY2Q7XG52YXIgUkVBQ1RfQ09OVEVYVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29udGV4dCcpIDogMHhlYWNlOyAvLyBUT0RPOiBXZSBkb24ndCB1c2UgQXN5bmNNb2RlIG9yIENvbmN1cnJlbnRNb2RlIGFueW1vcmUuIFRoZXkgd2VyZSB0ZW1wb3Jhcnlcbi8vICh1bnN0YWJsZSkgQVBJcyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkLiBDYW4gd2UgcmVtb3ZlIHRoZSBzeW1ib2xzP1xuXG52YXIgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuYXN5bmNfbW9kZScpIDogMHhlYWNmO1xudmFyIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29uY3VycmVudF9tb2RlJykgOiAweGVhY2Y7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJykgOiAweGVhZDA7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJykgOiAweGVhZDE7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2VfbGlzdCcpIDogMHhlYWQ4O1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0Lm1lbW8nKSA6IDB4ZWFkMztcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5sYXp5JykgOiAweGVhZDQ7XG52YXIgUkVBQ1RfQkxPQ0tfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmJsb2NrJykgOiAweGVhZDk7XG52YXIgUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZ1bmRhbWVudGFsJykgOiAweGVhZDU7XG52YXIgUkVBQ1RfUkVTUE9OREVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5yZXNwb25kZXInKSA6IDB4ZWFkNjtcbnZhciBSRUFDVF9TQ09QRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc2NvcGUnKSA6IDB4ZWFkNztcblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCAvLyBOb3RlOiBpdHMgdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgaWYgaXQncyBhIHBvbHlmaWxsLlxuICB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUkVTUE9OREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfU0NPUEVfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9CTE9DS19UWVBFKTtcbn1cblxuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyICQkdHlwZW9mID0gb2JqZWN0LiQkdHlwZW9mO1xuXG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHZhciB0eXBlID0gb2JqZWN0LnR5cGU7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgJCR0eXBlb2ZUeXBlID0gdHlwZSAmJiB0eXBlLiQkdHlwZW9mO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2ZUeXBlO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IC8vIEFzeW5jTW9kZSBpcyBkZXByZWNhdGVkIGFsb25nIHdpdGggaXNBc3luY01vZGVcblxudmFyIEFzeW5jTW9kZSA9IFJFQUNUX0FTWU5DX01PREVfVFlQRTtcbnZhciBDb25jdXJyZW50TW9kZSA9IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xudmFyIENvbnRleHRDb25zdW1lciA9IFJFQUNUX0NPTlRFWFRfVFlQRTtcbnZhciBDb250ZXh0UHJvdmlkZXIgPSBSRUFDVF9QUk9WSURFUl9UWVBFO1xudmFyIEVsZW1lbnQgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG52YXIgRm9yd2FyZFJlZiA9IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG52YXIgRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xudmFyIExhenkgPSBSRUFDVF9MQVpZX1RZUEU7XG52YXIgTWVtbyA9IFJFQUNUX01FTU9fVFlQRTtcbnZhciBQb3J0YWwgPSBSRUFDVF9QT1JUQUxfVFlQRTtcbnZhciBQcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG52YXIgU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG52YXIgU3VzcGVuc2UgPSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xudmFyIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gZmFsc2U7IC8vIEFzeW5jTW9kZSBzaG91bGQgYmUgZGVwcmVjYXRlZFxuXG5mdW5jdGlvbiBpc0FzeW5jTW9kZShvYmplY3QpIHtcbiAge1xuICAgIGlmICghaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUpIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gdHJ1ZTsgLy8gVXNpbmcgY29uc29sZVsnd2FybiddIHRvIGV2YWRlIEJhYmVsIGFuZCBFU0xpbnRcblxuICAgICAgY29uc29sZVsnd2FybiddKCdUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxNysuIFVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlICcgKyAnUmVhY3RJcy5pc0NvbmN1cnJlbnRNb2RlKCkgaW5zdGVhZC4gSXQgaGFzIHRoZSBleGFjdCBzYW1lIEFQSS4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXNDb25jdXJyZW50TW9kZShvYmplY3QpIHx8IHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRm9yd2FyZFJlZihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNMYXp5KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0xBWllfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTWVtbyhvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEU7XG59XG5mdW5jdGlvbiBpc1BvcnRhbChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUHJvZmlsZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3RyaWN0TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xufVxuXG5leHBvcnRzLkFzeW5jTW9kZSA9IEFzeW5jTW9kZTtcbmV4cG9ydHMuQ29uY3VycmVudE1vZGUgPSBDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuQ29udGV4dENvbnN1bWVyID0gQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuZXhwb3J0cy5Gb3J3YXJkUmVmID0gRm9yd2FyZFJlZjtcbmV4cG9ydHMuRnJhZ21lbnQgPSBGcmFnbWVudDtcbmV4cG9ydHMuTGF6eSA9IExhenk7XG5leHBvcnRzLk1lbW8gPSBNZW1vO1xuZXhwb3J0cy5Qb3J0YWwgPSBQb3J0YWw7XG5leHBvcnRzLlByb2ZpbGVyID0gUHJvZmlsZXI7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBTdHJpY3RNb2RlO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFN1c3BlbnNlO1xuZXhwb3J0cy5pc0FzeW5jTW9kZSA9IGlzQXN5bmNNb2RlO1xuZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlID0gaXNDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXIgPSBpc0NvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXIgPSBpc0NvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuZXhwb3J0cy5pc0ZvcndhcmRSZWYgPSBpc0ZvcndhcmRSZWY7XG5leHBvcnRzLmlzRnJhZ21lbnQgPSBpc0ZyYWdtZW50O1xuZXhwb3J0cy5pc0xhenkgPSBpc0xhenk7XG5leHBvcnRzLmlzTWVtbyA9IGlzTWVtbztcbmV4cG9ydHMuaXNQb3J0YWwgPSBpc1BvcnRhbDtcbmV4cG9ydHMuaXNQcm9maWxlciA9IGlzUHJvZmlsZXI7XG5leHBvcnRzLmlzU3RyaWN0TW9kZSA9IGlzU3RyaWN0TW9kZTtcbmV4cG9ydHMuaXNTdXNwZW5zZSA9IGlzU3VzcGVuc2U7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZTtcbmV4cG9ydHMudHlwZU9mID0gdHlwZU9mO1xuICB9KSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbiAgdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9saWIvaGFzJyk7XG5cbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHsgLyoqLyB9XG4gIH07XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKGhhcyh0eXBlU3BlY3MsIHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIGVyciA9IEVycm9yKFxuICAgICAgICAgICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgICAgICAgICAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nICtcbiAgICAgICAgICAgICAgJ1RoaXMgb2Z0ZW4gaGFwcGVucyBiZWNhdXNlIG9mIHR5cG9zIHN1Y2ggYXMgYFByb3BUeXBlcy5mdW5jdGlvbmAgaW5zdGVhZCBvZiBgUHJvcFR5cGVzLmZ1bmNgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ZhaWxlZCAnICsgbG9jYXRpb24gKyAnIHR5cGU6ICcgKyBlcnJvci5tZXNzYWdlICsgKHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNldHMgd2FybmluZyBjYWNoZSB3aGVuIHRlc3RpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9saWIvaGFzJyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCcuL2NoZWNrUHJvcFR5cGVzJyk7XG5cbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAgICpcbiAgICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAgICogICAgIH0sXG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gICAqXG4gICAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAgICpcbiAgICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gICAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAgICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAqICAgICAgICAgICk7XG4gICAqICAgICAgICB9XG4gICAqICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAgICogIH0pO1xuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgICBiaWdpbnQ6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdiaWdpbnQnKSxcbiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBlbGVtZW50VHlwZTogY3JlYXRlRWxlbWVudFR5cGVUeXBlQ2hlY2tlcigpLFxuICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcixcbiAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcixcbiAgfTtcblxuICAvKipcbiAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICovXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cbiAgLyoqXG4gICAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcbiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbVxuICAgKiBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSBpZiB0aGV5IGFyZSBjcmVhdGVkIHRvbyBvZnRlbiwgc3VjaCBhcyB3aGF0XG4gICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSwgZGF0YSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5kYXRhID0gZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgPyBkYXRhOiB7fTtcbiAgICB0aGlzLnN0YWNrID0gJyc7XG4gIH1cbiAgLy8gTWFrZSBgaW5zdGFuY2VvZiBFcnJvcmAgc3RpbGwgd29yayBmb3IgcmV0dXJuZWQgZXJyb3JzLlxuICBQcm9wVHlwZUVycm9yLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcblxuICBmdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUgPSB7fTtcbiAgICAgIHZhciBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA9IDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgICBpZiAoc2VjcmV0ICE9PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgICBpZiAodGhyb3dPbkRpcmVjdEFjY2Vzcykge1xuICAgICAgICAgIC8vIE5ldyBiZWhhdmlvciBvbmx5IGZvciB1c2VycyBvZiBgcHJvcC10eXBlc2AgcGFja2FnZVxuICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAnVXNlIGBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKWAgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gT2xkIGJlaGF2aW9yIGZvciBwZW9wbGUgdXNpbmcgUmVhY3QuUHJvcFR5cGVzXG4gICAgICAgICAgdmFyIGNhY2hlS2V5ID0gY29tcG9uZW50TmFtZSArICc6JyArIHByb3BOYW1lO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFtYW51YWxQcm9wVHlwZUNhbGxDYWNoZVtjYWNoZUtleV0gJiZcbiAgICAgICAgICAgIC8vIEF2b2lkIHNwYW1taW5nIHRoZSBjb25zb2xlIGJlY2F1c2UgdGhleSBhcmUgb2Z0ZW4gbm90IGFjdGlvbmFibGUgZXhjZXB0IGZvciBsaWIgYXV0aG9yc1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPCAzXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBwcmludFdhcm5pbmcoXG4gICAgICAgICAgICAgICdZb3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgYSBSZWFjdC5Qcm9wVHlwZXMgdmFsaWRhdGlvbiAnICtcbiAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGZvciB0aGUgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBwcm9wIG9uIGAnICsgY29tcG9uZW50TmFtZSArICdgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgICAgICAgICAgICdhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCAnICsgKCdpbiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICAgIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gICAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgICAgLy8gY2hlY2ssIGJ1dCB3ZSBjYW4gb2ZmZXIgYSBtb3JlIHByZWNpc2UgZXJyb3IgbWVzc2FnZSBoZXJlIHJhdGhlciB0aGFuXG4gICAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXG4gICAgICAgICAgJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSxcbiAgICAgICAgICB7ZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGV9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZVR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghUmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQgdHlwZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50cyBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXksIGdvdCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLiAnICtcbiAgICAgICAgICAgICdBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIHdyaXRlIG9uZU9mKHgsIHksIHopIGluc3RlYWQgb2Ygb25lT2YoW3gsIHksIHpdKS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGV4cGVjdGVkVmFsdWVzW2ldKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcywgZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgU3RyaW5nKHByb3BWYWx1ZSkgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKGhhcyhwcm9wVmFsdWUsIGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAodHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArXG4gICAgICAgICAgJ3JlY2VpdmVkICcgKyBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlcikgKyAnIGF0IGluZGV4ICcgKyBpICsgJy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICAgIHZhciBjaGVja2VyUmVzdWx0ID0gY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGNoZWNrZXJSZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGVja2VyUmVzdWx0LmRhdGEgJiYgaGFzKGNoZWNrZXJSZXN1bHQuZGF0YSwgJ2V4cGVjdGVkVHlwZScpKSB7XG4gICAgICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGNoZWNrZXJSZXN1bHQuZGF0YS5leHBlY3RlZFR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZXhwZWN0ZWRUeXBlc01lc3NhZ2UgPSAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPiAwKSA/ICcsIGV4cGVjdGVkIG9uZSBvZiB0eXBlIFsnICsgZXhwZWN0ZWRUeXBlcy5qb2luKCcsICcpICsgJ10nOiAnJztcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AnICsgZXhwZWN0ZWRUeXBlc01lc3NhZ2UgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmFsaWRWYWxpZGF0b3JFcnJvcihjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBrZXksIHR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXG4gICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHByb3BGdWxsTmFtZSArICcuJyArIGtleSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZSArICdgLidcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgY2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpbnZhbGlkVmFsaWRhdG9yRXJyb3IoY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwga2V5LCBnZXRQcmVjaXNlVHlwZShjaGVja2VyKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb20gcHJvcHMuXG4gICAgICB2YXIgYWxsS2V5cyA9IGFzc2lnbih7fSwgcHJvcHNbcHJvcE5hbWVdLCBzaGFwZVR5cGVzKTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgICBpZiAoaGFzKHNoYXBlVHlwZXMsIGtleSkgJiYgdHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gaW52YWxpZFZhbGlkYXRvckVycm9yKGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIGtleSwgZ2V0UHJlY2lzZVR5cGUoY2hlY2tlcikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcbiAgICAgICAgICAgICdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBrZXkgYCcgKyBrZXkgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IGlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGZhbHN5IHZhbHVlIGNhbid0IGJlIGEgU3ltYm9sXG4gICAgaWYgKCFwcm9wVmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuICAgIGlmIChwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXSA9PT0gJ1N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG4gIGZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJyArIHByb3BWYWx1ZTtcbiAgICB9XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgcG9zdGZpeGVkIHRvIGEgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIHR5cGUuXG4gIC8vIEZvciBleGFtcGxlLCBcInVuZGVmaW5lZFwiIG9yIFwib2YgdHlwZSBhcnJheVwiXG4gIGZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuICdhbiAnICsgdHlwZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICBjYXNlICdyZWdleHAnOlxuICAgICAgICByZXR1cm4gJ2EgJyArIHR5cGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gICAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICByZXR1cm4gQU5PTllNT1VTO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzO1xuICBSZWFjdFByb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZSA9IGNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIpICYmIChmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLmxvdHRpZSA9IGZhY3RvcnkoKSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgdmFyIGxvY2F0aW9uSHJlZiA9ICcnO1xuICB2YXIgX3VzZVdlYldvcmtlciA9IGZhbHNlO1xuICB2YXIgaW5pdGlhbERlZmF1bHRGcmFtZSA9IC05OTk5OTk7XG5cbiAgdmFyIHNldFdlYldvcmtlciA9IGZ1bmN0aW9uIHNldFdlYldvcmtlcihmbGFnKSB7XG4gICAgX3VzZVdlYldvcmtlciA9ICEhZmxhZztcbiAgfTtcblxuICB2YXIgZ2V0V2ViV29ya2VyID0gZnVuY3Rpb24gZ2V0V2ViV29ya2VyKCkge1xuICAgIHJldHVybiBfdXNlV2ViV29ya2VyO1xuICB9O1xuXG4gIHZhciBzZXRMb2NhdGlvbkhyZWYgPSBmdW5jdGlvbiBzZXRMb2NhdGlvbkhyZWYodmFsdWUpIHtcbiAgICBsb2NhdGlvbkhyZWYgPSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgZ2V0TG9jYXRpb25IcmVmID0gZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuICAgIHJldHVybiBsb2NhdGlvbkhyZWY7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGFnKHR5cGUpIHtcbiAgICAvLyByZXR1cm4ge2FwcGVuZENoaWxkOmZ1bmN0aW9uKCl7fSxzZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oKXt9LHN0eWxlOnt9fVxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kUHJvdG90eXBlKHNvdXJjZXMsIGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuICAgIHZhciBzb3VyY2VQcm90b3R5cGU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHNvdXJjZVByb3RvdHlwZSA9IHNvdXJjZXNbaV0ucHJvdG90eXBlO1xuXG4gICAgICBmb3IgKHZhciBhdHRyIGluIHNvdXJjZVByb3RvdHlwZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZVByb3RvdHlwZSwgYXR0cikpIGRlc3RpbmF0aW9uLnByb3RvdHlwZVthdHRyXSA9IHNvdXJjZVByb3RvdHlwZVthdHRyXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZXNjcmlwdG9yKG9iamVjdCwgcHJvcCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcm94eUZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgIGZ1bmN0aW9uIFByb3h5RnVuY3Rpb24oKSB7fVxuXG4gICAgUHJveHlGdW5jdGlvbi5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgcmV0dXJuIFByb3h5RnVuY3Rpb247XG4gIH1cblxuICAvLyBpbXBvcnQgSG93bCBmcm9tICcuLi8uLi8zcmRfcGFydHkvaG93bGVyJztcbiAgdmFyIGF1ZGlvQ29udHJvbGxlckZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXVkaW9Db250cm9sbGVyKGF1ZGlvRmFjdG9yeSkge1xuICAgICAgdGhpcy5hdWRpb3MgPSBbXTtcbiAgICAgIHRoaXMuYXVkaW9GYWN0b3J5ID0gYXVkaW9GYWN0b3J5O1xuICAgICAgdGhpcy5fdm9sdW1lID0gMTtcbiAgICAgIHRoaXMuX2lzTXV0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBBdWRpb0NvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuICAgICAgYWRkQXVkaW86IGZ1bmN0aW9uIGFkZEF1ZGlvKGF1ZGlvKSB7XG4gICAgICAgIHRoaXMuYXVkaW9zLnB1c2goYXVkaW8pO1xuICAgICAgfSxcbiAgICAgIHBhdXNlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmF1ZGlvcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5hdWRpb3NbaV0ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc3VtZTogZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuYXVkaW9zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvc1tpXS5yZXN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFJhdGU6IGZ1bmN0aW9uIHNldFJhdGUocmF0ZVZhbHVlKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5hdWRpb3MubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuYXVkaW9zW2ldLnNldFJhdGUocmF0ZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUF1ZGlvOiBmdW5jdGlvbiBjcmVhdGVBdWRpbyhhc3NldFBhdGgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXVkaW9GYWN0b3J5KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9GYWN0b3J5KGFzc2V0UGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2luZG93Lkhvd2wpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5Ib3dsKHtcbiAgICAgICAgICAgIHNyYzogW2Fzc2V0UGF0aF1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNQbGF5aW5nOiBmYWxzZSxcbiAgICAgICAgICBwbGF5OiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgICAgICAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VlazogZnVuY3Rpb24gc2VlaygpIHtcbiAgICAgICAgICAgIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwbGF5aW5nOiBmdW5jdGlvbiBwbGF5aW5nKCkge30sXG4gICAgICAgICAgcmF0ZTogZnVuY3Rpb24gcmF0ZSgpIHt9LFxuICAgICAgICAgIHNldFZvbHVtZTogZnVuY3Rpb24gc2V0Vm9sdW1lKCkge31cbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBzZXRBdWRpb0ZhY3Rvcnk6IGZ1bmN0aW9uIHNldEF1ZGlvRmFjdG9yeShhdWRpb0ZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5hdWRpb0ZhY3RvcnkgPSBhdWRpb0ZhY3Rvcnk7XG4gICAgICB9LFxuICAgICAgc2V0Vm9sdW1lOiBmdW5jdGlvbiBzZXRWb2x1bWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdm9sdW1lID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlVm9sdW1lKCk7XG4gICAgICB9LFxuICAgICAgbXV0ZTogZnVuY3Rpb24gbXV0ZSgpIHtcbiAgICAgICAgdGhpcy5faXNNdXRlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlVm9sdW1lKCk7XG4gICAgICB9LFxuICAgICAgdW5tdXRlOiBmdW5jdGlvbiB1bm11dGUoKSB7XG4gICAgICAgIHRoaXMuX2lzTXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl91cGRhdGVWb2x1bWUoKTtcbiAgICAgIH0sXG4gICAgICBnZXRWb2x1bWU6IGZ1bmN0aW9uIGdldFZvbHVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZTtcbiAgICAgIH0sXG4gICAgICBfdXBkYXRlVm9sdW1lOiBmdW5jdGlvbiBfdXBkYXRlVm9sdW1lKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuYXVkaW9zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvc1tpXS52b2x1bWUodGhpcy5fdm9sdW1lICogKHRoaXMuX2lzTXV0ZWQgPyAwIDogMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBBdWRpb0NvbnRyb2xsZXIoKTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlUmVndWxhckFycmF5KHR5cGUsIGxlbikge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnaW50MTYnOlxuICAgICAgICBjYXNlICd1aW50OGMnOlxuICAgICAgICAgIHZhbHVlID0gMTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhbHVlID0gMS4xO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2godmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVR5cGVkQXJyYXlGYWN0b3J5KHR5cGUsIGxlbikge1xuICAgICAgaWYgKHR5cGUgPT09ICdmbG9hdDMyJykge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShsZW4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ2ludDE2Jykge1xuICAgICAgICByZXR1cm4gbmV3IEludDE2QXJyYXkobGVuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09ICd1aW50OGMnKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhDbGFtcGVkQXJyYXkobGVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNyZWF0ZVJlZ3VsYXJBcnJheSh0eXBlLCBsZW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVR5cGVkQXJyYXlGYWN0b3J5O1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVSZWd1bGFyQXJyYXk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBjcmVhdGVTaXplZEFycmF5KGxlbikge1xuICAgIHJldHVybiBBcnJheS5hcHBseShudWxsLCB7XG4gICAgICBsZW5ndGg6IGxlblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQ2KG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDYgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQ2ID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkNihvYmopOyB9XG4gIHZhciBzdWJmcmFtZUVuYWJsZWQgPSB0cnVlO1xuICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBudWxsO1xuICB2YXIgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gbnVsbDtcbiAgdmFyIGlkUHJlZml4JDEgPSAnJztcbiAgdmFyIGlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgdmFyIF9zaG91bGRSb3VuZFZhbHVlcyA9IGZhbHNlO1xuICB2YXIgYm1Qb3cgPSBNYXRoLnBvdztcbiAgdmFyIGJtU3FydCA9IE1hdGguc3FydDtcbiAgdmFyIGJtRmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgYm1NYXggPSBNYXRoLm1heDtcbiAgdmFyIGJtTWluID0gTWF0aC5taW47XG4gIHZhciBCTU1hdGggPSB7fTtcblxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9wZXJ0eU5hbWVzID0gWydhYnMnLCAnYWNvcycsICdhY29zaCcsICdhc2luJywgJ2FzaW5oJywgJ2F0YW4nLCAnYXRhbmgnLCAnYXRhbjInLCAnY2VpbCcsICdjYnJ0JywgJ2V4cG0xJywgJ2NsejMyJywgJ2NvcycsICdjb3NoJywgJ2V4cCcsICdmbG9vcicsICdmcm91bmQnLCAnaHlwb3QnLCAnaW11bCcsICdsb2cnLCAnbG9nMXAnLCAnbG9nMicsICdsb2cxMCcsICdtYXgnLCAnbWluJywgJ3BvdycsICdyYW5kb20nLCAncm91bmQnLCAnc2lnbicsICdzaW4nLCAnc2luaCcsICdzcXJ0JywgJ3RhbicsICd0YW5oJywgJ3RydW5jJywgJ0UnLCAnTE4xMCcsICdMTjInLCAnTE9HMTBFJywgJ0xPRzJFJywgJ1BJJywgJ1NRUlQxXzInLCAnU1FSVDInXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gcHJvcGVydHlOYW1lcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIEJNTWF0aFtwcm9wZXJ0eU5hbWVzW2ldXSA9IE1hdGhbcHJvcGVydHlOYW1lc1tpXV07XG4gICAgfVxuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIFByb2plY3RJbnRlcmZhY2UkMSgpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBCTU1hdGgucmFuZG9tID0gTWF0aC5yYW5kb207XG5cbiAgQk1NYXRoLmFicyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YXIgdE9mVmFsID0gX3R5cGVvZiQ2KHZhbCk7XG5cbiAgICBpZiAodE9mVmFsID09PSAnb2JqZWN0JyAmJiB2YWwubGVuZ3RoKSB7XG4gICAgICB2YXIgYWJzQXJyID0gY3JlYXRlU2l6ZWRBcnJheSh2YWwubGVuZ3RoKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHZhbC5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhYnNBcnJbaV0gPSBNYXRoLmFicyh2YWxbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWJzQXJyO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLmFicyh2YWwpO1xuICB9O1xuXG4gIHZhciBkZWZhdWx0Q3VydmVTZWdtZW50cyA9IDE1MDtcbiAgdmFyIGRlZ1RvUmFkcyA9IE1hdGguUEkgLyAxODA7XG4gIHZhciByb3VuZENvcm5lciA9IDAuNTUxOTtcblxuICBmdW5jdGlvbiByb3VuZFZhbHVlcyhmbGFnKSB7XG4gICAgX3Nob3VsZFJvdW5kVmFsdWVzID0gISFmbGFnO1xuICB9XG5cbiAgZnVuY3Rpb24gYm1SbmQodmFsdWUpIHtcbiAgICBpZiAoX3Nob3VsZFJvdW5kVmFsdWVzKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVEaXYoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGVsZW1lbnQuc3R5bGUudG9wID0gMDtcbiAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAnMCAwJztcbiAgICBlbGVtZW50LnN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbiA9ICcwIDAnO1xuICAgIGVsZW1lbnQuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGVsZW1lbnQuc3R5bGUud2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICAgIGVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICAgIGVsZW1lbnQuc3R5bGUubW96VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1FbnRlckZyYW1lRXZlbnQodHlwZSwgY3VycmVudFRpbWUsIHRvdGFsVGltZSwgZnJhbWVNdWx0aXBsaWVyKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgdGhpcy50b3RhbFRpbWUgPSB0b3RhbFRpbWU7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBmcmFtZU11bHRpcGxpZXIgPCAwID8gLTEgOiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1Db21wbGV0ZUV2ZW50KHR5cGUsIGZyYW1lTXVsdGlwbGllcikge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBmcmFtZU11bHRpcGxpZXIgPCAwID8gLTEgOiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1Db21wbGV0ZUxvb3BFdmVudCh0eXBlLCB0b3RhbExvb3BzLCBjdXJyZW50TG9vcCwgZnJhbWVNdWx0aXBsaWVyKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmN1cnJlbnRMb29wID0gY3VycmVudExvb3A7XG4gICAgdGhpcy50b3RhbExvb3BzID0gdG90YWxMb29wcztcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGZyYW1lTXVsdGlwbGllciA8IDAgPyAtMSA6IDE7XG4gIH1cblxuICBmdW5jdGlvbiBCTVNlZ21lbnRTdGFydEV2ZW50KHR5cGUsIGZpcnN0RnJhbWUsIHRvdGFsRnJhbWVzKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmZpcnN0RnJhbWUgPSBmaXJzdEZyYW1lO1xuICAgIHRoaXMudG90YWxGcmFtZXMgPSB0b3RhbEZyYW1lcztcbiAgfVxuXG4gIGZ1bmN0aW9uIEJNRGVzdHJveUV2ZW50KHR5cGUsIHRhcmdldCkge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBCTVJlbmRlckZyYW1lRXJyb3JFdmVudChuYXRpdmVFcnJvciwgY3VycmVudFRpbWUpIHtcbiAgICB0aGlzLnR5cGUgPSAncmVuZGVyRnJhbWVFcnJvcic7XG4gICAgdGhpcy5uYXRpdmVFcnJvciA9IG5hdGl2ZUVycm9yO1xuICAgIHRoaXMuY3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJNQ29uZmlnRXJyb3JFdmVudChuYXRpdmVFcnJvcikge1xuICAgIHRoaXMudHlwZSA9ICdjb25maWdFcnJvcic7XG4gICAgdGhpcy5uYXRpdmVFcnJvciA9IG5hdGl2ZUVycm9yO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1BbmltYXRpb25Db25maWdFcnJvckV2ZW50KHR5cGUsIG5hdGl2ZUVycm9yKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm5hdGl2ZUVycm9yID0gbmF0aXZlRXJyb3I7XG4gIH1cblxuICB2YXIgY3JlYXRlRWxlbWVudElEID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY291bnQgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVJRCgpIHtcbiAgICAgIF9jb3VudCArPSAxO1xuICAgICAgcmV0dXJuIGlkUHJlZml4JDEgKyAnX19sb3R0aWVfZWxlbWVudF8nICsgX2NvdW50O1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBIU1Z0b1JHQihoLCBzLCB2KSB7XG4gICAgdmFyIHI7XG4gICAgdmFyIGc7XG4gICAgdmFyIGI7XG4gICAgdmFyIGk7XG4gICAgdmFyIGY7XG4gICAgdmFyIHA7XG4gICAgdmFyIHE7XG4gICAgdmFyIHQ7XG4gICAgaSA9IE1hdGguZmxvb3IoaCAqIDYpO1xuICAgIGYgPSBoICogNiAtIGk7XG4gICAgcCA9IHYgKiAoMSAtIHMpO1xuICAgIHEgPSB2ICogKDEgLSBmICogcyk7XG4gICAgdCA9IHYgKiAoMSAtICgxIC0gZikgKiBzKTtcblxuICAgIHN3aXRjaCAoaSAlIDYpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgciA9IHY7XG4gICAgICAgIGcgPSB0O1xuICAgICAgICBiID0gcDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgciA9IHE7XG4gICAgICAgIGcgPSB2O1xuICAgICAgICBiID0gcDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgciA9IHA7XG4gICAgICAgIGcgPSB2O1xuICAgICAgICBiID0gdDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgciA9IHA7XG4gICAgICAgIGcgPSBxO1xuICAgICAgICBiID0gdjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgciA9IHQ7XG4gICAgICAgIGcgPSBwO1xuICAgICAgICBiID0gdjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNTpcbiAgICAgICAgciA9IHY7XG4gICAgICAgIGcgPSBwO1xuICAgICAgICBiID0gcTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBbciwgZywgYl07XG4gIH1cblxuICBmdW5jdGlvbiBSR0J0b0hTVihyLCBnLCBiKSB7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICB2YXIgaDtcbiAgICB2YXIgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuICAgIHZhciB2ID0gbWF4IC8gMjU1O1xuXG4gICAgc3dpdGNoIChtYXgpIHtcbiAgICAgIGNhc2UgbWluOlxuICAgICAgICBoID0gMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgcjpcbiAgICAgICAgaCA9IGcgLSBiICsgZCAqIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgaCAvPSA2ICogZDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZzpcbiAgICAgICAgaCA9IGIgLSByICsgZCAqIDI7XG4gICAgICAgIGggLz0gNiAqIGQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGI6XG4gICAgICAgIGggPSByIC0gZyArIGQgKiA0O1xuICAgICAgICBoIC89IDYgKiBkO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtoLCBzLCB2XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFNhdHVyYXRpb25Ub1JHQihjb2xvciwgb2Zmc2V0KSB7XG4gICAgdmFyIGhzdiA9IFJHQnRvSFNWKGNvbG9yWzBdICogMjU1LCBjb2xvclsxXSAqIDI1NSwgY29sb3JbMl0gKiAyNTUpO1xuICAgIGhzdlsxXSArPSBvZmZzZXQ7XG5cbiAgICBpZiAoaHN2WzFdID4gMSkge1xuICAgICAgaHN2WzFdID0gMTtcbiAgICB9IGVsc2UgaWYgKGhzdlsxXSA8PSAwKSB7XG4gICAgICBoc3ZbMV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBIU1Z0b1JHQihoc3ZbMF0sIGhzdlsxXSwgaHN2WzJdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEJyaWdodG5lc3NUb1JHQihjb2xvciwgb2Zmc2V0KSB7XG4gICAgdmFyIGhzdiA9IFJHQnRvSFNWKGNvbG9yWzBdICogMjU1LCBjb2xvclsxXSAqIDI1NSwgY29sb3JbMl0gKiAyNTUpO1xuICAgIGhzdlsyXSArPSBvZmZzZXQ7XG5cbiAgICBpZiAoaHN2WzJdID4gMSkge1xuICAgICAgaHN2WzJdID0gMTtcbiAgICB9IGVsc2UgaWYgKGhzdlsyXSA8IDApIHtcbiAgICAgIGhzdlsyXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIEhTVnRvUkdCKGhzdlswXSwgaHN2WzFdLCBoc3ZbMl0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkSHVlVG9SR0IoY29sb3IsIG9mZnNldCkge1xuICAgIHZhciBoc3YgPSBSR0J0b0hTVihjb2xvclswXSAqIDI1NSwgY29sb3JbMV0gKiAyNTUsIGNvbG9yWzJdICogMjU1KTtcbiAgICBoc3ZbMF0gKz0gb2Zmc2V0IC8gMzYwO1xuXG4gICAgaWYgKGhzdlswXSA+IDEpIHtcbiAgICAgIGhzdlswXSAtPSAxO1xuICAgIH0gZWxzZSBpZiAoaHN2WzBdIDwgMCkge1xuICAgICAgaHN2WzBdICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIEhTVnRvUkdCKGhzdlswXSwgaHN2WzFdLCBoc3ZbMl0pO1xuICB9XG5cbiAgdmFyIHJnYlRvSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb2xvck1hcCA9IFtdO1xuICAgIHZhciBpO1xuICAgIHZhciBoZXg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMjU2OyBpICs9IDEpIHtcbiAgICAgIGhleCA9IGkudG9TdHJpbmcoMTYpO1xuICAgICAgY29sb3JNYXBbaV0gPSBoZXgubGVuZ3RoID09PSAxID8gJzAnICsgaGV4IDogaGV4O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAociwgZywgYikge1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIHIgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZyA8IDApIHtcbiAgICAgICAgZyA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChiIDwgMCkge1xuICAgICAgICBiID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcjJyArIGNvbG9yTWFwW3JdICsgY29sb3JNYXBbZ10gKyBjb2xvck1hcFtiXTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIHNldFN1YmZyYW1lRW5hYmxlZCA9IGZ1bmN0aW9uIHNldFN1YmZyYW1lRW5hYmxlZChmbGFnKSB7XG4gICAgc3ViZnJhbWVFbmFibGVkID0gISFmbGFnO1xuICB9O1xuXG4gIHZhciBnZXRTdWJmcmFtZUVuYWJsZWQgPSBmdW5jdGlvbiBnZXRTdWJmcmFtZUVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHN1YmZyYW1lRW5hYmxlZDtcbiAgfTtcblxuICB2YXIgc2V0RXhwcmVzc2lvbnNQbHVnaW4gPSBmdW5jdGlvbiBzZXRFeHByZXNzaW9uc1BsdWdpbih2YWx1ZSkge1xuICAgIGV4cHJlc3Npb25zUGx1Z2luID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldEV4cHJlc3Npb25zUGx1Z2luID0gZnVuY3Rpb24gZ2V0RXhwcmVzc2lvbnNQbHVnaW4oKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25zUGx1Z2luO1xuICB9O1xuXG4gIHZhciBzZXRFeHByZXNzaW9uSW50ZXJmYWNlcyA9IGZ1bmN0aW9uIHNldEV4cHJlc3Npb25JbnRlcmZhY2VzKHZhbHVlKSB7XG4gICAgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldEV4cHJlc3Npb25JbnRlcmZhY2VzID0gZnVuY3Rpb24gZ2V0RXhwcmVzc2lvbkludGVyZmFjZXMoKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25zSW50ZXJmYWNlcztcbiAgfTtcblxuICB2YXIgc2V0RGVmYXVsdEN1cnZlU2VnbWVudHMgPSBmdW5jdGlvbiBzZXREZWZhdWx0Q3VydmVTZWdtZW50cyh2YWx1ZSkge1xuICAgIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzID0gZnVuY3Rpb24gZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzO1xuICB9O1xuXG4gIHZhciBzZXRJZFByZWZpeCA9IGZ1bmN0aW9uIHNldElkUHJlZml4KHZhbHVlKSB7XG4gICAgaWRQcmVmaXgkMSA9IHZhbHVlO1xuICB9O1xuXG4gIHZhciBnZXRJZFByZWZpeCA9IGZ1bmN0aW9uIGdldElkUHJlZml4KCkge1xuICAgIHJldHVybiBpZFByZWZpeCQxO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5TKHR5cGUpIHtcbiAgICAvLyByZXR1cm4ge2FwcGVuZENoaWxkOmZ1bmN0aW9uKCl7fSxzZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oKXt9LHN0eWxlOnt9fVxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQ1KG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDUgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQ1ID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkNShvYmopOyB9XG5cbiAgdmFyIGRhdGFNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY291bnRlcklkID0gMTtcbiAgICB2YXIgcHJvY2Vzc2VzID0gW107XG4gICAgdmFyIHdvcmtlckZuO1xuICAgIHZhciB3b3JrZXJJbnN0YW5jZTtcbiAgICB2YXIgd29ya2VyUHJveHkgPSB7XG4gICAgICBvbm1lc3NhZ2U6IGZ1bmN0aW9uIG9ubWVzc2FnZSgpIHt9LFxuICAgICAgcG9zdE1lc3NhZ2U6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKHBhdGgpIHtcbiAgICAgICAgd29ya2VyRm4oe1xuICAgICAgICAgIGRhdGE6IHBhdGhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgX3dvcmtlclNlbGYgPSB7XG4gICAgICBwb3N0TWVzc2FnZTogZnVuY3Rpb24gcG9zdE1lc3NhZ2UoZGF0YSkge1xuICAgICAgICB3b3JrZXJQcm94eS5vbm1lc3NhZ2Uoe1xuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVdvcmtlcihmbikge1xuICAgICAgaWYgKHdpbmRvdy5Xb3JrZXIgJiYgd2luZG93LkJsb2IgJiYgZ2V0V2ViV29ya2VyKCkpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbJ3ZhciBfd29ya2VyU2VsZiA9IHNlbGY7IHNlbGYub25tZXNzYWdlID0gJywgZm4udG9TdHJpbmcoKV0sIHtcbiAgICAgICAgICB0eXBlOiAndGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICB9KTsgLy8gdmFyIGJsb2IgPSBuZXcgQmxvYihbJ3NlbGYub25tZXNzYWdlID0gJywgZm4udG9TdHJpbmcoKV0sIHsgdHlwZTogJ3RleHQvamF2YXNjcmlwdCcgfSk7XG5cbiAgICAgICAgdmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gICAgICB9XG5cbiAgICAgIHdvcmtlckZuID0gZm47XG4gICAgICByZXR1cm4gd29ya2VyUHJveHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dXBXb3JrZXIoKSB7XG4gICAgICBpZiAoIXdvcmtlckluc3RhbmNlKSB7XG4gICAgICAgIHdvcmtlckluc3RhbmNlID0gY3JlYXRlV29ya2VyKGZ1bmN0aW9uIHdvcmtlclN0YXJ0KGUpIHtcbiAgICAgICAgICBmdW5jdGlvbiBkYXRhRnVuY3Rpb25NYW5hZ2VyKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVMYXllcnMobGF5ZXJzLCBjb21wcykge1xuICAgICAgICAgICAgICB2YXIgbGF5ZXJEYXRhO1xuICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG4gICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICB2YXIgakxlbjtcbiAgICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICAgIHZhciBrTGVuO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGxheWVyRGF0YSA9IGxheWVyc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmICgna3MnIGluIGxheWVyRGF0YSAmJiAhbGF5ZXJEYXRhLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgbGF5ZXJEYXRhLmNvbXBsZXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChsYXllckRhdGEuaGFzTWFzaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza1Byb3BzID0gbGF5ZXJEYXRhLm1hc2tzUHJvcGVydGllcztcbiAgICAgICAgICAgICAgICAgICAgakxlbiA9IG1hc2tQcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQuay5pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKG1hc2tQcm9wc1tqXS5wdC5rKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga0xlbiA9IG1hc2tQcm9wc1tqXS5wdC5rLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMobWFza1Byb3BzW2pdLnB0Lmtba10uc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMobWFza1Byb3BzW2pdLnB0Lmtba10uZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKGxheWVyRGF0YS50eSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsYXllckRhdGEubGF5ZXJzID0gZmluZENvbXBMYXllcnMobGF5ZXJEYXRhLnJlZklkLCBjb21wcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlTGF5ZXJzKGxheWVyRGF0YS5sYXllcnMsIGNvbXBzKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGF5ZXJEYXRhLnR5ID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlU2hhcGVzKGxheWVyRGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYXllckRhdGEudHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVUZXh0KGxheWVyRGF0YSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlQ2hhcnMoY2hhcnMsIGFzc2V0cykge1xuICAgICAgICAgICAgICBpZiAoY2hhcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGNoYXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJzW2ldLnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIGNvbXBEYXRhID0gZmluZENvbXAoY2hhcnNbaV0uZGF0YS5yZWZJZCwgYXNzZXRzKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNbaV0uZGF0YS5sYXllcnMgPSBmaW5kQ29tcExheWVycyhjaGFyc1tpXS5kYXRhLnJlZklkLCBhc3NldHMpOyAvLyBjaGFyc1tpXS5kYXRhLmlwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnNbaV0uZGF0YS5vcCA9IDk5OTk5O1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyc1tpXS5kYXRhLnN0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnNbaV0uZGF0YS5zciA9IDE7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJzW2ldLncgPSBjb21wRGF0YS53O1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyc1tpXS5kYXRhLmtzID0ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgIGE6IHsgazogWzAsIDAsIDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcDogeyBrOiBbMCwgLWNvbXBEYXRhLmgsIDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcjogeyBrOiAwLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgczogeyBrOiBbMTAwLCAxMDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbzogeyBrOiAxMDAsIGE6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gfTtcblxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUxheWVycyhjaGFyc1tpXS5kYXRhLmxheWVycywgYXNzZXRzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmluZENvbXAoaWQsIGNvbXBzKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgdmFyIGxlbiA9IGNvbXBzLmxlbmd0aDtcblxuICAgICAgICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgICAgICAgIGlmIChjb21wc1tpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wc1tpXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmluZENvbXBMYXllcnMoaWQsIGNvbXBzKSB7XG4gICAgICAgICAgICAgIHZhciBjb21wID0gZmluZENvbXAoaWQsIGNvbXBzKTtcblxuICAgICAgICAgICAgICBpZiAoY29tcCkge1xuICAgICAgICAgICAgICAgIGlmICghY29tcC5sYXllcnMuX191c2VkKSB7XG4gICAgICAgICAgICAgICAgICBjb21wLmxheWVycy5fX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXAubGF5ZXJzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbXAubGF5ZXJzKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVTaGFwZXMoYXJyKSB7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgdmFyIGo7XG4gICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFycltpXS50eSA9PT0gJ3NoJykge1xuICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Muayk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBqTGVuID0gYXJyW2ldLmtzLmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmtbal0ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Mua1tqXS5zWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmtbal0uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Mua1tqXS5lWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ2dyJykge1xuICAgICAgICAgICAgICAgICAgY29tcGxldGVTaGFwZXMoYXJyW2ldLml0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhwYXRoKSB7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICB2YXIgbGVuID0gcGF0aC5pLmxlbmd0aDtcblxuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBwYXRoLmlbaV1bMF0gKz0gcGF0aC52W2ldWzBdO1xuICAgICAgICAgICAgICAgIHBhdGguaVtpXVsxXSArPSBwYXRoLnZbaV1bMV07XG4gICAgICAgICAgICAgICAgcGF0aC5vW2ldWzBdICs9IHBhdGgudltpXVswXTtcbiAgICAgICAgICAgICAgICBwYXRoLm9baV1bMV0gKz0gcGF0aC52W2ldWzFdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrVmVyc2lvbihtaW5pbXVtLCBhbmltVmVyc2lvblN0cmluZykge1xuICAgICAgICAgICAgICB2YXIgYW5pbVZlcnNpb24gPSBhbmltVmVyc2lvblN0cmluZyA/IGFuaW1WZXJzaW9uU3RyaW5nLnNwbGl0KCcuJykgOiBbMTAwLCAxMDAsIDEwMF07XG5cbiAgICAgICAgICAgICAgaWYgKG1pbmltdW1bMF0gPiBhbmltVmVyc2lvblswXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFuaW1WZXJzaW9uWzBdID4gbWluaW11bVswXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChtaW5pbXVtWzFdID4gYW5pbVZlcnNpb25bMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChhbmltVmVyc2lvblsxXSA+IG1pbmltdW1bMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAobWluaW11bVsyXSA+IGFuaW1WZXJzaW9uWzJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYW5pbVZlcnNpb25bMl0gPiBtaW5pbXVtWzJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjaGVja1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCA0LCAxNF07XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGV4dExheWVyKHRleHRMYXllcikge1xuICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudERhdGEgPSB0ZXh0TGF5ZXIudC5kO1xuICAgICAgICAgICAgICAgIHRleHRMYXllci50LmQgPSB7XG4gICAgICAgICAgICAgICAgICBrOiBbe1xuICAgICAgICAgICAgICAgICAgICBzOiBkb2N1bWVudERhdGEsXG4gICAgICAgICAgICAgICAgICAgIHQ6IDBcbiAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbaV0udHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dExheWVyKGxheWVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tDaGFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzQsIDcsIDk5XTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuY2hhcnMgJiYgIWNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICB2YXIgbGVuID0gYW5pbWF0aW9uRGF0YS5jaGFycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhckRhdGEgPSBhbmltYXRpb25EYXRhLmNoYXJzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyRGF0YS5kYXRhICYmIGNoYXJEYXRhLmRhdGEuc2hhcGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVTaGFwZXMoY2hhckRhdGEuZGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEuaXAgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEub3AgPSA5OTk5OTtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnN0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnNyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLmtzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFsxMDAsIDEwMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFswLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uRGF0YS5jaGFyc1tpXS50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnNoYXBlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHk6ICdubydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckRhdGEuZGF0YS5zaGFwZXNbMF0uaXQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogWzEwMCwgMTAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0eTogJ3RyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tQYXRoUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzUsIDcsIDE1XTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUZXh0TGF5ZXIodGV4dExheWVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhEYXRhID0gdGV4dExheWVyLnQucDtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0aERhdGEuYSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgIHBhdGhEYXRhLmEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgICAgICAgIGs6IHBhdGhEYXRhLmFcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXRoRGF0YS5wID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgcGF0aERhdGEucCA9IHtcbiAgICAgICAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgICAgICAgazogcGF0aERhdGEucFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhdGhEYXRhLnIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICBwYXRoRGF0YS5yID0ge1xuICAgICAgICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICAgICAgICBrOiBwYXRoRGF0YS5yXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbaV0udHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dExheWVyKGxheWVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tDb2xvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCAxLCA5XTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiBpdGVyYXRlU2hhcGVzKHNoYXBlcykge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBzaGFwZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVTaGFwZXMoc2hhcGVzW2ldLml0KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZmwnIHx8IHNoYXBlc1tpXS50eSA9PT0gJ3N0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLmMuayAmJiBzaGFwZXNbaV0uYy5rWzBdLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBqTGVuID0gc2hhcGVzW2ldLmMuay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLmMua1tqXS5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1swXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1sxXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1syXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1szXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZXNbaV0uYy5rW2pdLmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzBdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzFdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzJdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzNdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1swXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1sxXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1syXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1szXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmdW5jdGlvbiBpdGVyYXRlTGF5ZXJzKGxheWVycykge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobGF5ZXJzW2ldLnR5ID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVTaGFwZXMobGF5ZXJzW2ldLnNoYXBlcyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCA0LCAxOF07XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVDbG9zaW5nU2hhcGVzKGFycikge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhcnJbaV0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhcnJbaV0ua3Muay5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBqTGVuID0gYXJyW2ldLmtzLmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rW2pdLnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyW2ldLmtzLmtbal0uc1swXS5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rW2pdLmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyW2ldLmtzLmtbal0uZVswXS5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2xvc2luZ1NoYXBlcyhhcnJbaV0uaXQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyRGF0YTtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gbGF5ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgajtcbiAgICAgICAgICAgICAgICB2YXIgakxlbjtcbiAgICAgICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgICAgICB2YXIga0xlbjtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgbGF5ZXJEYXRhID0gbGF5ZXJzW2ldO1xuXG4gICAgICAgICAgICAgICAgICBpZiAobGF5ZXJEYXRhLmhhc01hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tQcm9wcyA9IGxheWVyRGF0YS5tYXNrc1Byb3BlcnRpZXM7XG4gICAgICAgICAgICAgICAgICAgIGpMZW4gPSBtYXNrUHJvcHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0LmsuaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Byb3BzW2pdLnB0LmsuYyA9IG1hc2tQcm9wc1tqXS5jbDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga0xlbiA9IG1hc2tQcm9wc1tqXS5wdC5rLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tQcm9wc1tqXS5wdC5rW2tdLnNbMF0uYyA9IG1hc2tQcm9wc1tqXS5jbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQua1trXS5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Byb3BzW2pdLnB0Lmtba10uZVswXS5jID0gbWFza1Byb3BzW2pdLmNsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmIChsYXllckRhdGEudHkgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVDbG9zaW5nU2hhcGVzKGxheWVyRGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYW5pbWF0aW9uRGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja1ZlcnNpb24obWluaW11bVZlcnNpb24sIGFuaW1hdGlvbkRhdGEudikpIHtcbiAgICAgICAgICAgICAgICAgIGl0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5sYXllcnMpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhbmltYXRpb25EYXRhLmFzc2V0cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0oKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVEYXRhKGFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuX19jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNoZWNrQ29sb3JzKGFuaW1hdGlvbkRhdGEpO1xuICAgICAgICAgICAgICBjaGVja1RleHQoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrQ2hhcnMoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrUGF0aFByb3BlcnRpZXMoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrU2hhcGVzKGFuaW1hdGlvbkRhdGEpO1xuICAgICAgICAgICAgICBjb21wbGV0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycywgYW5pbWF0aW9uRGF0YS5hc3NldHMpO1xuICAgICAgICAgICAgICBjb21wbGV0ZUNoYXJzKGFuaW1hdGlvbkRhdGEuY2hhcnMsIGFuaW1hdGlvbkRhdGEuYXNzZXRzKTtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGF0YS5fX2NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVUZXh0KGRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGEudC5hLmxlbmd0aCA9PT0gMCAmJiAhKCdtJyBpbiBkYXRhLnQucCkpIHsvLyBkYXRhLnNpbmdsZVNoYXBlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbW9kdWxlT2IgPSB7fTtcbiAgICAgICAgICAgIG1vZHVsZU9iLmNvbXBsZXRlRGF0YSA9IGNvbXBsZXRlRGF0YTtcbiAgICAgICAgICAgIG1vZHVsZU9iLmNoZWNrQ29sb3JzID0gY2hlY2tDb2xvcnM7XG4gICAgICAgICAgICBtb2R1bGVPYi5jaGVja0NoYXJzID0gY2hlY2tDaGFycztcbiAgICAgICAgICAgIG1vZHVsZU9iLmNoZWNrUGF0aFByb3BlcnRpZXMgPSBjaGVja1BhdGhQcm9wZXJ0aWVzO1xuICAgICAgICAgICAgbW9kdWxlT2IuY2hlY2tTaGFwZXMgPSBjaGVja1NoYXBlcztcbiAgICAgICAgICAgIG1vZHVsZU9iLmNvbXBsZXRlTGF5ZXJzID0gY29tcGxldGVMYXllcnM7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlT2I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFfd29ya2VyU2VsZi5kYXRhTWFuYWdlcikge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuZGF0YU1hbmFnZXIgPSBkYXRhRnVuY3Rpb25NYW5hZ2VyKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFfd29ya2VyU2VsZi5hc3NldExvYWRlcikge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuYXNzZXRMb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdFJlc3BvbnNlKHhocikge1xuICAgICAgICAgICAgICAgIC8vIHVzaW5nIHR5cGVvZiBkb3VibGVzIHRoZSB0aW1lIG9mIGV4ZWN1dGlvbiBvZiB0aGlzIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAvLyBzbyBpZiBhdmFpbGFibGUsIGl0J3MgYmV0dGVyIHRvIHVzZSB0aGUgaGVhZGVyIHRvIHZhbGlkYXRlIHRoZSB0eXBlXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlSGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZUhlYWRlciAmJiB4aHIucmVzcG9uc2VUeXBlID09PSAnanNvbicgJiYgY29udGVudFR5cGVIZWFkZXIuaW5kZXhPZignanNvbicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlICYmIF90eXBlb2YkNSh4aHIucmVzcG9uc2UpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlICYmIHR5cGVvZiB4aHIucmVzcG9uc2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGxvYWRBc3NldChwYXRoLCBmdWxsUGF0aCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOyAvLyBzZXQgcmVzcG9uc2VUeXBlIGFmdGVyIGNhbGxpbmcgb3BlbiBvciBJRSB3aWxsIGJyZWFrLlxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY3Jhc2hlcyBvbiBBbmRyb2lkIFdlYlZpZXcgcHJpb3IgdG8gS2l0S2F0XG4gICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG5cbiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGZvcm1hdFJlc3BvbnNlKHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGZvcm1hdFJlc3BvbnNlKHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAvLyBIYWNrIHRvIHdvcmthcm91bmQgYmFubmVyIHZhbGlkYXRpb25cbiAgICAgICAgICAgICAgICAgIHhoci5vcGVuKFsnRycsICdFJywgJ1QnXS5qb2luKCcnKSwgcGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEhhY2sgdG8gd29ya2Fyb3VuZCBiYW5uZXIgdmFsaWRhdGlvblxuICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oWydHJywgJ0UnLCAnVCddLmpvaW4oJycpLCBmdWxsUGF0aCArICcvJyArIHBhdGgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxvYWQ6IGxvYWRBc3NldFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChlLmRhdGEudHlwZSA9PT0gJ2xvYWRBbmltYXRpb24nKSB7XG4gICAgICAgICAgICBfd29ya2VyU2VsZi5hc3NldExvYWRlci5sb2FkKGUuZGF0YS5wYXRoLCBlLmRhdGEuZnVsbFBhdGgsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIF93b3JrZXJTZWxmLmRhdGFNYW5hZ2VyLmNvbXBsZXRlRGF0YShkYXRhKTtcblxuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBkYXRhLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUuZGF0YS50eXBlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gZS5kYXRhLmFuaW1hdGlvbjtcblxuICAgICAgICAgICAgX3dvcmtlclNlbGYuZGF0YU1hbmFnZXIuY29tcGxldGVEYXRhKGFuaW1hdGlvbik7XG5cbiAgICAgICAgICAgIF93b3JrZXJTZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgcGF5bG9hZDogYW5pbWF0aW9uLFxuICAgICAgICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlLmRhdGEudHlwZSA9PT0gJ2xvYWREYXRhJykge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuYXNzZXRMb2FkZXIubG9hZChlLmRhdGEucGF0aCwgZS5kYXRhLmZ1bGxQYXRoLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBkYXRhLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdvcmtlckluc3RhbmNlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICB2YXIgaWQgPSBkYXRhLmlkO1xuICAgICAgICAgIHZhciBwcm9jZXNzID0gcHJvY2Vzc2VzW2lkXTtcbiAgICAgICAgICBwcm9jZXNzZXNbaWRdID0gbnVsbDtcblxuICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm9uQ29tcGxldGUoZGF0YS5wYXlsb2FkKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3Mub25FcnJvcikge1xuICAgICAgICAgICAgcHJvY2Vzcy5vbkVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb2Nlc3Mob25Db21wbGV0ZSwgb25FcnJvcikge1xuICAgICAgX2NvdW50ZXJJZCArPSAxO1xuICAgICAgdmFyIGlkID0gJ3Byb2Nlc3NJZF8nICsgX2NvdW50ZXJJZDtcbiAgICAgIHByb2Nlc3Nlc1tpZF0gPSB7XG4gICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGUsXG4gICAgICAgIG9uRXJyb3I6IG9uRXJyb3JcbiAgICAgIH07XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZEFuaW1hdGlvbihwYXRoLCBvbkNvbXBsZXRlLCBvbkVycm9yKSB7XG4gICAgICBzZXR1cFdvcmtlcigpO1xuICAgICAgdmFyIHByb2Nlc3NJZCA9IGNyZWF0ZVByb2Nlc3Mob25Db21wbGV0ZSwgb25FcnJvcik7XG4gICAgICB3b3JrZXJJbnN0YW5jZS5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdsb2FkQW5pbWF0aW9uJyxcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgZnVsbFBhdGg6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIGlkOiBwcm9jZXNzSWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWREYXRhKHBhdGgsIG9uQ29tcGxldGUsIG9uRXJyb3IpIHtcbiAgICAgIHNldHVwV29ya2VyKCk7XG4gICAgICB2YXIgcHJvY2Vzc0lkID0gY3JlYXRlUHJvY2VzcyhvbkNvbXBsZXRlLCBvbkVycm9yKTtcbiAgICAgIHdvcmtlckluc3RhbmNlLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2xvYWREYXRhJyxcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgZnVsbFBhdGg6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIGlkOiBwcm9jZXNzSWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlQW5pbWF0aW9uKGFuaW0sIG9uQ29tcGxldGUsIG9uRXJyb3IpIHtcbiAgICAgIHNldHVwV29ya2VyKCk7XG4gICAgICB2YXIgcHJvY2Vzc0lkID0gY3JlYXRlUHJvY2VzcyhvbkNvbXBsZXRlLCBvbkVycm9yKTtcbiAgICAgIHdvcmtlckluc3RhbmNlLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2NvbXBsZXRlJyxcbiAgICAgICAgYW5pbWF0aW9uOiBhbmltLFxuICAgICAgICBpZDogcHJvY2Vzc0lkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbG9hZEFuaW1hdGlvbjogbG9hZEFuaW1hdGlvbixcbiAgICAgIGxvYWREYXRhOiBsb2FkRGF0YSxcbiAgICAgIGNvbXBsZXRlQW5pbWF0aW9uOiBjb21wbGV0ZUFuaW1hdGlvblxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgSW1hZ2VQcmVsb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3h5SW1hZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FudmFzID0gY3JlYXRlVGFnKCdjYW52YXMnKTtcbiAgICAgIGNhbnZhcy53aWR0aCA9IDE7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwKSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgMSwgMSk7XG4gICAgICByZXR1cm4gY2FudmFzO1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIGltYWdlTG9hZGVkKCkge1xuICAgICAgdGhpcy5sb2FkZWRBc3NldHMgKz0gMTtcblxuICAgICAgaWYgKHRoaXMubG9hZGVkQXNzZXRzID09PSB0aGlzLnRvdGFsSW1hZ2VzICYmIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9PT0gdGhpcy50b3RhbEZvb3RhZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZENiKSB7XG4gICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWRDYihudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvb3RhZ2VMb2FkZWQoKSB7XG4gICAgICB0aGlzLmxvYWRlZEZvb3RhZ2VzQ291bnQgKz0gMTtcblxuICAgICAgaWYgKHRoaXMubG9hZGVkQXNzZXRzID09PSB0aGlzLnRvdGFsSW1hZ2VzICYmIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9PT0gdGhpcy50b3RhbEZvb3RhZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZENiKSB7XG4gICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWRDYihudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFzc2V0c1BhdGgoYXNzZXREYXRhLCBhc3NldHNQYXRoLCBvcmlnaW5hbFBhdGgpIHtcbiAgICAgIHZhciBwYXRoID0gJyc7XG5cbiAgICAgIGlmIChhc3NldERhdGEuZSkge1xuICAgICAgICBwYXRoID0gYXNzZXREYXRhLnA7XG4gICAgICB9IGVsc2UgaWYgKGFzc2V0c1BhdGgpIHtcbiAgICAgICAgdmFyIGltYWdlUGF0aCA9IGFzc2V0RGF0YS5wO1xuXG4gICAgICAgIGlmIChpbWFnZVBhdGguaW5kZXhPZignaW1hZ2VzLycpICE9PSAtMSkge1xuICAgICAgICAgIGltYWdlUGF0aCA9IGltYWdlUGF0aC5zcGxpdCgnLycpWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0aCA9IGFzc2V0c1BhdGggKyBpbWFnZVBhdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICAgICAgICBwYXRoICs9IGFzc2V0RGF0YS51ID8gYXNzZXREYXRhLnUgOiAnJztcbiAgICAgICAgcGF0aCArPSBhc3NldERhdGEucDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEltYWdlTG9hZGVkKGltZykge1xuICAgICAgdmFyIF9jb3VudCA9IDA7XG4gICAgICB2YXIgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJveCA9IGltZy5nZXRCQm94KCk7XG5cbiAgICAgICAgaWYgKGJveC53aWR0aCB8fCBfY291bnQgPiA1MDApIHtcbiAgICAgICAgICB0aGlzLl9pbWFnZUxvYWRlZCgpO1xuXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jb3VudCArPSAxO1xuICAgICAgfS5iaW5kKHRoaXMpLCA1MCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW1hZ2VEYXRhKGFzc2V0RGF0YSkge1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGFzc2V0RGF0YSwgdGhpcy5hc3NldHNQYXRoLCB0aGlzLnBhdGgpO1xuICAgICAgdmFyIGltZyA9IGNyZWF0ZU5TKCdpbWFnZScpO1xuXG4gICAgICBpZiAoaXNTYWZhcmkpIHtcbiAgICAgICAgdGhpcy50ZXN0SW1hZ2VMb2FkZWQoaW1nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5faW1hZ2VMb2FkZWQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBvYi5pbWcgPSBwcm94eUltYWdlO1xuXG4gICAgICAgIHRoaXMuX2ltYWdlTG9hZGVkKCk7XG4gICAgICB9LmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgIGltZy5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgcGF0aCk7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZChpbWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudEhlbHBlci5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2IgPSB7XG4gICAgICAgIGltZzogaW1nLFxuICAgICAgICBhc3NldERhdGE6IGFzc2V0RGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBvYjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbWdEYXRhKGFzc2V0RGF0YSkge1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGFzc2V0RGF0YSwgdGhpcy5hc3NldHNQYXRoLCB0aGlzLnBhdGgpO1xuICAgICAgdmFyIGltZyA9IGNyZWF0ZVRhZygnaW1nJyk7XG4gICAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5faW1hZ2VMb2FkZWQsIGZhbHNlKTtcbiAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2IuaW1nID0gcHJveHlJbWFnZTtcblxuICAgICAgICB0aGlzLl9pbWFnZUxvYWRlZCgpO1xuICAgICAgfS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICBpbWcuc3JjID0gcGF0aDtcbiAgICAgIHZhciBvYiA9IHtcbiAgICAgICAgaW1nOiBpbWcsXG4gICAgICAgIGFzc2V0RGF0YTogYXNzZXREYXRhXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG9iO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZvb3RhZ2VEYXRhKGRhdGEpIHtcbiAgICAgIHZhciBvYiA9IHtcbiAgICAgICAgYXNzZXREYXRhOiBkYXRhXG4gICAgICB9O1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGRhdGEsIHRoaXMuYXNzZXRzUGF0aCwgdGhpcy5wYXRoKTtcbiAgICAgIGRhdGFNYW5hZ2VyLmxvYWREYXRhKHBhdGgsIGZ1bmN0aW9uIChmb290YWdlRGF0YSkge1xuICAgICAgICBvYi5pbWcgPSBmb290YWdlRGF0YTtcblxuICAgICAgICB0aGlzLl9mb290YWdlTG9hZGVkKCk7XG4gICAgICB9LmJpbmQodGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2IuaW1nID0ge307XG5cbiAgICAgICAgdGhpcy5fZm9vdGFnZUxvYWRlZCgpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgIHJldHVybiBvYjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkQXNzZXRzKGFzc2V0cywgY2IpIHtcbiAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkQ2IgPSBjYjtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGFzc2V0cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoIWFzc2V0c1tpXS5sYXllcnMpIHtcbiAgICAgICAgICBpZiAoIWFzc2V0c1tpXS50IHx8IGFzc2V0c1tpXS50ID09PSAnc2VxJykge1xuICAgICAgICAgICAgdGhpcy50b3RhbEltYWdlcyArPSAxO1xuICAgICAgICAgICAgdGhpcy5pbWFnZXMucHVzaCh0aGlzLl9jcmVhdGVJbWFnZURhdGEoYXNzZXRzW2ldKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhc3NldHNbaV0udCA9PT0gMykge1xuICAgICAgICAgICAgdGhpcy50b3RhbEZvb3RhZ2VzICs9IDE7XG4gICAgICAgICAgICB0aGlzLmltYWdlcy5wdXNoKHRoaXMuY3JlYXRlRm9vdGFnZURhdGEoYXNzZXRzW2ldKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UGF0aChwYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoIHx8ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEFzc2V0c1BhdGgocGF0aCkge1xuICAgICAgdGhpcy5hc3NldHNQYXRoID0gcGF0aCB8fCAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBc3NldChhc3NldERhdGEpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmltYWdlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc1tpXS5hc3NldERhdGEgPT09IGFzc2V0RGF0YSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmltYWdlc1tpXS5pbWc7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmltYWdlc0xvYWRlZENiID0gbnVsbDtcbiAgICAgIHRoaXMuaW1hZ2VzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZGVkSW1hZ2VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG90YWxJbWFnZXMgPT09IHRoaXMubG9hZGVkQXNzZXRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRlZEZvb3RhZ2VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG90YWxGb290YWdlcyA9PT0gdGhpcy5sb2FkZWRGb290YWdlc0NvdW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldENhY2hlVHlwZSh0eXBlLCBlbGVtZW50SGVscGVyKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudEhlbHBlciA9IGVsZW1lbnRIZWxwZXI7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUltYWdlRGF0YSA9IHRoaXMuY3JlYXRlSW1hZ2VEYXRhLmJpbmQodGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jcmVhdGVJbWFnZURhdGEgPSB0aGlzLmNyZWF0ZUltZ0RhdGEuYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBJbWFnZVByZWxvYWRlckZhY3RvcnkoKSB7XG4gICAgICB0aGlzLl9pbWFnZUxvYWRlZCA9IGltYWdlTG9hZGVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9mb290YWdlTG9hZGVkID0gZm9vdGFnZUxvYWRlZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy50ZXN0SW1hZ2VMb2FkZWQgPSB0ZXN0SW1hZ2VMb2FkZWQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuY3JlYXRlRm9vdGFnZURhdGEgPSBjcmVhdGVGb290YWdlRGF0YS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hc3NldHNQYXRoID0gJyc7XG4gICAgICB0aGlzLnBhdGggPSAnJztcbiAgICAgIHRoaXMudG90YWxJbWFnZXMgPSAwO1xuICAgICAgdGhpcy50b3RhbEZvb3RhZ2VzID0gMDtcbiAgICAgIHRoaXMubG9hZGVkQXNzZXRzID0gMDtcbiAgICAgIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9IDA7XG4gICAgICB0aGlzLmltYWdlc0xvYWRlZENiID0gbnVsbDtcbiAgICAgIHRoaXMuaW1hZ2VzID0gW107XG4gICAgfVxuXG4gICAgSW1hZ2VQcmVsb2FkZXJGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgIGxvYWRBc3NldHM6IGxvYWRBc3NldHMsXG4gICAgICBzZXRBc3NldHNQYXRoOiBzZXRBc3NldHNQYXRoLFxuICAgICAgc2V0UGF0aDogc2V0UGF0aCxcbiAgICAgIGxvYWRlZEltYWdlczogbG9hZGVkSW1hZ2VzLFxuICAgICAgbG9hZGVkRm9vdGFnZXM6IGxvYWRlZEZvb3RhZ2VzLFxuICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgIGdldEFzc2V0OiBnZXRBc3NldCxcbiAgICAgIGNyZWF0ZUltZ0RhdGE6IGNyZWF0ZUltZ0RhdGEsXG4gICAgICBjcmVhdGVJbWFnZURhdGE6IGNyZWF0ZUltYWdlRGF0YSxcbiAgICAgIGltYWdlTG9hZGVkOiBpbWFnZUxvYWRlZCxcbiAgICAgIGZvb3RhZ2VMb2FkZWQ6IGZvb3RhZ2VMb2FkZWQsXG4gICAgICBzZXRDYWNoZVR5cGU6IHNldENhY2hlVHlwZVxuICAgIH07XG4gICAgcmV0dXJuIEltYWdlUHJlbG9hZGVyRmFjdG9yeTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIEJhc2VFdmVudCgpIHt9XG5cbiAgQmFzZUV2ZW50LnByb3RvdHlwZSA9IHtcbiAgICB0cmlnZ2VyRXZlbnQ6IGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudE5hbWUsIGFyZ3MpIHtcbiAgICAgIGlmICh0aGlzLl9jYnNbZXZlbnROYW1lXSkge1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2JzW2V2ZW50TmFtZV07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjYWxsYmFja3NbaV0oYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCF0aGlzLl9jYnNbZXZlbnROYW1lXSkge1xuICAgICAgICB0aGlzLl9jYnNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYnNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgfS5iaW5kKHRoaXMpO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2Nic1tldmVudE5hbWVdID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2JzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5fY2JzW2V2ZW50TmFtZV0ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2Nic1tldmVudE5hbWVdW2ldID09PSBjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fY2JzW2V2ZW50TmFtZV0uc3BsaWNlKGksIDEpO1xuXG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICBsZW4gLT0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2Nic1tldmVudE5hbWVdLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2Nic1tldmVudE5hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgbWFya2VyUGFyc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHBhcnNlUGF5bG9hZExpbmVzKHBheWxvYWQpIHtcbiAgICAgIHZhciBsaW5lcyA9IHBheWxvYWQuc3BsaXQoJ1xcclxcbicpO1xuICAgICAgdmFyIGtleXMgPSB7fTtcbiAgICAgIHZhciBsaW5lO1xuICAgICAgdmFyIGtleXNDb3VudCA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGluZSA9IGxpbmVzW2ldLnNwbGl0KCc6Jyk7XG5cbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAga2V5c1tsaW5lWzBdXSA9IGxpbmVbMV0udHJpbSgpO1xuICAgICAgICAgIGtleXNDb3VudCArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlzQ291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoX21hcmtlcnMpIHtcbiAgICAgIHZhciBtYXJrZXJzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX21hcmtlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIF9tYXJrZXIgPSBfbWFya2Vyc1tpXTtcbiAgICAgICAgdmFyIG1hcmtlckRhdGEgPSB7XG4gICAgICAgICAgdGltZTogX21hcmtlci50bSxcbiAgICAgICAgICBkdXJhdGlvbjogX21hcmtlci5kclxuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbWFya2VyRGF0YS5wYXlsb2FkID0gSlNPTi5wYXJzZShfbWFya2Vyc1tpXS5jbSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWFya2VyRGF0YS5wYXlsb2FkID0gcGFyc2VQYXlsb2FkTGluZXMoX21hcmtlcnNbaV0uY20pO1xuICAgICAgICAgIH0gY2F0Y2ggKF9fKSB7XG4gICAgICAgICAgICBtYXJrZXJEYXRhLnBheWxvYWQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IF9tYXJrZXJzW2ldLmNtXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlcnMucHVzaChtYXJrZXJEYXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcmtlcnM7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBQcm9qZWN0SW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9zaXRpb24oY29tcCkge1xuICAgICAgdGhpcy5jb21wb3NpdGlvbnMucHVzaChjb21wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gX3RoaXNQcm9qZWN0RnVuY3Rpb24obmFtZSkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmNvbXBvc2l0aW9ucy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAodGhpcy5jb21wb3NpdGlvbnNbaV0uZGF0YSAmJiB0aGlzLmNvbXBvc2l0aW9uc1tpXS5kYXRhLm5tID09PSBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb3NpdGlvbnNbaV0ucHJlcGFyZUZyYW1lICYmIHRoaXMuY29tcG9zaXRpb25zW2ldLmRhdGEueHQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb21wb3NpdGlvbnNbaV0ucHJlcGFyZUZyYW1lKHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb25zW2ldLmNvbXBJbnRlcmZhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIF90aGlzUHJvamVjdEZ1bmN0aW9uLmNvbXBvc2l0aW9ucyA9IFtdO1xuICAgICAgX3RoaXNQcm9qZWN0RnVuY3Rpb24uY3VycmVudEZyYW1lID0gMDtcbiAgICAgIF90aGlzUHJvamVjdEZ1bmN0aW9uLnJlZ2lzdGVyQ29tcG9zaXRpb24gPSByZWdpc3RlckNvbXBvc2l0aW9uO1xuICAgICAgcmV0dXJuIF90aGlzUHJvamVjdEZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgcmVuZGVyZXJzID0ge307XG5cbiAgdmFyIHJlZ2lzdGVyUmVuZGVyZXIgPSBmdW5jdGlvbiByZWdpc3RlclJlbmRlcmVyKGtleSwgdmFsdWUpIHtcbiAgICByZW5kZXJlcnNba2V5XSA9IHZhbHVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFJlbmRlcmVyKGtleSkge1xuICAgIHJldHVybiByZW5kZXJlcnNba2V5XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRSZW5kZXJlcigpIHtcbiAgICAvLyBSZXR1cm5zIGNhbnZhcyBieSBkZWZhdWx0IGZvciBjb21wYXRpYmlsaXR5XG4gICAgaWYgKHJlbmRlcmVycy5jYW52YXMpIHtcbiAgICAgIHJldHVybiAnY2FudmFzJztcbiAgICB9IC8vIFJldHVybnMgYW55IHJlbmRlcmVyIHRoYXQgaXMgcmVnaXN0ZXJlZFxuXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcmVuZGVyZXJzKSB7XG4gICAgICBpZiAocmVuZGVyZXJzW2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBmdW5jdGlvbiBfdHlwZW9mJDQob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkNCA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDQgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQ0KG9iaik7IH1cblxuICB2YXIgQW5pbWF0aW9uSXRlbSA9IGZ1bmN0aW9uIEFuaW1hdGlvbkl0ZW0oKSB7XG4gICAgdGhpcy5fY2JzID0gW107XG4gICAgdGhpcy5uYW1lID0gJyc7XG4gICAgdGhpcy5wYXRoID0gJyc7XG4gICAgdGhpcy5pc0xvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDtcbiAgICB0aGlzLmN1cnJlbnRSYXdGcmFtZSA9IDA7XG4gICAgdGhpcy5maXJzdEZyYW1lID0gMDtcbiAgICB0aGlzLnRvdGFsRnJhbWVzID0gMDtcbiAgICB0aGlzLmZyYW1lUmF0ZSA9IDA7XG4gICAgdGhpcy5mcmFtZU11bHQgPSAwO1xuICAgIHRoaXMucGxheVNwZWVkID0gMTtcbiAgICB0aGlzLnBsYXlEaXJlY3Rpb24gPSAxO1xuICAgIHRoaXMucGxheUNvdW50ID0gMDtcbiAgICB0aGlzLmFuaW1hdGlvbkRhdGEgPSB7fTtcbiAgICB0aGlzLmFzc2V0cyA9IFtdO1xuICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMuYXV0b3BsYXkgPSBmYWxzZTtcbiAgICB0aGlzLmxvb3AgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuYW5pbWF0aW9uSUQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB0aGlzLmFzc2V0c1BhdGggPSAnJztcbiAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSAwO1xuICAgIHRoaXMuc2VnbWVudFBvcyA9IDA7XG4gICAgdGhpcy5pc1N1YmZyYW1lRW5hYmxlZCA9IGdldFN1YmZyYW1lRW5hYmxlZCgpO1xuICAgIHRoaXMuc2VnbWVudHMgPSBbXTtcbiAgICB0aGlzLl9pZGxlID0gdHJ1ZTtcbiAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gZmFsc2U7XG4gICAgdGhpcy5wcm9qZWN0SW50ZXJmYWNlID0gUHJvamVjdEludGVyZmFjZSgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIgPSBuZXcgSW1hZ2VQcmVsb2FkZXIoKTtcbiAgICB0aGlzLmF1ZGlvQ29udHJvbGxlciA9IGF1ZGlvQ29udHJvbGxlckZhY3RvcnkoKTtcbiAgICB0aGlzLm1hcmtlcnMgPSBbXTtcbiAgICB0aGlzLmNvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnQW5pbWF0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNldHVwRXJyb3IgPSB0aGlzLm9uU2V0dXBFcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TZWdtZW50Q29tcGxldGUgPSB0aGlzLm9uU2VnbWVudENvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5kcmF3bkZyYW1lRXZlbnQgPSBuZXcgQk1FbnRlckZyYW1lRXZlbnQoJ2RyYXduRnJhbWUnLCAwLCAwLCAwKTtcbiAgICB0aGlzLmV4cHJlc3Npb25zUGx1Z2luID0gZ2V0RXhwcmVzc2lvbnNQbHVnaW4oKTtcbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFdmVudF0sIEFuaW1hdGlvbkl0ZW0pO1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldFBhcmFtcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLndyYXBwZXIgfHwgcGFyYW1zLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy53cmFwcGVyID0gcGFyYW1zLndyYXBwZXIgfHwgcGFyYW1zLmNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICB2YXIgYW5pbVR5cGUgPSAnc3ZnJztcblxuICAgIGlmIChwYXJhbXMuYW5pbVR5cGUpIHtcbiAgICAgIGFuaW1UeXBlID0gcGFyYW1zLmFuaW1UeXBlO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLnJlbmRlcmVyKSB7XG4gICAgICBhbmltVHlwZSA9IHBhcmFtcy5yZW5kZXJlcjtcbiAgICB9XG5cbiAgICB2YXIgUmVuZGVyZXJDbGFzcyA9IGdldFJlbmRlcmVyKGFuaW1UeXBlKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyQ2xhc3ModGhpcywgcGFyYW1zLnJlbmRlcmVyU2V0dGluZ3MpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0Q2FjaGVUeXBlKGFuaW1UeXBlLCB0aGlzLnJlbmRlcmVyLmdsb2JhbERhdGEuZGVmcyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRQcm9qZWN0SW50ZXJmYWNlKHRoaXMucHJvamVjdEludGVyZmFjZSk7XG4gICAgdGhpcy5hbmltVHlwZSA9IGFuaW1UeXBlO1xuXG4gICAgaWYgKHBhcmFtcy5sb29wID09PSAnJyB8fCBwYXJhbXMubG9vcCA9PT0gbnVsbCB8fCBwYXJhbXMubG9vcCA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtcy5sb29wID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmxvb3AgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmxvb3AgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb29wID0gcGFyc2VJbnQocGFyYW1zLmxvb3AsIDEwKTtcbiAgICB9XG5cbiAgICB0aGlzLmF1dG9wbGF5ID0gJ2F1dG9wbGF5JyBpbiBwYXJhbXMgPyBwYXJhbXMuYXV0b3BsYXkgOiB0cnVlO1xuICAgIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lID8gcGFyYW1zLm5hbWUgOiAnJztcbiAgICB0aGlzLmF1dG9sb2FkU2VnbWVudHMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyYW1zLCAnYXV0b2xvYWRTZWdtZW50cycpID8gcGFyYW1zLmF1dG9sb2FkU2VnbWVudHMgOiB0cnVlO1xuICAgIHRoaXMuYXNzZXRzUGF0aCA9IHBhcmFtcy5hc3NldHNQYXRoO1xuICAgIHRoaXMuaW5pdGlhbFNlZ21lbnQgPSBwYXJhbXMuaW5pdGlhbFNlZ21lbnQ7XG5cbiAgICBpZiAocGFyYW1zLmF1ZGlvRmFjdG9yeSkge1xuICAgICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIuc2V0QXVkaW9GYWN0b3J5KHBhcmFtcy5hdWRpb0ZhY3RvcnkpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuYW5pbWF0aW9uRGF0YSkge1xuICAgICAgdGhpcy5zZXR1cEFuaW1hdGlvbihwYXJhbXMuYW5pbWF0aW9uRGF0YSk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMucGF0aCkge1xuICAgICAgaWYgKHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCdcXFxcJykgIT09IC0xKSB7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhcmFtcy5wYXRoLnN1YnN0cigwLCBwYXJhbXMucGF0aC5sYXN0SW5kZXhPZignXFxcXCcpICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhdGggPSBwYXJhbXMucGF0aC5zdWJzdHIoMCwgcGFyYW1zLnBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZpbGVOYW1lID0gcGFyYW1zLnBhdGguc3Vic3RyKHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgIHRoaXMuZmlsZU5hbWUgPSB0aGlzLmZpbGVOYW1lLnN1YnN0cigwLCB0aGlzLmZpbGVOYW1lLmxhc3RJbmRleE9mKCcuanNvbicpKTtcbiAgICAgIGRhdGFNYW5hZ2VyLmxvYWRBbmltYXRpb24ocGFyYW1zLnBhdGgsIHRoaXMuY29uZmlnQW5pbWF0aW9uLCB0aGlzLm9uU2V0dXBFcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLm9uU2V0dXBFcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2RhdGFfZmFpbGVkJyk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0dXBBbmltYXRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRhdGFNYW5hZ2VyLmNvbXBsZXRlQW5pbWF0aW9uKGRhdGEsIHRoaXMuY29uZmlnQW5pbWF0aW9uKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKHdyYXBwZXIsIGFuaW1hdGlvbkRhdGEpIHtcbiAgICBpZiAoYW5pbWF0aW9uRGF0YSkge1xuICAgICAgaWYgKF90eXBlb2YkNChhbmltYXRpb25EYXRhKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgYW5pbWF0aW9uRGF0YSA9IEpTT04ucGFyc2UoYW5pbWF0aW9uRGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgIHdyYXBwZXI6IHdyYXBwZXIsXG4gICAgICBhbmltYXRpb25EYXRhOiBhbmltYXRpb25EYXRhXG4gICAgfTtcbiAgICB2YXIgd3JhcHBlckF0dHJpYnV0ZXMgPSB3cmFwcGVyLmF0dHJpYnV0ZXM7XG4gICAgcGFyYW1zLnBhdGggPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbWF0aW9uLXBhdGgnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbWF0aW9uLXBhdGgnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1wYXRoJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXBhdGgnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcGF0aCcpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1wYXRoJykudmFsdWUgOiAnJztcbiAgICBwYXJhbXMuYW5pbVR5cGUgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS10eXBlJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tdHlwZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXR5cGUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tdHlwZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS10eXBlJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS10eXBlJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcmVuZGVyZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcmVuZGVyZXInKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcmVuZGVyZXInKSA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcmVuZGVyZXInKS52YWx1ZSA6IGdldFJlZ2lzdGVyZWRSZW5kZXJlcigpIHx8ICdjYW52YXMnO1xuICAgIHZhciBsb29wID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tbG9vcCcpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltLWxvb3AnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1sb29wJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWxvb3AnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tbG9vcCcpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1sb29wJykudmFsdWUgOiAnJztcblxuICAgIGlmIChsb29wID09PSAnZmFsc2UnKSB7XG4gICAgICBwYXJhbXMubG9vcCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAobG9vcCA9PT0gJ3RydWUnKSB7XG4gICAgICBwYXJhbXMubG9vcCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChsb29wICE9PSAnJykge1xuICAgICAgcGFyYW1zLmxvb3AgPSBwYXJzZUludChsb29wLCAxMCk7XG4gICAgfVxuXG4gICAgdmFyIGF1dG9wbGF5ID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tYXV0b3BsYXknKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1hdXRvcGxheScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWF1dG9wbGF5JykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWF1dG9wbGF5JykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWF1dG9wbGF5JykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWF1dG9wbGF5JykudmFsdWUgOiB0cnVlO1xuICAgIHBhcmFtcy5hdXRvcGxheSA9IGF1dG9wbGF5ICE9PSAnZmFsc2UnO1xuICAgIHBhcmFtcy5uYW1lID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLW5hbWUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtbmFtZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLW5hbWUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tbmFtZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1uYW1lJykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLW5hbWUnKS52YWx1ZSA6ICcnO1xuICAgIHZhciBwcmVyZW5kZXIgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1wcmVyZW5kZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1wcmVyZW5kZXInKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1wcmVyZW5kZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcHJlcmVuZGVyJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXByZXJlbmRlcicpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1wcmVyZW5kZXInKS52YWx1ZSA6ICcnO1xuXG4gICAgaWYgKHByZXJlbmRlciA9PT0gJ2ZhbHNlJykge1xuICAgICAgcGFyYW1zLnByZXJlbmRlciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLnBhdGgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGVzdHJveScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBhcmFtcyhwYXJhbXMpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5pbmNsdWRlTGF5ZXJzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5vcCA+IHRoaXMuYW5pbWF0aW9uRGF0YS5vcCkge1xuICAgICAgdGhpcy5hbmltYXRpb25EYXRhLm9wID0gZGF0YS5vcDtcbiAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKGRhdGEub3AgLSB0aGlzLmFuaW1hdGlvbkRhdGEuaXApO1xuICAgIH1cblxuICAgIHZhciBsYXllcnMgPSB0aGlzLmFuaW1hdGlvbkRhdGEubGF5ZXJzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuICAgIHZhciBuZXdMYXllcnMgPSBkYXRhLmxheWVycztcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IG5ld0xheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKGxheWVyc1tpXS5pZCA9PT0gbmV3TGF5ZXJzW2pdLmlkKSB7XG4gICAgICAgICAgbGF5ZXJzW2ldID0gbmV3TGF5ZXJzW2pdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLmNoYXJzIHx8IGRhdGEuZm9udHMpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRDaGFycyhkYXRhLmNoYXJzKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRGb250cyhkYXRhLmZvbnRzLCB0aGlzLnJlbmRlcmVyLmdsb2JhbERhdGEuZGVmcyk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuYXNzZXRzKSB7XG4gICAgICBsZW4gPSBkYXRhLmFzc2V0cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzLnB1c2goZGF0YS5hc3NldHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0aW9uRGF0YS5fX2NvbXBsZXRlID0gZmFsc2U7XG4gICAgZGF0YU1hbmFnZXIuY29tcGxldGVBbmltYXRpb24odGhpcy5hbmltYXRpb25EYXRhLCB0aGlzLm9uU2VnbWVudENvbXBsZXRlKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5vblNlZ21lbnRDb21wbGV0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdGhpcy5hbmltYXRpb25EYXRhID0gZGF0YTtcbiAgICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBnZXRFeHByZXNzaW9uc1BsdWdpbigpO1xuXG4gICAgaWYgKGV4cHJlc3Npb25zUGx1Z2luKSB7XG4gICAgICBleHByZXNzaW9uc1BsdWdpbi5pbml0RXhwcmVzc2lvbnModGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkTmV4dFNlZ21lbnQoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5sb2FkTmV4dFNlZ21lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gdGhpcy5hbmltYXRpb25EYXRhLnNlZ21lbnRzO1xuXG4gICAgaWYgKCFzZWdtZW50cyB8fCBzZWdtZW50cy5sZW5ndGggPT09IDAgfHwgIXRoaXMuYXV0b2xvYWRTZWdtZW50cykge1xuICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhX3JlYWR5Jyk7XG4gICAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHMuc2hpZnQoKTtcbiAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSBzZWdtZW50LnRpbWUgKiB0aGlzLmZyYW1lUmF0ZTtcbiAgICB2YXIgc2VnbWVudFBhdGggPSB0aGlzLnBhdGggKyB0aGlzLmZpbGVOYW1lICsgJ18nICsgdGhpcy5zZWdtZW50UG9zICsgJy5qc29uJztcbiAgICB0aGlzLnNlZ21lbnRQb3MgKz0gMTtcbiAgICBkYXRhTWFuYWdlci5sb2FkRGF0YShzZWdtZW50UGF0aCwgdGhpcy5pbmNsdWRlTGF5ZXJzLmJpbmQodGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGF0YV9mYWlsZWQnKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmxvYWRTZWdtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VnbWVudHMgPSB0aGlzLmFuaW1hdGlvbkRhdGEuc2VnbWVudHM7XG5cbiAgICBpZiAoIXNlZ21lbnRzKSB7XG4gICAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgIH1cblxuICAgIHRoaXMubG9hZE5leHRTZWdtZW50KCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudHJpZ2dlcignbG9hZGVkX2ltYWdlcycpO1xuICAgIHRoaXMuY2hlY2tMb2FkZWQoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5wcmVsb2FkSW1hZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0QXNzZXRzUGF0aCh0aGlzLmFzc2V0c1BhdGgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0UGF0aCh0aGlzLnBhdGgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIubG9hZEFzc2V0cyh0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzLCB0aGlzLmltYWdlc0xvYWRlZC5iaW5kKHRoaXMpKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5hbmltYXRpb25EYXRhID0gYW5pbURhdGE7XG5cbiAgICAgIGlmICh0aGlzLmluaXRpYWxTZWdtZW50KSB7XG4gICAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKHRoaXMuaW5pdGlhbFNlZ21lbnRbMV0gLSB0aGlzLmluaXRpYWxTZWdtZW50WzBdKTtcbiAgICAgICAgdGhpcy5maXJzdEZyYW1lID0gTWF0aC5yb3VuZCh0aGlzLmluaXRpYWxTZWdtZW50WzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKHRoaXMuYW5pbWF0aW9uRGF0YS5vcCAtIHRoaXMuYW5pbWF0aW9uRGF0YS5pcCk7XG4gICAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IE1hdGgucm91bmQodGhpcy5hbmltYXRpb25EYXRhLmlwKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJlci5jb25maWdBbmltYXRpb24oYW5pbURhdGEpO1xuXG4gICAgICBpZiAoIWFuaW1EYXRhLmFzc2V0cykge1xuICAgICAgICBhbmltRGF0YS5hc3NldHMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hc3NldHMgPSB0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzO1xuICAgICAgdGhpcy5mcmFtZVJhdGUgPSB0aGlzLmFuaW1hdGlvbkRhdGEuZnI7XG4gICAgICB0aGlzLmZyYW1lTXVsdCA9IHRoaXMuYW5pbWF0aW9uRGF0YS5mciAvIDEwMDA7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNlYXJjaEV4dHJhQ29tcG9zaXRpb25zKGFuaW1EYXRhLmFzc2V0cyk7XG4gICAgICB0aGlzLm1hcmtlcnMgPSBtYXJrZXJQYXJzZXIoYW5pbURhdGEubWFya2VycyB8fCBbXSk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NvbmZpZ19yZWFkeScpO1xuICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgICB0aGlzLmxvYWRTZWdtZW50cygpO1xuICAgICAgdGhpcy51cGRhRnJhbWVNb2RpZmllcigpO1xuICAgICAgdGhpcy53YWl0Rm9yRm9udHNMb2FkZWQoKTtcblxuICAgICAgaWYgKHRoaXMuaXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy50cmlnZ2VyQ29uZmlnRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS53YWl0Rm9yRm9udHNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5pc0xvYWRlZCkge1xuICAgICAgdGhpcy5jaGVja0xvYWRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMud2FpdEZvckZvbnRzTG9hZGVkLmJpbmQodGhpcyksIDIwKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuY2hlY2tMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzTG9hZGVkICYmIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5pc0xvYWRlZCAmJiAodGhpcy5pbWFnZVByZWxvYWRlci5sb2FkZWRJbWFnZXMoKSB8fCB0aGlzLnJlbmRlcmVyLnJlbmRlcmVyVHlwZSAhPT0gJ2NhbnZhcycpICYmIHRoaXMuaW1hZ2VQcmVsb2FkZXIubG9hZGVkRm9vdGFnZXMoKSkge1xuICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBnZXRFeHByZXNzaW9uc1BsdWdpbigpO1xuXG4gICAgICBpZiAoZXhwcmVzc2lvbnNQbHVnaW4pIHtcbiAgICAgICAgZXhwcmVzc2lvbnNQbHVnaW4uaW5pdEV4cHJlc3Npb25zKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlcmVyLmluaXRJdGVtcygpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignRE9NTG9hZGVkJyk7XG4gICAgICB9LmJpbmQodGhpcyksIDApO1xuICAgICAgdGhpcy5nb3RvRnJhbWUoKTtcblxuICAgICAgaWYgKHRoaXMuYXV0b3BsYXkpIHtcbiAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gQWRkaW5nIHRoaXMgdmFsaWRhdGlvbiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgaW4gY2FzZSBhbiBldmVudCBvYmplY3Qgd2FzIGJlaW5nIHBhc3NlZCBkb3duXG4gICAgdmFyIF93aWR0aCA9IHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgPyB3aWR0aCA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBfaGVpZ2h0ID0gdHlwZW9mIGhlaWdodCA9PT0gJ251bWJlcicgPyBoZWlnaHQgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnJlbmRlcmVyLnVwZGF0ZUNvbnRhaW5lclNpemUoX3dpZHRoLCBfaGVpZ2h0KTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXRTdWJmcmFtZSA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgdGhpcy5pc1N1YmZyYW1lRW5hYmxlZCA9ICEhZmxhZztcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb3RvRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jdXJyZW50RnJhbWUgPSB0aGlzLmlzU3ViZnJhbWVFbmFibGVkID8gdGhpcy5jdXJyZW50UmF3RnJhbWUgOiB+fnRoaXMuY3VycmVudFJhd0ZyYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcblxuICAgIGlmICh0aGlzLnRpbWVDb21wbGV0ZWQgIT09IHRoaXMudG90YWxGcmFtZXMgJiYgdGhpcy5jdXJyZW50RnJhbWUgPiB0aGlzLnRpbWVDb21wbGV0ZWQpIHtcbiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gdGhpcy50aW1lQ29tcGxldGVkO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignZW50ZXJGcmFtZScpO1xuICAgIHRoaXMucmVuZGVyRnJhbWUoKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2RyYXduRnJhbWUnKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZCA9PT0gZmFsc2UgfHwgIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvbnNQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5leHByZXNzaW9uc1BsdWdpbi5yZXNldEZyYW1lKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyRnJhbWUodGhpcy5jdXJyZW50RnJhbWUgKyB0aGlzLmZpcnN0RnJhbWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLnRyaWdnZXJSZW5kZXJGcmFtZUVycm9yKGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQYXVzZWQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX3BsYXknKTtcbiAgICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnJlc3VtZSgpO1xuXG4gICAgICBpZiAodGhpcy5faWRsZSkge1xuICAgICAgICB0aGlzLl9pZGxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJpZ2dlcignX2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQYXVzZWQgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX3BhdXNlJyk7XG4gICAgICB0aGlzLl9pZGxlID0gdHJ1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX2lkbGUnKTtcbiAgICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnBhdXNlKCk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnRvZ2dsZVBhdXNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1BhdXNlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYXVzZSgpO1xuICAgIHRoaXMucGxheUNvdW50ID0gMDtcbiAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gZmFsc2U7XG4gICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSgwKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRNYXJrZXJEYXRhID0gZnVuY3Rpb24gKG1hcmtlck5hbWUpIHtcbiAgICB2YXIgbWFya2VyO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1hcmtlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIG1hcmtlciA9IHRoaXMubWFya2Vyc1tpXTtcblxuICAgICAgaWYgKG1hcmtlci5wYXlsb2FkICYmIG1hcmtlci5wYXlsb2FkLm5hbWUgPT09IG1hcmtlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb1RvQW5kU3RvcCA9IGZ1bmN0aW9uICh2YWx1ZSwgaXNGcmFtZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBudW1WYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICBpZiAoaXNOYU4obnVtVmFsdWUpKSB7XG4gICAgICB2YXIgbWFya2VyID0gdGhpcy5nZXRNYXJrZXJEYXRhKHZhbHVlKTtcblxuICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICB0aGlzLmdvVG9BbmRTdG9wKG1hcmtlci50aW1lLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRnJhbWUpIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKHZhbHVlICogdGhpcy5mcmFtZU1vZGlmaWVyKTtcbiAgICB9XG5cbiAgICB0aGlzLnBhdXNlKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ29Ub0FuZFBsYXkgPSBmdW5jdGlvbiAodmFsdWUsIGlzRnJhbWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbnVtVmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG4gICAgaWYgKGlzTmFOKG51bVZhbHVlKSkge1xuICAgICAgdmFyIG1hcmtlciA9IHRoaXMuZ2V0TWFya2VyRGF0YSh2YWx1ZSk7XG5cbiAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgaWYgKCFtYXJrZXIuZHVyYXRpb24pIHtcbiAgICAgICAgICB0aGlzLmdvVG9BbmRTdG9wKG1hcmtlci50aW1lLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBsYXlTZWdtZW50cyhbbWFya2VyLnRpbWUsIG1hcmtlci50aW1lICsgbWFya2VyLmR1cmF0aW9uXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nb1RvQW5kU3RvcChudW1WYWx1ZSwgaXNGcmFtZSwgbmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5KCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuYWR2YW5jZVRpbWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5pc1BhdXNlZCA9PT0gdHJ1ZSB8fCB0aGlzLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0VmFsdWUgPSB0aGlzLmN1cnJlbnRSYXdGcmFtZSArIHZhbHVlICogdGhpcy5mcmFtZU1vZGlmaWVyO1xuICAgIHZhciBfaXNDb21wbGV0ZSA9IGZhbHNlOyAvLyBDaGVja2luZyBpZiBuZXh0VmFsdWUgPiB0b3RhbEZyYW1lcyAtIDEgZm9yIGFkZHJlc3Npbmcgbm9uIGxvb3BpbmcgYW5kIGxvb3BpbmcgYW5pbWF0aW9ucy5cbiAgICAvLyBJZiBhbmltYXRpb24gd29uJ3QgbG9vcCwgaXQgc2hvdWxkIHN0b3AgYXQgdG90YWxGcmFtZXMgLSAxLiBJZiBpdCB3aWxsIGxvb3AgaXQgc2hvdWxkIGNvbXBsZXRlIHRoZSBsYXN0IGZyYW1lIGFuZCB0aGVuIGxvb3AuXG5cbiAgICBpZiAobmV4dFZhbHVlID49IHRoaXMudG90YWxGcmFtZXMgLSAxICYmIHRoaXMuZnJhbWVNb2RpZmllciA+IDApIHtcbiAgICAgIGlmICghdGhpcy5sb29wIHx8IHRoaXMucGxheUNvdW50ID09PSB0aGlzLmxvb3ApIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrU2VnbWVudHMobmV4dFZhbHVlID4gdGhpcy50b3RhbEZyYW1lcyA/IG5leHRWYWx1ZSAlIHRoaXMudG90YWxGcmFtZXMgOiAwKSkge1xuICAgICAgICAgIF9pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICBuZXh0VmFsdWUgPSB0aGlzLnRvdGFsRnJhbWVzIC0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXh0VmFsdWUgPj0gdGhpcy50b3RhbEZyYW1lcykge1xuICAgICAgICB0aGlzLnBsYXlDb3VudCArPSAxO1xuXG4gICAgICAgIGlmICghdGhpcy5jaGVja1NlZ21lbnRzKG5leHRWYWx1ZSAlIHRoaXMudG90YWxGcmFtZXMpKSB7XG4gICAgICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZShuZXh0VmFsdWUgJSB0aGlzLnRvdGFsRnJhbWVzKTtcbiAgICAgICAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0VmFsdWUgPCAwKSB7XG4gICAgICBpZiAoIXRoaXMuY2hlY2tTZWdtZW50cyhuZXh0VmFsdWUgJSB0aGlzLnRvdGFsRnJhbWVzKSkge1xuICAgICAgICBpZiAodGhpcy5sb29wICYmICEodGhpcy5wbGF5Q291bnQtLSA8PSAwICYmIHRoaXMubG9vcCAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBsdXNwbHVzXG4gICAgICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSh0aGlzLnRvdGFsRnJhbWVzICsgbmV4dFZhbHVlICUgdGhpcy50b3RhbEZyYW1lcyk7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX2NvbXBsZXRlZExvb3ApIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlZExvb3AgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgbmV4dFZhbHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0NvbXBsZXRlKSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NvbXBsZXRlJyk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmFkanVzdFNlZ21lbnQgPSBmdW5jdGlvbiAoYXJyLCBvZmZzZXQpIHtcbiAgICB0aGlzLnBsYXlDb3VudCA9IDA7XG5cbiAgICBpZiAoYXJyWzFdIDwgYXJyWzBdKSB7XG4gICAgICBpZiAodGhpcy5mcmFtZU1vZGlmaWVyID4gMCkge1xuICAgICAgICBpZiAodGhpcy5wbGF5U3BlZWQgPCAwKSB7XG4gICAgICAgICAgdGhpcy5zZXRTcGVlZCgtdGhpcy5wbGF5U3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0RGlyZWN0aW9uKC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRvdGFsRnJhbWVzID0gYXJyWzBdIC0gYXJyWzFdO1xuICAgICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IGFyclsxXTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodGhpcy50b3RhbEZyYW1lcyAtIDAuMDAxIC0gb2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGFyclsxXSA+IGFyclswXSkge1xuICAgICAgaWYgKHRoaXMuZnJhbWVNb2RpZmllciA8IDApIHtcbiAgICAgICAgaWYgKHRoaXMucGxheVNwZWVkIDwgMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3BlZWQoLXRoaXMucGxheVNwZWVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldERpcmVjdGlvbigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRvdGFsRnJhbWVzID0gYXJyWzFdIC0gYXJyWzBdO1xuICAgICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IGFyclswXTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUoMC4wMDEgKyBvZmZzZXQpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignc2VnbWVudFN0YXJ0Jyk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0U2VnbWVudCA9IGZ1bmN0aW9uIChpbml0LCBlbmQpIHtcbiAgICB2YXIgcGVuZGluZ0ZyYW1lID0gLTE7XG5cbiAgICBpZiAodGhpcy5pc1BhdXNlZCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFJhd0ZyYW1lICsgdGhpcy5maXJzdEZyYW1lIDwgaW5pdCkge1xuICAgICAgICBwZW5kaW5nRnJhbWUgPSBpbml0O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRSYXdGcmFtZSArIHRoaXMuZmlyc3RGcmFtZSA+IGVuZCkge1xuICAgICAgICBwZW5kaW5nRnJhbWUgPSBlbmQgLSBpbml0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZmlyc3RGcmFtZSA9IGluaXQ7XG4gICAgdGhpcy50b3RhbEZyYW1lcyA9IGVuZCAtIGluaXQ7XG4gICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcblxuICAgIGlmIChwZW5kaW5nRnJhbWUgIT09IC0xKSB7XG4gICAgICB0aGlzLmdvVG9BbmRTdG9wKHBlbmRpbmdGcmFtZSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnBsYXlTZWdtZW50cyA9IGZ1bmN0aW9uIChhcnIsIGZvcmNlRmxhZykge1xuICAgIGlmIChmb3JjZUZsYWcpIHtcbiAgICAgIHRoaXMuc2VnbWVudHMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBpZiAoX3R5cGVvZiQ0KGFyclswXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5zZWdtZW50cy5wdXNoKGFycltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VnbWVudHMucHVzaChhcnIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlZ21lbnRzLmxlbmd0aCAmJiBmb3JjZUZsYWcpIHtcbiAgICAgIHRoaXMuYWRqdXN0U2VnbWVudCh0aGlzLnNlZ21lbnRzLnNoaWZ0KCksIDApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucmVzZXRTZWdtZW50cyA9IGZ1bmN0aW9uIChmb3JjZUZsYWcpIHtcbiAgICB0aGlzLnNlZ21lbnRzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zZWdtZW50cy5wdXNoKFt0aGlzLmFuaW1hdGlvbkRhdGEuaXAsIHRoaXMuYW5pbWF0aW9uRGF0YS5vcF0pO1xuXG4gICAgaWYgKGZvcmNlRmxhZykge1xuICAgICAgdGhpcy5jaGVja1NlZ21lbnRzKDApO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5jaGVja1NlZ21lbnRzID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICAgIGlmICh0aGlzLnNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5hZGp1c3RTZWdtZW50KHRoaXMuc2VnbWVudHMuc2hpZnQoKSwgb2Zmc2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUgfHwgIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLmltYWdlUHJlbG9hZGVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2Rlc3Ryb3knKTtcbiAgICB0aGlzLl9jYnMgPSBudWxsO1xuICAgIHRoaXMub25FbnRlckZyYW1lID0gbnVsbDtcbiAgICB0aGlzLm9uTG9vcENvbXBsZXRlID0gbnVsbDtcbiAgICB0aGlzLm9uQ29tcGxldGUgPSBudWxsO1xuICAgIHRoaXMub25TZWdtZW50U3RhcnQgPSBudWxsO1xuICAgIHRoaXMub25EZXN0cm95ID0gbnVsbDtcbiAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICB0aGlzLmV4cHJlc3Npb25zUGx1Z2luID0gbnVsbDtcbiAgICB0aGlzLmltYWdlUHJlbG9hZGVyID0gbnVsbDtcbiAgICB0aGlzLnByb2plY3RJbnRlcmZhY2UgPSBudWxsO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jdXJyZW50UmF3RnJhbWUgPSB2YWx1ZTtcbiAgICB0aGlzLmdvdG9GcmFtZSgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldFNwZWVkID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHRoaXMucGxheVNwZWVkID0gdmFsO1xuICAgIHRoaXMudXBkYUZyYW1lTW9kaWZpZXIoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXREaXJlY3Rpb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgdGhpcy5wbGF5RGlyZWN0aW9uID0gdmFsIDwgMCA/IC0xIDogMTtcbiAgICB0aGlzLnVwZGFGcmFtZU1vZGlmaWVyKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0TG9vcCA9IGZ1bmN0aW9uIChpc0xvb3BpbmcpIHtcbiAgICB0aGlzLmxvb3AgPSBpc0xvb3Bpbmc7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0Vm9sdW1lID0gZnVuY3Rpb24gKHZhbCwgbmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnNldFZvbHVtZSh2YWwpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldFZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hdWRpb0NvbnRyb2xsZXIuZ2V0Vm9sdW1lKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUubXV0ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIubXV0ZSgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnVubXV0ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIudW5tdXRlKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudXBkYUZyYW1lTW9kaWZpZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mcmFtZU1vZGlmaWVyID0gdGhpcy5mcmFtZU11bHQgKiB0aGlzLnBsYXlTcGVlZCAqIHRoaXMucGxheURpcmVjdGlvbjtcbiAgICB0aGlzLmF1ZGlvQ29udHJvbGxlci5zZXRSYXRlKHRoaXMucGxheVNwZWVkICogdGhpcy5wbGF5RGlyZWN0aW9uKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnBhdGg7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ2V0QXNzZXRzUGF0aCA9IGZ1bmN0aW9uIChhc3NldERhdGEpIHtcbiAgICB2YXIgcGF0aCA9ICcnO1xuXG4gICAgaWYgKGFzc2V0RGF0YS5lKSB7XG4gICAgICBwYXRoID0gYXNzZXREYXRhLnA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFzc2V0c1BhdGgpIHtcbiAgICAgIHZhciBpbWFnZVBhdGggPSBhc3NldERhdGEucDtcblxuICAgICAgaWYgKGltYWdlUGF0aC5pbmRleE9mKCdpbWFnZXMvJykgIT09IC0xKSB7XG4gICAgICAgIGltYWdlUGF0aCA9IGltYWdlUGF0aC5zcGxpdCgnLycpWzFdO1xuICAgICAgfVxuXG4gICAgICBwYXRoID0gdGhpcy5hc3NldHNQYXRoICsgaW1hZ2VQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gdGhpcy5wYXRoO1xuICAgICAgcGF0aCArPSBhc3NldERhdGEudSA/IGFzc2V0RGF0YS51IDogJyc7XG4gICAgICBwYXRoICs9IGFzc2V0RGF0YS5wO1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldEFzc2V0RGF0YSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGhpcy5hc3NldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChpZCA9PT0gdGhpcy5hc3NldHNbaV0uaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXRzW2ldO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmhpZGUoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVuZGVyZXIuc2hvdygpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKGlzRnJhbWUpIHtcbiAgICByZXR1cm4gaXNGcmFtZSA/IHRoaXMudG90YWxGcmFtZXMgOiB0aGlzLnRvdGFsRnJhbWVzIC8gdGhpcy5mcmFtZVJhdGU7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudXBkYXRlRG9jdW1lbnREYXRhID0gZnVuY3Rpb24gKHBhdGgsIGRvY3VtZW50RGF0YSwgaW5kZXgpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnJlbmRlcmVyLmdldEVsZW1lbnRCeVBhdGgocGF0aCk7XG4gICAgICBlbGVtZW50LnVwZGF0ZURvY3VtZW50RGF0YShkb2N1bWVudERhdGEsIGluZGV4KTtcbiAgICB9IGNhdGNoIChlcnJvcikgey8vIFRPRE86IGRlY2lkZSBob3cgdG8gaGFuZGxlIGNhdGNoIGNhc2VcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKHRoaXMuX2NicyAmJiB0aGlzLl9jYnNbbmFtZV0pIHtcbiAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlICdlbnRlckZyYW1lJzpcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChuYW1lLCBuZXcgQk1FbnRlckZyYW1lRXZlbnQobmFtZSwgdGhpcy5jdXJyZW50RnJhbWUsIHRoaXMudG90YWxGcmFtZXMsIHRoaXMuZnJhbWVNb2RpZmllcikpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2RyYXduRnJhbWUnOlxuICAgICAgICAgIHRoaXMuZHJhd25GcmFtZUV2ZW50LmN1cnJlbnRUaW1lID0gdGhpcy5jdXJyZW50RnJhbWU7XG4gICAgICAgICAgdGhpcy5kcmF3bkZyYW1lRXZlbnQudG90YWxUaW1lID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgICAgICB0aGlzLmRyYXduRnJhbWVFdmVudC5kaXJlY3Rpb24gPSB0aGlzLmZyYW1lTW9kaWZpZXI7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgdGhpcy5kcmF3bkZyYW1lRXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xvb3BDb21wbGV0ZSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNQ29tcGxldGVMb29wRXZlbnQobmFtZSwgdGhpcy5sb29wLCB0aGlzLnBsYXlDb3VudCwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjb21wbGV0ZSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNQ29tcGxldGVFdmVudChuYW1lLCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NlZ21lbnRTdGFydCc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNU2VnbWVudFN0YXJ0RXZlbnQobmFtZSwgdGhpcy5maXJzdEZyYW1lLCB0aGlzLnRvdGFsRnJhbWVzKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZGVzdHJveSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNRGVzdHJveUV2ZW50KG5hbWUsIHRoaXMpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnZW50ZXJGcmFtZScgJiYgdGhpcy5vbkVudGVyRnJhbWUpIHtcbiAgICAgIHRoaXMub25FbnRlckZyYW1lLmNhbGwodGhpcywgbmV3IEJNRW50ZXJGcmFtZUV2ZW50KG5hbWUsIHRoaXMuY3VycmVudEZyYW1lLCB0aGlzLnRvdGFsRnJhbWVzLCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnbG9vcENvbXBsZXRlJyAmJiB0aGlzLm9uTG9vcENvbXBsZXRlKSB7XG4gICAgICB0aGlzLm9uTG9vcENvbXBsZXRlLmNhbGwodGhpcywgbmV3IEJNQ29tcGxldGVMb29wRXZlbnQobmFtZSwgdGhpcy5sb29wLCB0aGlzLnBsYXlDb3VudCwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gJ2NvbXBsZXRlJyAmJiB0aGlzLm9uQ29tcGxldGUpIHtcbiAgICAgIHRoaXMub25Db21wbGV0ZS5jYWxsKHRoaXMsIG5ldyBCTUNvbXBsZXRlRXZlbnQobmFtZSwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gJ3NlZ21lbnRTdGFydCcgJiYgdGhpcy5vblNlZ21lbnRTdGFydCkge1xuICAgICAgdGhpcy5vblNlZ21lbnRTdGFydC5jYWxsKHRoaXMsIG5ldyBCTVNlZ21lbnRTdGFydEV2ZW50KG5hbWUsIHRoaXMuZmlyc3RGcmFtZSwgdGhpcy50b3RhbEZyYW1lcykpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnZGVzdHJveScgJiYgdGhpcy5vbkRlc3Ryb3kpIHtcbiAgICAgIHRoaXMub25EZXN0cm95LmNhbGwodGhpcywgbmV3IEJNRGVzdHJveUV2ZW50KG5hbWUsIHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlclJlbmRlckZyYW1lRXJyb3IgPSBmdW5jdGlvbiAobmF0aXZlRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgQk1SZW5kZXJGcmFtZUVycm9yRXZlbnQobmF0aXZlRXJyb3IsIHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnZXJyb3InLCBlcnJvcik7XG5cbiAgICBpZiAodGhpcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnRyaWdnZXJDb25maWdFcnJvciA9IGZ1bmN0aW9uIChuYXRpdmVFcnJvcikge1xuICAgIHZhciBlcnJvciA9IG5ldyBCTUNvbmZpZ0Vycm9yRXZlbnQobmF0aXZlRXJyb3IsIHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnZXJyb3InLCBlcnJvcik7XG5cbiAgICBpZiAodGhpcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhbmltYXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtb2R1bGVPYiA9IHt9O1xuICAgIHZhciByZWdpc3RlcmVkQW5pbWF0aW9ucyA9IFtdO1xuICAgIHZhciBpbml0VGltZSA9IDA7XG4gICAgdmFyIGxlbiA9IDA7XG4gICAgdmFyIHBsYXlpbmdBbmltYXRpb25zTnVtID0gMDtcbiAgICB2YXIgX3N0b3BwZWQgPSB0cnVlO1xuICAgIHZhciBfaXNGcm96ZW4gPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZXYpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBhbmltSXRlbSA9IGV2LnRhcmdldDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbiA9PT0gYW5pbUl0ZW0pIHtcbiAgICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9ucy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgIGxlbiAtPSAxO1xuXG4gICAgICAgICAgaWYgKCFhbmltSXRlbS5pc1BhdXNlZCkge1xuICAgICAgICAgICAgc3VidHJhY3RQbGF5aW5nQ291bnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJBbmltYXRpb24oZWxlbWVudCwgYW5pbWF0aW9uRGF0YSkge1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5lbGVtID09PSBlbGVtZW50ICYmIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmVsZW0gIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5pbUl0ZW0gPSBuZXcgQW5pbWF0aW9uSXRlbSgpO1xuICAgICAgc2V0dXBBbmltYXRpb24oYW5pbUl0ZW0sIGVsZW1lbnQpO1xuICAgICAgYW5pbUl0ZW0uc2V0RGF0YShlbGVtZW50LCBhbmltYXRpb25EYXRhKTtcbiAgICAgIHJldHVybiBhbmltSXRlbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkQW5pbWF0aW9ucygpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbkFuaW1zID0gcmVnaXN0ZXJlZEFuaW1hdGlvbnMubGVuZ3RoO1xuICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbkFuaW1zOyBpICs9IDEpIHtcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFBsYXlpbmdDb3VudCgpIHtcbiAgICAgIHBsYXlpbmdBbmltYXRpb25zTnVtICs9IDE7XG4gICAgICBhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0UGxheWluZ0NvdW50KCkge1xuICAgICAgcGxheWluZ0FuaW1hdGlvbnNOdW0gLT0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cEFuaW1hdGlvbihhbmltSXRlbSwgZWxlbWVudCkge1xuICAgICAgYW5pbUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZGVzdHJveScsIHJlbW92ZUVsZW1lbnQpO1xuICAgICAgYW5pbUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignX2FjdGl2ZScsIGFkZFBsYXlpbmdDb3VudCk7XG4gICAgICBhbmltSXRlbS5hZGRFdmVudExpc3RlbmVyKCdfaWRsZScsIHN1YnRyYWN0UGxheWluZ0NvdW50KTtcbiAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zLnB1c2goe1xuICAgICAgICBlbGVtOiBlbGVtZW50LFxuICAgICAgICBhbmltYXRpb246IGFuaW1JdGVtXG4gICAgICB9KTtcbiAgICAgIGxlbiArPSAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRBbmltYXRpb24ocGFyYW1zKSB7XG4gICAgICB2YXIgYW5pbUl0ZW0gPSBuZXcgQW5pbWF0aW9uSXRlbSgpO1xuICAgICAgc2V0dXBBbmltYXRpb24oYW5pbUl0ZW0sIG51bGwpO1xuICAgICAgYW5pbUl0ZW0uc2V0UGFyYW1zKHBhcmFtcyk7XG4gICAgICByZXR1cm4gYW5pbUl0ZW07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U3BlZWQodmFsLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnNldFNwZWVkKHZhbCwgYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREaXJlY3Rpb24odmFsLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnNldERpcmVjdGlvbih2YWwsIGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxheShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnBsYXkoYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWUobm93VGltZSkge1xuICAgICAgdmFyIGVsYXBzZWRUaW1lID0gbm93VGltZSAtIGluaXRUaW1lO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uYWR2YW5jZVRpbWUoZWxhcHNlZFRpbWUpO1xuICAgICAgfVxuXG4gICAgICBpbml0VGltZSA9IG5vd1RpbWU7XG5cbiAgICAgIGlmIChwbGF5aW5nQW5pbWF0aW9uc051bSAmJiAhX2lzRnJvemVuKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaXJzdChub3dUaW1lKSB7XG4gICAgICBpbml0VGltZSA9IG5vd1RpbWU7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc3VtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGF1c2UoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5wYXVzZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdvVG9BbmRTdG9wKHZhbHVlLCBpc0ZyYW1lLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLmdvVG9BbmRTdG9wKHZhbHVlLCBpc0ZyYW1lLCBhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0b3AoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5zdG9wKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlUGF1c2UoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi50b2dnbGVQYXVzZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLmRlc3Ryb3koYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWFyY2hBbmltYXRpb25zKGFuaW1hdGlvbkRhdGEsIHN0YW5kYWxvbmUsIHJlbmRlcmVyKSB7XG4gICAgICB2YXIgYW5pbUVsZW1lbnRzID0gW10uY29uY2F0KFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbG90dGllJykpLCBbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JvZHltb3ZpbicpKSk7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW5BbmltcyA9IGFuaW1FbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5BbmltczsgaSArPSAxKSB7XG4gICAgICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgICAgIGFuaW1FbGVtZW50c1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYm0tdHlwZScsIHJlbmRlcmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVyQW5pbWF0aW9uKGFuaW1FbGVtZW50c1tpXSwgYW5pbWF0aW9uRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFuZGFsb25lICYmIGxlbkFuaW1zID09PSAwKSB7XG4gICAgICAgIGlmICghcmVuZGVyZXIpIHtcbiAgICAgICAgICByZW5kZXJlciA9ICdzdmcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgICBib2R5LmlubmVyVGV4dCA9ICcnO1xuICAgICAgICB2YXIgZGl2ID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBkaXYuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdkYXRhLWJtLXR5cGUnLCByZW5kZXJlcik7XG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgcmVnaXN0ZXJBbmltYXRpb24oZGl2LCBhbmltYXRpb25EYXRhKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5yZXNpemUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICghX2lzRnJvemVuICYmIHBsYXlpbmdBbmltYXRpb25zTnVtKSB7XG4gICAgICAgIGlmIChfc3RvcHBlZCkge1xuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZmlyc3QpO1xuICAgICAgICAgIF9zdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcmVlemUoKSB7XG4gICAgICBfaXNGcm96ZW4gPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuZnJlZXplKCkge1xuICAgICAgX2lzRnJvemVuID0gZmFsc2U7XG4gICAgICBhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZvbHVtZSh2YWwsIGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uc2V0Vm9sdW1lKHZhbCwgYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtdXRlKGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24ubXV0ZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVubXV0ZShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnVubXV0ZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1vZHVsZU9iLnJlZ2lzdGVyQW5pbWF0aW9uID0gcmVnaXN0ZXJBbmltYXRpb247XG4gICAgbW9kdWxlT2IubG9hZEFuaW1hdGlvbiA9IGxvYWRBbmltYXRpb247XG4gICAgbW9kdWxlT2Iuc2V0U3BlZWQgPSBzZXRTcGVlZDtcbiAgICBtb2R1bGVPYi5zZXREaXJlY3Rpb24gPSBzZXREaXJlY3Rpb247XG4gICAgbW9kdWxlT2IucGxheSA9IHBsYXk7XG4gICAgbW9kdWxlT2IucGF1c2UgPSBwYXVzZTtcbiAgICBtb2R1bGVPYi5zdG9wID0gc3RvcDtcbiAgICBtb2R1bGVPYi50b2dnbGVQYXVzZSA9IHRvZ2dsZVBhdXNlO1xuICAgIG1vZHVsZU9iLnNlYXJjaEFuaW1hdGlvbnMgPSBzZWFyY2hBbmltYXRpb25zO1xuICAgIG1vZHVsZU9iLnJlc2l6ZSA9IHJlc2l6ZTsgLy8gbW9kdWxlT2Iuc3RhcnQgPSBzdGFydDtcblxuICAgIG1vZHVsZU9iLmdvVG9BbmRTdG9wID0gZ29Ub0FuZFN0b3A7XG4gICAgbW9kdWxlT2IuZGVzdHJveSA9IGRlc3Ryb3k7XG4gICAgbW9kdWxlT2IuZnJlZXplID0gZnJlZXplO1xuICAgIG1vZHVsZU9iLnVuZnJlZXplID0gdW5mcmVlemU7XG4gICAgbW9kdWxlT2Iuc2V0Vm9sdW1lID0gc2V0Vm9sdW1lO1xuICAgIG1vZHVsZU9iLm11dGUgPSBtdXRlO1xuICAgIG1vZHVsZU9iLnVubXV0ZSA9IHVubXV0ZTtcbiAgICBtb2R1bGVPYi5nZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyA9IGdldFJlZ2lzdGVyZWRBbmltYXRpb25zO1xuICAgIHJldHVybiBtb2R1bGVPYjtcbiAgfSgpO1xuXG4gIC8qIGVzbGludC1kaXNhYmxlICovXG4gIHZhciBCZXppZXJGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAgICogQmV6aWVyRWFzaW5nIC0gdXNlIGJlemllciBjdXJ2ZSBmb3IgdHJhbnNpdGlvbiBlYXNpbmcgZnVuY3Rpb25cbiAgICAgICAqIGJ5IEdhw6t0YW4gUmVuYXVkZWF1IDIwMTQgLSAyMDE1IOKAkyBNSVQgTGljZW5zZVxuICAgICAgICpcbiAgICAgICAqIENyZWRpdHM6IGlzIGJhc2VkIG9uIEZpcmVmb3gncyBuc1NNSUxLZXlTcGxpbmUuY3BwXG4gICAgICAgKiBVc2FnZTpcbiAgICAgICAqIHZhciBzcGxpbmUgPSBCZXppZXJFYXNpbmcoWyAwLjI1LCAwLjEsIDAuMjUsIDEuMCBdKVxuICAgICAgICogc3BsaW5lLmdldCh4KSA9PiByZXR1cm5zIHRoZSBlYXNpbmcgdmFsdWUgfCB4IG11c3QgYmUgaW4gWzAsIDFdIHJhbmdlXG4gICAgICAgKlxuICAgICAgICovXG4gICAgdmFyIG9iID0ge307XG4gICAgb2IuZ2V0QmV6aWVyRWFzaW5nID0gZ2V0QmV6aWVyRWFzaW5nO1xuICAgIHZhciBiZXppZXJzID0ge307XG5cbiAgICBmdW5jdGlvbiBnZXRCZXppZXJFYXNpbmcoYSwgYiwgYywgZCwgbm0pIHtcbiAgICAgIHZhciBzdHIgPSBubSB8fCAoJ2Jlel8nICsgYSArICdfJyArIGIgKyAnXycgKyBjICsgJ18nICsgZCkucmVwbGFjZSgvXFwuL2csICdwJyk7XG5cbiAgICAgIGlmIChiZXppZXJzW3N0cl0pIHtcbiAgICAgICAgcmV0dXJuIGJlemllcnNbc3RyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJlekVhc2luZyA9IG5ldyBCZXppZXJFYXNpbmcoW2EsIGIsIGMsIGRdKTtcbiAgICAgIGJlemllcnNbc3RyXSA9IGJlekVhc2luZztcbiAgICAgIHJldHVybiBiZXpFYXNpbmc7XG4gICAgfSAvLyBUaGVzZSB2YWx1ZXMgYXJlIGVzdGFibGlzaGVkIGJ5IGVtcGlyaWNpc20gd2l0aCB0ZXN0cyAodHJhZGVvZmY6IHBlcmZvcm1hbmNlIFZTIHByZWNpc2lvbilcblxuXG4gICAgdmFyIE5FV1RPTl9JVEVSQVRJT05TID0gNDtcbiAgICB2YXIgTkVXVE9OX01JTl9TTE9QRSA9IDAuMDAxO1xuICAgIHZhciBTVUJESVZJU0lPTl9QUkVDSVNJT04gPSAwLjAwMDAwMDE7XG4gICAgdmFyIFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TID0gMTA7XG4gICAgdmFyIGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbiAgICB2YXIga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuICAgIHZhciBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPSB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nO1xuXG4gICAgZnVuY3Rpb24gQShhQTEsIGFBMikge1xuICAgICAgcmV0dXJuIDEuMCAtIDMuMCAqIGFBMiArIDMuMCAqIGFBMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBCKGFBMSwgYUEyKSB7XG4gICAgICByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEMoYUExKSB7XG4gICAgICByZXR1cm4gMy4wICogYUExO1xuICAgIH0gLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cblxuXG4gICAgZnVuY3Rpb24gY2FsY0JlemllcihhVCwgYUExLCBhQTIpIHtcbiAgICAgIHJldHVybiAoKEEoYUExLCBhQTIpICogYVQgKyBCKGFBMSwgYUEyKSkgKiBhVCArIEMoYUExKSkgKiBhVDtcbiAgICB9IC8vIFJldHVybnMgZHgvZHQgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgZHkvZHQgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cblxuXG4gICAgZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7XG4gICAgICByZXR1cm4gMy4wICogQShhQTEsIGFBMikgKiBhVCAqIGFUICsgMi4wICogQihhQTEsIGFBMikgKiBhVCArIEMoYUExKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgICAgIHZhciBjdXJyZW50WCxcbiAgICAgICAgICBjdXJyZW50VCxcbiAgICAgICAgICBpID0gMDtcblxuICAgICAgZG8ge1xuICAgICAgICBjdXJyZW50VCA9IGFBICsgKGFCIC0gYUEpIC8gMi4wO1xuICAgICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuXG4gICAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgICAgIGFCID0gY3VycmVudFQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gU1VCRElWSVNJT05fUFJFQ0lTSU9OICYmICsraSA8IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TKTtcblxuICAgICAgcmV0dXJuIGN1cnJlbnRUO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBORVdUT05fSVRFUkFUSU9OUzsgKytpKSB7XG4gICAgICAgIHZhciBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkgcmV0dXJuIGFHdWVzc1Q7XG4gICAgICAgIHZhciBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgIH1cbiAgICAvKipcbiAgICAgICAqIHBvaW50cyBpcyBhbiBhcnJheSBvZiBbIG1YMSwgbVkxLCBtWDIsIG1ZMiBdXG4gICAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gQmV6aWVyRWFzaW5nKHBvaW50cykge1xuICAgICAgdGhpcy5fcCA9IHBvaW50cztcbiAgICAgIHRoaXMuX21TYW1wbGVWYWx1ZXMgPSBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPyBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpIDogbmV3IEFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xuICAgICAgdGhpcy5fcHJlY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZ2V0ID0gdGhpcy5nZXQuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBCZXppZXJFYXNpbmcucHJvdG90eXBlID0ge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoeCkge1xuICAgICAgICB2YXIgbVgxID0gdGhpcy5fcFswXSxcbiAgICAgICAgICAgIG1ZMSA9IHRoaXMuX3BbMV0sXG4gICAgICAgICAgICBtWDIgPSB0aGlzLl9wWzJdLFxuICAgICAgICAgICAgbVkyID0gdGhpcy5fcFszXTtcbiAgICAgICAgaWYgKCF0aGlzLl9wcmVjb21wdXRlZCkgdGhpcy5fcHJlY29tcHV0ZSgpO1xuICAgICAgICBpZiAobVgxID09PSBtWTEgJiYgbVgyID09PSBtWTIpIHJldHVybiB4OyAvLyBsaW5lYXJcbiAgICAgICAgLy8gQmVjYXVzZSBKYXZhU2NyaXB0IG51bWJlciBhcmUgaW1wcmVjaXNlLCB3ZSBzaG91bGQgZ3VhcmFudGVlIHRoZSBleHRyZW1lcyBhcmUgcmlnaHQuXG5cbiAgICAgICAgaWYgKHggPT09IDApIHJldHVybiAwO1xuICAgICAgICBpZiAoeCA9PT0gMSkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiBjYWxjQmV6aWVyKHRoaXMuX2dldFRGb3JYKHgpLCBtWTEsIG1ZMik7XG4gICAgICB9LFxuICAgICAgLy8gUHJpdmF0ZSBwYXJ0XG4gICAgICBfcHJlY29tcHV0ZTogZnVuY3Rpb24gX3ByZWNvbXB1dGUoKSB7XG4gICAgICAgIHZhciBtWDEgPSB0aGlzLl9wWzBdLFxuICAgICAgICAgICAgbVkxID0gdGhpcy5fcFsxXSxcbiAgICAgICAgICAgIG1YMiA9IHRoaXMuX3BbMl0sXG4gICAgICAgICAgICBtWTIgPSB0aGlzLl9wWzNdO1xuICAgICAgICB0aGlzLl9wcmVjb21wdXRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7XG4gICAgICAgICAgdGhpcy5fY2FsY1NhbXBsZVZhbHVlcygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX2NhbGNTYW1wbGVWYWx1ZXM6IGZ1bmN0aW9uIF9jYWxjU2FtcGxlVmFsdWVzKCkge1xuICAgICAgICB2YXIgbVgxID0gdGhpcy5fcFswXSxcbiAgICAgICAgICAgIG1YMiA9IHRoaXMuX3BbMl07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICAgICAgICB0aGlzLl9tU2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICAgICAqIGdldFRGb3JYIGNob3NlIHRoZSBmYXN0ZXN0IGhldXJpc3RpYyB0byBkZXRlcm1pbmUgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgcHJlY2lzZWx5IGZyb20gYSBnaXZlbiBYIHByb2plY3Rpb24uXG4gICAgICAgICAgICovXG4gICAgICBfZ2V0VEZvclg6IGZ1bmN0aW9uIF9nZXRURm9yWChhWCkge1xuICAgICAgICB2YXIgbVgxID0gdGhpcy5fcFswXSxcbiAgICAgICAgICAgIG1YMiA9IHRoaXMuX3BbMl0sXG4gICAgICAgICAgICBtU2FtcGxlVmFsdWVzID0gdGhpcy5fbVNhbXBsZVZhbHVlcztcbiAgICAgICAgdmFyIGludGVydmFsU3RhcnQgPSAwLjA7XG4gICAgICAgIHZhciBjdXJyZW50U2FtcGxlID0gMTtcbiAgICAgICAgdmFyIGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcblxuICAgICAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBtU2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdIDw9IGFYOyArK2N1cnJlbnRTYW1wbGUpIHtcbiAgICAgICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC0tY3VycmVudFNhbXBsZTsgLy8gSW50ZXJwb2xhdGUgdG8gcHJvdmlkZSBhbiBpbml0aWFsIGd1ZXNzIGZvciB0XG5cbiAgICAgICAgdmFyIGRpc3QgPSAoYVggLSBtU2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSAvIChtU2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIG1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgICAgICB2YXIgZ3Vlc3NGb3JUID0gaW50ZXJ2YWxTdGFydCArIGRpc3QgKiBrU2FtcGxlU3RlcFNpemU7XG4gICAgICAgIHZhciBpbml0aWFsU2xvcGUgPSBnZXRTbG9wZShndWVzc0ZvclQsIG1YMSwgbVgyKTtcblxuICAgICAgICBpZiAoaW5pdGlhbFNsb3BlID49IE5FV1RPTl9NSU5fU0xPUEUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluaXRpYWxTbG9wZSA9PT0gMC4wKSB7XG4gICAgICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIHZhciBwb29saW5nID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIF9kb3VibGUoYXJyKSB7XG4gICAgICByZXR1cm4gYXJyLmNvbmNhdChjcmVhdGVTaXplZEFycmF5KGFyci5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgXCJkb3VibGVcIjogX2RvdWJsZVxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgcG9vbEZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbml0aWFsTGVuZ3RoLCBfY3JlYXRlLCBfcmVsZWFzZSkge1xuICAgICAgdmFyIF9sZW5ndGggPSAwO1xuICAgICAgdmFyIF9tYXhMZW5ndGggPSBpbml0aWFsTGVuZ3RoO1xuICAgICAgdmFyIHBvb2wgPSBjcmVhdGVTaXplZEFycmF5KF9tYXhMZW5ndGgpO1xuICAgICAgdmFyIG9iID0ge1xuICAgICAgICBuZXdFbGVtZW50OiBuZXdFbGVtZW50LFxuICAgICAgICByZWxlYXNlOiByZWxlYXNlXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBuZXdFbGVtZW50KCkge1xuICAgICAgICB2YXIgZWxlbWVudDtcblxuICAgICAgICBpZiAoX2xlbmd0aCkge1xuICAgICAgICAgIF9sZW5ndGggLT0gMTtcbiAgICAgICAgICBlbGVtZW50ID0gcG9vbFtfbGVuZ3RoXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50ID0gX2NyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbGVhc2UoZWxlbWVudCkge1xuICAgICAgICBpZiAoX2xlbmd0aCA9PT0gX21heExlbmd0aCkge1xuICAgICAgICAgIHBvb2wgPSBwb29saW5nW1wiZG91YmxlXCJdKHBvb2wpO1xuICAgICAgICAgIF9tYXhMZW5ndGggKj0gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfcmVsZWFzZSkge1xuICAgICAgICAgIF9yZWxlYXNlKGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9vbFtfbGVuZ3RoXSA9IGVsZW1lbnQ7XG4gICAgICAgIF9sZW5ndGggKz0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgYmV6aWVyTGVuZ3RoUG9vbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhZGRlZExlbmd0aDogMCxcbiAgICAgICAgcGVyY2VudHM6IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBnZXREZWZhdWx0Q3VydmVTZWdtZW50cygpKSxcbiAgICAgICAgbGVuZ3RoczogY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBwb29sRmFjdG9yeSg4LCBjcmVhdGUpO1xuICB9KCk7XG5cbiAgdmFyIHNlZ21lbnRzTGVuZ3RoUG9vbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZW5ndGhzOiBbXSxcbiAgICAgICAgdG90YWxMZW5ndGg6IDBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsZWFzZShlbGVtZW50KSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBlbGVtZW50Lmxlbmd0aHMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYmV6aWVyTGVuZ3RoUG9vbC5yZWxlYXNlKGVsZW1lbnQubGVuZ3Roc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQubGVuZ3Rocy5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwb29sRmFjdG9yeSg4LCBjcmVhdGUsIHJlbGVhc2UpO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gYmV6RnVuY3Rpb24oKSB7XG4gICAgdmFyIG1hdGggPSBNYXRoO1xuXG4gICAgZnVuY3Rpb24gcG9pbnRPbkxpbmUyRCh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gICAgICB2YXIgZGV0MSA9IHgxICogeTIgKyB5MSAqIHgzICsgeDIgKiB5MyAtIHgzICogeTIgLSB5MyAqIHgxIC0geDIgKiB5MTtcbiAgICAgIHJldHVybiBkZXQxID4gLTAuMDAxICYmIGRldDEgPCAwLjAwMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludE9uTGluZTNEKHgxLCB5MSwgejEsIHgyLCB5MiwgejIsIHgzLCB5MywgejMpIHtcbiAgICAgIGlmICh6MSA9PT0gMCAmJiB6MiA9PT0gMCAmJiB6MyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcG9pbnRPbkxpbmUyRCh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpc3QxID0gbWF0aC5zcXJ0KG1hdGgucG93KHgyIC0geDEsIDIpICsgbWF0aC5wb3coeTIgLSB5MSwgMikgKyBtYXRoLnBvdyh6MiAtIHoxLCAyKSk7XG4gICAgICB2YXIgZGlzdDIgPSBtYXRoLnNxcnQobWF0aC5wb3coeDMgLSB4MSwgMikgKyBtYXRoLnBvdyh5MyAtIHkxLCAyKSArIG1hdGgucG93KHozIC0gejEsIDIpKTtcbiAgICAgIHZhciBkaXN0MyA9IG1hdGguc3FydChtYXRoLnBvdyh4MyAtIHgyLCAyKSArIG1hdGgucG93KHkzIC0geTIsIDIpICsgbWF0aC5wb3coejMgLSB6MiwgMikpO1xuICAgICAgdmFyIGRpZmZEaXN0O1xuXG4gICAgICBpZiAoZGlzdDEgPiBkaXN0Mikge1xuICAgICAgICBpZiAoZGlzdDEgPiBkaXN0Mykge1xuICAgICAgICAgIGRpZmZEaXN0ID0gZGlzdDEgLSBkaXN0MiAtIGRpc3QzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpZmZEaXN0ID0gZGlzdDMgLSBkaXN0MiAtIGRpc3QxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRpc3QzID4gZGlzdDIpIHtcbiAgICAgICAgZGlmZkRpc3QgPSBkaXN0MyAtIGRpc3QyIC0gZGlzdDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaWZmRGlzdCA9IGRpc3QyIC0gZGlzdDEgLSBkaXN0MztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRpZmZEaXN0ID4gLTAuMDAwMSAmJiBkaWZmRGlzdCA8IDAuMDAwMTtcbiAgICB9XG5cbiAgICB2YXIgZ2V0QmV6aWVyTGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzLCBwdDQpIHtcbiAgICAgICAgdmFyIGN1cnZlU2VnbWVudHMgPSBnZXREZWZhdWx0Q3VydmVTZWdtZW50cygpO1xuICAgICAgICB2YXIgaztcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW47XG4gICAgICAgIHZhciBwdENvb3JkO1xuICAgICAgICB2YXIgcGVyYztcbiAgICAgICAgdmFyIGFkZGVkTGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIHB0RGlzdGFuY2U7XG4gICAgICAgIHZhciBwb2ludCA9IFtdO1xuICAgICAgICB2YXIgbGFzdFBvaW50ID0gW107XG4gICAgICAgIHZhciBsZW5ndGhEYXRhID0gYmV6aWVyTGVuZ3RoUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICAgIGxlbiA9IHB0My5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChrID0gMDsgayA8IGN1cnZlU2VnbWVudHM7IGsgKz0gMSkge1xuICAgICAgICAgIHBlcmMgPSBrIC8gKGN1cnZlU2VnbWVudHMgLSAxKTtcbiAgICAgICAgICBwdERpc3RhbmNlID0gMDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcHRDb29yZCA9IGJtUG93KDEgLSBwZXJjLCAzKSAqIHB0MVtpXSArIDMgKiBibVBvdygxIC0gcGVyYywgMikgKiBwZXJjICogcHQzW2ldICsgMyAqICgxIC0gcGVyYykgKiBibVBvdyhwZXJjLCAyKSAqIHB0NFtpXSArIGJtUG93KHBlcmMsIDMpICogcHQyW2ldO1xuICAgICAgICAgICAgcG9pbnRbaV0gPSBwdENvb3JkO1xuXG4gICAgICAgICAgICBpZiAobGFzdFBvaW50W2ldICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHB0RGlzdGFuY2UgKz0gYm1Qb3cocG9pbnRbaV0gLSBsYXN0UG9pbnRbaV0sIDIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYXN0UG9pbnRbaV0gPSBwb2ludFtpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHREaXN0YW5jZSkge1xuICAgICAgICAgICAgcHREaXN0YW5jZSA9IGJtU3FydChwdERpc3RhbmNlKTtcbiAgICAgICAgICAgIGFkZGVkTGVuZ3RoICs9IHB0RGlzdGFuY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGVuZ3RoRGF0YS5wZXJjZW50c1trXSA9IHBlcmM7XG4gICAgICAgICAgbGVuZ3RoRGF0YS5sZW5ndGhzW2tdID0gYWRkZWRMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBsZW5ndGhEYXRhLmFkZGVkTGVuZ3RoID0gYWRkZWRMZW5ndGg7XG4gICAgICAgIHJldHVybiBsZW5ndGhEYXRhO1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICBmdW5jdGlvbiBnZXRTZWdtZW50c0xlbmd0aChzaGFwZURhdGEpIHtcbiAgICAgIHZhciBzZWdtZW50c0xlbmd0aCA9IHNlZ21lbnRzTGVuZ3RoUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICB2YXIgY2xvc2VkID0gc2hhcGVEYXRhLmM7XG4gICAgICB2YXIgcGF0aFYgPSBzaGFwZURhdGEudjtcbiAgICAgIHZhciBwYXRoTyA9IHNoYXBlRGF0YS5vO1xuICAgICAgdmFyIHBhdGhJID0gc2hhcGVEYXRhLmk7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZURhdGEuX2xlbmd0aDtcbiAgICAgIHZhciBsZW5ndGhzID0gc2VnbWVudHNMZW5ndGgubGVuZ3RocztcbiAgICAgIHZhciB0b3RhbExlbmd0aCA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW4gLSAxOyBpICs9IDEpIHtcbiAgICAgICAgbGVuZ3Roc1tpXSA9IGdldEJlemllckxlbmd0aChwYXRoVltpXSwgcGF0aFZbaSArIDFdLCBwYXRoT1tpXSwgcGF0aElbaSArIDFdKTtcbiAgICAgICAgdG90YWxMZW5ndGggKz0gbGVuZ3Roc1tpXS5hZGRlZExlbmd0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNsb3NlZCAmJiBsZW4pIHtcbiAgICAgICAgbGVuZ3Roc1tpXSA9IGdldEJlemllckxlbmd0aChwYXRoVltpXSwgcGF0aFZbMF0sIHBhdGhPW2ldLCBwYXRoSVswXSk7XG4gICAgICAgIHRvdGFsTGVuZ3RoICs9IGxlbmd0aHNbaV0uYWRkZWRMZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnRzTGVuZ3RoLnRvdGFsTGVuZ3RoID0gdG90YWxMZW5ndGg7XG4gICAgICByZXR1cm4gc2VnbWVudHNMZW5ndGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gQmV6aWVyRGF0YShsZW5ndGgpIHtcbiAgICAgIHRoaXMuc2VnbWVudExlbmd0aCA9IDA7XG4gICAgICB0aGlzLnBvaW50cyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFBvaW50RGF0YShwYXJ0aWFsLCBwb2ludCkge1xuICAgICAgdGhpcy5wYXJ0aWFsTGVuZ3RoID0gcGFydGlhbDtcbiAgICAgIHRoaXMucG9pbnQgPSBwb2ludDtcbiAgICB9XG5cbiAgICB2YXIgYnVpbGRCZXppZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlZERhdGEgPSB7fTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAocHQxLCBwdDIsIHB0MywgcHQ0KSB7XG4gICAgICAgIHZhciBiZXppZXJOYW1lID0gKHB0MVswXSArICdfJyArIHB0MVsxXSArICdfJyArIHB0MlswXSArICdfJyArIHB0MlsxXSArICdfJyArIHB0M1swXSArICdfJyArIHB0M1sxXSArICdfJyArIHB0NFswXSArICdfJyArIHB0NFsxXSkucmVwbGFjZSgvXFwuL2csICdwJyk7XG5cbiAgICAgICAgaWYgKCFzdG9yZWREYXRhW2Jlemllck5hbWVdKSB7XG4gICAgICAgICAgdmFyIGN1cnZlU2VnbWVudHMgPSBnZXREZWZhdWx0Q3VydmVTZWdtZW50cygpO1xuICAgICAgICAgIHZhciBrO1xuICAgICAgICAgIHZhciBpO1xuICAgICAgICAgIHZhciBsZW47XG4gICAgICAgICAgdmFyIHB0Q29vcmQ7XG4gICAgICAgICAgdmFyIHBlcmM7XG4gICAgICAgICAgdmFyIGFkZGVkTGVuZ3RoID0gMDtcbiAgICAgICAgICB2YXIgcHREaXN0YW5jZTtcbiAgICAgICAgICB2YXIgcG9pbnQ7XG4gICAgICAgICAgdmFyIGxhc3RQb2ludCA9IG51bGw7XG5cbiAgICAgICAgICBpZiAocHQxLmxlbmd0aCA9PT0gMiAmJiAocHQxWzBdICE9PSBwdDJbMF0gfHwgcHQxWzFdICE9PSBwdDJbMV0pICYmIHBvaW50T25MaW5lMkQocHQxWzBdLCBwdDFbMV0sIHB0MlswXSwgcHQyWzFdLCBwdDFbMF0gKyBwdDNbMF0sIHB0MVsxXSArIHB0M1sxXSkgJiYgcG9pbnRPbkxpbmUyRChwdDFbMF0sIHB0MVsxXSwgcHQyWzBdLCBwdDJbMV0sIHB0MlswXSArIHB0NFswXSwgcHQyWzFdICsgcHQ0WzFdKSkge1xuICAgICAgICAgICAgY3VydmVTZWdtZW50cyA9IDI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGJlemllckRhdGEgPSBuZXcgQmV6aWVyRGF0YShjdXJ2ZVNlZ21lbnRzKTtcbiAgICAgICAgICBsZW4gPSBwdDMubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChrID0gMDsgayA8IGN1cnZlU2VnbWVudHM7IGsgKz0gMSkge1xuICAgICAgICAgICAgcG9pbnQgPSBjcmVhdGVTaXplZEFycmF5KGxlbik7XG4gICAgICAgICAgICBwZXJjID0gayAvIChjdXJ2ZVNlZ21lbnRzIC0gMSk7XG4gICAgICAgICAgICBwdERpc3RhbmNlID0gMDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgIHB0Q29vcmQgPSBibVBvdygxIC0gcGVyYywgMykgKiBwdDFbaV0gKyAzICogYm1Qb3coMSAtIHBlcmMsIDIpICogcGVyYyAqIChwdDFbaV0gKyBwdDNbaV0pICsgMyAqICgxIC0gcGVyYykgKiBibVBvdyhwZXJjLCAyKSAqIChwdDJbaV0gKyBwdDRbaV0pICsgYm1Qb3cocGVyYywgMykgKiBwdDJbaV07XG4gICAgICAgICAgICAgIHBvaW50W2ldID0gcHRDb29yZDtcblxuICAgICAgICAgICAgICBpZiAobGFzdFBvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcHREaXN0YW5jZSArPSBibVBvdyhwb2ludFtpXSAtIGxhc3RQb2ludFtpXSwgMik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHREaXN0YW5jZSA9IGJtU3FydChwdERpc3RhbmNlKTtcbiAgICAgICAgICAgIGFkZGVkTGVuZ3RoICs9IHB0RGlzdGFuY2U7XG4gICAgICAgICAgICBiZXppZXJEYXRhLnBvaW50c1trXSA9IG5ldyBQb2ludERhdGEocHREaXN0YW5jZSwgcG9pbnQpO1xuICAgICAgICAgICAgbGFzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoID0gYWRkZWRMZW5ndGg7XG4gICAgICAgICAgc3RvcmVkRGF0YVtiZXppZXJOYW1lXSA9IGJlemllckRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RvcmVkRGF0YVtiZXppZXJOYW1lXTtcbiAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgZnVuY3Rpb24gZ2V0RGlzdGFuY2VQZXJjKHBlcmMsIGJlemllckRhdGEpIHtcbiAgICAgIHZhciBwZXJjZW50cyA9IGJlemllckRhdGEucGVyY2VudHM7XG4gICAgICB2YXIgbGVuZ3RocyA9IGJlemllckRhdGEubGVuZ3RocztcbiAgICAgIHZhciBsZW4gPSBwZXJjZW50cy5sZW5ndGg7XG4gICAgICB2YXIgaW5pdFBvcyA9IGJtRmxvb3IoKGxlbiAtIDEpICogcGVyYyk7XG4gICAgICB2YXIgbGVuZ3RoUG9zID0gcGVyYyAqIGJlemllckRhdGEuYWRkZWRMZW5ndGg7XG4gICAgICB2YXIgbFBlcmMgPSAwO1xuXG4gICAgICBpZiAoaW5pdFBvcyA9PT0gbGVuIC0gMSB8fCBpbml0UG9zID09PSAwIHx8IGxlbmd0aFBvcyA9PT0gbGVuZ3Roc1tpbml0UG9zXSkge1xuICAgICAgICByZXR1cm4gcGVyY2VudHNbaW5pdFBvc107XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXIgPSBsZW5ndGhzW2luaXRQb3NdID4gbGVuZ3RoUG9zID8gLTEgOiAxO1xuICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuXG4gICAgICB3aGlsZSAoZmxhZykge1xuICAgICAgICBpZiAobGVuZ3Roc1tpbml0UG9zXSA8PSBsZW5ndGhQb3MgJiYgbGVuZ3Roc1tpbml0UG9zICsgMV0gPiBsZW5ndGhQb3MpIHtcbiAgICAgICAgICBsUGVyYyA9IChsZW5ndGhQb3MgLSBsZW5ndGhzW2luaXRQb3NdKSAvIChsZW5ndGhzW2luaXRQb3MgKyAxXSAtIGxlbmd0aHNbaW5pdFBvc10pO1xuICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbml0UG9zICs9IGRpcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbml0UG9zIDwgMCB8fCBpbml0UG9zID49IGxlbiAtIDEpIHtcbiAgICAgICAgICAvLyBGSVggZm9yIFR5cGVkQXJyYXlzIHRoYXQgZG9uJ3Qgc3RvcmUgZmxvYXRpbmcgcG9pbnQgdmFsdWVzIHdpdGggZW5vdWdoIGFjY3VyYWN5XG4gICAgICAgICAgaWYgKGluaXRQb3MgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBwZXJjZW50c1tpbml0UG9zXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBlcmNlbnRzW2luaXRQb3NdICsgKHBlcmNlbnRzW2luaXRQb3MgKyAxXSAtIHBlcmNlbnRzW2luaXRQb3NdKSAqIGxQZXJjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBvaW50SW5TZWdtZW50KHB0MSwgcHQyLCBwdDMsIHB0NCwgcGVyY2VudCwgYmV6aWVyRGF0YSkge1xuICAgICAgdmFyIHQxID0gZ2V0RGlzdGFuY2VQZXJjKHBlcmNlbnQsIGJlemllckRhdGEpO1xuICAgICAgdmFyIHUxID0gMSAtIHQxO1xuICAgICAgdmFyIHB0WCA9IG1hdGgucm91bmQoKHUxICogdTEgKiB1MSAqIHB0MVswXSArICh0MSAqIHUxICogdTEgKyB1MSAqIHQxICogdTEgKyB1MSAqIHUxICogdDEpICogcHQzWzBdICsgKHQxICogdDEgKiB1MSArIHUxICogdDEgKiB0MSArIHQxICogdTEgKiB0MSkgKiBwdDRbMF0gKyB0MSAqIHQxICogdDEgKiBwdDJbMF0pICogMTAwMCkgLyAxMDAwO1xuICAgICAgdmFyIHB0WSA9IG1hdGgucm91bmQoKHUxICogdTEgKiB1MSAqIHB0MVsxXSArICh0MSAqIHUxICogdTEgKyB1MSAqIHQxICogdTEgKyB1MSAqIHUxICogdDEpICogcHQzWzFdICsgKHQxICogdDEgKiB1MSArIHUxICogdDEgKiB0MSArIHQxICogdTEgKiB0MSkgKiBwdDRbMV0gKyB0MSAqIHQxICogdDEgKiBwdDJbMV0pICogMTAwMCkgLyAxMDAwO1xuICAgICAgcmV0dXJuIFtwdFgsIHB0WV07XG4gICAgfVxuXG4gICAgdmFyIGJlemllclNlZ21lbnRQb2ludHMgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgOCk7XG5cbiAgICBmdW5jdGlvbiBnZXROZXdTZWdtZW50KHB0MSwgcHQyLCBwdDMsIHB0NCwgc3RhcnRQZXJjLCBlbmRQZXJjLCBiZXppZXJEYXRhKSB7XG4gICAgICBpZiAoc3RhcnRQZXJjIDwgMCkge1xuICAgICAgICBzdGFydFBlcmMgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzdGFydFBlcmMgPiAxKSB7XG4gICAgICAgIHN0YXJ0UGVyYyA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciB0MCA9IGdldERpc3RhbmNlUGVyYyhzdGFydFBlcmMsIGJlemllckRhdGEpO1xuICAgICAgZW5kUGVyYyA9IGVuZFBlcmMgPiAxID8gMSA6IGVuZFBlcmM7XG4gICAgICB2YXIgdDEgPSBnZXREaXN0YW5jZVBlcmMoZW5kUGVyYywgYmV6aWVyRGF0YSk7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBwdDEubGVuZ3RoO1xuICAgICAgdmFyIHUwID0gMSAtIHQwO1xuICAgICAgdmFyIHUxID0gMSAtIHQxO1xuICAgICAgdmFyIHUwdTB1MCA9IHUwICogdTAgKiB1MDtcbiAgICAgIHZhciB0MHUwdTBfMyA9IHQwICogdTAgKiB1MCAqIDM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MHQwdTBfMyA9IHQwICogdDAgKiB1MCAqIDM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MHQwdDAgPSB0MCAqIHQwICogdDA7IC8vXG5cbiAgICAgIHZhciB1MHUwdTEgPSB1MCAqIHUwICogdTE7XG4gICAgICB2YXIgdDB1MHUxXzMgPSB0MCAqIHUwICogdTEgKyB1MCAqIHQwICogdTEgKyB1MCAqIHUwICogdDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MHQwdTFfMyA9IHQwICogdDAgKiB1MSArIHUwICogdDAgKiB0MSArIHQwICogdTAgKiB0MTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDB0MSA9IHQwICogdDAgKiB0MTsgLy9cblxuICAgICAgdmFyIHUwdTF1MSA9IHUwICogdTEgKiB1MTtcbiAgICAgIHZhciB0MHUxdTFfMyA9IHQwICogdTEgKiB1MSArIHUwICogdDEgKiB1MSArIHUwICogdTEgKiB0MTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDF1MV8zID0gdDAgKiB0MSAqIHUxICsgdTAgKiB0MSAqIHQxICsgdDAgKiB1MSAqIHQxOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDB0MXQxID0gdDAgKiB0MSAqIHQxOyAvL1xuXG4gICAgICB2YXIgdTF1MXUxID0gdTEgKiB1MSAqIHUxO1xuICAgICAgdmFyIHQxdTF1MV8zID0gdDEgKiB1MSAqIHUxICsgdTEgKiB0MSAqIHUxICsgdTEgKiB1MSAqIHQxOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDF0MXUxXzMgPSB0MSAqIHQxICogdTEgKyB1MSAqIHQxICogdDEgKyB0MSAqIHUxICogdDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MXQxdDEgPSB0MSAqIHQxICogdDE7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBiZXppZXJTZWdtZW50UG9pbnRzW2kgKiA0XSA9IG1hdGgucm91bmQoKHUwdTB1MCAqIHB0MVtpXSArIHQwdTB1MF8zICogcHQzW2ldICsgdDB0MHUwXzMgKiBwdDRbaV0gKyB0MHQwdDAgKiBwdDJbaV0pICogMTAwMCkgLyAxMDAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICAgIGJlemllclNlZ21lbnRQb2ludHNbaSAqIDQgKyAxXSA9IG1hdGgucm91bmQoKHUwdTB1MSAqIHB0MVtpXSArIHQwdTB1MV8zICogcHQzW2ldICsgdDB0MHUxXzMgKiBwdDRbaV0gKyB0MHQwdDEgKiBwdDJbaV0pICogMTAwMCkgLyAxMDAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICAgIGJlemllclNlZ21lbnRQb2ludHNbaSAqIDQgKyAyXSA9IG1hdGgucm91bmQoKHUwdTF1MSAqIHB0MVtpXSArIHQwdTF1MV8zICogcHQzW2ldICsgdDB0MXUxXzMgKiBwdDRbaV0gKyB0MHQxdDEgKiBwdDJbaV0pICogMTAwMCkgLyAxMDAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICAgIGJlemllclNlZ21lbnRQb2ludHNbaSAqIDQgKyAzXSA9IG1hdGgucm91bmQoKHUxdTF1MSAqIHB0MVtpXSArIHQxdTF1MV8zICogcHQzW2ldICsgdDF0MXUxXzMgKiBwdDRbaV0gKyB0MXQxdDEgKiBwdDJbaV0pICogMTAwMCkgLyAxMDAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmV6aWVyU2VnbWVudFBvaW50cztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2V0U2VnbWVudHNMZW5ndGg6IGdldFNlZ21lbnRzTGVuZ3RoLFxuICAgICAgZ2V0TmV3U2VnbWVudDogZ2V0TmV3U2VnbWVudCxcbiAgICAgIGdldFBvaW50SW5TZWdtZW50OiBnZXRQb2ludEluU2VnbWVudCxcbiAgICAgIGJ1aWxkQmV6aWVyRGF0YTogYnVpbGRCZXppZXJEYXRhLFxuICAgICAgcG9pbnRPbkxpbmUyRDogcG9pbnRPbkxpbmUyRCxcbiAgICAgIHBvaW50T25MaW5lM0Q6IHBvaW50T25MaW5lM0RcbiAgICB9O1xuICB9XG5cbiAgdmFyIGJleiA9IGJlekZ1bmN0aW9uKCk7XG5cbiAgdmFyIGluaXRGcmFtZSA9IGluaXRpYWxEZWZhdWx0RnJhbWU7XG4gIHZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVWYWx1ZShmcmFtZU51bSwgY2FjaGluZykge1xuICAgIHZhciBvZmZzZXRUaW1lID0gdGhpcy5vZmZzZXRUaW1lO1xuICAgIHZhciBuZXdWYWx1ZTtcblxuICAgIGlmICh0aGlzLnByb3BUeXBlID09PSAnbXVsdGlkaW1lbnNpb25hbCcpIHtcbiAgICAgIG5ld1ZhbHVlID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIHRoaXMucHYubGVuZ3RoKTtcbiAgICB9XG5cbiAgICB2YXIgaXRlcmF0aW9uSW5kZXggPSBjYWNoaW5nLmxhc3RJbmRleDtcbiAgICB2YXIgaSA9IGl0ZXJhdGlvbkluZGV4O1xuICAgIHZhciBsZW4gPSB0aGlzLmtleWZyYW1lcy5sZW5ndGggLSAxO1xuICAgIHZhciBmbGFnID0gdHJ1ZTtcbiAgICB2YXIga2V5RGF0YTtcbiAgICB2YXIgbmV4dEtleURhdGE7XG4gICAgdmFyIGtleWZyYW1lTWV0YWRhdGE7XG5cbiAgICB3aGlsZSAoZmxhZykge1xuICAgICAga2V5RGF0YSA9IHRoaXMua2V5ZnJhbWVzW2ldO1xuICAgICAgbmV4dEtleURhdGEgPSB0aGlzLmtleWZyYW1lc1tpICsgMV07XG5cbiAgICAgIGlmIChpID09PSBsZW4gLSAxICYmIGZyYW1lTnVtID49IG5leHRLZXlEYXRhLnQgLSBvZmZzZXRUaW1lKSB7XG4gICAgICAgIGlmIChrZXlEYXRhLmgpIHtcbiAgICAgICAgICBrZXlEYXRhID0gbmV4dEtleURhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBpdGVyYXRpb25JbmRleCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV4dEtleURhdGEudCAtIG9mZnNldFRpbWUgPiBmcmFtZU51bSkge1xuICAgICAgICBpdGVyYXRpb25JbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA8IGxlbiAtIDEpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0aW9uSW5kZXggPSAwO1xuICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAga2V5ZnJhbWVNZXRhZGF0YSA9IHRoaXMua2V5ZnJhbWVzTWV0YWRhdGFbaV0gfHwge307XG4gICAgdmFyIGs7XG4gICAgdmFyIGtMZW47XG4gICAgdmFyIHBlcmM7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGo7XG4gICAgdmFyIGZuYztcbiAgICB2YXIgbmV4dEtleVRpbWUgPSBuZXh0S2V5RGF0YS50IC0gb2Zmc2V0VGltZTtcbiAgICB2YXIga2V5VGltZSA9IGtleURhdGEudCAtIG9mZnNldFRpbWU7XG4gICAgdmFyIGVuZFZhbHVlO1xuXG4gICAgaWYgKGtleURhdGEudG8pIHtcbiAgICAgIGlmICgha2V5ZnJhbWVNZXRhZGF0YS5iZXppZXJEYXRhKSB7XG4gICAgICAgIGtleWZyYW1lTWV0YWRhdGEuYmV6aWVyRGF0YSA9IGJlei5idWlsZEJlemllckRhdGEoa2V5RGF0YS5zLCBuZXh0S2V5RGF0YS5zIHx8IGtleURhdGEuZSwga2V5RGF0YS50bywga2V5RGF0YS50aSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBiZXppZXJEYXRhID0ga2V5ZnJhbWVNZXRhZGF0YS5iZXppZXJEYXRhO1xuXG4gICAgICBpZiAoZnJhbWVOdW0gPj0gbmV4dEtleVRpbWUgfHwgZnJhbWVOdW0gPCBrZXlUaW1lKSB7XG4gICAgICAgIHZhciBpbmQgPSBmcmFtZU51bSA+PSBuZXh0S2V5VGltZSA/IGJlemllckRhdGEucG9pbnRzLmxlbmd0aCAtIDEgOiAwO1xuICAgICAgICBrTGVuID0gYmV6aWVyRGF0YS5wb2ludHNbaW5kXS5wb2ludC5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgIG5ld1ZhbHVlW2tdID0gYmV6aWVyRGF0YS5wb2ludHNbaW5kXS5wb2ludFtrXTtcbiAgICAgICAgfSAvLyBjYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleCA9IC0xO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoa2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3QpIHtcbiAgICAgICAgICBmbmMgPSBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbmMgPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyhrZXlEYXRhLm8ueCwga2V5RGF0YS5vLnksIGtleURhdGEuaS54LCBrZXlEYXRhLmkueSwga2V5RGF0YS5uKS5nZXQ7XG4gICAgICAgICAga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3QgPSBmbmM7XG4gICAgICAgIH1cblxuICAgICAgICBwZXJjID0gZm5jKChmcmFtZU51bSAtIGtleVRpbWUpIC8gKG5leHRLZXlUaW1lIC0ga2V5VGltZSkpO1xuICAgICAgICB2YXIgZGlzdGFuY2VJbkxpbmUgPSBiZXppZXJEYXRhLnNlZ21lbnRMZW5ndGggKiBwZXJjO1xuICAgICAgICB2YXIgc2VnbWVudFBlcmM7XG4gICAgICAgIHZhciBhZGRlZExlbmd0aCA9IGNhY2hpbmcubGFzdEZyYW1lIDwgZnJhbWVOdW0gJiYgY2FjaGluZy5fbGFzdEtleWZyYW1lSW5kZXggPT09IGkgPyBjYWNoaW5nLl9sYXN0QWRkZWRMZW5ndGggOiAwO1xuICAgICAgICBqID0gY2FjaGluZy5sYXN0RnJhbWUgPCBmcmFtZU51bSAmJiBjYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleCA9PT0gaSA/IGNhY2hpbmcuX2xhc3RQb2ludCA6IDA7XG4gICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgICBqTGVuID0gYmV6aWVyRGF0YS5wb2ludHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgICAgYWRkZWRMZW5ndGggKz0gYmV6aWVyRGF0YS5wb2ludHNbal0ucGFydGlhbExlbmd0aDtcblxuICAgICAgICAgIGlmIChkaXN0YW5jZUluTGluZSA9PT0gMCB8fCBwZXJjID09PSAwIHx8IGogPT09IGJlemllckRhdGEucG9pbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGtMZW4gPSBiZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludC5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICAgICAgbmV3VmFsdWVba10gPSBiZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludFtrXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZUluTGluZSA+PSBhZGRlZExlbmd0aCAmJiBkaXN0YW5jZUluTGluZSA8IGFkZGVkTGVuZ3RoICsgYmV6aWVyRGF0YS5wb2ludHNbaiArIDFdLnBhcnRpYWxMZW5ndGgpIHtcbiAgICAgICAgICAgIHNlZ21lbnRQZXJjID0gKGRpc3RhbmNlSW5MaW5lIC0gYWRkZWRMZW5ndGgpIC8gYmV6aWVyRGF0YS5wb2ludHNbaiArIDFdLnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgICBrTGVuID0gYmV6aWVyRGF0YS5wb2ludHNbal0ucG9pbnQubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgICAgIG5ld1ZhbHVlW2tdID0gYmV6aWVyRGF0YS5wb2ludHNbal0ucG9pbnRba10gKyAoYmV6aWVyRGF0YS5wb2ludHNbaiArIDFdLnBvaW50W2tdIC0gYmV6aWVyRGF0YS5wb2ludHNbal0ucG9pbnRba10pICogc2VnbWVudFBlcmM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChqIDwgakxlbiAtIDEpIHtcbiAgICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNhY2hpbmcuX2xhc3RQb2ludCA9IGo7XG4gICAgICAgIGNhY2hpbmcuX2xhc3RBZGRlZExlbmd0aCA9IGFkZGVkTGVuZ3RoIC0gYmV6aWVyRGF0YS5wb2ludHNbal0ucGFydGlhbExlbmd0aDtcbiAgICAgICAgY2FjaGluZy5fbGFzdEtleWZyYW1lSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb3V0WDtcbiAgICAgIHZhciBvdXRZO1xuICAgICAgdmFyIGluWDtcbiAgICAgIHZhciBpblk7XG4gICAgICB2YXIga2V5VmFsdWU7XG4gICAgICBsZW4gPSBrZXlEYXRhLnMubGVuZ3RoO1xuICAgICAgZW5kVmFsdWUgPSBuZXh0S2V5RGF0YS5zIHx8IGtleURhdGEuZTtcblxuICAgICAgaWYgKHRoaXMuc2ggJiYga2V5RGF0YS5oICE9PSAxKSB7XG4gICAgICAgIGlmIChmcmFtZU51bSA+PSBuZXh0S2V5VGltZSkge1xuICAgICAgICAgIG5ld1ZhbHVlWzBdID0gZW5kVmFsdWVbMF07XG4gICAgICAgICAgbmV3VmFsdWVbMV0gPSBlbmRWYWx1ZVsxXTtcbiAgICAgICAgICBuZXdWYWx1ZVsyXSA9IGVuZFZhbHVlWzJdO1xuICAgICAgICB9IGVsc2UgaWYgKGZyYW1lTnVtIDw9IGtleVRpbWUpIHtcbiAgICAgICAgICBuZXdWYWx1ZVswXSA9IGtleURhdGEuc1swXTtcbiAgICAgICAgICBuZXdWYWx1ZVsxXSA9IGtleURhdGEuc1sxXTtcbiAgICAgICAgICBuZXdWYWx1ZVsyXSA9IGtleURhdGEuc1syXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcXVhdFN0YXJ0ID0gY3JlYXRlUXVhdGVybmlvbihrZXlEYXRhLnMpO1xuICAgICAgICAgIHZhciBxdWF0RW5kID0gY3JlYXRlUXVhdGVybmlvbihlbmRWYWx1ZSk7XG4gICAgICAgICAgdmFyIHRpbWUgPSAoZnJhbWVOdW0gLSBrZXlUaW1lKSAvIChuZXh0S2V5VGltZSAtIGtleVRpbWUpO1xuICAgICAgICAgIHF1YXRlcm5pb25Ub0V1bGVyKG5ld1ZhbHVlLCBzbGVycChxdWF0U3RhcnQsIHF1YXRFbmQsIHRpbWUpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGtleURhdGEuaCAhPT0gMSkge1xuICAgICAgICAgICAgaWYgKGZyYW1lTnVtID49IG5leHRLZXlUaW1lKSB7XG4gICAgICAgICAgICAgIHBlcmMgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmcmFtZU51bSA8IGtleVRpbWUpIHtcbiAgICAgICAgICAgICAgcGVyYyA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoa2V5RGF0YS5vLnguY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCkge1xuICAgICAgICAgICAgICAgICAga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3QgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWtleWZyYW1lTWV0YWRhdGEuX19mbmN0W2ldKSB7XG4gICAgICAgICAgICAgICAgICBvdXRYID0ga2V5RGF0YS5vLnhbaV0gPT09IHVuZGVmaW5lZCA/IGtleURhdGEuby54WzBdIDoga2V5RGF0YS5vLnhbaV07XG4gICAgICAgICAgICAgICAgICBvdXRZID0ga2V5RGF0YS5vLnlbaV0gPT09IHVuZGVmaW5lZCA/IGtleURhdGEuby55WzBdIDoga2V5RGF0YS5vLnlbaV07XG4gICAgICAgICAgICAgICAgICBpblggPSBrZXlEYXRhLmkueFtpXSA9PT0gdW5kZWZpbmVkID8ga2V5RGF0YS5pLnhbMF0gOiBrZXlEYXRhLmkueFtpXTtcbiAgICAgICAgICAgICAgICAgIGluWSA9IGtleURhdGEuaS55W2ldID09PSB1bmRlZmluZWQgPyBrZXlEYXRhLmkueVswXSA6IGtleURhdGEuaS55W2ldO1xuICAgICAgICAgICAgICAgICAgZm5jID0gQmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcob3V0WCwgb3V0WSwgaW5YLCBpblkpLmdldDtcbiAgICAgICAgICAgICAgICAgIGtleWZyYW1lTWV0YWRhdGEuX19mbmN0W2ldID0gZm5jO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmbmMgPSBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdFtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWtleWZyYW1lTWV0YWRhdGEuX19mbmN0KSB7XG4gICAgICAgICAgICAgICAgb3V0WCA9IGtleURhdGEuby54O1xuICAgICAgICAgICAgICAgIG91dFkgPSBrZXlEYXRhLm8ueTtcbiAgICAgICAgICAgICAgICBpblggPSBrZXlEYXRhLmkueDtcbiAgICAgICAgICAgICAgICBpblkgPSBrZXlEYXRhLmkueTtcbiAgICAgICAgICAgICAgICBmbmMgPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyhvdXRYLCBvdXRZLCBpblgsIGluWSkuZ2V0O1xuICAgICAgICAgICAgICAgIGtleURhdGEua2V5ZnJhbWVNZXRhZGF0YSA9IGZuYztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmbmMgPSBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHBlcmMgPSBmbmMoKGZyYW1lTnVtIC0ga2V5VGltZSkgLyAobmV4dEtleVRpbWUgLSBrZXlUaW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZW5kVmFsdWUgPSBuZXh0S2V5RGF0YS5zIHx8IGtleURhdGEuZTtcbiAgICAgICAgICBrZXlWYWx1ZSA9IGtleURhdGEuaCA9PT0gMSA/IGtleURhdGEuc1tpXSA6IGtleURhdGEuc1tpXSArIChlbmRWYWx1ZVtpXSAtIGtleURhdGEuc1tpXSkgKiBwZXJjO1xuXG4gICAgICAgICAgaWYgKHRoaXMucHJvcFR5cGUgPT09ICdtdWx0aWRpbWVuc2lvbmFsJykge1xuICAgICAgICAgICAgbmV3VmFsdWVbaV0gPSBrZXlWYWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBrZXlWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjYWNoaW5nLmxhc3RJbmRleCA9IGl0ZXJhdGlvbkluZGV4O1xuICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgfSAvLyBiYXNlZCBvbiBAVG9qaSdzIGh0dHBzOi8vZ2l0aHViLmNvbS90b2ppL2dsLW1hdHJpeC9cblxuXG4gIGZ1bmN0aW9uIHNsZXJwKGEsIGIsIHQpIHtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgdmFyIGF4ID0gYVswXTtcbiAgICB2YXIgYXkgPSBhWzFdO1xuICAgIHZhciBheiA9IGFbMl07XG4gICAgdmFyIGF3ID0gYVszXTtcbiAgICB2YXIgYnggPSBiWzBdO1xuICAgIHZhciBieSA9IGJbMV07XG4gICAgdmFyIGJ6ID0gYlsyXTtcbiAgICB2YXIgYncgPSBiWzNdO1xuICAgIHZhciBvbWVnYTtcbiAgICB2YXIgY29zb207XG4gICAgdmFyIHNpbm9tO1xuICAgIHZhciBzY2FsZTA7XG4gICAgdmFyIHNjYWxlMTtcbiAgICBjb3NvbSA9IGF4ICogYnggKyBheSAqIGJ5ICsgYXogKiBieiArIGF3ICogYnc7XG5cbiAgICBpZiAoY29zb20gPCAwLjApIHtcbiAgICAgIGNvc29tID0gLWNvc29tO1xuICAgICAgYnggPSAtYng7XG4gICAgICBieSA9IC1ieTtcbiAgICAgIGJ6ID0gLWJ6O1xuICAgICAgYncgPSAtYnc7XG4gICAgfVxuXG4gICAgaWYgKDEuMCAtIGNvc29tID4gMC4wMDAwMDEpIHtcbiAgICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICAgIHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgICAgc2NhbGUwID0gTWF0aC5zaW4oKDEuMCAtIHQpICogb21lZ2EpIC8gc2lub207XG4gICAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlMCA9IDEuMCAtIHQ7XG4gICAgICBzY2FsZTEgPSB0O1xuICAgIH1cblxuICAgIG91dFswXSA9IHNjYWxlMCAqIGF4ICsgc2NhbGUxICogYng7XG4gICAgb3V0WzFdID0gc2NhbGUwICogYXkgKyBzY2FsZTEgKiBieTtcbiAgICBvdXRbMl0gPSBzY2FsZTAgKiBheiArIHNjYWxlMSAqIGJ6O1xuICAgIG91dFszXSA9IHNjYWxlMCAqIGF3ICsgc2NhbGUxICogYnc7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YXRlcm5pb25Ub0V1bGVyKG91dCwgcXVhdCkge1xuICAgIHZhciBxeCA9IHF1YXRbMF07XG4gICAgdmFyIHF5ID0gcXVhdFsxXTtcbiAgICB2YXIgcXogPSBxdWF0WzJdO1xuICAgIHZhciBxdyA9IHF1YXRbM107XG4gICAgdmFyIGhlYWRpbmcgPSBNYXRoLmF0YW4yKDIgKiBxeSAqIHF3IC0gMiAqIHF4ICogcXosIDEgLSAyICogcXkgKiBxeSAtIDIgKiBxeiAqIHF6KTtcbiAgICB2YXIgYXR0aXR1ZGUgPSBNYXRoLmFzaW4oMiAqIHF4ICogcXkgKyAyICogcXogKiBxdyk7XG4gICAgdmFyIGJhbmsgPSBNYXRoLmF0YW4yKDIgKiBxeCAqIHF3IC0gMiAqIHF5ICogcXosIDEgLSAyICogcXggKiBxeCAtIDIgKiBxeiAqIHF6KTtcbiAgICBvdXRbMF0gPSBoZWFkaW5nIC8gZGVnVG9SYWRzO1xuICAgIG91dFsxXSA9IGF0dGl0dWRlIC8gZGVnVG9SYWRzO1xuICAgIG91dFsyXSA9IGJhbmsgLyBkZWdUb1JhZHM7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVRdWF0ZXJuaW9uKHZhbHVlcykge1xuICAgIHZhciBoZWFkaW5nID0gdmFsdWVzWzBdICogZGVnVG9SYWRzO1xuICAgIHZhciBhdHRpdHVkZSA9IHZhbHVlc1sxXSAqIGRlZ1RvUmFkcztcbiAgICB2YXIgYmFuayA9IHZhbHVlc1syXSAqIGRlZ1RvUmFkcztcbiAgICB2YXIgYzEgPSBNYXRoLmNvcyhoZWFkaW5nIC8gMik7XG4gICAgdmFyIGMyID0gTWF0aC5jb3MoYXR0aXR1ZGUgLyAyKTtcbiAgICB2YXIgYzMgPSBNYXRoLmNvcyhiYW5rIC8gMik7XG4gICAgdmFyIHMxID0gTWF0aC5zaW4oaGVhZGluZyAvIDIpO1xuICAgIHZhciBzMiA9IE1hdGguc2luKGF0dGl0dWRlIC8gMik7XG4gICAgdmFyIHMzID0gTWF0aC5zaW4oYmFuayAvIDIpO1xuICAgIHZhciB3ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuICAgIHZhciB4ID0gczEgKiBzMiAqIGMzICsgYzEgKiBjMiAqIHMzO1xuICAgIHZhciB5ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgIHZhciB6ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuICAgIHJldHVybiBbeCwgeSwgeiwgd107XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWx1ZUF0Q3VycmVudFRpbWUoKSB7XG4gICAgdmFyIGZyYW1lTnVtID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWUgLSB0aGlzLm9mZnNldFRpbWU7XG4gICAgdmFyIGluaXRUaW1lID0gdGhpcy5rZXlmcmFtZXNbMF0udCAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICB2YXIgZW5kVGltZSA9IHRoaXMua2V5ZnJhbWVzW3RoaXMua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLSB0aGlzLm9mZnNldFRpbWU7XG5cbiAgICBpZiAoIShmcmFtZU51bSA9PT0gdGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgfHwgdGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgIT09IGluaXRGcmFtZSAmJiAodGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgPj0gZW5kVGltZSAmJiBmcmFtZU51bSA+PSBlbmRUaW1lIHx8IHRoaXMuX2NhY2hpbmcubGFzdEZyYW1lIDwgaW5pdFRpbWUgJiYgZnJhbWVOdW0gPCBpbml0VGltZSkpKSB7XG4gICAgICBpZiAodGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgPj0gZnJhbWVOdW0pIHtcbiAgICAgICAgdGhpcy5fY2FjaGluZy5fbGFzdEtleWZyYW1lSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fY2FjaGluZy5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVuZGVyUmVzdWx0ID0gdGhpcy5pbnRlcnBvbGF0ZVZhbHVlKGZyYW1lTnVtLCB0aGlzLl9jYWNoaW5nKTtcbiAgICAgIHRoaXMucHYgPSByZW5kZXJSZXN1bHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgPSBmcmFtZU51bTtcbiAgICByZXR1cm4gdGhpcy5wdjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFZWYWx1ZSh2YWwpIHtcbiAgICB2YXIgbXVsdGlwbGllZFZhbHVlO1xuXG4gICAgaWYgKHRoaXMucHJvcFR5cGUgPT09ICd1bmlkaW1lbnNpb25hbCcpIHtcbiAgICAgIG11bHRpcGxpZWRWYWx1ZSA9IHZhbCAqIHRoaXMubXVsdDtcblxuICAgICAgaWYgKG1hdGhBYnModGhpcy52IC0gbXVsdGlwbGllZFZhbHVlKSA+IDAuMDAwMDEpIHtcbiAgICAgICAgdGhpcy52ID0gbXVsdGlwbGllZFZhbHVlO1xuICAgICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy52Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgbXVsdGlwbGllZFZhbHVlID0gdmFsW2ldICogdGhpcy5tdWx0O1xuXG4gICAgICAgIGlmIChtYXRoQWJzKHRoaXMudltpXSAtIG11bHRpcGxpZWRWYWx1ZSkgPiAwLjAwMDAxKSB7XG4gICAgICAgICAgdGhpcy52W2ldID0gbXVsdGlwbGllZFZhbHVlO1xuICAgICAgICAgIHRoaXMuX21kZiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZSgpIHtcbiAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkIHx8ICF0aGlzLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2NrKSB7XG4gICAgICB0aGlzLnNldFZWYWx1ZSh0aGlzLnB2KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmxvY2sgPSB0cnVlO1xuICAgIHRoaXMuX21kZiA9IHRoaXMuX2lzRmlyc3RGcmFtZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuICAgIHZhciBmaW5hbFZhbHVlID0gdGhpcy5rZiA/IHRoaXMucHYgOiB0aGlzLmRhdGEuaztcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZWZmZWN0c1NlcXVlbmNlW2ldKGZpbmFsVmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0VlZhbHVlKGZpbmFsVmFsdWUpO1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgIHRoaXMubG9jayA9IGZhbHNlO1xuICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFZmZlY3QoZWZmZWN0RnVuY3Rpb24pIHtcbiAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5wdXNoKGVmZmVjdEZ1bmN0aW9uKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gIH1cblxuICBmdW5jdGlvbiBWYWx1ZVByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcikge1xuICAgIHRoaXMucHJvcFR5cGUgPSAndW5pZGltZW5zaW9uYWwnO1xuICAgIHRoaXMubXVsdCA9IG11bHQgfHwgMTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMudiA9IG11bHQgPyBkYXRhLmsgKiBtdWx0IDogZGF0YS5rO1xuICAgIHRoaXMucHYgPSBkYXRhLms7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgdGhpcy5rID0gZmFsc2U7XG4gICAgdGhpcy5rZiA9IGZhbHNlO1xuICAgIHRoaXMudmVsID0gMDtcbiAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtdO1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgdGhpcy5zZXRWVmFsdWUgPSBzZXRWVmFsdWU7XG4gICAgdGhpcy5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBNdWx0aURpbWVuc2lvbmFsUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wcm9wVHlwZSA9ICdtdWx0aWRpbWVuc2lvbmFsJztcbiAgICB0aGlzLm11bHQgPSBtdWx0IHx8IDE7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICB0aGlzLmtmID0gZmFsc2U7XG4gICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGRhdGEuay5sZW5ndGg7XG4gICAgdGhpcy52ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgdGhpcy5wdiA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuICAgIHRoaXMudmVsID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMudltpXSA9IGRhdGEua1tpXSAqIHRoaXMubXVsdDtcbiAgICAgIHRoaXMucHZbaV0gPSBkYXRhLmtbaV07XG4gICAgfVxuXG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtdO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1xuICAgIHRoaXMuc2V0VlZhbHVlID0gc2V0VlZhbHVlO1xuICAgIHRoaXMuYWRkRWZmZWN0ID0gYWRkRWZmZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gS2V5ZnJhbWVkVmFsdWVQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpIHtcbiAgICB0aGlzLnByb3BUeXBlID0gJ3VuaWRpbWVuc2lvbmFsJztcbiAgICB0aGlzLmtleWZyYW1lcyA9IGRhdGEuaztcbiAgICB0aGlzLmtleWZyYW1lc01ldGFkYXRhID0gW107XG4gICAgdGhpcy5vZmZzZXRUaW1lID0gZWxlbS5kYXRhLnN0O1xuICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgIHRoaXMuX2NhY2hpbmcgPSB7XG4gICAgICBsYXN0RnJhbWU6IGluaXRGcmFtZSxcbiAgICAgIGxhc3RJbmRleDogMCxcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgX2xhc3RLZXlmcmFtZUluZGV4OiAtMVxuICAgIH07XG4gICAgdGhpcy5rID0gdHJ1ZTtcbiAgICB0aGlzLmtmID0gdHJ1ZTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMubXVsdCA9IG11bHQgfHwgMTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICB0aGlzLnYgPSBpbml0RnJhbWU7XG4gICAgdGhpcy5wdiA9IGluaXRGcmFtZTtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1xuICAgIHRoaXMuc2V0VlZhbHVlID0gc2V0VlZhbHVlO1xuICAgIHRoaXMuaW50ZXJwb2xhdGVWYWx1ZSA9IGludGVycG9sYXRlVmFsdWU7XG4gICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UgPSBbZ2V0VmFsdWVBdEN1cnJlbnRUaW1lLmJpbmQodGhpcyldO1xuICAgIHRoaXMuYWRkRWZmZWN0ID0gYWRkRWZmZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gS2V5ZnJhbWVkTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcikge1xuICAgIHRoaXMucHJvcFR5cGUgPSAnbXVsdGlkaW1lbnNpb25hbCc7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGRhdGEuay5sZW5ndGg7XG4gICAgdmFyIHM7XG4gICAgdmFyIGU7XG4gICAgdmFyIHRvO1xuICAgIHZhciB0aTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW4gLSAxOyBpICs9IDEpIHtcbiAgICAgIGlmIChkYXRhLmtbaV0udG8gJiYgZGF0YS5rW2ldLnMgJiYgZGF0YS5rW2kgKyAxXSAmJiBkYXRhLmtbaSArIDFdLnMpIHtcbiAgICAgICAgcyA9IGRhdGEua1tpXS5zO1xuICAgICAgICBlID0gZGF0YS5rW2kgKyAxXS5zO1xuICAgICAgICB0byA9IGRhdGEua1tpXS50bztcbiAgICAgICAgdGkgPSBkYXRhLmtbaV0udGk7XG5cbiAgICAgICAgaWYgKHMubGVuZ3RoID09PSAyICYmICEoc1swXSA9PT0gZVswXSAmJiBzWzFdID09PSBlWzFdKSAmJiBiZXoucG9pbnRPbkxpbmUyRChzWzBdLCBzWzFdLCBlWzBdLCBlWzFdLCBzWzBdICsgdG9bMF0sIHNbMV0gKyB0b1sxXSkgJiYgYmV6LnBvaW50T25MaW5lMkQoc1swXSwgc1sxXSwgZVswXSwgZVsxXSwgZVswXSArIHRpWzBdLCBlWzFdICsgdGlbMV0pIHx8IHMubGVuZ3RoID09PSAzICYmICEoc1swXSA9PT0gZVswXSAmJiBzWzFdID09PSBlWzFdICYmIHNbMl0gPT09IGVbMl0pICYmIGJlei5wb2ludE9uTGluZTNEKHNbMF0sIHNbMV0sIHNbMl0sIGVbMF0sIGVbMV0sIGVbMl0sIHNbMF0gKyB0b1swXSwgc1sxXSArIHRvWzFdLCBzWzJdICsgdG9bMl0pICYmIGJlei5wb2ludE9uTGluZTNEKHNbMF0sIHNbMV0sIHNbMl0sIGVbMF0sIGVbMV0sIGVbMl0sIGVbMF0gKyB0aVswXSwgZVsxXSArIHRpWzFdLCBlWzJdICsgdGlbMl0pKSB7XG4gICAgICAgICAgZGF0YS5rW2ldLnRvID0gbnVsbDtcbiAgICAgICAgICBkYXRhLmtbaV0udGkgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNbMF0gPT09IGVbMF0gJiYgc1sxXSA9PT0gZVsxXSAmJiB0b1swXSA9PT0gMCAmJiB0b1sxXSA9PT0gMCAmJiB0aVswXSA9PT0gMCAmJiB0aVsxXSA9PT0gMCkge1xuICAgICAgICAgIGlmIChzLmxlbmd0aCA9PT0gMiB8fCBzWzJdID09PSBlWzJdICYmIHRvWzJdID09PSAwICYmIHRpWzJdID09PSAwKSB7XG4gICAgICAgICAgICBkYXRhLmtbaV0udG8gPSBudWxsO1xuICAgICAgICAgICAgZGF0YS5rW2ldLnRpID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtnZXRWYWx1ZUF0Q3VycmVudFRpbWUuYmluZCh0aGlzKV07XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmtleWZyYW1lcyA9IGRhdGEuaztcbiAgICB0aGlzLmtleWZyYW1lc01ldGFkYXRhID0gW107XG4gICAgdGhpcy5vZmZzZXRUaW1lID0gZWxlbS5kYXRhLnN0O1xuICAgIHRoaXMuayA9IHRydWU7XG4gICAgdGhpcy5rZiA9IHRydWU7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLm11bHQgPSBtdWx0IHx8IDE7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgdGhpcy5zZXRWVmFsdWUgPSBzZXRWVmFsdWU7XG4gICAgdGhpcy5pbnRlcnBvbGF0ZVZhbHVlID0gaW50ZXJwb2xhdGVWYWx1ZTtcbiAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICB2YXIgYXJyTGVuID0gZGF0YS5rWzBdLnMubGVuZ3RoO1xuICAgIHRoaXMudiA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBhcnJMZW4pO1xuICAgIHRoaXMucHYgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgYXJyTGVuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBhcnJMZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy52W2ldID0gaW5pdEZyYW1lO1xuICAgICAgdGhpcy5wdltpXSA9IGluaXRGcmFtZTtcbiAgICB9XG5cbiAgICB0aGlzLl9jYWNoaW5nID0ge1xuICAgICAgbGFzdEZyYW1lOiBpbml0RnJhbWUsXG4gICAgICBsYXN0SW5kZXg6IDAsXG4gICAgICB2YWx1ZTogY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGFyckxlbilcbiAgICB9O1xuICAgIHRoaXMuYWRkRWZmZWN0ID0gYWRkRWZmZWN0O1xuICB9XG5cbiAgdmFyIFByb3BlcnR5RmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBnZXRQcm9wKGVsZW0sIGRhdGEsIHR5cGUsIG11bHQsIGNvbnRhaW5lcikge1xuICAgICAgaWYgKGRhdGEuc2lkKSB7XG4gICAgICAgIGRhdGEgPSBlbGVtLmdsb2JhbERhdGEuc2xvdE1hbmFnZXIuZ2V0UHJvcChkYXRhKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHA7XG5cbiAgICAgIGlmICghZGF0YS5rLmxlbmd0aCkge1xuICAgICAgICBwID0gbmV3IFZhbHVlUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEua1swXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcCA9IG5ldyBNdWx0aURpbWVuc2lvbmFsUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHAgPSBuZXcgS2V5ZnJhbWVkVmFsdWVQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBwID0gbmV3IEtleWZyYW1lZE11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHAuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICBjb250YWluZXIuYWRkRHluYW1pY1Byb3BlcnR5KHApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcDtcbiAgICB9XG5cbiAgICB2YXIgb2IgPSB7XG4gICAgICBnZXRQcm9wOiBnZXRQcm9wXG4gICAgfTtcbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBEeW5hbWljUHJvcGVydHlDb250YWluZXIoKSB7fVxuXG4gIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lci5wcm90b3R5cGUgPSB7XG4gICAgYWRkRHluYW1pY1Byb3BlcnR5OiBmdW5jdGlvbiBhZGREeW5hbWljUHJvcGVydHkocHJvcCkge1xuICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllcy5wdXNoKHByb3ApO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gICAgICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzOiBmdW5jdGlvbiBpdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKSB7XG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5nZXRWYWx1ZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLl9tZGYpIHtcbiAgICAgICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyOiBmdW5jdGlvbiBpbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzID0gW107XG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHBvaW50UG9vbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICByZXR1cm4gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIDIpO1xuICAgIH1cblxuICAgIHJldHVybiBwb29sRmFjdG9yeSg4LCBjcmVhdGUpO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gU2hhcGVQYXRoKCkge1xuICAgIHRoaXMuYyA9IGZhbHNlO1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gODtcbiAgICB0aGlzLnYgPSBjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCk7XG4gICAgdGhpcy5vID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpO1xuICAgIHRoaXMuaSA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKTtcbiAgfVxuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUuc2V0UGF0aERhdGEgPSBmdW5jdGlvbiAoY2xvc2VkLCBsZW4pIHtcbiAgICB0aGlzLmMgPSBjbG9zZWQ7XG4gICAgdGhpcy5zZXRMZW5ndGgobGVuKTtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgdGhpcy52W2ldID0gcG9pbnRQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHRoaXMub1tpXSA9IHBvaW50UG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICB0aGlzLmlbaV0gPSBwb2ludFBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgaSArPSAxO1xuICAgIH1cbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLnNldExlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgICB3aGlsZSAodGhpcy5fbWF4TGVuZ3RoIDwgbGVuKSB7XG4gICAgICB0aGlzLmRvdWJsZUFycmF5TGVuZ3RoKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbGVuZ3RoID0gbGVuO1xuICB9O1xuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUuZG91YmxlQXJyYXlMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy52ID0gdGhpcy52LmNvbmNhdChjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCkpO1xuICAgIHRoaXMuaSA9IHRoaXMuaS5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpKTtcbiAgICB0aGlzLm8gPSB0aGlzLm8uY29uY2F0KGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKSk7XG4gICAgdGhpcy5fbWF4TGVuZ3RoICo9IDI7XG4gIH07XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5zZXRYWUF0ID0gZnVuY3Rpb24gKHgsIHksIHR5cGUsIHBvcywgcmVwbGFjZSkge1xuICAgIHZhciBhcnI7XG4gICAgdGhpcy5fbGVuZ3RoID0gTWF0aC5tYXgodGhpcy5fbGVuZ3RoLCBwb3MgKyAxKTtcblxuICAgIGlmICh0aGlzLl9sZW5ndGggPj0gdGhpcy5fbWF4TGVuZ3RoKSB7XG4gICAgICB0aGlzLmRvdWJsZUFycmF5TGVuZ3RoKCk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICd2JzpcbiAgICAgICAgYXJyID0gdGhpcy52O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIGFyciA9IHRoaXMuaTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ28nOlxuICAgICAgICBhcnIgPSB0aGlzLm87XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcnIgPSBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCFhcnJbcG9zXSB8fCBhcnJbcG9zXSAmJiAhcmVwbGFjZSkge1xuICAgICAgYXJyW3Bvc10gPSBwb2ludFBvb2wubmV3RWxlbWVudCgpO1xuICAgIH1cblxuICAgIGFycltwb3NdWzBdID0geDtcbiAgICBhcnJbcG9zXVsxXSA9IHk7XG4gIH07XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5zZXRUcmlwbGVBdCA9IGZ1bmN0aW9uICh2WCwgdlksIG9YLCBvWSwgaVgsIGlZLCBwb3MsIHJlcGxhY2UpIHtcbiAgICB0aGlzLnNldFhZQXQodlgsIHZZLCAndicsIHBvcywgcmVwbGFjZSk7XG4gICAgdGhpcy5zZXRYWUF0KG9YLCBvWSwgJ28nLCBwb3MsIHJlcGxhY2UpO1xuICAgIHRoaXMuc2V0WFlBdChpWCwgaVksICdpJywgcG9zLCByZXBsYWNlKTtcbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5ld1BhdGggPSBuZXcgU2hhcGVQYXRoKCk7XG4gICAgbmV3UGF0aC5zZXRQYXRoRGF0YSh0aGlzLmMsIHRoaXMuX2xlbmd0aCk7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52O1xuICAgIHZhciBvdXRQb2ludHMgPSB0aGlzLm87XG4gICAgdmFyIGluUG9pbnRzID0gdGhpcy5pO1xuICAgIHZhciBpbml0ID0gMDtcblxuICAgIGlmICh0aGlzLmMpIHtcbiAgICAgIG5ld1BhdGguc2V0VHJpcGxlQXQodmVydGljZXNbMF1bMF0sIHZlcnRpY2VzWzBdWzFdLCBpblBvaW50c1swXVswXSwgaW5Qb2ludHNbMF1bMV0sIG91dFBvaW50c1swXVswXSwgb3V0UG9pbnRzWzBdWzFdLCAwLCBmYWxzZSk7XG4gICAgICBpbml0ID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY250ID0gdGhpcy5fbGVuZ3RoIC0gMTtcbiAgICB2YXIgbGVuID0gdGhpcy5fbGVuZ3RoO1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpID0gaW5pdDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBuZXdQYXRoLnNldFRyaXBsZUF0KHZlcnRpY2VzW2NudF1bMF0sIHZlcnRpY2VzW2NudF1bMV0sIGluUG9pbnRzW2NudF1bMF0sIGluUG9pbnRzW2NudF1bMV0sIG91dFBvaW50c1tjbnRdWzBdLCBvdXRQb2ludHNbY250XVsxXSwgaSwgZmFsc2UpO1xuICAgICAgY250IC09IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld1BhdGg7XG4gIH07XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbiAgfTtcblxuICB2YXIgc2hhcGVQb29sID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiBuZXcgU2hhcGVQYXRoKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsZWFzZShzaGFwZVBhdGgpIHtcbiAgICAgIHZhciBsZW4gPSBzaGFwZVBhdGguX2xlbmd0aDtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcG9pbnRQb29sLnJlbGVhc2Uoc2hhcGVQYXRoLnZbaV0pO1xuICAgICAgICBwb2ludFBvb2wucmVsZWFzZShzaGFwZVBhdGguaVtpXSk7XG4gICAgICAgIHBvaW50UG9vbC5yZWxlYXNlKHNoYXBlUGF0aC5vW2ldKTtcbiAgICAgICAgc2hhcGVQYXRoLnZbaV0gPSBudWxsO1xuICAgICAgICBzaGFwZVBhdGguaVtpXSA9IG51bGw7XG4gICAgICAgIHNoYXBlUGF0aC5vW2ldID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgc2hhcGVQYXRoLl9sZW5ndGggPSAwO1xuICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZShzaGFwZSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZhY3RvcnkubmV3RWxlbWVudCgpO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gc2hhcGUuX2xlbmd0aCA9PT0gdW5kZWZpbmVkID8gc2hhcGUudi5sZW5ndGggOiBzaGFwZS5fbGVuZ3RoO1xuICAgICAgY2xvbmVkLnNldExlbmd0aChsZW4pO1xuICAgICAgY2xvbmVkLmMgPSBzaGFwZS5jO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgY2xvbmVkLnNldFRyaXBsZUF0KHNoYXBlLnZbaV1bMF0sIHNoYXBlLnZbaV1bMV0sIHNoYXBlLm9baV1bMF0sIHNoYXBlLm9baV1bMV0sIHNoYXBlLmlbaV1bMF0sIHNoYXBlLmlbaV1bMV0sIGkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cblxuICAgIHZhciBmYWN0b3J5ID0gcG9vbEZhY3RvcnkoNCwgY3JlYXRlLCByZWxlYXNlKTtcbiAgICBmYWN0b3J5LmNsb25lID0gY2xvbmU7XG4gICAgcmV0dXJuIGZhY3Rvcnk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTaGFwZUNvbGxlY3Rpb24oKSB7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSA0O1xuICAgIHRoaXMuc2hhcGVzID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpO1xuICB9XG5cbiAgU2hhcGVDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRTaGFwZSA9IGZ1bmN0aW9uIChzaGFwZURhdGEpIHtcbiAgICBpZiAodGhpcy5fbGVuZ3RoID09PSB0aGlzLl9tYXhMZW5ndGgpIHtcbiAgICAgIHRoaXMuc2hhcGVzID0gdGhpcy5zaGFwZXMuY29uY2F0KGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKSk7XG4gICAgICB0aGlzLl9tYXhMZW5ndGggKj0gMjtcbiAgICB9XG5cbiAgICB0aGlzLnNoYXBlc1t0aGlzLl9sZW5ndGhdID0gc2hhcGVEYXRhO1xuICAgIHRoaXMuX2xlbmd0aCArPSAxO1xuICB9O1xuXG4gIFNoYXBlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVsZWFzZVNoYXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLl9sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2hhcGVQb29sLnJlbGVhc2UodGhpcy5zaGFwZXNbaV0pO1xuICAgIH1cblxuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gIH07XG5cbiAgdmFyIHNoYXBlQ29sbGVjdGlvblBvb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iID0ge1xuICAgICAgbmV3U2hhcGVDb2xsZWN0aW9uOiBuZXdTaGFwZUNvbGxlY3Rpb24sXG4gICAgICByZWxlYXNlOiByZWxlYXNlXG4gICAgfTtcbiAgICB2YXIgX2xlbmd0aCA9IDA7XG4gICAgdmFyIF9tYXhMZW5ndGggPSA0O1xuICAgIHZhciBwb29sID0gY3JlYXRlU2l6ZWRBcnJheShfbWF4TGVuZ3RoKTtcblxuICAgIGZ1bmN0aW9uIG5ld1NoYXBlQ29sbGVjdGlvbigpIHtcbiAgICAgIHZhciBzaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGlmIChfbGVuZ3RoKSB7XG4gICAgICAgIF9sZW5ndGggLT0gMTtcbiAgICAgICAgc2hhcGVDb2xsZWN0aW9uID0gcG9vbFtfbGVuZ3RoXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNoYXBlQ29sbGVjdGlvbiA9IG5ldyBTaGFwZUNvbGxlY3Rpb24oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNoYXBlQ29sbGVjdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxlYXNlKHNoYXBlQ29sbGVjdGlvbikge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gc2hhcGVDb2xsZWN0aW9uLl9sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZVBvb2wucmVsZWFzZShzaGFwZUNvbGxlY3Rpb24uc2hhcGVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgc2hhcGVDb2xsZWN0aW9uLl9sZW5ndGggPSAwO1xuXG4gICAgICBpZiAoX2xlbmd0aCA9PT0gX21heExlbmd0aCkge1xuICAgICAgICBwb29sID0gcG9vbGluZ1tcImRvdWJsZVwiXShwb29sKTtcbiAgICAgICAgX21heExlbmd0aCAqPSAyO1xuICAgICAgfVxuXG4gICAgICBwb29sW19sZW5ndGhdID0gc2hhcGVDb2xsZWN0aW9uO1xuICAgICAgX2xlbmd0aCArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIHZhciBTaGFwZVByb3BlcnR5RmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5pdEZyYW1lID0gLTk5OTk5OTtcblxuICAgIGZ1bmN0aW9uIGludGVycG9sYXRlU2hhcGUoZnJhbWVOdW0sIHByZXZpb3VzVmFsdWUsIGNhY2hpbmcpIHtcbiAgICAgIHZhciBpdGVyYXRpb25JbmRleCA9IGNhY2hpbmcubGFzdEluZGV4O1xuICAgICAgdmFyIGtleVByb3BTO1xuICAgICAgdmFyIGtleVByb3BFO1xuICAgICAgdmFyIGlzSG9sZDtcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGs7XG4gICAgICB2YXIgakxlbjtcbiAgICAgIHZhciBrTGVuO1xuICAgICAgdmFyIHBlcmM7XG4gICAgICB2YXIgdmVydGV4VmFsdWU7XG4gICAgICB2YXIga2YgPSB0aGlzLmtleWZyYW1lcztcblxuICAgICAgaWYgKGZyYW1lTnVtIDwga2ZbMF0udCAtIHRoaXMub2Zmc2V0VGltZSkge1xuICAgICAgICBrZXlQcm9wUyA9IGtmWzBdLnNbMF07XG4gICAgICAgIGlzSG9sZCA9IHRydWU7XG4gICAgICAgIGl0ZXJhdGlvbkluZGV4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoZnJhbWVOdW0gPj0ga2Zba2YubGVuZ3RoIC0gMV0udCAtIHRoaXMub2Zmc2V0VGltZSkge1xuICAgICAgICBrZXlQcm9wUyA9IGtmW2tmLmxlbmd0aCAtIDFdLnMgPyBrZltrZi5sZW5ndGggLSAxXS5zWzBdIDoga2Zba2YubGVuZ3RoIC0gMl0uZVswXTtcbiAgICAgICAgLyogaWYoa2Zba2YubGVuZ3RoIC0gMV0ucyl7XG4gICAgICAgICAgICAgICAgICBrZXlQcm9wUyA9IGtmW2tmLmxlbmd0aCAtIDFdLnNbMF07XG4gICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAga2V5UHJvcFMgPSBrZltrZi5sZW5ndGggLSAyXS5lWzBdO1xuICAgICAgICAgICAgICB9ICovXG5cbiAgICAgICAgaXNIb2xkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpID0gaXRlcmF0aW9uSW5kZXg7XG4gICAgICAgIHZhciBsZW4gPSBrZi5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgZmxhZyA9IHRydWU7XG4gICAgICAgIHZhciBrZXlEYXRhO1xuICAgICAgICB2YXIgbmV4dEtleURhdGE7XG4gICAgICAgIHZhciBrZXlmcmFtZU1ldGFkYXRhO1xuXG4gICAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgICAga2V5RGF0YSA9IGtmW2ldO1xuICAgICAgICAgIG5leHRLZXlEYXRhID0ga2ZbaSArIDFdO1xuXG4gICAgICAgICAgaWYgKG5leHRLZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUgPiBmcmFtZU51bSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGkgPCBsZW4gLSAxKSB7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlmcmFtZU1ldGFkYXRhID0gdGhpcy5rZXlmcmFtZXNNZXRhZGF0YVtpXSB8fCB7fTtcbiAgICAgICAgaXNIb2xkID0ga2V5RGF0YS5oID09PSAxO1xuICAgICAgICBpdGVyYXRpb25JbmRleCA9IGk7XG5cbiAgICAgICAgaWYgKCFpc0hvbGQpIHtcbiAgICAgICAgICBpZiAoZnJhbWVOdW0gPj0gbmV4dEtleURhdGEudCAtIHRoaXMub2Zmc2V0VGltZSkge1xuICAgICAgICAgICAgcGVyYyA9IDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChmcmFtZU51bSA8IGtleURhdGEudCAtIHRoaXMub2Zmc2V0VGltZSkge1xuICAgICAgICAgICAgcGVyYyA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBmbmM7XG5cbiAgICAgICAgICAgIGlmIChrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCkge1xuICAgICAgICAgICAgICBmbmMgPSBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZuYyA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKGtleURhdGEuby54LCBrZXlEYXRhLm8ueSwga2V5RGF0YS5pLngsIGtleURhdGEuaS55KS5nZXQ7XG4gICAgICAgICAgICAgIGtleWZyYW1lTWV0YWRhdGEuX19mbmN0ID0gZm5jO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwZXJjID0gZm5jKChmcmFtZU51bSAtIChrZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUpKSAvIChuZXh0S2V5RGF0YS50IC0gdGhpcy5vZmZzZXRUaW1lIC0gKGtleURhdGEudCAtIHRoaXMub2Zmc2V0VGltZSkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBrZXlQcm9wRSA9IG5leHRLZXlEYXRhLnMgPyBuZXh0S2V5RGF0YS5zWzBdIDoga2V5RGF0YS5lWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5UHJvcFMgPSBrZXlEYXRhLnNbMF07XG4gICAgICB9XG5cbiAgICAgIGpMZW4gPSBwcmV2aW91c1ZhbHVlLl9sZW5ndGg7XG4gICAgICBrTGVuID0ga2V5UHJvcFMuaVswXS5sZW5ndGg7XG4gICAgICBjYWNoaW5nLmxhc3RJbmRleCA9IGl0ZXJhdGlvbkluZGV4O1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICB2ZXJ0ZXhWYWx1ZSA9IGlzSG9sZCA/IGtleVByb3BTLmlbal1ba10gOiBrZXlQcm9wUy5pW2pdW2tdICsgKGtleVByb3BFLmlbal1ba10gLSBrZXlQcm9wUy5pW2pdW2tdKSAqIHBlcmM7XG4gICAgICAgICAgcHJldmlvdXNWYWx1ZS5pW2pdW2tdID0gdmVydGV4VmFsdWU7XG4gICAgICAgICAgdmVydGV4VmFsdWUgPSBpc0hvbGQgPyBrZXlQcm9wUy5vW2pdW2tdIDoga2V5UHJvcFMub1tqXVtrXSArIChrZXlQcm9wRS5vW2pdW2tdIC0ga2V5UHJvcFMub1tqXVtrXSkgKiBwZXJjO1xuICAgICAgICAgIHByZXZpb3VzVmFsdWUub1tqXVtrXSA9IHZlcnRleFZhbHVlO1xuICAgICAgICAgIHZlcnRleFZhbHVlID0gaXNIb2xkID8ga2V5UHJvcFMudltqXVtrXSA6IGtleVByb3BTLnZbal1ba10gKyAoa2V5UHJvcEUudltqXVtrXSAtIGtleVByb3BTLnZbal1ba10pICogcGVyYztcbiAgICAgICAgICBwcmV2aW91c1ZhbHVlLnZbal1ba10gPSB2ZXJ0ZXhWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludGVycG9sYXRlU2hhcGVDdXJyZW50VGltZSgpIHtcbiAgICAgIHZhciBmcmFtZU51bSA9IHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lIC0gdGhpcy5vZmZzZXRUaW1lO1xuICAgICAgdmFyIGluaXRUaW1lID0gdGhpcy5rZXlmcmFtZXNbMF0udCAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICAgIHZhciBlbmRUaW1lID0gdGhpcy5rZXlmcmFtZXNbdGhpcy5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICAgIHZhciBsYXN0RnJhbWUgPSB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZTtcblxuICAgICAgaWYgKCEobGFzdEZyYW1lICE9PSBpbml0RnJhbWUgJiYgKGxhc3RGcmFtZSA8IGluaXRUaW1lICYmIGZyYW1lTnVtIDwgaW5pdFRpbWUgfHwgbGFzdEZyYW1lID4gZW5kVGltZSAmJiBmcmFtZU51bSA+IGVuZFRpbWUpKSkge1xuICAgICAgICAvLy8gL1xuICAgICAgICB0aGlzLl9jYWNoaW5nLmxhc3RJbmRleCA9IGxhc3RGcmFtZSA8IGZyYW1lTnVtID8gdGhpcy5fY2FjaGluZy5sYXN0SW5kZXggOiAwO1xuICAgICAgICB0aGlzLmludGVycG9sYXRlU2hhcGUoZnJhbWVOdW0sIHRoaXMucHYsIHRoaXMuX2NhY2hpbmcpOyAvLy8gL1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA9IGZyYW1lTnVtO1xuICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXRTaGFwZSgpIHtcbiAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNoYXBlc0VxdWFsKHNoYXBlMSwgc2hhcGUyKSB7XG4gICAgICBpZiAoc2hhcGUxLl9sZW5ndGggIT09IHNoYXBlMi5fbGVuZ3RoIHx8IHNoYXBlMS5jICE9PSBzaGFwZTIuYykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHNoYXBlMS5fbGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNoYXBlMS52W2ldWzBdICE9PSBzaGFwZTIudltpXVswXSB8fCBzaGFwZTEudltpXVsxXSAhPT0gc2hhcGUyLnZbaV1bMV0gfHwgc2hhcGUxLm9baV1bMF0gIT09IHNoYXBlMi5vW2ldWzBdIHx8IHNoYXBlMS5vW2ldWzFdICE9PSBzaGFwZTIub1tpXVsxXSB8fCBzaGFwZTEuaVtpXVswXSAhPT0gc2hhcGUyLmlbaV1bMF0gfHwgc2hhcGUxLmlbaV1bMV0gIT09IHNoYXBlMi5pW2ldWzFdKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZWYWx1ZShuZXdQYXRoKSB7XG4gICAgICBpZiAoIXNoYXBlc0VxdWFsKHRoaXMudiwgbmV3UGF0aCkpIHtcbiAgICAgICAgdGhpcy52ID0gc2hhcGVQb29sLmNsb25lKG5ld1BhdGgpO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uLnJlbGVhc2VTaGFwZXMoKTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICAgICAgICB0aGlzLnBhdGhzID0gdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlKCkge1xuICAgICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmxvY2spIHtcbiAgICAgICAgdGhpcy5zZXRWVmFsdWUodGhpcy5wdik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2NrID0gdHJ1ZTtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgdmFyIGZpbmFsVmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLmtmKSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLnB2O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEua3MpIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZGF0YS5rcy5rO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZGF0YS5wdC5rO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBmaW5hbFZhbHVlID0gdGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0oZmluYWxWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0VlZhbHVlKGZpbmFsVmFsdWUpO1xuICAgICAgdGhpcy5sb2NrID0gZmFsc2U7XG4gICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSwgdHlwZSkge1xuICAgICAgdGhpcy5wcm9wVHlwZSA9ICdzaGFwZSc7XG4gICAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IGVsZW07XG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMuayA9IGZhbHNlO1xuICAgICAgdGhpcy5rZiA9IGZhbHNlO1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgICB2YXIgcGF0aERhdGEgPSB0eXBlID09PSAzID8gZGF0YS5wdC5rIDogZGF0YS5rcy5rO1xuICAgICAgdGhpcy52ID0gc2hhcGVQb29sLmNsb25lKHBhdGhEYXRhKTtcbiAgICAgIHRoaXMucHYgPSBzaGFwZVBvb2wuY2xvbmUodGhpcy52KTtcbiAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB0aGlzLnBhdGhzLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICB0aGlzLnJlc2V0ID0gcmVzZXRTaGFwZTtcbiAgICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkRWZmZWN0KGVmZmVjdEZ1bmN0aW9uKSB7XG4gICAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5wdXNoKGVmZmVjdEZ1bmN0aW9uKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgICB9XG5cbiAgICBTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5pbnRlcnBvbGF0ZVNoYXBlID0gaW50ZXJwb2xhdGVTaGFwZTtcbiAgICBTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuc2V0VlZhbHVlID0gc2V0VlZhbHVlO1xuICAgIFNoYXBlUHJvcGVydHkucHJvdG90eXBlLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcblxuICAgIGZ1bmN0aW9uIEtleWZyYW1lZFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSwgdHlwZSkge1xuICAgICAgdGhpcy5wcm9wVHlwZSA9ICdzaGFwZSc7XG4gICAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgdGhpcy5jb250YWluZXIgPSBlbGVtO1xuICAgICAgdGhpcy5vZmZzZXRUaW1lID0gZWxlbS5kYXRhLnN0O1xuICAgICAgdGhpcy5rZXlmcmFtZXMgPSB0eXBlID09PSAzID8gZGF0YS5wdC5rIDogZGF0YS5rcy5rO1xuICAgICAgdGhpcy5rZXlmcmFtZXNNZXRhZGF0YSA9IFtdO1xuICAgICAgdGhpcy5rID0gdHJ1ZTtcbiAgICAgIHRoaXMua2YgPSB0cnVlO1xuICAgICAgdmFyIGxlbiA9IHRoaXMua2V5ZnJhbWVzWzBdLnNbMF0uaS5sZW5ndGg7XG4gICAgICB0aGlzLnYgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgdGhpcy52LnNldFBhdGhEYXRhKHRoaXMua2V5ZnJhbWVzWzBdLnNbMF0uYywgbGVuKTtcbiAgICAgIHRoaXMucHYgPSBzaGFwZVBvb2wuY2xvbmUodGhpcy52KTtcbiAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB0aGlzLnBhdGhzLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICB0aGlzLmxhc3RGcmFtZSA9IGluaXRGcmFtZTtcbiAgICAgIHRoaXMucmVzZXQgPSByZXNldFNoYXBlO1xuICAgICAgdGhpcy5fY2FjaGluZyA9IHtcbiAgICAgICAgbGFzdEZyYW1lOiBpbml0RnJhbWUsXG4gICAgICAgIGxhc3RJbmRleDogMFxuICAgICAgfTtcbiAgICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW2ludGVycG9sYXRlU2hhcGVDdXJyZW50VGltZS5iaW5kKHRoaXMpXTtcbiAgICB9XG5cbiAgICBLZXlmcmFtZWRTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuaW50ZXJwb2xhdGVTaGFwZSA9IGludGVycG9sYXRlU2hhcGU7XG4gICAgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuc2V0VlZhbHVlID0gc2V0VlZhbHVlO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHkucHJvdG90eXBlLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcblxuICAgIHZhciBFbGxTaGFwZVByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNQb2ludCA9IHJvdW5kQ29ybmVyO1xuXG4gICAgICBmdW5jdGlvbiBFbGxTaGFwZVByb3BlcnR5RmFjdG9yeShlbGVtLCBkYXRhKSB7XG4gICAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICAgIHRoaXMudi5zZXRQYXRoRGF0YSh0cnVlLCA0KTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlQ29sbGVjdGlvblBvb2wubmV3U2hhcGVDb2xsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICAgIHRoaXMuZCA9IGRhdGEuZDtcbiAgICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgICAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnAsIDEsIDAsIHRoaXMpO1xuICAgICAgICB0aGlzLnMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnMsIDEsIDAsIHRoaXMpO1xuXG4gICAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5rID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb252ZXJ0RWxsVG9QYXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgRWxsU2hhcGVQcm9wZXJ0eUZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgICByZXNldDogcmVzZXRTaGFwZSxcbiAgICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgICAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbWRmKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRFbGxUb1BhdGgoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRFbGxUb1BhdGg6IGZ1bmN0aW9uIGNvbnZlcnRFbGxUb1BhdGgoKSB7XG4gICAgICAgICAgdmFyIHAwID0gdGhpcy5wLnZbMF07XG4gICAgICAgICAgdmFyIHAxID0gdGhpcy5wLnZbMV07XG4gICAgICAgICAgdmFyIHMwID0gdGhpcy5zLnZbMF0gLyAyO1xuICAgICAgICAgIHZhciBzMSA9IHRoaXMucy52WzFdIC8gMjtcblxuICAgICAgICAgIHZhciBfY3cgPSB0aGlzLmQgIT09IDM7XG5cbiAgICAgICAgICB2YXIgX3YgPSB0aGlzLnY7XG4gICAgICAgICAgX3YudlswXVswXSA9IHAwO1xuICAgICAgICAgIF92LnZbMF1bMV0gPSBwMSAtIHMxO1xuICAgICAgICAgIF92LnZbMV1bMF0gPSBfY3cgPyBwMCArIHMwIDogcDAgLSBzMDtcbiAgICAgICAgICBfdi52WzFdWzFdID0gcDE7XG4gICAgICAgICAgX3YudlsyXVswXSA9IHAwO1xuICAgICAgICAgIF92LnZbMl1bMV0gPSBwMSArIHMxO1xuICAgICAgICAgIF92LnZbM11bMF0gPSBfY3cgPyBwMCAtIHMwIDogcDAgKyBzMDtcbiAgICAgICAgICBfdi52WzNdWzFdID0gcDE7XG4gICAgICAgICAgX3YuaVswXVswXSA9IF9jdyA/IHAwIC0gczAgKiBjUG9pbnQgOiBwMCArIHMwICogY1BvaW50O1xuICAgICAgICAgIF92LmlbMF1bMV0gPSBwMSAtIHMxO1xuICAgICAgICAgIF92LmlbMV1bMF0gPSBfY3cgPyBwMCArIHMwIDogcDAgLSBzMDtcbiAgICAgICAgICBfdi5pWzFdWzFdID0gcDEgLSBzMSAqIGNQb2ludDtcbiAgICAgICAgICBfdi5pWzJdWzBdID0gX2N3ID8gcDAgKyBzMCAqIGNQb2ludCA6IHAwIC0gczAgKiBjUG9pbnQ7XG4gICAgICAgICAgX3YuaVsyXVsxXSA9IHAxICsgczE7XG4gICAgICAgICAgX3YuaVszXVswXSA9IF9jdyA/IHAwIC0gczAgOiBwMCArIHMwO1xuICAgICAgICAgIF92LmlbM11bMV0gPSBwMSArIHMxICogY1BvaW50O1xuICAgICAgICAgIF92Lm9bMF1bMF0gPSBfY3cgPyBwMCArIHMwICogY1BvaW50IDogcDAgLSBzMCAqIGNQb2ludDtcbiAgICAgICAgICBfdi5vWzBdWzFdID0gcDEgLSBzMTtcbiAgICAgICAgICBfdi5vWzFdWzBdID0gX2N3ID8gcDAgKyBzMCA6IHAwIC0gczA7XG4gICAgICAgICAgX3Yub1sxXVsxXSA9IHAxICsgczEgKiBjUG9pbnQ7XG4gICAgICAgICAgX3Yub1syXVswXSA9IF9jdyA/IHAwIC0gczAgKiBjUG9pbnQgOiBwMCArIHMwICogY1BvaW50O1xuICAgICAgICAgIF92Lm9bMl1bMV0gPSBwMSArIHMxO1xuICAgICAgICAgIF92Lm9bM11bMF0gPSBfY3cgPyBwMCAtIHMwIDogcDAgKyBzMDtcbiAgICAgICAgICBfdi5vWzNdWzFdID0gcDEgLSBzMSAqIGNQb2ludDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgRWxsU2hhcGVQcm9wZXJ0eUZhY3RvcnkpO1xuICAgICAgcmV0dXJuIEVsbFNoYXBlUHJvcGVydHlGYWN0b3J5O1xuICAgIH0oKTtcblxuICAgIHZhciBTdGFyU2hhcGVQcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIFN0YXJTaGFwZVByb3BlcnR5RmFjdG9yeShlbGVtLCBkYXRhKSB7XG4gICAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICAgIHRoaXMudi5zZXRQYXRoRGF0YSh0cnVlLCAwKTtcbiAgICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICAgICAgdGhpcy5kID0gZGF0YS5kO1xuICAgICAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG5cbiAgICAgICAgaWYgKGRhdGEuc3kgPT09IDEpIHtcbiAgICAgICAgICB0aGlzLmlyID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5pciwgMCwgMCwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5pcyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuaXMsIDAsIDAuMDEsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuY29udmVydFRvUGF0aCA9IHRoaXMuY29udmVydFN0YXJUb1BhdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb252ZXJ0VG9QYXRoID0gdGhpcy5jb252ZXJ0UG9seWdvblRvUGF0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHQgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnB0LCAwLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLCAxLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yLCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgICAgICB0aGlzLm9yID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vciwgMCwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMub3MgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm9zLCAwLCAwLjAxLCB0aGlzKTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlQ29sbGVjdGlvblBvb2wubmV3U2hhcGVDb2xsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy52KTtcbiAgICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5rID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmNvbnZlcnRUb1BhdGgoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgICByZXNldDogcmVzZXRTaGFwZSxcbiAgICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgICAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbWRmKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRUb1BhdGgoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRTdGFyVG9QYXRoOiBmdW5jdGlvbiBjb252ZXJ0U3RhclRvUGF0aCgpIHtcbiAgICAgICAgICB2YXIgbnVtUHRzID0gTWF0aC5mbG9vcih0aGlzLnB0LnYpICogMjtcbiAgICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLlBJICogMiAvIG51bVB0cztcbiAgICAgICAgICAvKiB0aGlzLnYudi5sZW5ndGggPSBudW1QdHM7XG4gICAgICAgICAgICAgICAgICB0aGlzLnYuaS5sZW5ndGggPSBudW1QdHM7XG4gICAgICAgICAgICAgICAgICB0aGlzLnYuby5sZW5ndGggPSBudW1QdHM7ICovXG5cbiAgICAgICAgICB2YXIgbG9uZ0ZsYWcgPSB0cnVlO1xuICAgICAgICAgIHZhciBsb25nUmFkID0gdGhpcy5vci52O1xuICAgICAgICAgIHZhciBzaG9ydFJhZCA9IHRoaXMuaXIudjtcbiAgICAgICAgICB2YXIgbG9uZ1JvdW5kID0gdGhpcy5vcy52O1xuICAgICAgICAgIHZhciBzaG9ydFJvdW5kID0gdGhpcy5pcy52O1xuICAgICAgICAgIHZhciBsb25nUGVyaW1TZWdtZW50ID0gMiAqIE1hdGguUEkgKiBsb25nUmFkIC8gKG51bVB0cyAqIDIpO1xuICAgICAgICAgIHZhciBzaG9ydFBlcmltU2VnbWVudCA9IDIgKiBNYXRoLlBJICogc2hvcnRSYWQgLyAobnVtUHRzICogMik7XG4gICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgdmFyIHJhZDtcbiAgICAgICAgICB2YXIgcm91bmRuZXNzO1xuICAgICAgICAgIHZhciBwZXJpbVNlZ21lbnQ7XG4gICAgICAgICAgdmFyIGN1cnJlbnRBbmcgPSAtTWF0aC5QSSAvIDI7XG4gICAgICAgICAgY3VycmVudEFuZyArPSB0aGlzLnIudjtcbiAgICAgICAgICB2YXIgZGlyID0gdGhpcy5kYXRhLmQgPT09IDMgPyAtMSA6IDE7XG4gICAgICAgICAgdGhpcy52Ll9sZW5ndGggPSAwO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVB0czsgaSArPSAxKSB7XG4gICAgICAgICAgICByYWQgPSBsb25nRmxhZyA/IGxvbmdSYWQgOiBzaG9ydFJhZDtcbiAgICAgICAgICAgIHJvdW5kbmVzcyA9IGxvbmdGbGFnID8gbG9uZ1JvdW5kIDogc2hvcnRSb3VuZDtcbiAgICAgICAgICAgIHBlcmltU2VnbWVudCA9IGxvbmdGbGFnID8gbG9uZ1BlcmltU2VnbWVudCA6IHNob3J0UGVyaW1TZWdtZW50O1xuICAgICAgICAgICAgdmFyIHggPSByYWQgKiBNYXRoLmNvcyhjdXJyZW50QW5nKTtcbiAgICAgICAgICAgIHZhciB5ID0gcmFkICogTWF0aC5zaW4oY3VycmVudEFuZyk7XG4gICAgICAgICAgICB2YXIgb3ggPSB4ID09PSAwICYmIHkgPT09IDAgPyAwIDogeSAvIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgICAgIHZhciBveSA9IHggPT09IDAgJiYgeSA9PT0gMCA/IDAgOiAteCAvIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgICAgIHggKz0gK3RoaXMucC52WzBdO1xuICAgICAgICAgICAgeSArPSArdGhpcy5wLnZbMV07XG4gICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQoeCwgeSwgeCAtIG94ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCB5IC0gb3kgKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIHggKyBveCAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgeSArIG95ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCBpLCB0cnVlKTtcbiAgICAgICAgICAgIC8qIHRoaXMudi52W2ldID0gW3gseV07XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy52LmlbaV0gPSBbeCtveCpwZXJpbVNlZ21lbnQqcm91bmRuZXNzKmRpcix5K295KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyXTtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnYub1tpXSA9IFt4LW94KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyLHktb3kqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXJdO1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMudi5fbGVuZ3RoID0gbnVtUHRzOyAqL1xuXG4gICAgICAgICAgICBsb25nRmxhZyA9ICFsb25nRmxhZztcbiAgICAgICAgICAgIGN1cnJlbnRBbmcgKz0gYW5nbGUgKiBkaXI7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0UG9seWdvblRvUGF0aDogZnVuY3Rpb24gY29udmVydFBvbHlnb25Ub1BhdGgoKSB7XG4gICAgICAgICAgdmFyIG51bVB0cyA9IE1hdGguZmxvb3IodGhpcy5wdC52KTtcbiAgICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLlBJICogMiAvIG51bVB0cztcbiAgICAgICAgICB2YXIgcmFkID0gdGhpcy5vci52O1xuICAgICAgICAgIHZhciByb3VuZG5lc3MgPSB0aGlzLm9zLnY7XG4gICAgICAgICAgdmFyIHBlcmltU2VnbWVudCA9IDIgKiBNYXRoLlBJICogcmFkIC8gKG51bVB0cyAqIDQpO1xuICAgICAgICAgIHZhciBpO1xuICAgICAgICAgIHZhciBjdXJyZW50QW5nID0gLU1hdGguUEkgKiAwLjU7XG4gICAgICAgICAgdmFyIGRpciA9IHRoaXMuZGF0YS5kID09PSAzID8gLTEgOiAxO1xuICAgICAgICAgIGN1cnJlbnRBbmcgKz0gdGhpcy5yLnY7XG4gICAgICAgICAgdGhpcy52Ll9sZW5ndGggPSAwO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVB0czsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHJhZCAqIE1hdGguY29zKGN1cnJlbnRBbmcpO1xuICAgICAgICAgICAgdmFyIHkgPSByYWQgKiBNYXRoLnNpbihjdXJyZW50QW5nKTtcbiAgICAgICAgICAgIHZhciBveCA9IHggPT09IDAgJiYgeSA9PT0gMCA/IDAgOiB5IC8gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgICAgdmFyIG95ID0geCA9PT0gMCAmJiB5ID09PSAwID8gMCA6IC14IC8gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgICAgeCArPSArdGhpcy5wLnZbMF07XG4gICAgICAgICAgICB5ICs9ICt0aGlzLnAudlsxXTtcbiAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdCh4LCB5LCB4IC0gb3ggKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIHkgLSBveSAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgeCArIG94ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCB5ICsgb3kgKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIGksIHRydWUpO1xuICAgICAgICAgICAgY3VycmVudEFuZyArPSBhbmdsZSAqIGRpcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnBhdGhzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgdGhpcy5wYXRoc1swXSA9IHRoaXMudjtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgU3RhclNoYXBlUHJvcGVydHlGYWN0b3J5KTtcbiAgICAgIHJldHVybiBTdGFyU2hhcGVQcm9wZXJ0eUZhY3Rvcnk7XG4gICAgfSgpO1xuXG4gICAgdmFyIFJlY3RTaGFwZVByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5KGVsZW0sIGRhdGEpIHtcbiAgICAgICAgdGhpcy52ID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgICAgdGhpcy52LmMgPSB0cnVlO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uID0gc2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgICB0aGlzLnBhdGhzID0gdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICAgICAgdGhpcy5kID0gZGF0YS5kO1xuICAgICAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucCwgMSwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMucyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucywgMSwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMuciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuciwgMCwgMCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5rID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmNvbnZlcnRSZWN0VG9QYXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29udmVydFJlY3RUb1BhdGg6IGZ1bmN0aW9uIGNvbnZlcnRSZWN0VG9QYXRoKCkge1xuICAgICAgICAgIHZhciBwMCA9IHRoaXMucC52WzBdO1xuICAgICAgICAgIHZhciBwMSA9IHRoaXMucC52WzFdO1xuICAgICAgICAgIHZhciB2MCA9IHRoaXMucy52WzBdIC8gMjtcbiAgICAgICAgICB2YXIgdjEgPSB0aGlzLnMudlsxXSAvIDI7XG4gICAgICAgICAgdmFyIHJvdW5kID0gYm1NaW4odjAsIHYxLCB0aGlzLnIudik7XG4gICAgICAgICAgdmFyIGNQb2ludCA9IHJvdW5kICogKDEgLSByb3VuZENvcm5lcik7XG4gICAgICAgICAgdGhpcy52Ll9sZW5ndGggPSAwO1xuXG4gICAgICAgICAgaWYgKHRoaXMuZCA9PT0gMiB8fCB0aGlzLmQgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwLCBwMSAtIHYxICsgcm91bmQsIHAwICsgdjAsIHAxIC0gdjEgKyByb3VuZCwgcDAgKyB2MCwgcDEgLSB2MSArIGNQb2ludCwgMCwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCArIHYwLCBwMSArIHYxIC0gY1BvaW50LCBwMCArIHYwLCBwMSArIHYxIC0gcm91bmQsIDEsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAocm91bmQgIT09IDApIHtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAgLSByb3VuZCwgcDEgKyB2MSwgcDAgKyB2MCAtIHJvdW5kLCBwMSArIHYxLCBwMCArIHYwIC0gY1BvaW50LCBwMSArIHYxLCAyLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAgKyByb3VuZCwgcDEgKyB2MSwgcDAgLSB2MCArIGNQb2ludCwgcDEgKyB2MSwgcDAgLSB2MCArIHJvdW5kLCBwMSArIHYxLCAzLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxICsgdjEgLSByb3VuZCwgcDAgLSB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCAtIHYwLCBwMSArIHYxIC0gY1BvaW50LCA0LCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxIC0gdjEgKyByb3VuZCwgcDAgLSB2MCwgcDEgLSB2MSArIGNQb2ludCwgcDAgLSB2MCwgcDEgLSB2MSArIHJvdW5kLCA1LCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAgKyByb3VuZCwgcDEgLSB2MSwgcDAgLSB2MCArIHJvdW5kLCBwMSAtIHYxLCBwMCAtIHYwICsgY1BvaW50LCBwMSAtIHYxLCA2LCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAgLSByb3VuZCwgcDEgLSB2MSwgcDAgKyB2MCAtIGNQb2ludCwgcDEgLSB2MSwgcDAgKyB2MCAtIHJvdW5kLCBwMSAtIHYxLCA3LCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwLCBwMSArIHYxLCBwMCAtIHYwICsgY1BvaW50LCBwMSArIHYxLCBwMCAtIHYwLCBwMSArIHYxLCAyKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxIC0gdjEsIHAwIC0gdjAsIHAxIC0gdjEgKyBjUG9pbnQsIHAwIC0gdjAsIHAxIC0gdjEsIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCArIHYwLCBwMSAtIHYxICsgY1BvaW50LCBwMCArIHYwLCBwMSAtIHYxICsgcm91bmQsIDAsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAocm91bmQgIT09IDApIHtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAgLSByb3VuZCwgcDEgLSB2MSwgcDAgKyB2MCAtIHJvdW5kLCBwMSAtIHYxLCBwMCArIHYwIC0gY1BvaW50LCBwMSAtIHYxLCAxLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAgKyByb3VuZCwgcDEgLSB2MSwgcDAgLSB2MCArIGNQb2ludCwgcDEgLSB2MSwgcDAgLSB2MCArIHJvdW5kLCBwMSAtIHYxLCAyLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxIC0gdjEgKyByb3VuZCwgcDAgLSB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCAtIHYwLCBwMSAtIHYxICsgY1BvaW50LCAzLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxICsgdjEgLSByb3VuZCwgcDAgLSB2MCwgcDEgKyB2MSAtIGNQb2ludCwgcDAgLSB2MCwgcDEgKyB2MSAtIHJvdW5kLCA0LCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAgKyByb3VuZCwgcDEgKyB2MSwgcDAgLSB2MCArIHJvdW5kLCBwMSArIHYxLCBwMCAtIHYwICsgY1BvaW50LCBwMSArIHYxLCA1LCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAgLSByb3VuZCwgcDEgKyB2MSwgcDAgKyB2MCAtIGNQb2ludCwgcDEgKyB2MSwgcDAgKyB2MCAtIHJvdW5kLCBwMSArIHYxLCA2LCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAsIHAxICsgdjEgLSByb3VuZCwgcDAgKyB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCArIHYwLCBwMSArIHYxIC0gY1BvaW50LCA3LCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwLCBwMSAtIHYxLCBwMCAtIHYwICsgY1BvaW50LCBwMSAtIHYxLCBwMCAtIHYwLCBwMSAtIHYxLCAxLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxICsgdjEsIHAwIC0gdjAsIHAxICsgdjEgLSBjUG9pbnQsIHAwIC0gdjAsIHAxICsgdjEsIDIsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCwgcDEgKyB2MSwgcDAgKyB2MCAtIGNQb2ludCwgcDEgKyB2MSwgcDAgKyB2MCwgcDEgKyB2MSwgMywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gICAgICAgICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcblxuICAgICAgICAgIGlmICh0aGlzLl9tZGYpIHtcbiAgICAgICAgICAgIHRoaXMuY29udmVydFJlY3RUb1BhdGgoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiByZXNldFNoYXBlXG4gICAgICB9O1xuICAgICAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBSZWN0U2hhcGVQcm9wZXJ0eUZhY3RvcnkpO1xuICAgICAgcmV0dXJuIFJlY3RTaGFwZVByb3BlcnR5RmFjdG9yeTtcbiAgICB9KCk7XG5cbiAgICBmdW5jdGlvbiBnZXRTaGFwZVByb3AoZWxlbSwgZGF0YSwgdHlwZSkge1xuICAgICAgdmFyIHByb3A7XG5cbiAgICAgIGlmICh0eXBlID09PSAzIHx8IHR5cGUgPT09IDQpIHtcbiAgICAgICAgdmFyIGRhdGFQcm9wID0gdHlwZSA9PT0gMyA/IGRhdGEucHQgOiBkYXRhLmtzO1xuICAgICAgICB2YXIga2V5cyA9IGRhdGFQcm9wLms7XG5cbiAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgcHJvcCA9IG5ldyBLZXlmcmFtZWRTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEsIHR5cGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3AgPSBuZXcgU2hhcGVQcm9wZXJ0eShlbGVtLCBkYXRhLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA1KSB7XG4gICAgICAgIHByb3AgPSBuZXcgUmVjdFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDYpIHtcbiAgICAgICAgcHJvcCA9IG5ldyBFbGxTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA3KSB7XG4gICAgICAgIHByb3AgPSBuZXcgU3RhclNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wLmspIHtcbiAgICAgICAgZWxlbS5hZGREeW5hbWljUHJvcGVydHkocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbnN0cnVjdG9yRnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gU2hhcGVQcm9wZXJ0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRLZXlmcmFtZWRDb25zdHJ1Y3RvckZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIEtleWZyYW1lZFNoYXBlUHJvcGVydHk7XG4gICAgfVxuXG4gICAgdmFyIG9iID0ge307XG4gICAgb2IuZ2V0U2hhcGVQcm9wID0gZ2V0U2hhcGVQcm9wO1xuICAgIG9iLmdldENvbnN0cnVjdG9yRnVuY3Rpb24gPSBnZXRDb25zdHJ1Y3RvckZ1bmN0aW9uO1xuICAgIG9iLmdldEtleWZyYW1lZENvbnN0cnVjdG9yRnVuY3Rpb24gPSBnZXRLZXlmcmFtZWRDb25zdHJ1Y3RvckZ1bmN0aW9uO1xuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIC8qIVxuICAgVHJhbnNmb3JtYXRpb24gTWF0cml4IHYyLjBcbiAgIChjKSBFcGlzdGVtZXggMjAxNC0yMDE1XG4gICB3d3cuZXBpc3RlbWV4LmNvbVxuICAgQnkgS2VuIEZ5cnN0ZW5iZXJnXG4gICBDb250cmlidXRpb25zIGJ5IGxlZW9uaXlhLlxuICAgTGljZW5zZTogTUlULCBoZWFkZXIgcmVxdWlyZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiAyRCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggb2JqZWN0IGluaXRpYWxpemVkIHdpdGggaWRlbnRpdHkgbWF0cml4LlxuICAgKlxuICAgKiBUaGUgbWF0cml4IGNhbiBzeW5jaHJvbml6ZSBhIGNhbnZhcyBjb250ZXh0IGJ5IHN1cHBseWluZyB0aGUgY29udGV4dFxuICAgKiBhcyBhbiBhcmd1bWVudCwgb3IgbGF0ZXIgYXBwbHkgY3VycmVudCBhYnNvbHV0ZSB0cmFuc2Zvcm0gdG8gYW5cbiAgICogZXhpc3RpbmcgY29udGV4dC5cbiAgICpcbiAgICogQWxsIHZhbHVlcyBhcmUgaGFuZGxlZCBhcyBmbG9hdGluZyBwb2ludCB2YWx1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY29udGV4dF0gLSBPcHRpb25hbCBjb250ZXh0IHRvIHN5bmMgd2l0aCBNYXRyaXhcbiAgICogQHByb3Age251bWJlcn0gYSAtIHNjYWxlIHhcbiAgICogQHByb3Age251bWJlcn0gYiAtIHNoZWFyIHlcbiAgICogQHByb3Age251bWJlcn0gYyAtIHNoZWFyIHhcbiAgICogQHByb3Age251bWJlcn0gZCAtIHNjYWxlIHlcbiAgICogQHByb3Age251bWJlcn0gZSAtIHRyYW5zbGF0ZSB4XG4gICAqIEBwcm9wIHtudW1iZXJ9IGYgLSB0cmFuc2xhdGUgeVxuICAgKiBAcHJvcCB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfG51bGx9IFtjb250ZXh0PW51bGxdIC0gc2V0IG9yIGdldCBjdXJyZW50IGNhbnZhcyBjb250ZXh0XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cblxuICB2YXIgTWF0cml4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY29zID0gTWF0aC5jb3M7XG4gICAgdmFyIF9zaW4gPSBNYXRoLnNpbjtcbiAgICB2YXIgX3RhbiA9IE1hdGgudGFuO1xuICAgIHZhciBfcm5kID0gTWF0aC5yb3VuZDtcblxuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5wcm9wc1swXSA9IDE7XG4gICAgICB0aGlzLnByb3BzWzFdID0gMDtcbiAgICAgIHRoaXMucHJvcHNbMl0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1szXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzRdID0gMDtcbiAgICAgIHRoaXMucHJvcHNbNV0gPSAxO1xuICAgICAgdGhpcy5wcm9wc1s2XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzddID0gMDtcbiAgICAgIHRoaXMucHJvcHNbOF0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1s5XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzEwXSA9IDE7XG4gICAgICB0aGlzLnByb3BzWzExXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzEyXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzEzXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzE0XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzE1XSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGUoYW5nbGUpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QobUNvcywgLW1TaW4sIDAsIDAsIG1TaW4sIG1Db3MsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdGF0ZVgoYW5nbGUpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgMCwgMCwgMCwgbUNvcywgLW1TaW4sIDAsIDAsIG1TaW4sIG1Db3MsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdGF0ZVkoYW5nbGUpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QobUNvcywgMCwgbVNpbiwgMCwgMCwgMSwgMCwgMCwgLW1TaW4sIDAsIG1Db3MsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdGF0ZVooYW5nbGUpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QobUNvcywgLW1TaW4sIDAsIDAsIG1TaW4sIG1Db3MsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNoZWFyKHN4LCBzeSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgc3ksIHN4LCAxLCAwLCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBza2V3KGF4LCBheSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hlYXIoX3RhbihheCksIF90YW4oYXkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBza2V3RnJvbUF4aXMoYXgsIGFuZ2xlKSB7XG4gICAgICB2YXIgbUNvcyA9IF9jb3MoYW5nbGUpO1xuXG4gICAgICB2YXIgbVNpbiA9IF9zaW4oYW5nbGUpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fdChtQ29zLCBtU2luLCAwLCAwLCAtbVNpbiwgbUNvcywgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSkuX3QoMSwgMCwgMCwgMCwgX3RhbihheCksIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEpLl90KG1Db3MsIC1tU2luLCAwLCAwLCBtU2luLCBtQ29zLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxKTsgLy8gcmV0dXJuIHRoaXMuX3QobUNvcywgbVNpbiwgLW1TaW4sIG1Db3MsIDAsIDApLl90KDEsIDAsIF90YW4oYXgpLCAxLCAwLCAwKS5fdChtQ29zLCAtbVNpbiwgbVNpbiwgbUNvcywgMCwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbGUoc3gsIHN5LCBzeikge1xuICAgICAgaWYgKCFzeiAmJiBzeiAhPT0gMCkge1xuICAgICAgICBzeiA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChzeCA9PT0gMSAmJiBzeSA9PT0gMSAmJiBzeiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3Qoc3gsIDAsIDAsIDAsIDAsIHN5LCAwLCAwLCAwLCAwLCBzeiwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYsIGcsIGgsIGksIGosIGssIGwsIG0sIG4sIG8sIHApIHtcbiAgICAgIHRoaXMucHJvcHNbMF0gPSBhO1xuICAgICAgdGhpcy5wcm9wc1sxXSA9IGI7XG4gICAgICB0aGlzLnByb3BzWzJdID0gYztcbiAgICAgIHRoaXMucHJvcHNbM10gPSBkO1xuICAgICAgdGhpcy5wcm9wc1s0XSA9IGU7XG4gICAgICB0aGlzLnByb3BzWzVdID0gZjtcbiAgICAgIHRoaXMucHJvcHNbNl0gPSBnO1xuICAgICAgdGhpcy5wcm9wc1s3XSA9IGg7XG4gICAgICB0aGlzLnByb3BzWzhdID0gaTtcbiAgICAgIHRoaXMucHJvcHNbOV0gPSBqO1xuICAgICAgdGhpcy5wcm9wc1sxMF0gPSBrO1xuICAgICAgdGhpcy5wcm9wc1sxMV0gPSBsO1xuICAgICAgdGhpcy5wcm9wc1sxMl0gPSBtO1xuICAgICAgdGhpcy5wcm9wc1sxM10gPSBuO1xuICAgICAgdGhpcy5wcm9wc1sxNF0gPSBvO1xuICAgICAgdGhpcy5wcm9wc1sxNV0gPSBwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKHR4LCB0eSwgdHopIHtcbiAgICAgIHR6ID0gdHogfHwgMDtcblxuICAgICAgaWYgKHR4ICE9PSAwIHx8IHR5ICE9PSAwIHx8IHR6ICE9PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIHR4LCB0eSwgdHosIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0oYTIsIGIyLCBjMiwgZDIsIGUyLCBmMiwgZzIsIGgyLCBpMiwgajIsIGsyLCBsMiwgbTIsIG4yLCBvMiwgcDIpIHtcbiAgICAgIHZhciBfcCA9IHRoaXMucHJvcHM7XG5cbiAgICAgIGlmIChhMiA9PT0gMSAmJiBiMiA9PT0gMCAmJiBjMiA9PT0gMCAmJiBkMiA9PT0gMCAmJiBlMiA9PT0gMCAmJiBmMiA9PT0gMSAmJiBnMiA9PT0gMCAmJiBoMiA9PT0gMCAmJiBpMiA9PT0gMCAmJiBqMiA9PT0gMCAmJiBrMiA9PT0gMSAmJiBsMiA9PT0gMCkge1xuICAgICAgICAvLyBOT1RFOiBjb21tZW50aW5nIHRoaXMgY29uZGl0aW9uIGJlY2F1c2UgVHVyYm9GYW4gZGVvcHRpbWl6ZXMgY29kZSB3aGVuIHByZXNlbnRcbiAgICAgICAgLy8gaWYobTIgIT09IDAgfHwgbjIgIT09IDAgfHwgbzIgIT09IDApe1xuICAgICAgICBfcFsxMl0gPSBfcFsxMl0gKiBhMiArIF9wWzE1XSAqIG0yO1xuICAgICAgICBfcFsxM10gPSBfcFsxM10gKiBmMiArIF9wWzE1XSAqIG4yO1xuICAgICAgICBfcFsxNF0gPSBfcFsxNF0gKiBrMiArIF9wWzE1XSAqIG8yO1xuICAgICAgICBfcFsxNV0gKj0gcDI7IC8vIH1cblxuICAgICAgICB0aGlzLl9pZGVudGl0eUNhbGN1bGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBhMSA9IF9wWzBdO1xuICAgICAgdmFyIGIxID0gX3BbMV07XG4gICAgICB2YXIgYzEgPSBfcFsyXTtcbiAgICAgIHZhciBkMSA9IF9wWzNdO1xuICAgICAgdmFyIGUxID0gX3BbNF07XG4gICAgICB2YXIgZjEgPSBfcFs1XTtcbiAgICAgIHZhciBnMSA9IF9wWzZdO1xuICAgICAgdmFyIGgxID0gX3BbN107XG4gICAgICB2YXIgaTEgPSBfcFs4XTtcbiAgICAgIHZhciBqMSA9IF9wWzldO1xuICAgICAgdmFyIGsxID0gX3BbMTBdO1xuICAgICAgdmFyIGwxID0gX3BbMTFdO1xuICAgICAgdmFyIG0xID0gX3BbMTJdO1xuICAgICAgdmFyIG4xID0gX3BbMTNdO1xuICAgICAgdmFyIG8xID0gX3BbMTRdO1xuICAgICAgdmFyIHAxID0gX3BbMTVdO1xuICAgICAgLyogbWF0cml4IG9yZGVyIChjYW52YXMgY29tcGF0aWJsZSk6XG4gICAgICAgICAgICogYWNlXG4gICAgICAgICAgICogYmRmXG4gICAgICAgICAgICogMDAxXG4gICAgICAgICAgICovXG5cbiAgICAgIF9wWzBdID0gYTEgKiBhMiArIGIxICogZTIgKyBjMSAqIGkyICsgZDEgKiBtMjtcbiAgICAgIF9wWzFdID0gYTEgKiBiMiArIGIxICogZjIgKyBjMSAqIGoyICsgZDEgKiBuMjtcbiAgICAgIF9wWzJdID0gYTEgKiBjMiArIGIxICogZzIgKyBjMSAqIGsyICsgZDEgKiBvMjtcbiAgICAgIF9wWzNdID0gYTEgKiBkMiArIGIxICogaDIgKyBjMSAqIGwyICsgZDEgKiBwMjtcbiAgICAgIF9wWzRdID0gZTEgKiBhMiArIGYxICogZTIgKyBnMSAqIGkyICsgaDEgKiBtMjtcbiAgICAgIF9wWzVdID0gZTEgKiBiMiArIGYxICogZjIgKyBnMSAqIGoyICsgaDEgKiBuMjtcbiAgICAgIF9wWzZdID0gZTEgKiBjMiArIGYxICogZzIgKyBnMSAqIGsyICsgaDEgKiBvMjtcbiAgICAgIF9wWzddID0gZTEgKiBkMiArIGYxICogaDIgKyBnMSAqIGwyICsgaDEgKiBwMjtcbiAgICAgIF9wWzhdID0gaTEgKiBhMiArIGoxICogZTIgKyBrMSAqIGkyICsgbDEgKiBtMjtcbiAgICAgIF9wWzldID0gaTEgKiBiMiArIGoxICogZjIgKyBrMSAqIGoyICsgbDEgKiBuMjtcbiAgICAgIF9wWzEwXSA9IGkxICogYzIgKyBqMSAqIGcyICsgazEgKiBrMiArIGwxICogbzI7XG4gICAgICBfcFsxMV0gPSBpMSAqIGQyICsgajEgKiBoMiArIGsxICogbDIgKyBsMSAqIHAyO1xuICAgICAgX3BbMTJdID0gbTEgKiBhMiArIG4xICogZTIgKyBvMSAqIGkyICsgcDEgKiBtMjtcbiAgICAgIF9wWzEzXSA9IG0xICogYjIgKyBuMSAqIGYyICsgbzEgKiBqMiArIHAxICogbjI7XG4gICAgICBfcFsxNF0gPSBtMSAqIGMyICsgbjEgKiBnMiArIG8xICogazIgKyBwMSAqIG8yO1xuICAgICAgX3BbMTVdID0gbTEgKiBkMiArIG4xICogaDIgKyBvMSAqIGwyICsgcDEgKiBwMjtcbiAgICAgIHRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkobWF0cml4KSB7XG4gICAgICB2YXIgbWF0cml4UHJvcHMgPSBtYXRyaXgucHJvcHM7XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0obWF0cml4UHJvcHNbMF0sIG1hdHJpeFByb3BzWzFdLCBtYXRyaXhQcm9wc1syXSwgbWF0cml4UHJvcHNbM10sIG1hdHJpeFByb3BzWzRdLCBtYXRyaXhQcm9wc1s1XSwgbWF0cml4UHJvcHNbNl0sIG1hdHJpeFByb3BzWzddLCBtYXRyaXhQcm9wc1s4XSwgbWF0cml4UHJvcHNbOV0sIG1hdHJpeFByb3BzWzEwXSwgbWF0cml4UHJvcHNbMTFdLCBtYXRyaXhQcm9wc1sxMl0sIG1hdHJpeFByb3BzWzEzXSwgbWF0cml4UHJvcHNbMTRdLCBtYXRyaXhQcm9wc1sxNV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpdHkoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCkge1xuICAgICAgICB0aGlzLl9pZGVudGl0eSA9ICEodGhpcy5wcm9wc1swXSAhPT0gMSB8fCB0aGlzLnByb3BzWzFdICE9PSAwIHx8IHRoaXMucHJvcHNbMl0gIT09IDAgfHwgdGhpcy5wcm9wc1szXSAhPT0gMCB8fCB0aGlzLnByb3BzWzRdICE9PSAwIHx8IHRoaXMucHJvcHNbNV0gIT09IDEgfHwgdGhpcy5wcm9wc1s2XSAhPT0gMCB8fCB0aGlzLnByb3BzWzddICE9PSAwIHx8IHRoaXMucHJvcHNbOF0gIT09IDAgfHwgdGhpcy5wcm9wc1s5XSAhPT0gMCB8fCB0aGlzLnByb3BzWzEwXSAhPT0gMSB8fCB0aGlzLnByb3BzWzExXSAhPT0gMCB8fCB0aGlzLnByb3BzWzEyXSAhPT0gMCB8fCB0aGlzLnByb3BzWzEzXSAhPT0gMCB8fCB0aGlzLnByb3BzWzE0XSAhPT0gMCB8fCB0aGlzLnByb3BzWzE1XSAhPT0gMSk7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9pZGVudGl0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcXVhbHMobWF0cikge1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IDE2KSB7XG4gICAgICAgIGlmIChtYXRyLnByb3BzW2ldICE9PSB0aGlzLnByb3BzW2ldKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZShtYXRyKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgICAgbWF0ci5wcm9wc1tpXSA9IHRoaXMucHJvcHNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lRnJvbVByb3BzKHByb3BzKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5wcm9wc1tpXSA9IHByb3BzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9Qb2ludCh4LCB5LCB6KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiB4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXSxcbiAgICAgICAgeTogeCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM10sXG4gICAgICAgIHo6IHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XVxuICAgICAgfTtcbiAgICAgIC8qIHJldHVybiB7XG4gICAgICAgICAgIHg6IHggKiBtZS5hICsgeSAqIG1lLmMgKyBtZS5lLFxuICAgICAgICAgICB5OiB4ICogbWUuYiArIHkgKiBtZS5kICsgbWUuZlxuICAgICAgICAgICB9OyAqL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9YKHgsIHksIHopIHtcbiAgICAgIHJldHVybiB4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvWSh4LCB5LCB6KSB7XG4gICAgICByZXR1cm4geCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1ooeCwgeSwgeikge1xuICAgICAgcmV0dXJuIHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJbnZlcnNlTWF0cml4KCkge1xuICAgICAgdmFyIGRldGVybWluYW50ID0gdGhpcy5wcm9wc1swXSAqIHRoaXMucHJvcHNbNV0gLSB0aGlzLnByb3BzWzFdICogdGhpcy5wcm9wc1s0XTtcbiAgICAgIHZhciBhID0gdGhpcy5wcm9wc1s1XSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGIgPSAtdGhpcy5wcm9wc1sxXSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGMgPSAtdGhpcy5wcm9wc1s0XSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGQgPSB0aGlzLnByb3BzWzBdIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgZSA9ICh0aGlzLnByb3BzWzRdICogdGhpcy5wcm9wc1sxM10gLSB0aGlzLnByb3BzWzVdICogdGhpcy5wcm9wc1sxMl0pIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgZiA9IC0odGhpcy5wcm9wc1swXSAqIHRoaXMucHJvcHNbMTNdIC0gdGhpcy5wcm9wc1sxXSAqIHRoaXMucHJvcHNbMTJdKSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgICBpbnZlcnNlTWF0cml4LnByb3BzWzBdID0gYTtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMV0gPSBiO1xuICAgICAgaW52ZXJzZU1hdHJpeC5wcm9wc1s0XSA9IGM7XG4gICAgICBpbnZlcnNlTWF0cml4LnByb3BzWzVdID0gZDtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMTJdID0gZTtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMTNdID0gZjtcbiAgICAgIHJldHVybiBpbnZlcnNlTWF0cml4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmVyc2VQb2ludChwdCkge1xuICAgICAgdmFyIGludmVyc2VNYXRyaXggPSB0aGlzLmdldEludmVyc2VNYXRyaXgoKTtcbiAgICAgIHJldHVybiBpbnZlcnNlTWF0cml4LmFwcGx5VG9Qb2ludEFycmF5KHB0WzBdLCBwdFsxXSwgcHRbMl0gfHwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJzZVBvaW50cyhwdHMpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHB0cy5sZW5ndGg7XG4gICAgICB2YXIgcmV0UHRzID0gW107XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZXRQdHNbaV0gPSBpbnZlcnNlUG9pbnQocHRzW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldFB0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvVHJpcGxlUG9pbnRzKHB0MSwgcHQyLCBwdDMpIHtcbiAgICAgIHZhciBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgNik7XG5cbiAgICAgIGlmICh0aGlzLmlzSWRlbnRpdHkoKSkge1xuICAgICAgICBhcnJbMF0gPSBwdDFbMF07XG4gICAgICAgIGFyclsxXSA9IHB0MVsxXTtcbiAgICAgICAgYXJyWzJdID0gcHQyWzBdO1xuICAgICAgICBhcnJbM10gPSBwdDJbMV07XG4gICAgICAgIGFycls0XSA9IHB0M1swXTtcbiAgICAgICAgYXJyWzVdID0gcHQzWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHAwID0gdGhpcy5wcm9wc1swXTtcbiAgICAgICAgdmFyIHAxID0gdGhpcy5wcm9wc1sxXTtcbiAgICAgICAgdmFyIHA0ID0gdGhpcy5wcm9wc1s0XTtcbiAgICAgICAgdmFyIHA1ID0gdGhpcy5wcm9wc1s1XTtcbiAgICAgICAgdmFyIHAxMiA9IHRoaXMucHJvcHNbMTJdO1xuICAgICAgICB2YXIgcDEzID0gdGhpcy5wcm9wc1sxM107XG4gICAgICAgIGFyclswXSA9IHB0MVswXSAqIHAwICsgcHQxWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFyclsxXSA9IHB0MVswXSAqIHAxICsgcHQxWzFdICogcDUgKyBwMTM7XG4gICAgICAgIGFyclsyXSA9IHB0MlswXSAqIHAwICsgcHQyWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFyclszXSA9IHB0MlswXSAqIHAxICsgcHQyWzFdICogcDUgKyBwMTM7XG4gICAgICAgIGFycls0XSA9IHB0M1swXSAqIHAwICsgcHQzWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFycls1XSA9IHB0M1swXSAqIHAxICsgcHQzWzFdICogcDUgKyBwMTM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1BvaW50QXJyYXkoeCwgeSwgeikge1xuICAgICAgdmFyIGFycjtcblxuICAgICAgaWYgKHRoaXMuaXNJZGVudGl0eSgpKSB7XG4gICAgICAgIGFyciA9IFt4LCB5LCB6XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyciA9IFt4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXSwgeCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM10sIHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoeCwgeSkge1xuICAgICAgaWYgKHRoaXMuaXNJZGVudGl0eSgpKSB7XG4gICAgICAgIHJldHVybiB4ICsgJywnICsgeTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wID0gdGhpcy5wcm9wcztcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKCh4ICogX3BbMF0gKyB5ICogX3BbNF0gKyBfcFsxMl0pICogMTAwKSAvIDEwMCArICcsJyArIE1hdGgucm91bmQoKHggKiBfcFsxXSArIHkgKiBfcFs1XSArIF9wWzEzXSkgKiAxMDApIC8gMTAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQ1NTKCkge1xuICAgICAgLy8gRG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgdG8gYWRkIHRoaXMgb3B0aW1pemF0aW9uLiBJZiBpdCBpcyBhbiBpZGVudGl0eSBtYXRyaXgsIGl0J3MgdmVyeSBsaWtlbHkgdGhpcyB3aWxsIGdldCBjYWxsZWQgb25seSBvbmNlIHNpbmNlIGl0IHdvbid0IGJlIGtleWZyYW1lZC5cblxuICAgICAgLyogaWYodGhpcy5pc0lkZW50aXR5KCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgIH0gKi9cbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgY3NzVmFsdWUgPSAnbWF0cml4M2QoJztcbiAgICAgIHZhciB2ID0gMTAwMDA7XG5cbiAgICAgIHdoaWxlIChpIDwgMTYpIHtcbiAgICAgICAgY3NzVmFsdWUgKz0gX3JuZChwcm9wc1tpXSAqIHYpIC8gdjtcbiAgICAgICAgY3NzVmFsdWUgKz0gaSA9PT0gMTUgPyAnKScgOiAnLCc7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNzc1ZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdW5kTWF0cml4UHJvcGVydHkodmFsKSB7XG4gICAgICB2YXIgdiA9IDEwMDAwO1xuXG4gICAgICBpZiAodmFsIDwgMC4wMDAwMDEgJiYgdmFsID4gMCB8fCB2YWwgPiAtMC4wMDAwMDEgJiYgdmFsIDwgMCkge1xuICAgICAgICByZXR1cm4gX3JuZCh2YWwgKiB2KSAvIHY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8yZENTUygpIHtcbiAgICAgIC8vIERvZXNuJ3QgbWFrZSBtdWNoIHNlbnNlIHRvIGFkZCB0aGlzIG9wdGltaXphdGlvbi4gSWYgaXQgaXMgYW4gaWRlbnRpdHkgbWF0cml4LCBpdCdzIHZlcnkgbGlrZWx5IHRoaXMgd2lsbCBnZXQgY2FsbGVkIG9ubHkgb25jZSBzaW5jZSBpdCB3b24ndCBiZSBrZXlmcmFtZWQuXG5cbiAgICAgIC8qIGlmKHRoaXMuaXNJZGVudGl0eSgpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9ICovXG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuXG4gICAgICB2YXIgX2EgPSByb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzBdKTtcblxuICAgICAgdmFyIF9iID0gcm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1sxXSk7XG5cbiAgICAgIHZhciBfYyA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbNF0pO1xuXG4gICAgICB2YXIgX2QgPSByb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzVdKTtcblxuICAgICAgdmFyIF9lID0gcm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1sxMl0pO1xuXG4gICAgICB2YXIgX2YgPSByb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzEzXSk7XG5cbiAgICAgIHJldHVybiAnbWF0cml4KCcgKyBfYSArICcsJyArIF9iICsgJywnICsgX2MgKyAnLCcgKyBfZCArICcsJyArIF9lICsgJywnICsgX2YgKyAnKSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucmVzZXQgPSByZXNldDtcbiAgICAgIHRoaXMucm90YXRlID0gcm90YXRlO1xuICAgICAgdGhpcy5yb3RhdGVYID0gcm90YXRlWDtcbiAgICAgIHRoaXMucm90YXRlWSA9IHJvdGF0ZVk7XG4gICAgICB0aGlzLnJvdGF0ZVogPSByb3RhdGVaO1xuICAgICAgdGhpcy5za2V3ID0gc2tldztcbiAgICAgIHRoaXMuc2tld0Zyb21BeGlzID0gc2tld0Zyb21BeGlzO1xuICAgICAgdGhpcy5zaGVhciA9IHNoZWFyO1xuICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICAgICAgdGhpcy5zZXRUcmFuc2Zvcm0gPSBzZXRUcmFuc2Zvcm07XG4gICAgICB0aGlzLnRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbiAgICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgdGhpcy5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgICAgdGhpcy5hcHBseVRvUG9pbnQgPSBhcHBseVRvUG9pbnQ7XG4gICAgICB0aGlzLmFwcGx5VG9YID0gYXBwbHlUb1g7XG4gICAgICB0aGlzLmFwcGx5VG9ZID0gYXBwbHlUb1k7XG4gICAgICB0aGlzLmFwcGx5VG9aID0gYXBwbHlUb1o7XG4gICAgICB0aGlzLmFwcGx5VG9Qb2ludEFycmF5ID0gYXBwbHlUb1BvaW50QXJyYXk7XG4gICAgICB0aGlzLmFwcGx5VG9UcmlwbGVQb2ludHMgPSBhcHBseVRvVHJpcGxlUG9pbnRzO1xuICAgICAgdGhpcy5hcHBseVRvUG9pbnRTdHJpbmdpZmllZCA9IGFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkO1xuICAgICAgdGhpcy50b0NTUyA9IHRvQ1NTO1xuICAgICAgdGhpcy50bzJkQ1NTID0gdG8yZENTUztcbiAgICAgIHRoaXMuY2xvbmUgPSBjbG9uZTtcbiAgICAgIHRoaXMuY2xvbmVGcm9tUHJvcHMgPSBjbG9uZUZyb21Qcm9wcztcbiAgICAgIHRoaXMuZXF1YWxzID0gZXF1YWxzO1xuICAgICAgdGhpcy5pbnZlcnNlUG9pbnRzID0gaW52ZXJzZVBvaW50cztcbiAgICAgIHRoaXMuaW52ZXJzZVBvaW50ID0gaW52ZXJzZVBvaW50O1xuICAgICAgdGhpcy5nZXRJbnZlcnNlTWF0cml4ID0gZ2V0SW52ZXJzZU1hdHJpeDtcbiAgICAgIHRoaXMuX3QgPSB0aGlzLnRyYW5zZm9ybTtcbiAgICAgIHRoaXMuaXNJZGVudGl0eSA9IGlzSWRlbnRpdHk7XG4gICAgICB0aGlzLl9pZGVudGl0eSA9IHRydWU7XG4gICAgICB0aGlzLl9pZGVudGl0eUNhbGN1bGF0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucHJvcHMgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgMTYpO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfdHlwZW9mJDMob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkMyA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDMgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQzKG9iaik7IH1cbiAgdmFyIGxvdHRpZSA9IHt9O1xuICB2YXIgc3RhbmRhbG9uZSA9ICdfX1tTVEFOREFMT05FXV9fJztcbiAgdmFyIGFuaW1hdGlvbkRhdGEgPSAnX19bQU5JTUFUSU9OREFUQV1fXyc7XG4gIHZhciByZW5kZXJlciA9ICcnO1xuXG4gIGZ1bmN0aW9uIHNldExvY2F0aW9uKGhyZWYpIHtcbiAgICBzZXRMb2NhdGlvbkhyZWYoaHJlZik7XG4gIH1cblxuICBmdW5jdGlvbiBzZWFyY2hBbmltYXRpb25zKCkge1xuICAgIGlmIChzdGFuZGFsb25lID09PSB0cnVlKSB7XG4gICAgICBhbmltYXRpb25NYW5hZ2VyLnNlYXJjaEFuaW1hdGlvbnMoYW5pbWF0aW9uRGF0YSwgc3RhbmRhbG9uZSwgcmVuZGVyZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbmltYXRpb25NYW5hZ2VyLnNlYXJjaEFuaW1hdGlvbnMoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRTdWJmcmFtZVJlbmRlcmluZyhmbGFnKSB7XG4gICAgc2V0U3ViZnJhbWVFbmFibGVkKGZsYWcpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0UHJlZml4KHByZWZpeCkge1xuICAgIHNldElkUHJlZml4KHByZWZpeCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQW5pbWF0aW9uKHBhcmFtcykge1xuICAgIGlmIChzdGFuZGFsb25lID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXMuYW5pbWF0aW9uRGF0YSA9IEpTT04ucGFyc2UoYW5pbWF0aW9uRGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuaW1hdGlvbk1hbmFnZXIubG9hZEFuaW1hdGlvbihwYXJhbXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0UXVhbGl0eSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ2hpZ2gnOlxuICAgICAgICAgIHNldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKDIwMCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgY2FzZSAnbWVkaXVtJzpcbiAgICAgICAgICBzZXREZWZhdWx0Q3VydmVTZWdtZW50cyg1MCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbG93JzpcbiAgICAgICAgICBzZXREZWZhdWx0Q3VydmVTZWdtZW50cygxMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNOYU4odmFsdWUpICYmIHZhbHVlID4gMSkge1xuICAgICAgc2V0RGVmYXVsdEN1cnZlU2VnbWVudHModmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChnZXREZWZhdWx0Q3VydmVTZWdtZW50cygpID49IDUwKSB7XG4gICAgICByb3VuZFZhbHVlcyhmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdW5kVmFsdWVzKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluQnJvd3NlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnN0YWxsUGx1Z2luKHR5cGUsIHBsdWdpbikge1xuICAgIGlmICh0eXBlID09PSAnZXhwcmVzc2lvbnMnKSB7XG4gICAgICBzZXRFeHByZXNzaW9uc1BsdWdpbihwbHVnaW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZhY3RvcnkobmFtZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSAncHJvcGVydHlGYWN0b3J5JzpcbiAgICAgICAgcmV0dXJuIFByb3BlcnR5RmFjdG9yeTtcblxuICAgICAgY2FzZSAnc2hhcGVQcm9wZXJ0eUZhY3RvcnknOlxuICAgICAgICByZXR1cm4gU2hhcGVQcm9wZXJ0eUZhY3Rvcnk7XG5cbiAgICAgIGNhc2UgJ21hdHJpeCc6XG4gICAgICAgIHJldHVybiBNYXRyaXg7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGxvdHRpZS5wbGF5ID0gYW5pbWF0aW9uTWFuYWdlci5wbGF5O1xuICBsb3R0aWUucGF1c2UgPSBhbmltYXRpb25NYW5hZ2VyLnBhdXNlO1xuICBsb3R0aWUuc2V0TG9jYXRpb25IcmVmID0gc2V0TG9jYXRpb247XG4gIGxvdHRpZS50b2dnbGVQYXVzZSA9IGFuaW1hdGlvbk1hbmFnZXIudG9nZ2xlUGF1c2U7XG4gIGxvdHRpZS5zZXRTcGVlZCA9IGFuaW1hdGlvbk1hbmFnZXIuc2V0U3BlZWQ7XG4gIGxvdHRpZS5zZXREaXJlY3Rpb24gPSBhbmltYXRpb25NYW5hZ2VyLnNldERpcmVjdGlvbjtcbiAgbG90dGllLnN0b3AgPSBhbmltYXRpb25NYW5hZ2VyLnN0b3A7XG4gIGxvdHRpZS5zZWFyY2hBbmltYXRpb25zID0gc2VhcmNoQW5pbWF0aW9ucztcbiAgbG90dGllLnJlZ2lzdGVyQW5pbWF0aW9uID0gYW5pbWF0aW9uTWFuYWdlci5yZWdpc3RlckFuaW1hdGlvbjtcbiAgbG90dGllLmxvYWRBbmltYXRpb24gPSBsb2FkQW5pbWF0aW9uO1xuICBsb3R0aWUuc2V0U3ViZnJhbWVSZW5kZXJpbmcgPSBzZXRTdWJmcmFtZVJlbmRlcmluZztcbiAgbG90dGllLnJlc2l6ZSA9IGFuaW1hdGlvbk1hbmFnZXIucmVzaXplOyAvLyBsb3R0aWUuc3RhcnQgPSBzdGFydDtcblxuICBsb3R0aWUuZ29Ub0FuZFN0b3AgPSBhbmltYXRpb25NYW5hZ2VyLmdvVG9BbmRTdG9wO1xuICBsb3R0aWUuZGVzdHJveSA9IGFuaW1hdGlvbk1hbmFnZXIuZGVzdHJveTtcbiAgbG90dGllLnNldFF1YWxpdHkgPSBzZXRRdWFsaXR5O1xuICBsb3R0aWUuaW5Ccm93c2VyID0gaW5Ccm93c2VyO1xuICBsb3R0aWUuaW5zdGFsbFBsdWdpbiA9IGluc3RhbGxQbHVnaW47XG4gIGxvdHRpZS5mcmVlemUgPSBhbmltYXRpb25NYW5hZ2VyLmZyZWV6ZTtcbiAgbG90dGllLnVuZnJlZXplID0gYW5pbWF0aW9uTWFuYWdlci51bmZyZWV6ZTtcbiAgbG90dGllLnNldFZvbHVtZSA9IGFuaW1hdGlvbk1hbmFnZXIuc2V0Vm9sdW1lO1xuICBsb3R0aWUubXV0ZSA9IGFuaW1hdGlvbk1hbmFnZXIubXV0ZTtcbiAgbG90dGllLnVubXV0ZSA9IGFuaW1hdGlvbk1hbmFnZXIudW5tdXRlO1xuICBsb3R0aWUuZ2V0UmVnaXN0ZXJlZEFuaW1hdGlvbnMgPSBhbmltYXRpb25NYW5hZ2VyLmdldFJlZ2lzdGVyZWRBbmltYXRpb25zO1xuICBsb3R0aWUudXNlV2ViV29ya2VyID0gc2V0V2ViV29ya2VyO1xuICBsb3R0aWUuc2V0SURQcmVmaXggPSBzZXRQcmVmaXg7XG4gIGxvdHRpZS5fX2dldEZhY3RvcnkgPSBnZXRGYWN0b3J5O1xuICBsb3R0aWUudmVyc2lvbiA9ICc1LjEyLjInO1xuXG4gIGZ1bmN0aW9uIGNoZWNrUmVhZHkoKSB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwocmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWwpO1xuICAgICAgc2VhcmNoQW5pbWF0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFF1ZXJ5VmFyaWFibGUodmFyaWFibGUpIHtcbiAgICB2YXIgdmFycyA9IHF1ZXJ5U3RyaW5nLnNwbGl0KCcmJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBwYWlyID0gdmFyc1tpXS5zcGxpdCgnPScpO1xuXG4gICAgICBpZiAoZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pID09IHZhcmlhYmxlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcXVlcnlTdHJpbmcgPSAnJztcblxuICBpZiAoc3RhbmRhbG9uZSkge1xuICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgIHZhciBpbmRleCA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcbiAgICB2YXIgbXlTY3JpcHQgPSBzY3JpcHRzW2luZGV4XSB8fCB7XG4gICAgICBzcmM6ICcnXG4gICAgfTtcbiAgICBxdWVyeVN0cmluZyA9IG15U2NyaXB0LnNyYyA/IG15U2NyaXB0LnNyYy5yZXBsYWNlKC9eW15cXD9dK1xcPz8vLCAnJykgOiAnJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuXG4gICAgcmVuZGVyZXIgPSBnZXRRdWVyeVZhcmlhYmxlKCdyZW5kZXJlcicpO1xuICB9XG5cbiAgdmFyIHJlYWR5U3RhdGVDaGVja0ludGVydmFsID0gc2V0SW50ZXJ2YWwoY2hlY2tSZWFkeSwgMTAwKTsgLy8gdGhpcyBhZGRzIGJvZHltb3ZpbiB0byB0aGUgd2luZG93IG9iamVjdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblxuICB0cnkge1xuICAgIGlmICghKCh0eXBlb2YgZXhwb3J0cyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mJDMoZXhwb3J0cykpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiYgISh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICApIHtcbiAgICAgIHdpbmRvdy5ib2R5bW92aW4gPSBsb3R0aWU7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHsvL1xuICB9XG5cbiAgdmFyIFNoYXBlTW9kaWZpZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYiA9IHt9O1xuICAgIHZhciBtb2RpZmllcnMgPSB7fTtcbiAgICBvYi5yZWdpc3Rlck1vZGlmaWVyID0gcmVnaXN0ZXJNb2RpZmllcjtcbiAgICBvYi5nZXRNb2RpZmllciA9IGdldE1vZGlmaWVyO1xuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJNb2RpZmllcihubSwgZmFjdG9yeSkge1xuICAgICAgaWYgKCFtb2RpZmllcnNbbm1dKSB7XG4gICAgICAgIG1vZGlmaWVyc1tubV0gPSBmYWN0b3J5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE1vZGlmaWVyKG5tLCBlbGVtLCBkYXRhKSB7XG4gICAgICByZXR1cm4gbmV3IG1vZGlmaWVyc1tubV0oZWxlbSwgZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gU2hhcGVNb2RpZmllcigpIHt9XG5cbiAgU2hhcGVNb2RpZmllci5wcm90b3R5cGUuaW5pdE1vZGlmaWVyUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIFNoYXBlTW9kaWZpZXIucHJvdG90eXBlLmFkZFNoYXBlVG9Nb2RpZmllciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIFNoYXBlTW9kaWZpZXIucHJvdG90eXBlLmFkZFNoYXBlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAvLyBBZGRpbmcgc2hhcGUgdG8gZHluYW1pYyBwcm9wZXJ0aWVzLiBJdCBjb3ZlcnMgdGhlIGNhc2Ugd2hlcmUgYSBzaGFwZSBoYXMgbm8gZWZmZWN0cyBhcHBsaWVkLCB0byByZXNldCBpdCdzIF9tZGYgc3RhdGUgb24gZXZlcnkgdGljay5cbiAgICAgIGRhdGEuc2guY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eShkYXRhLnNoKTtcbiAgICAgIHZhciBzaGFwZURhdGEgPSB7XG4gICAgICAgIHNoYXBlOiBkYXRhLnNoLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbjogc2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKVxuICAgICAgfTtcbiAgICAgIHRoaXMuc2hhcGVzLnB1c2goc2hhcGVEYXRhKTtcbiAgICAgIHRoaXMuYWRkU2hhcGVUb01vZGlmaWVyKHNoYXBlRGF0YSk7XG5cbiAgICAgIGlmICh0aGlzLl9pc0FuaW1hdGVkKSB7XG4gICAgICAgIGRhdGEuc2V0QXNBbmltYXRlZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLnNoYXBlcyA9IFtdO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgIHRoaXMuaW5pdE1vZGlmaWVyUHJvcGVydGllcyhlbGVtLCBkYXRhKTtcbiAgICB0aGlzLmZyYW1lSWQgPSBpbml0aWFsRGVmYXVsdEZyYW1lO1xuICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIFNoYXBlTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NLZXlzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG4gIH07XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTaGFwZU1vZGlmaWVyKTtcblxuICBmdW5jdGlvbiBUcmltTW9kaWZpZXIoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU2hhcGVNb2RpZmllcl0sIFRyaW1Nb2RpZmllcik7XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLnMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnMsIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMuZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuZSwgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vLCAwLCAwLCB0aGlzKTtcbiAgICB0aGlzLnNWYWx1ZSA9IDA7XG4gICAgdGhpcy5lVmFsdWUgPSAwO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLnByb2Nlc3NLZXlzO1xuICAgIHRoaXMubSA9IGRhdGEubTtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLnMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCB8fCAhIXRoaXMuZS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoIHx8ICEhdGhpcy5vLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZVRvTW9kaWZpZXIgPSBmdW5jdGlvbiAoc2hhcGVEYXRhKSB7XG4gICAgc2hhcGVEYXRhLnBhdGhzRGF0YSA9IFtdO1xuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUuY2FsY3VsYXRlU2hhcGVFZGdlcyA9IGZ1bmN0aW9uIChzLCBlLCBzaGFwZUxlbmd0aCwgYWRkZWRMZW5ndGgsIHRvdGFsTW9kaWZpZXJMZW5ndGgpIHtcbiAgICB2YXIgc2VnbWVudHMgPSBbXTtcblxuICAgIGlmIChlIDw9IDEpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICBzOiBzLFxuICAgICAgICBlOiBlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHMgPj0gMSkge1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIHM6IHMgLSAxLFxuICAgICAgICBlOiBlIC0gMVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICBzOiBzLFxuICAgICAgICBlOiAxXG4gICAgICB9KTtcbiAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICBzOiAwLFxuICAgICAgICBlOiBlIC0gMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHNoYXBlU2VnbWVudHMgPSBbXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gc2VnbWVudHMubGVuZ3RoO1xuICAgIHZhciBzZWdtZW50T2I7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHNlZ21lbnRPYiA9IHNlZ21lbnRzW2ldO1xuXG4gICAgICBpZiAoIShzZWdtZW50T2IuZSAqIHRvdGFsTW9kaWZpZXJMZW5ndGggPCBhZGRlZExlbmd0aCB8fCBzZWdtZW50T2IucyAqIHRvdGFsTW9kaWZpZXJMZW5ndGggPiBhZGRlZExlbmd0aCArIHNoYXBlTGVuZ3RoKSkge1xuICAgICAgICB2YXIgc2hhcGVTO1xuICAgICAgICB2YXIgc2hhcGVFO1xuXG4gICAgICAgIGlmIChzZWdtZW50T2IucyAqIHRvdGFsTW9kaWZpZXJMZW5ndGggPD0gYWRkZWRMZW5ndGgpIHtcbiAgICAgICAgICBzaGFwZVMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoYXBlUyA9IChzZWdtZW50T2IucyAqIHRvdGFsTW9kaWZpZXJMZW5ndGggLSBhZGRlZExlbmd0aCkgLyBzaGFwZUxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWdtZW50T2IuZSAqIHRvdGFsTW9kaWZpZXJMZW5ndGggPj0gYWRkZWRMZW5ndGggKyBzaGFwZUxlbmd0aCkge1xuICAgICAgICAgIHNoYXBlRSA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVFID0gKHNlZ21lbnRPYi5lICogdG90YWxNb2RpZmllckxlbmd0aCAtIGFkZGVkTGVuZ3RoKSAvIHNoYXBlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hhcGVTZWdtZW50cy5wdXNoKFtzaGFwZVMsIHNoYXBlRV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghc2hhcGVTZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIHNoYXBlU2VnbWVudHMucHVzaChbMCwgMF0pO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFwZVNlZ21lbnRzO1xuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUucmVsZWFzZVBhdGhzRGF0YSA9IGZ1bmN0aW9uIChwYXRoc0RhdGEpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gcGF0aHNEYXRhLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgc2VnbWVudHNMZW5ndGhQb29sLnJlbGVhc2UocGF0aHNEYXRhW2ldKTtcbiAgICB9XG5cbiAgICBwYXRoc0RhdGEubGVuZ3RoID0gMDtcbiAgICByZXR1cm4gcGF0aHNEYXRhO1xuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcyA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIHM7XG4gICAgdmFyIGU7XG5cbiAgICBpZiAodGhpcy5fbWRmIHx8IF9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHZhciBvID0gdGhpcy5vLnYgJSAzNjAgLyAzNjA7XG5cbiAgICAgIGlmIChvIDwgMCkge1xuICAgICAgICBvICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnMudiA+IDEpIHtcbiAgICAgICAgcyA9IDEgKyBvO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnMudiA8IDApIHtcbiAgICAgICAgcyA9IDAgKyBvO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IHRoaXMucy52ICsgbztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZS52ID4gMSkge1xuICAgICAgICBlID0gMSArIG87XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZS52IDwgMCkge1xuICAgICAgICBlID0gMCArIG87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlID0gdGhpcy5lLnYgKyBvO1xuICAgICAgfVxuXG4gICAgICBpZiAocyA+IGUpIHtcbiAgICAgICAgdmFyIF9zID0gcztcbiAgICAgICAgcyA9IGU7XG4gICAgICAgIGUgPSBfcztcbiAgICAgIH1cblxuICAgICAgcyA9IE1hdGgucm91bmQocyAqIDEwMDAwKSAqIDAuMDAwMTtcbiAgICAgIGUgPSBNYXRoLnJvdW5kKGUgKiAxMDAwMCkgKiAwLjAwMDE7XG4gICAgICB0aGlzLnNWYWx1ZSA9IHM7XG4gICAgICB0aGlzLmVWYWx1ZSA9IGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSB0aGlzLnNWYWx1ZTtcbiAgICAgIGUgPSB0aGlzLmVWYWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgc2hhcGVQYXRocztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zaGFwZXMubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBwYXRoc0RhdGE7XG4gICAgdmFyIHBhdGhEYXRhO1xuICAgIHZhciB0b3RhbFNoYXBlTGVuZ3RoO1xuICAgIHZhciB0b3RhbE1vZGlmaWVyTGVuZ3RoID0gMDtcblxuICAgIGlmIChlID09PSBzKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5zaGFwZXNbaV0ubG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICB0aGlzLnNoYXBlc1tpXS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zaGFwZXNbaV0uc2hhcGUucGF0aHMgPSB0aGlzLnNoYXBlc1tpXS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgICBpZiAodGhpcy5fbWRmKSB7XG4gICAgICAgICAgdGhpcy5zaGFwZXNbaV0ucGF0aHNEYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoZSA9PT0gMSAmJiBzID09PSAwIHx8IGUgPT09IDAgJiYgcyA9PT0gMSkpIHtcbiAgICAgIHZhciBzZWdtZW50cyA9IFtdO1xuICAgICAgdmFyIHNoYXBlRGF0YTtcbiAgICAgIHZhciBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlRGF0YSA9IHRoaXMuc2hhcGVzW2ldOyAvLyBpZiBzaGFwZSBoYXNuJ3QgY2hhbmdlZCBhbmQgdHJpbSBwcm9wZXJ0aWVzIGhhdmVuJ3QgY2hhbmdlZCwgY2FjaGVkIHByZXZpb3VzIHBhdGggY2FuIGJlIHVzZWRcblxuICAgICAgICBpZiAoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUgJiYgdGhpcy5tICE9PSAyKSB7XG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLnBhdGhzID0gc2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoYXBlUGF0aHMgPSBzaGFwZURhdGEuc2hhcGUucGF0aHM7XG4gICAgICAgICAgakxlbiA9IHNoYXBlUGF0aHMuX2xlbmd0aDtcbiAgICAgICAgICB0b3RhbFNoYXBlTGVuZ3RoID0gMDtcblxuICAgICAgICAgIGlmICghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgc2hhcGVEYXRhLnBhdGhzRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRvdGFsU2hhcGVMZW5ndGggPSBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGF0aHNEYXRhID0gdGhpcy5yZWxlYXNlUGF0aHNEYXRhKHNoYXBlRGF0YS5wYXRoc0RhdGEpO1xuXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICAgIHBhdGhEYXRhID0gYmV6LmdldFNlZ21lbnRzTGVuZ3RoKHNoYXBlUGF0aHMuc2hhcGVzW2pdKTtcbiAgICAgICAgICAgICAgcGF0aHNEYXRhLnB1c2gocGF0aERhdGEpO1xuICAgICAgICAgICAgICB0b3RhbFNoYXBlTGVuZ3RoICs9IHBhdGhEYXRhLnRvdGFsTGVuZ3RoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCA9IHRvdGFsU2hhcGVMZW5ndGg7XG4gICAgICAgICAgICBzaGFwZURhdGEucGF0aHNEYXRhID0gcGF0aHNEYXRhO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRvdGFsTW9kaWZpZXJMZW5ndGggKz0gdG90YWxTaGFwZUxlbmd0aDtcbiAgICAgICAgICBzaGFwZURhdGEuc2hhcGUuX21kZiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHNoYXBlUyA9IHM7XG4gICAgICB2YXIgc2hhcGVFID0gZTtcbiAgICAgIHZhciBhZGRlZExlbmd0aCA9IDA7XG4gICAgICB2YXIgZWRnZXM7XG5cbiAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIHNoYXBlRGF0YSA9IHRoaXMuc2hhcGVzW2ldO1xuXG4gICAgICAgIGlmIChzaGFwZURhdGEuc2hhcGUuX21kZikge1xuICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uID0gc2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLnJlbGVhc2VTaGFwZXMoKTsgLy8gaWYgbSA9PT0gMiBtZWFucyBwYXRocyBhcmUgdHJpbW1lZCBpbmRpdmlkdWFsbHkgc28gZWRnZXMgbmVlZCB0byBiZSBmb3VuZCBmb3IgdGhpcyBzcGVjaWZpYyBzaGFwZSByZWxhdGl2ZSB0byB3aG9lbCBncm91cFxuXG4gICAgICAgICAgaWYgKHRoaXMubSA9PT0gMiAmJiBsZW4gPiAxKSB7XG4gICAgICAgICAgICBlZGdlcyA9IHRoaXMuY2FsY3VsYXRlU2hhcGVFZGdlcyhzLCBlLCBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCwgYWRkZWRMZW5ndGgsIHRvdGFsTW9kaWZpZXJMZW5ndGgpO1xuICAgICAgICAgICAgYWRkZWRMZW5ndGggKz0gc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVkZ2VzID0gW1tzaGFwZVMsIHNoYXBlRV1dO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGpMZW4gPSBlZGdlcy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBzaGFwZVMgPSBlZGdlc1tqXVswXTtcbiAgICAgICAgICAgIHNoYXBlRSA9IGVkZ2VzW2pdWzFdO1xuICAgICAgICAgICAgc2VnbWVudHMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgaWYgKHNoYXBlRSA8PSAxKSB7XG4gICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHM6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoICogc2hhcGVTLFxuICAgICAgICAgICAgICAgIGU6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoICogc2hhcGVFXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzaGFwZVMgPj0gMSkge1xuICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzOiBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCAqIChzaGFwZVMgLSAxKSxcbiAgICAgICAgICAgICAgICBlOiBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCAqIChzaGFwZUUgLSAxKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHM6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoICogc2hhcGVTLFxuICAgICAgICAgICAgICAgIGU6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzOiAwLFxuICAgICAgICAgICAgICAgIGU6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoICogKHNoYXBlRSAtIDEpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbmV3U2hhcGVzRGF0YSA9IHRoaXMuYWRkU2hhcGVzKHNoYXBlRGF0YSwgc2VnbWVudHNbMF0pO1xuXG4gICAgICAgICAgICBpZiAoc2VnbWVudHNbMF0ucyAhPT0gc2VnbWVudHNbMF0uZSkge1xuICAgICAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0U2hhcGVJbkNvbGxlY3Rpb24gPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzW3NoYXBlRGF0YS5zaGFwZS5wYXRocy5fbGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgICAgICBpZiAobGFzdFNoYXBlSW5Db2xsZWN0aW9uLmMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBsYXN0U2hhcGUgPSBuZXdTaGFwZXNEYXRhLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5hZGRQYXRocyhuZXdTaGFwZXNEYXRhLCBsb2NhbFNoYXBlQ29sbGVjdGlvbik7XG4gICAgICAgICAgICAgICAgICBuZXdTaGFwZXNEYXRhID0gdGhpcy5hZGRTaGFwZXMoc2hhcGVEYXRhLCBzZWdtZW50c1sxXSwgbGFzdFNoYXBlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhpcy5hZGRQYXRocyhuZXdTaGFwZXNEYXRhLCBsb2NhbFNoYXBlQ29sbGVjdGlvbik7XG4gICAgICAgICAgICAgICAgICBuZXdTaGFwZXNEYXRhID0gdGhpcy5hZGRTaGFwZXMoc2hhcGVEYXRhLCBzZWdtZW50c1sxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5hZGRQYXRocyhuZXdTaGFwZXNEYXRhLCBsb2NhbFNoYXBlQ29sbGVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLnBhdGhzID0gbG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX21kZikge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIC8vIFJlbGVhc2lnbiBUcmltIENhY2hlZCBwYXRocyBkYXRhIHdoZW4gbm8gdHJpbSBhcHBsaWVkIGluIGNhc2Ugc2hhcGVzIGFyZSBtb2RpZmllZCBpbmJldHdlZW4uXG4gICAgICAgIC8vIERvbid0IHJlbW92ZSB0aGlzIGV2ZW4gaWYgaXQncyBsb3NpbmcgY2FjaGVkIGluZm8uXG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLnBhdGhzRGF0YS5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnNoYXBlc1tpXS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRQYXRocyA9IGZ1bmN0aW9uIChuZXdQYXRocywgbG9jYWxTaGFwZUNvbGxlY3Rpb24pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gbmV3UGF0aHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZShuZXdQYXRoc1tpXSk7XG4gICAgfVxuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUuYWRkU2VnbWVudCA9IGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzLCBwdDQsIHNoYXBlUGF0aCwgcG9zLCBuZXdTaGFwZSkge1xuICAgIHNoYXBlUGF0aC5zZXRYWUF0KHB0MlswXSwgcHQyWzFdLCAnbycsIHBvcyk7XG4gICAgc2hhcGVQYXRoLnNldFhZQXQocHQzWzBdLCBwdDNbMV0sICdpJywgcG9zICsgMSk7XG5cbiAgICBpZiAobmV3U2hhcGUpIHtcbiAgICAgIHNoYXBlUGF0aC5zZXRYWUF0KHB0MVswXSwgcHQxWzFdLCAndicsIHBvcyk7XG4gICAgfVxuXG4gICAgc2hhcGVQYXRoLnNldFhZQXQocHQ0WzBdLCBwdDRbMV0sICd2JywgcG9zICsgMSk7XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTZWdtZW50RnJvbUFycmF5ID0gZnVuY3Rpb24gKHBvaW50cywgc2hhcGVQYXRoLCBwb3MsIG5ld1NoYXBlKSB7XG4gICAgc2hhcGVQYXRoLnNldFhZQXQocG9pbnRzWzFdLCBwb2ludHNbNV0sICdvJywgcG9zKTtcbiAgICBzaGFwZVBhdGguc2V0WFlBdChwb2ludHNbMl0sIHBvaW50c1s2XSwgJ2knLCBwb3MgKyAxKTtcblxuICAgIGlmIChuZXdTaGFwZSkge1xuICAgICAgc2hhcGVQYXRoLnNldFhZQXQocG9pbnRzWzBdLCBwb2ludHNbNF0sICd2JywgcG9zKTtcbiAgICB9XG5cbiAgICBzaGFwZVBhdGguc2V0WFlBdChwb2ludHNbM10sIHBvaW50c1s3XSwgJ3YnLCBwb3MgKyAxKTtcbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmFkZFNoYXBlcyA9IGZ1bmN0aW9uIChzaGFwZURhdGEsIHNoYXBlU2VnbWVudCwgc2hhcGVQYXRoKSB7XG4gICAgdmFyIHBhdGhzRGF0YSA9IHNoYXBlRGF0YS5wYXRoc0RhdGE7XG4gICAgdmFyIHNoYXBlUGF0aHMgPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgYWRkZWRMZW5ndGggPSAwO1xuICAgIHZhciBjdXJyZW50TGVuZ3RoRGF0YTtcbiAgICB2YXIgc2VnbWVudENvdW50O1xuICAgIHZhciBsZW5ndGhzO1xuICAgIHZhciBzZWdtZW50O1xuICAgIHZhciBzaGFwZXMgPSBbXTtcbiAgICB2YXIgaW5pdFBvcztcbiAgICB2YXIgbmV3U2hhcGUgPSB0cnVlO1xuXG4gICAgaWYgKCFzaGFwZVBhdGgpIHtcbiAgICAgIHNoYXBlUGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICBzZWdtZW50Q291bnQgPSAwO1xuICAgICAgaW5pdFBvcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlZ21lbnRDb3VudCA9IHNoYXBlUGF0aC5fbGVuZ3RoO1xuICAgICAgaW5pdFBvcyA9IHNoYXBlUGF0aC5fbGVuZ3RoO1xuICAgIH1cblxuICAgIHNoYXBlcy5wdXNoKHNoYXBlUGF0aCk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGxlbmd0aHMgPSBwYXRoc0RhdGFbaV0ubGVuZ3RocztcbiAgICAgIHNoYXBlUGF0aC5jID0gc2hhcGVQYXRoc1tpXS5jO1xuICAgICAgakxlbiA9IHNoYXBlUGF0aHNbaV0uYyA/IGxlbmd0aHMubGVuZ3RoIDogbGVuZ3Rocy5sZW5ndGggKyAxO1xuXG4gICAgICBmb3IgKGogPSAxOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgIGN1cnJlbnRMZW5ndGhEYXRhID0gbGVuZ3Roc1tqIC0gMV07XG5cbiAgICAgICAgaWYgKGFkZGVkTGVuZ3RoICsgY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGggPCBzaGFwZVNlZ21lbnQucykge1xuICAgICAgICAgIGFkZGVkTGVuZ3RoICs9IGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoO1xuICAgICAgICAgIHNoYXBlUGF0aC5jID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoYWRkZWRMZW5ndGggPiBzaGFwZVNlZ21lbnQuZSkge1xuICAgICAgICAgIHNoYXBlUGF0aC5jID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNoYXBlU2VnbWVudC5zIDw9IGFkZGVkTGVuZ3RoICYmIHNoYXBlU2VnbWVudC5lID49IGFkZGVkTGVuZ3RoICsgY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkU2VnbWVudChzaGFwZVBhdGhzW2ldLnZbaiAtIDFdLCBzaGFwZVBhdGhzW2ldLm9baiAtIDFdLCBzaGFwZVBhdGhzW2ldLmlbal0sIHNoYXBlUGF0aHNbaV0udltqXSwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTtcbiAgICAgICAgICAgIG5ld1NoYXBlID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlZ21lbnQgPSBiZXouZ2V0TmV3U2VnbWVudChzaGFwZVBhdGhzW2ldLnZbaiAtIDFdLCBzaGFwZVBhdGhzW2ldLnZbal0sIHNoYXBlUGF0aHNbaV0ub1tqIC0gMV0sIHNoYXBlUGF0aHNbaV0uaVtqXSwgKHNoYXBlU2VnbWVudC5zIC0gYWRkZWRMZW5ndGgpIC8gY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGgsIChzaGFwZVNlZ21lbnQuZSAtIGFkZGVkTGVuZ3RoKSAvIGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoLCBsZW5ndGhzW2ogLSAxXSk7XG4gICAgICAgICAgICB0aGlzLmFkZFNlZ21lbnRGcm9tQXJyYXkoc2VnbWVudCwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTsgLy8gdGhpcy5hZGRTZWdtZW50KHNlZ21lbnQucHQxLCBzZWdtZW50LnB0Mywgc2VnbWVudC5wdDQsIHNlZ21lbnQucHQyLCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpO1xuXG4gICAgICAgICAgICBuZXdTaGFwZSA9IGZhbHNlO1xuICAgICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZGRlZExlbmd0aCArPSBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aDtcbiAgICAgICAgICBzZWdtZW50Q291bnQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2hhcGVQYXRoc1tpXS5jICYmIGxlbmd0aHMubGVuZ3RoKSB7XG4gICAgICAgIGN1cnJlbnRMZW5ndGhEYXRhID0gbGVuZ3Roc1tqIC0gMV07XG5cbiAgICAgICAgaWYgKGFkZGVkTGVuZ3RoIDw9IHNoYXBlU2VnbWVudC5lKSB7XG4gICAgICAgICAgdmFyIHNlZ21lbnRMZW5ndGggPSBsZW5ndGhzW2ogLSAxXS5hZGRlZExlbmd0aDtcblxuICAgICAgICAgIGlmIChzaGFwZVNlZ21lbnQucyA8PSBhZGRlZExlbmd0aCAmJiBzaGFwZVNlZ21lbnQuZSA+PSBhZGRlZExlbmd0aCArIHNlZ21lbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkU2VnbWVudChzaGFwZVBhdGhzW2ldLnZbaiAtIDFdLCBzaGFwZVBhdGhzW2ldLm9baiAtIDFdLCBzaGFwZVBhdGhzW2ldLmlbMF0sIHNoYXBlUGF0aHNbaV0udlswXSwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTtcbiAgICAgICAgICAgIG5ld1NoYXBlID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlZ21lbnQgPSBiZXouZ2V0TmV3U2VnbWVudChzaGFwZVBhdGhzW2ldLnZbaiAtIDFdLCBzaGFwZVBhdGhzW2ldLnZbMF0sIHNoYXBlUGF0aHNbaV0ub1tqIC0gMV0sIHNoYXBlUGF0aHNbaV0uaVswXSwgKHNoYXBlU2VnbWVudC5zIC0gYWRkZWRMZW5ndGgpIC8gc2VnbWVudExlbmd0aCwgKHNoYXBlU2VnbWVudC5lIC0gYWRkZWRMZW5ndGgpIC8gc2VnbWVudExlbmd0aCwgbGVuZ3Roc1tqIC0gMV0pO1xuICAgICAgICAgICAgdGhpcy5hZGRTZWdtZW50RnJvbUFycmF5KHNlZ21lbnQsIHNoYXBlUGF0aCwgc2VnbWVudENvdW50LCBuZXdTaGFwZSk7IC8vIHRoaXMuYWRkU2VnbWVudChzZWdtZW50LnB0MSwgc2VnbWVudC5wdDMsIHNlZ21lbnQucHQ0LCBzZWdtZW50LnB0Miwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTtcblxuICAgICAgICAgICAgbmV3U2hhcGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHNoYXBlUGF0aC5jID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoYXBlUGF0aC5jID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBhZGRlZExlbmd0aCArPSBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aDtcbiAgICAgICAgc2VnbWVudENvdW50ICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGFwZVBhdGguX2xlbmd0aCkge1xuICAgICAgICBzaGFwZVBhdGguc2V0WFlBdChzaGFwZVBhdGgudltpbml0UG9zXVswXSwgc2hhcGVQYXRoLnZbaW5pdFBvc11bMV0sICdpJywgaW5pdFBvcyk7XG4gICAgICAgIHNoYXBlUGF0aC5zZXRYWUF0KHNoYXBlUGF0aC52W3NoYXBlUGF0aC5fbGVuZ3RoIC0gMV1bMF0sIHNoYXBlUGF0aC52W3NoYXBlUGF0aC5fbGVuZ3RoIC0gMV1bMV0sICdvJywgc2hhcGVQYXRoLl9sZW5ndGggLSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZGVkTGVuZ3RoID4gc2hhcGVTZWdtZW50LmUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChpIDwgbGVuIC0gMSkge1xuICAgICAgICBzaGFwZVBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgICBuZXdTaGFwZSA9IHRydWU7XG4gICAgICAgIHNoYXBlcy5wdXNoKHNoYXBlUGF0aCk7XG4gICAgICAgIHNlZ21lbnRDb3VudCA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYXBlcztcbiAgfTtcblxuICBmdW5jdGlvbiBQdWNrZXJBbmRCbG9hdE1vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBQdWNrZXJBbmRCbG9hdE1vZGlmaWVyKTtcblxuICBQdWNrZXJBbmRCbG9hdE1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLmFtb3VudCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYSwgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9ICEhdGhpcy5hbW91bnQuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgfTtcblxuICBQdWNrZXJBbmRCbG9hdE1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBhbW91bnQpIHtcbiAgICB2YXIgcGVyY2VudCA9IGFtb3VudCAvIDEwMDtcbiAgICB2YXIgY2VudGVyUG9pbnQgPSBbMCwgMF07XG4gICAgdmFyIHBhdGhMZW5ndGggPSBwYXRoLl9sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHBhdGhMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY2VudGVyUG9pbnRbMF0gKz0gcGF0aC52W2ldWzBdO1xuICAgICAgY2VudGVyUG9pbnRbMV0gKz0gcGF0aC52W2ldWzFdO1xuICAgIH1cblxuICAgIGNlbnRlclBvaW50WzBdIC89IHBhdGhMZW5ndGg7XG4gICAgY2VudGVyUG9pbnRbMV0gLz0gcGF0aExlbmd0aDtcbiAgICB2YXIgY2xvbmVkUGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgY2xvbmVkUGF0aC5jID0gcGF0aC5jO1xuICAgIHZhciB2WDtcbiAgICB2YXIgdlk7XG4gICAgdmFyIG9YO1xuICAgIHZhciBvWTtcbiAgICB2YXIgaVg7XG4gICAgdmFyIGlZO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHBhdGhMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdlggPSBwYXRoLnZbaV1bMF0gKyAoY2VudGVyUG9pbnRbMF0gLSBwYXRoLnZbaV1bMF0pICogcGVyY2VudDtcbiAgICAgIHZZID0gcGF0aC52W2ldWzFdICsgKGNlbnRlclBvaW50WzFdIC0gcGF0aC52W2ldWzFdKSAqIHBlcmNlbnQ7XG4gICAgICBvWCA9IHBhdGgub1tpXVswXSArIChjZW50ZXJQb2ludFswXSAtIHBhdGgub1tpXVswXSkgKiAtcGVyY2VudDtcbiAgICAgIG9ZID0gcGF0aC5vW2ldWzFdICsgKGNlbnRlclBvaW50WzFdIC0gcGF0aC5vW2ldWzFdKSAqIC1wZXJjZW50O1xuICAgICAgaVggPSBwYXRoLmlbaV1bMF0gKyAoY2VudGVyUG9pbnRbMF0gLSBwYXRoLmlbaV1bMF0pICogLXBlcmNlbnQ7XG4gICAgICBpWSA9IHBhdGguaVtpXVsxXSArIChjZW50ZXJQb2ludFsxXSAtIHBhdGguaVtpXVsxXSkgKiAtcGVyY2VudDtcbiAgICAgIGNsb25lZFBhdGguc2V0VHJpcGxlQXQodlgsIHZZLCBvWCwgb1ksIGlYLCBpWSwgaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lZFBhdGg7XG4gIH07XG5cbiAgUHVja2VyQW5kQmxvYXRNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcyA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIHNoYXBlUGF0aHM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgYW1vdW50ID0gdGhpcy5hbW91bnQudjtcblxuICAgIGlmIChhbW91bnQgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIGFtb3VudCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNoYXBlRGF0YS5zaGFwZS5wYXRocyA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVmYXVsdFZlY3RvciA9IFswLCAwXTtcblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9NYXRyaXgobWF0KSB7XG4gICAgICB2YXIgX21kZiA9IHRoaXMuX21kZjtcbiAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG4gICAgICB0aGlzLl9tZGYgPSB0aGlzLl9tZGYgfHwgX21kZjtcblxuICAgICAgaWYgKHRoaXMuYSkge1xuICAgICAgICBtYXQudHJhbnNsYXRlKC10aGlzLmEudlswXSwgLXRoaXMuYS52WzFdLCB0aGlzLmEudlsyXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnMpIHtcbiAgICAgICAgbWF0LnNjYWxlKHRoaXMucy52WzBdLCB0aGlzLnMudlsxXSwgdGhpcy5zLnZbMl0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaykge1xuICAgICAgICBtYXQuc2tld0Zyb21BeGlzKC10aGlzLnNrLnYsIHRoaXMuc2Eudik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnIpIHtcbiAgICAgICAgbWF0LnJvdGF0ZSgtdGhpcy5yLnYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0LnJvdGF0ZVooLXRoaXMucnoudikucm90YXRlWSh0aGlzLnJ5LnYpLnJvdGF0ZVgodGhpcy5yeC52KS5yb3RhdGVaKC10aGlzLm9yLnZbMl0pLnJvdGF0ZVkodGhpcy5vci52WzFdKS5yb3RhdGVYKHRoaXMub3IudlswXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEucC5zKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEucC56KSB7XG4gICAgICAgICAgbWF0LnRyYW5zbGF0ZSh0aGlzLnB4LnYsIHRoaXMucHkudiwgLXRoaXMucHoudik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0LnRyYW5zbGF0ZSh0aGlzLnB4LnYsIHRoaXMucHkudiwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdC50cmFuc2xhdGUodGhpcy5wLnZbMF0sIHRoaXMucC52WzFdLCAtdGhpcy5wLnZbMl0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NLZXlzKGZvcmNlUmVuZGVyKSB7XG4gICAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzRGlydHkpIHtcbiAgICAgICAgdGhpcy5wcmVjYWxjdWxhdGVNYXRyaXgoKTtcbiAgICAgICAgdGhpcy5faXNEaXJ0eSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuXG4gICAgICBpZiAodGhpcy5fbWRmIHx8IGZvcmNlUmVuZGVyKSB7XG4gICAgICAgIHZhciBmcmFtZVJhdGU7XG4gICAgICAgIHRoaXMudi5jbG9uZUZyb21Qcm9wcyh0aGlzLnByZS5wcm9wcyk7XG5cbiAgICAgICAgaWYgKHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDEpIHtcbiAgICAgICAgICB0aGlzLnYudHJhbnNsYXRlKC10aGlzLmEudlswXSwgLXRoaXMuYS52WzFdLCB0aGlzLmEudlsyXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgMikge1xuICAgICAgICAgIHRoaXMudi5zY2FsZSh0aGlzLnMudlswXSwgdGhpcy5zLnZbMV0sIHRoaXMucy52WzJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNrICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDMpIHtcbiAgICAgICAgICB0aGlzLnYuc2tld0Zyb21BeGlzKC10aGlzLnNrLnYsIHRoaXMuc2Eudik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5yICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDQpIHtcbiAgICAgICAgICB0aGlzLnYucm90YXRlKC10aGlzLnIudik7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuciAmJiB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCA0KSB7XG4gICAgICAgICAgdGhpcy52LnJvdGF0ZVooLXRoaXMucnoudikucm90YXRlWSh0aGlzLnJ5LnYpLnJvdGF0ZVgodGhpcy5yeC52KS5yb3RhdGVaKC10aGlzLm9yLnZbMl0pLnJvdGF0ZVkodGhpcy5vci52WzFdKS5yb3RhdGVYKHRoaXMub3IudlswXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hdXRvT3JpZW50ZWQpIHtcbiAgICAgICAgICB2YXIgdjE7XG4gICAgICAgICAgdmFyIHYyO1xuICAgICAgICAgIGZyYW1lUmF0ZSA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcblxuICAgICAgICAgIGlmICh0aGlzLnAgJiYgdGhpcy5wLmtleWZyYW1lcyAmJiB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnAuX2NhY2hpbmcubGFzdEZyYW1lICsgdGhpcy5wLm9mZnNldFRpbWUgPD0gdGhpcy5wLmtleWZyYW1lc1swXS50KSB7XG4gICAgICAgICAgICAgIHYxID0gdGhpcy5wLmdldFZhbHVlQXRUaW1lKCh0aGlzLnAua2V5ZnJhbWVzWzBdLnQgKyAwLjAxKSAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYyID0gdGhpcy5wLmdldFZhbHVlQXRUaW1lKHRoaXMucC5rZXlmcmFtZXNbMF0udCAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucC5fY2FjaGluZy5sYXN0RnJhbWUgKyB0aGlzLnAub2Zmc2V0VGltZSA+PSB0aGlzLnAua2V5ZnJhbWVzW3RoaXMucC5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCkge1xuICAgICAgICAgICAgICB2MSA9IHRoaXMucC5nZXRWYWx1ZUF0VGltZSh0aGlzLnAua2V5ZnJhbWVzW3RoaXMucC5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYyID0gdGhpcy5wLmdldFZhbHVlQXRUaW1lKCh0aGlzLnAua2V5ZnJhbWVzW3RoaXMucC5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAtIDAuMDUpIC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHYxID0gdGhpcy5wLnB2O1xuICAgICAgICAgICAgICB2MiA9IHRoaXMucC5nZXRWYWx1ZUF0VGltZSgodGhpcy5wLl9jYWNoaW5nLmxhc3RGcmFtZSArIHRoaXMucC5vZmZzZXRUaW1lIC0gMC4wMSkgLyBmcmFtZVJhdGUsIHRoaXMucC5vZmZzZXRUaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHggJiYgdGhpcy5weC5rZXlmcmFtZXMgJiYgdGhpcy5weS5rZXlmcmFtZXMgJiYgdGhpcy5weC5nZXRWYWx1ZUF0VGltZSAmJiB0aGlzLnB5LmdldFZhbHVlQXRUaW1lKSB7XG4gICAgICAgICAgICB2MSA9IFtdO1xuICAgICAgICAgICAgdjIgPSBbXTtcbiAgICAgICAgICAgIHZhciBweCA9IHRoaXMucHg7XG4gICAgICAgICAgICB2YXIgcHkgPSB0aGlzLnB5O1xuXG4gICAgICAgICAgICBpZiAocHguX2NhY2hpbmcubGFzdEZyYW1lICsgcHgub2Zmc2V0VGltZSA8PSBweC5rZXlmcmFtZXNbMF0udCkge1xuICAgICAgICAgICAgICB2MVswXSA9IHB4LmdldFZhbHVlQXRUaW1lKChweC5rZXlmcmFtZXNbMF0udCArIDAuMDEpIC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjFbMV0gPSBweS5nZXRWYWx1ZUF0VGltZSgocHkua2V5ZnJhbWVzWzBdLnQgKyAwLjAxKSAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYyWzBdID0gcHguZ2V0VmFsdWVBdFRpbWUocHgua2V5ZnJhbWVzWzBdLnQgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MlsxXSA9IHB5LmdldFZhbHVlQXRUaW1lKHB5LmtleWZyYW1lc1swXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHguX2NhY2hpbmcubGFzdEZyYW1lICsgcHgub2Zmc2V0VGltZSA+PSBweC5rZXlmcmFtZXNbcHgua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQpIHtcbiAgICAgICAgICAgICAgdjFbMF0gPSBweC5nZXRWYWx1ZUF0VGltZShweC5rZXlmcmFtZXNbcHgua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MVsxXSA9IHB5LmdldFZhbHVlQXRUaW1lKHB5LmtleWZyYW1lc1tweS5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYyWzBdID0gcHguZ2V0VmFsdWVBdFRpbWUoKHB4LmtleWZyYW1lc1tweC5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAtIDAuMDEpIC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjJbMV0gPSBweS5nZXRWYWx1ZUF0VGltZSgocHkua2V5ZnJhbWVzW3B5LmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC0gMC4wMSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdjEgPSBbcHgucHYsIHB5LnB2XTtcbiAgICAgICAgICAgICAgdjJbMF0gPSBweC5nZXRWYWx1ZUF0VGltZSgocHguX2NhY2hpbmcubGFzdEZyYW1lICsgcHgub2Zmc2V0VGltZSAtIDAuMDEpIC8gZnJhbWVSYXRlLCBweC5vZmZzZXRUaW1lKTtcbiAgICAgICAgICAgICAgdjJbMV0gPSBweS5nZXRWYWx1ZUF0VGltZSgocHkuX2NhY2hpbmcubGFzdEZyYW1lICsgcHkub2Zmc2V0VGltZSAtIDAuMDEpIC8gZnJhbWVSYXRlLCBweS5vZmZzZXRUaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdjIgPSBkZWZhdWx0VmVjdG9yO1xuICAgICAgICAgICAgdjEgPSB2MjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnYucm90YXRlKC1NYXRoLmF0YW4yKHYxWzFdIC0gdjJbMV0sIHYxWzBdIC0gdjJbMF0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRhdGEucCAmJiB0aGlzLmRhdGEucC5zKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZGF0YS5wLnopIHtcbiAgICAgICAgICAgIHRoaXMudi50cmFuc2xhdGUodGhpcy5weC52LCB0aGlzLnB5LnYsIC10aGlzLnB6LnYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnYudHJhbnNsYXRlKHRoaXMucHgudiwgdGhpcy5weS52LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy52LnRyYW5zbGF0ZSh0aGlzLnAudlswXSwgdGhpcy5wLnZbMV0sIC10aGlzLnAudlsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVjYWxjdWxhdGVNYXRyaXgoKSB7XG4gICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSAwO1xuICAgICAgdGhpcy5wcmUucmVzZXQoKTtcblxuICAgICAgaWYgKCF0aGlzLmEuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnByZS50cmFuc2xhdGUoLXRoaXMuYS52WzBdLCAtdGhpcy5hLnZbMV0sIHRoaXMuYS52WzJdKTtcbiAgICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnByZS5zY2FsZSh0aGlzLnMudlswXSwgdGhpcy5zLnZbMV0sIHRoaXMucy52WzJdKTtcbiAgICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2spIHtcbiAgICAgICAgaWYgKCF0aGlzLnNrLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggJiYgIXRoaXMuc2EuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMucHJlLnNrZXdGcm9tQXhpcygtdGhpcy5zay52LCB0aGlzLnNhLnYpO1xuICAgICAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLnIuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMucHJlLnJvdGF0ZSgtdGhpcy5yLnYpO1xuICAgICAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMucnouZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCAmJiAhdGhpcy5yeS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICYmICF0aGlzLnJ4LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggJiYgIXRoaXMub3IuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnByZS5yb3RhdGVaKC10aGlzLnJ6LnYpLnJvdGF0ZVkodGhpcy5yeS52KS5yb3RhdGVYKHRoaXMucngudikucm90YXRlWigtdGhpcy5vci52WzJdKS5yb3RhdGVZKHRoaXMub3IudlsxXSkucm90YXRlWCh0aGlzLm9yLnZbMF0pO1xuICAgICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSA0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGF1dG9PcmllbnQoKSB7Ly9cbiAgICAgIC8vIHZhciBwcmV2UCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGREeW5hbWljUHJvcGVydHkocHJvcCkge1xuICAgICAgdGhpcy5fYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApO1xuXG4gICAgICB0aGlzLmVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApO1xuICAgICAgdGhpcy5faXNEaXJ0eSA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gVHJhbnNmb3JtUHJvcGVydHkoZWxlbSwgZGF0YSwgY29udGFpbmVyKSB7XG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgICB0aGlzLnByb3BUeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgdGhpcy52ID0gbmV3IE1hdHJpeCgpOyAvLyBQcmVjYWxjdWxhdGVkIG1hdHJpeCB3aXRoIG5vbiBhbmltYXRlZCBwcm9wZXJ0aWVzXG5cbiAgICAgIHRoaXMucHJlID0gbmV3IE1hdHJpeCgpO1xuICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gMDtcbiAgICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihjb250YWluZXIgfHwgZWxlbSk7XG5cbiAgICAgIGlmIChkYXRhLnAgJiYgZGF0YS5wLnMpIHtcbiAgICAgICAgdGhpcy5weCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucC54LCAwLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5weSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucC55LCAwLCAwLCB0aGlzKTtcblxuICAgICAgICBpZiAoZGF0YS5wLnopIHtcbiAgICAgICAgICB0aGlzLnB6ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLnosIDAsIDAsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnAgfHwge1xuICAgICAgICAgIGs6IFswLCAwLCAwXVxuICAgICAgICB9LCAxLCAwLCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEucngpIHtcbiAgICAgICAgdGhpcy5yeCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucngsIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICAgIHRoaXMucnkgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnJ5LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgICAgICB0aGlzLnJ6ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yeiwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcblxuICAgICAgICBpZiAoZGF0YS5vci5rWzBdLnRpKSB7XG4gICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgdmFyIGxlbiA9IGRhdGEub3Iuay5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGRhdGEub3Iua1tpXS50byA9IG51bGw7XG4gICAgICAgICAgICBkYXRhLm9yLmtbaV0udGkgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3IgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm9yLCAxLCBkZWdUb1JhZHMsIHRoaXMpOyAvLyBzaCBJbmRpY2F0ZXMgaXQgbmVlZHMgdG8gYmUgY2FwcGVkIGJldHdlZW4gLTE4MCBhbmQgMTgwXG5cbiAgICAgICAgdGhpcy5vci5zaCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnIgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnIgfHwge1xuICAgICAgICAgIGs6IDBcbiAgICAgICAgfSwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEuc2spIHtcbiAgICAgICAgdGhpcy5zayA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuc2ssIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICAgIHRoaXMuc2EgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnNhLCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmEgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmEgfHwge1xuICAgICAgICBrOiBbMCwgMCwgMF1cbiAgICAgIH0sIDEsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zIHx8IHtcbiAgICAgICAgazogWzEwMCwgMTAwLCAxMDBdXG4gICAgICB9LCAxLCAwLjAxLCB0aGlzKTsgLy8gT3BhY2l0eSBpcyBub3QgcGFydCBvZiB0aGUgdHJhbnNmb3JtIHByb3BlcnRpZXMsIHRoYXQncyB3aHkgaXQgd29uJ3QgdXNlIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMuIFRoYXQgd2F5IHRyYW5zZm9ybXMgd29uJ3QgZ2V0IHVwZGF0ZWQgaWYgb3BhY2l0eSBjaGFuZ2VzLlxuXG4gICAgICBpZiAoZGF0YS5vKSB7XG4gICAgICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubywgMCwgMC4wMSwgZWxlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm8gPSB7XG4gICAgICAgICAgX21kZjogZmFsc2UsXG4gICAgICAgICAgdjogMVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc0RpcnR5ID0gdHJ1ZTtcblxuICAgICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmdldFZhbHVlKHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFRyYW5zZm9ybVByb3BlcnR5LnByb3RvdHlwZSA9IHtcbiAgICAgIGFwcGx5VG9NYXRyaXg6IGFwcGx5VG9NYXRyaXgsXG4gICAgICBnZXRWYWx1ZTogcHJvY2Vzc0tleXMsXG4gICAgICBwcmVjYWxjdWxhdGVNYXRyaXg6IHByZWNhbGN1bGF0ZU1hdHJpeCxcbiAgICAgIGF1dG9PcmllbnQ6IGF1dG9PcmllbnRcbiAgICB9O1xuICAgIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgVHJhbnNmb3JtUHJvcGVydHkpO1xuICAgIFRyYW5zZm9ybVByb3BlcnR5LnByb3RvdHlwZS5hZGREeW5hbWljUHJvcGVydHkgPSBhZGREeW5hbWljUHJvcGVydHk7XG4gICAgVHJhbnNmb3JtUHJvcGVydHkucHJvdG90eXBlLl9hZGREeW5hbWljUHJvcGVydHkgPSBEeW5hbWljUHJvcGVydHlDb250YWluZXIucHJvdG90eXBlLmFkZER5bmFtaWNQcm9wZXJ0eTtcblxuICAgIGZ1bmN0aW9uIGdldFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sIGRhdGEsIGNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1Qcm9wZXJ0eShlbGVtLCBkYXRhLCBjb250YWluZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eTogZ2V0VHJhbnNmb3JtUHJvcGVydHlcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gUmVwZWF0ZXJNb2RpZmllcigpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSwgUmVwZWF0ZXJNb2RpZmllcik7XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuaW5pdE1vZGlmaWVyUHJvcGVydGllcyA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhKSB7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMucHJvY2Vzc0tleXM7XG4gICAgdGhpcy5jID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5jLCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8sIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMudHIgPSBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkuZ2V0VHJhbnNmb3JtUHJvcGVydHkoZWxlbSwgZGF0YS50ciwgdGhpcyk7XG4gICAgdGhpcy5zbyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudHIuc28sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMuZW8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnRyLmVvLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5nZXRWYWx1ZSh0cnVlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICB0aGlzLnBNYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5yTWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMuc01hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLnRNYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuYXBwbHlUcmFuc2Zvcm1zID0gZnVuY3Rpb24gKHBNYXRyaXgsIHJNYXRyaXgsIHNNYXRyaXgsIHRyYW5zZm9ybSwgcGVyYywgaW52KSB7XG4gICAgdmFyIGRpciA9IGludiA/IC0xIDogMTtcbiAgICB2YXIgc2NhbGVYID0gdHJhbnNmb3JtLnMudlswXSArICgxIC0gdHJhbnNmb3JtLnMudlswXSkgKiAoMSAtIHBlcmMpO1xuICAgIHZhciBzY2FsZVkgPSB0cmFuc2Zvcm0ucy52WzFdICsgKDEgLSB0cmFuc2Zvcm0ucy52WzFdKSAqICgxIC0gcGVyYyk7XG4gICAgcE1hdHJpeC50cmFuc2xhdGUodHJhbnNmb3JtLnAudlswXSAqIGRpciAqIHBlcmMsIHRyYW5zZm9ybS5wLnZbMV0gKiBkaXIgKiBwZXJjLCB0cmFuc2Zvcm0ucC52WzJdKTtcbiAgICByTWF0cml4LnRyYW5zbGF0ZSgtdHJhbnNmb3JtLmEudlswXSwgLXRyYW5zZm9ybS5hLnZbMV0sIHRyYW5zZm9ybS5hLnZbMl0pO1xuICAgIHJNYXRyaXgucm90YXRlKC10cmFuc2Zvcm0uci52ICogZGlyICogcGVyYyk7XG4gICAgck1hdHJpeC50cmFuc2xhdGUodHJhbnNmb3JtLmEudlswXSwgdHJhbnNmb3JtLmEudlsxXSwgdHJhbnNmb3JtLmEudlsyXSk7XG4gICAgc01hdHJpeC50cmFuc2xhdGUoLXRyYW5zZm9ybS5hLnZbMF0sIC10cmFuc2Zvcm0uYS52WzFdLCB0cmFuc2Zvcm0uYS52WzJdKTtcbiAgICBzTWF0cml4LnNjYWxlKGludiA/IDEgLyBzY2FsZVggOiBzY2FsZVgsIGludiA/IDEgLyBzY2FsZVkgOiBzY2FsZVkpO1xuICAgIHNNYXRyaXgudHJhbnNsYXRlKHRyYW5zZm9ybS5hLnZbMF0sIHRyYW5zZm9ybS5hLnZbMV0sIHRyYW5zZm9ybS5hLnZbMl0pO1xuICB9O1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZWxlbSwgYXJyLCBwb3MsIGVsZW1zRGF0YSkge1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5hcnIgPSBhcnI7XG4gICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgdGhpcy5lbGVtc0RhdGEgPSBlbGVtc0RhdGE7XG4gICAgdGhpcy5fY3VycmVudENvcGllcyA9IDA7XG4gICAgdGhpcy5fZWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLl9ncm91cHMgPSBbXTtcbiAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzKGVsZW0sIGFycltwb3NdKTtcblxuICAgIHdoaWxlIChwb3MgPiAwKSB7XG4gICAgICBwb3MgLT0gMTsgLy8gdGhpcy5fZWxlbWVudHMudW5zaGlmdChhcnIuc3BsaWNlKHBvcywxKVswXSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnRzLnVuc2hpZnQoYXJyW3Bvc10pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5rID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXRWYWx1ZSh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUucmVzZXRFbGVtZW50cyA9IGZ1bmN0aW9uIChlbGVtZW50cykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGVsZW1lbnRzW2ldLl9wcm9jZXNzZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKGVsZW1lbnRzW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgIHRoaXMucmVzZXRFbGVtZW50cyhlbGVtZW50c1tpXS5pdCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLmNsb25lRWxlbWVudHMgPSBmdW5jdGlvbiAoZWxlbWVudHMpIHtcbiAgICB2YXIgbmV3RWxlbWVudHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGVsZW1lbnRzKSk7XG4gICAgdGhpcy5yZXNldEVsZW1lbnRzKG5ld0VsZW1lbnRzKTtcbiAgICByZXR1cm4gbmV3RWxlbWVudHM7XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuY2hhbmdlR3JvdXBSZW5kZXIgPSBmdW5jdGlvbiAoZWxlbWVudHMsIHJlbmRlckZsYWcpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBlbGVtZW50c1tpXS5fcmVuZGVyID0gcmVuZGVyRmxhZztcblxuICAgICAgaWYgKGVsZW1lbnRzW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlR3JvdXBSZW5kZXIoZWxlbWVudHNbaV0uaXQsIHJlbmRlckZsYWcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgaXRlbXM7XG4gICAgdmFyIGl0ZW1zVHJhbnNmb3JtO1xuICAgIHZhciBpO1xuICAgIHZhciBkaXI7XG4gICAgdmFyIGNvbnQ7XG4gICAgdmFyIGhhc1JlbG9hZGVkID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5fbWRmIHx8IF9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHZhciBjb3BpZXMgPSBNYXRoLmNlaWwodGhpcy5jLnYpO1xuXG4gICAgICBpZiAodGhpcy5fZ3JvdXBzLmxlbmd0aCA8IGNvcGllcykge1xuICAgICAgICB3aGlsZSAodGhpcy5fZ3JvdXBzLmxlbmd0aCA8IGNvcGllcykge1xuICAgICAgICAgIHZhciBncm91cCA9IHtcbiAgICAgICAgICAgIGl0OiB0aGlzLmNsb25lRWxlbWVudHModGhpcy5fZWxlbWVudHMpLFxuICAgICAgICAgICAgdHk6ICdncidcbiAgICAgICAgICB9O1xuICAgICAgICAgIGdyb3VwLml0LnB1c2goe1xuICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICBpeDogMSxcbiAgICAgICAgICAgICAgazogWzAsIDBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm06ICdUcmFuc2Zvcm0nLFxuICAgICAgICAgICAgbzoge1xuICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICBpeDogNyxcbiAgICAgICAgICAgICAgazogMTAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcDoge1xuICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICBpeDogMixcbiAgICAgICAgICAgICAgazogWzAsIDBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICBhOiAxLFxuICAgICAgICAgICAgICBpeDogNixcbiAgICAgICAgICAgICAgazogW3tcbiAgICAgICAgICAgICAgICBzOiAwLFxuICAgICAgICAgICAgICAgIGU6IDAsXG4gICAgICAgICAgICAgICAgdDogMFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgczogMCxcbiAgICAgICAgICAgICAgICBlOiAwLFxuICAgICAgICAgICAgICAgIHQ6IDFcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiAzLFxuICAgICAgICAgICAgICBrOiBbMTAwLCAxMDBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2E6IHtcbiAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgaXg6IDUsXG4gICAgICAgICAgICAgIGs6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzazoge1xuICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICBpeDogNCxcbiAgICAgICAgICAgICAgazogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5OiAndHInXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5hcnIuc3BsaWNlKDAsIDAsIGdyb3VwKTtcblxuICAgICAgICAgIHRoaXMuX2dyb3Vwcy5zcGxpY2UoMCwgMCwgZ3JvdXApO1xuXG4gICAgICAgICAgdGhpcy5fY3VycmVudENvcGllcyArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbGVtLnJlbG9hZFNoYXBlcygpO1xuICAgICAgICBoYXNSZWxvYWRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnQgPSAwO1xuICAgICAgdmFyIHJlbmRlckZsYWc7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPD0gdGhpcy5fZ3JvdXBzLmxlbmd0aCAtIDE7IGkgKz0gMSkge1xuICAgICAgICByZW5kZXJGbGFnID0gY29udCA8IGNvcGllcztcbiAgICAgICAgdGhpcy5fZ3JvdXBzW2ldLl9yZW5kZXIgPSByZW5kZXJGbGFnO1xuICAgICAgICB0aGlzLmNoYW5nZUdyb3VwUmVuZGVyKHRoaXMuX2dyb3Vwc1tpXS5pdCwgcmVuZGVyRmxhZyk7XG5cbiAgICAgICAgaWYgKCFyZW5kZXJGbGFnKSB7XG4gICAgICAgICAgdmFyIGVsZW1zID0gdGhpcy5lbGVtc0RhdGFbaV0uaXQ7XG4gICAgICAgICAgdmFyIHRyYW5zZm9ybURhdGEgPSBlbGVtc1tlbGVtcy5sZW5ndGggLSAxXTtcblxuICAgICAgICAgIGlmICh0cmFuc2Zvcm1EYXRhLnRyYW5zZm9ybS5vcC52ICE9PSAwKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1EYXRhLnRyYW5zZm9ybS5vcC5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYW5zZm9ybURhdGEudHJhbnNmb3JtLm9wLnYgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1EYXRhLnRyYW5zZm9ybS5vcC5fbWRmID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udCArPSAxO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jdXJyZW50Q29waWVzID0gY29waWVzOyAvLy8gL1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vLnY7XG4gICAgICB2YXIgb2Zmc2V0TW9kdWxvID0gb2Zmc2V0ICUgMTtcbiAgICAgIHZhciByb3VuZE9mZnNldCA9IG9mZnNldCA+IDAgPyBNYXRoLmZsb29yKG9mZnNldCkgOiBNYXRoLmNlaWwob2Zmc2V0KTtcbiAgICAgIHZhciBwUHJvcHMgPSB0aGlzLnBNYXRyaXgucHJvcHM7XG4gICAgICB2YXIgclByb3BzID0gdGhpcy5yTWF0cml4LnByb3BzO1xuICAgICAgdmFyIHNQcm9wcyA9IHRoaXMuc01hdHJpeC5wcm9wcztcbiAgICAgIHRoaXMucE1hdHJpeC5yZXNldCgpO1xuICAgICAgdGhpcy5yTWF0cml4LnJlc2V0KCk7XG4gICAgICB0aGlzLnNNYXRyaXgucmVzZXQoKTtcbiAgICAgIHRoaXMudE1hdHJpeC5yZXNldCgpO1xuICAgICAgdGhpcy5tYXRyaXgucmVzZXQoKTtcbiAgICAgIHZhciBpdGVyYXRpb24gPSAwO1xuXG4gICAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgICB3aGlsZSAoaXRlcmF0aW9uIDwgcm91bmRPZmZzZXQpIHtcbiAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0aGlzLnBNYXRyaXgsIHRoaXMuck1hdHJpeCwgdGhpcy5zTWF0cml4LCB0aGlzLnRyLCAxLCBmYWxzZSk7XG4gICAgICAgICAgaXRlcmF0aW9uICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2Zmc2V0TW9kdWxvKSB7XG4gICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LCB0aGlzLnJNYXRyaXgsIHRoaXMuc01hdHJpeCwgdGhpcy50ciwgb2Zmc2V0TW9kdWxvLCBmYWxzZSk7XG4gICAgICAgICAgaXRlcmF0aW9uICs9IG9mZnNldE1vZHVsbztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgIHdoaWxlIChpdGVyYXRpb24gPiByb3VuZE9mZnNldCkge1xuICAgICAgICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1zKHRoaXMucE1hdHJpeCwgdGhpcy5yTWF0cml4LCB0aGlzLnNNYXRyaXgsIHRoaXMudHIsIDEsIHRydWUpO1xuICAgICAgICAgIGl0ZXJhdGlvbiAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9mZnNldE1vZHVsbykge1xuICAgICAgICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1zKHRoaXMucE1hdHJpeCwgdGhpcy5yTWF0cml4LCB0aGlzLnNNYXRyaXgsIHRoaXMudHIsIC1vZmZzZXRNb2R1bG8sIHRydWUpO1xuICAgICAgICAgIGl0ZXJhdGlvbiAtPSBvZmZzZXRNb2R1bG87XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaSA9IHRoaXMuZGF0YS5tID09PSAxID8gMCA6IHRoaXMuX2N1cnJlbnRDb3BpZXMgLSAxO1xuICAgICAgZGlyID0gdGhpcy5kYXRhLm0gPT09IDEgPyAxIDogLTE7XG4gICAgICBjb250ID0gdGhpcy5fY3VycmVudENvcGllcztcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGpMZW47XG5cbiAgICAgIHdoaWxlIChjb250KSB7XG4gICAgICAgIGl0ZW1zID0gdGhpcy5lbGVtc0RhdGFbaV0uaXQ7XG4gICAgICAgIGl0ZW1zVHJhbnNmb3JtID0gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0udHJhbnNmb3JtLm1Qcm9wcy52LnByb3BzO1xuICAgICAgICBqTGVuID0gaXRlbXNUcmFuc2Zvcm0ubGVuZ3RoO1xuICAgICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ubVByb3BzLl9tZGYgPSB0cnVlO1xuICAgICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ub3AuX21kZiA9IHRydWU7XG4gICAgICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5vcC52ID0gdGhpcy5fY3VycmVudENvcGllcyA9PT0gMSA/IHRoaXMuc28udiA6IHRoaXMuc28udiArICh0aGlzLmVvLnYgLSB0aGlzLnNvLnYpICogKGkgLyAodGhpcy5fY3VycmVudENvcGllcyAtIDEpKTtcblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgaWYgKGkgIT09IDAgJiYgZGlyID09PSAxIHx8IGkgIT09IHRoaXMuX2N1cnJlbnRDb3BpZXMgLSAxICYmIGRpciA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1zKHRoaXMucE1hdHJpeCwgdGhpcy5yTWF0cml4LCB0aGlzLnNNYXRyaXgsIHRoaXMudHIsIDEsIGZhbHNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm1hdHJpeC50cmFuc2Zvcm0oclByb3BzWzBdLCByUHJvcHNbMV0sIHJQcm9wc1syXSwgclByb3BzWzNdLCByUHJvcHNbNF0sIHJQcm9wc1s1XSwgclByb3BzWzZdLCByUHJvcHNbN10sIHJQcm9wc1s4XSwgclByb3BzWzldLCByUHJvcHNbMTBdLCByUHJvcHNbMTFdLCByUHJvcHNbMTJdLCByUHJvcHNbMTNdLCByUHJvcHNbMTRdLCByUHJvcHNbMTVdKTtcbiAgICAgICAgICB0aGlzLm1hdHJpeC50cmFuc2Zvcm0oc1Byb3BzWzBdLCBzUHJvcHNbMV0sIHNQcm9wc1syXSwgc1Byb3BzWzNdLCBzUHJvcHNbNF0sIHNQcm9wc1s1XSwgc1Byb3BzWzZdLCBzUHJvcHNbN10sIHNQcm9wc1s4XSwgc1Byb3BzWzldLCBzUHJvcHNbMTBdLCBzUHJvcHNbMTFdLCBzUHJvcHNbMTJdLCBzUHJvcHNbMTNdLCBzUHJvcHNbMTRdLCBzUHJvcHNbMTVdKTtcbiAgICAgICAgICB0aGlzLm1hdHJpeC50cmFuc2Zvcm0ocFByb3BzWzBdLCBwUHJvcHNbMV0sIHBQcm9wc1syXSwgcFByb3BzWzNdLCBwUHJvcHNbNF0sIHBQcm9wc1s1XSwgcFByb3BzWzZdLCBwUHJvcHNbN10sIHBQcm9wc1s4XSwgcFByb3BzWzldLCBwUHJvcHNbMTBdLCBwUHJvcHNbMTFdLCBwUHJvcHNbMTJdLCBwUHJvcHNbMTNdLCBwUHJvcHNbMTRdLCBwUHJvcHNbMTVdKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGl0ZW1zVHJhbnNmb3JtW2pdID0gdGhpcy5tYXRyaXgucHJvcHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5tYXRyaXgucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm1hdHJpeC5yZXNldCgpO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgaXRlbXNUcmFuc2Zvcm1bal0gPSB0aGlzLm1hdHJpeC5wcm9wc1tqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpdGVyYXRpb24gKz0gMTtcbiAgICAgICAgY29udCAtPSAxO1xuICAgICAgICBpICs9IGRpcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29udCA9IHRoaXMuX2N1cnJlbnRDb3BpZXM7XG4gICAgICBpID0gMDtcbiAgICAgIGRpciA9IDE7XG5cbiAgICAgIHdoaWxlIChjb250KSB7XG4gICAgICAgIGl0ZW1zID0gdGhpcy5lbGVtc0RhdGFbaV0uaXQ7XG4gICAgICAgIGl0ZW1zVHJhbnNmb3JtID0gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0udHJhbnNmb3JtLm1Qcm9wcy52LnByb3BzO1xuICAgICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ubVByb3BzLl9tZGYgPSBmYWxzZTtcbiAgICAgICAgaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0udHJhbnNmb3JtLm9wLl9tZGYgPSBmYWxzZTtcbiAgICAgICAgY29udCAtPSAxO1xuICAgICAgICBpICs9IGRpcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaGFzUmVsb2FkZWQ7XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuYWRkU2hhcGUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBmdW5jdGlvbiBSb3VuZENvcm5lcnNNb2RpZmllcigpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSwgUm91bmRDb3JuZXJzTW9kaWZpZXIpO1xuXG4gIFJvdW5kQ29ybmVyc01vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLnJkID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yLCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLnJkLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG4gIH07XG5cbiAgUm91bmRDb3JuZXJzTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NQYXRoID0gZnVuY3Rpb24gKHBhdGgsIHJvdW5kKSB7XG4gICAgdmFyIGNsb25lZFBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgIGNsb25lZFBhdGguYyA9IHBhdGguYztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gcGF0aC5fbGVuZ3RoO1xuICAgIHZhciBjdXJyZW50VjtcbiAgICB2YXIgY3VycmVudEk7XG4gICAgdmFyIGN1cnJlbnRPO1xuICAgIHZhciBjbG9zZXJWO1xuICAgIHZhciBkaXN0YW5jZTtcbiAgICB2YXIgbmV3UG9zUGVyYztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciB2WDtcbiAgICB2YXIgdlk7XG4gICAgdmFyIG9YO1xuICAgIHZhciBvWTtcbiAgICB2YXIgaVg7XG4gICAgdmFyIGlZO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBjdXJyZW50ViA9IHBhdGgudltpXTtcbiAgICAgIGN1cnJlbnRPID0gcGF0aC5vW2ldO1xuICAgICAgY3VycmVudEkgPSBwYXRoLmlbaV07XG5cbiAgICAgIGlmIChjdXJyZW50VlswXSA9PT0gY3VycmVudE9bMF0gJiYgY3VycmVudFZbMV0gPT09IGN1cnJlbnRPWzFdICYmIGN1cnJlbnRWWzBdID09PSBjdXJyZW50SVswXSAmJiBjdXJyZW50VlsxXSA9PT0gY3VycmVudElbMV0pIHtcbiAgICAgICAgaWYgKChpID09PSAwIHx8IGkgPT09IGxlbiAtIDEpICYmICFwYXRoLmMpIHtcbiAgICAgICAgICBjbG9uZWRQYXRoLnNldFRyaXBsZUF0KGN1cnJlbnRWWzBdLCBjdXJyZW50VlsxXSwgY3VycmVudE9bMF0sIGN1cnJlbnRPWzFdLCBjdXJyZW50SVswXSwgY3VycmVudElbMV0sIGluZGV4KTtcbiAgICAgICAgICAvKiBjbG9uZWRQYXRoLnZbaW5kZXhdID0gY3VycmVudFY7XG4gICAgICAgICAgICAgICAgICBjbG9uZWRQYXRoLm9baW5kZXhdID0gY3VycmVudE87XG4gICAgICAgICAgICAgICAgICBjbG9uZWRQYXRoLmlbaW5kZXhdID0gY3VycmVudEk7ICovXG5cbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBjbG9zZXJWID0gcGF0aC52W2xlbiAtIDFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbG9zZXJWID0gcGF0aC52W2kgLSAxXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhjdXJyZW50VlswXSAtIGNsb3NlclZbMF0sIDIpICsgTWF0aC5wb3coY3VycmVudFZbMV0gLSBjbG9zZXJWWzFdLCAyKSk7XG4gICAgICAgICAgbmV3UG9zUGVyYyA9IGRpc3RhbmNlID8gTWF0aC5taW4oZGlzdGFuY2UgLyAyLCByb3VuZCkgLyBkaXN0YW5jZSA6IDA7XG4gICAgICAgICAgaVggPSBjdXJyZW50VlswXSArIChjbG9zZXJWWzBdIC0gY3VycmVudFZbMF0pICogbmV3UG9zUGVyYztcbiAgICAgICAgICB2WCA9IGlYO1xuICAgICAgICAgIGlZID0gY3VycmVudFZbMV0gLSAoY3VycmVudFZbMV0gLSBjbG9zZXJWWzFdKSAqIG5ld1Bvc1BlcmM7XG4gICAgICAgICAgdlkgPSBpWTtcbiAgICAgICAgICBvWCA9IHZYIC0gKHZYIC0gY3VycmVudFZbMF0pICogcm91bmRDb3JuZXI7XG4gICAgICAgICAgb1kgPSB2WSAtICh2WSAtIGN1cnJlbnRWWzFdKSAqIHJvdW5kQ29ybmVyO1xuICAgICAgICAgIGNsb25lZFBhdGguc2V0VHJpcGxlQXQodlgsIHZZLCBvWCwgb1ksIGlYLCBpWSwgaW5kZXgpO1xuICAgICAgICAgIGluZGV4ICs9IDE7XG5cbiAgICAgICAgICBpZiAoaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgICAgY2xvc2VyViA9IHBhdGgudlswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xvc2VyViA9IHBhdGgudltpICsgMV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VycmVudFZbMF0gLSBjbG9zZXJWWzBdLCAyKSArIE1hdGgucG93KGN1cnJlbnRWWzFdIC0gY2xvc2VyVlsxXSwgMikpO1xuICAgICAgICAgIG5ld1Bvc1BlcmMgPSBkaXN0YW5jZSA/IE1hdGgubWluKGRpc3RhbmNlIC8gMiwgcm91bmQpIC8gZGlzdGFuY2UgOiAwO1xuICAgICAgICAgIG9YID0gY3VycmVudFZbMF0gKyAoY2xvc2VyVlswXSAtIGN1cnJlbnRWWzBdKSAqIG5ld1Bvc1BlcmM7XG4gICAgICAgICAgdlggPSBvWDtcbiAgICAgICAgICBvWSA9IGN1cnJlbnRWWzFdICsgKGNsb3NlclZbMV0gLSBjdXJyZW50VlsxXSkgKiBuZXdQb3NQZXJjO1xuICAgICAgICAgIHZZID0gb1k7XG4gICAgICAgICAgaVggPSB2WCAtICh2WCAtIGN1cnJlbnRWWzBdKSAqIHJvdW5kQ29ybmVyO1xuICAgICAgICAgIGlZID0gdlkgLSAodlkgLSBjdXJyZW50VlsxXSkgKiByb3VuZENvcm5lcjtcbiAgICAgICAgICBjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHZYLCB2WSwgb1gsIG9ZLCBpWCwgaVksIGluZGV4KTtcbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHBhdGgudltpXVswXSwgcGF0aC52W2ldWzFdLCBwYXRoLm9baV1bMF0sIHBhdGgub1tpXVsxXSwgcGF0aC5pW2ldWzBdLCBwYXRoLmlbaV1bMV0sIGluZGV4KTtcbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVkUGF0aDtcbiAgfTtcblxuICBSb3VuZENvcm5lcnNNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcyA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIHNoYXBlUGF0aHM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgcmQgPSB0aGlzLnJkLnY7XG5cbiAgICBpZiAocmQgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIHJkKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2hhcGVEYXRhLnNoYXBlLnBhdGhzID0gc2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBmbG9hdEVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpICogMTAwMDAwIDw9IE1hdGgubWluKE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XG4gIH1cblxuICBmdW5jdGlvbiBmbG9hdFplcm8oZikge1xuICAgIHJldHVybiBNYXRoLmFicyhmKSA8PSAwLjAwMDAxO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVycChwMCwgcDEsIGFtb3VudCkge1xuICAgIHJldHVybiBwMCAqICgxIC0gYW1vdW50KSArIHAxICogYW1vdW50O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVycFBvaW50KHAwLCBwMSwgYW1vdW50KSB7XG4gICAgcmV0dXJuIFtsZXJwKHAwWzBdLCBwMVswXSwgYW1vdW50KSwgbGVycChwMFsxXSwgcDFbMV0sIGFtb3VudCldO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZFJvb3RzKGEsIGIsIGMpIHtcbiAgICAvLyBubyByb290XG4gICAgaWYgKGEgPT09IDApIHJldHVybiBbXTtcbiAgICB2YXIgcyA9IGIgKiBiIC0gNCAqIGEgKiBjOyAvLyBDb21wbGV4IHJvb3RzXG5cbiAgICBpZiAocyA8IDApIHJldHVybiBbXTtcbiAgICB2YXIgc2luZ2xlUm9vdCA9IC1iIC8gKDIgKiBhKTsgLy8gMSByb290XG5cbiAgICBpZiAocyA9PT0gMCkgcmV0dXJuIFtzaW5nbGVSb290XTtcbiAgICB2YXIgZGVsdGEgPSBNYXRoLnNxcnQocykgLyAoMiAqIGEpOyAvLyAyIHJvb3RzXG5cbiAgICByZXR1cm4gW3NpbmdsZVJvb3QgLSBkZWx0YSwgc2luZ2xlUm9vdCArIGRlbHRhXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbHlub21pYWxDb2VmZmljaWVudHMocDAsIHAxLCBwMiwgcDMpIHtcbiAgICByZXR1cm4gWy1wMCArIDMgKiBwMSAtIDMgKiBwMiArIHAzLCAzICogcDAgLSA2ICogcDEgKyAzICogcDIsIC0zICogcDAgKyAzICogcDEsIHAwXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbmdsZVBvaW50KHApIHtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIocCwgcCwgcCwgcCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gUG9seW5vbWlhbEJlemllcihwMCwgcDEsIHAyLCBwMywgbGluZWFyaXplKSB7XG4gICAgaWYgKGxpbmVhcml6ZSAmJiBwb2ludEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgIHAxID0gbGVycFBvaW50KHAwLCBwMywgMSAvIDMpO1xuICAgIH1cblxuICAgIGlmIChsaW5lYXJpemUgJiYgcG9pbnRFcXVhbChwMiwgcDMpKSB7XG4gICAgICBwMiA9IGxlcnBQb2ludChwMCwgcDMsIDIgLyAzKTtcbiAgICB9XG5cbiAgICB2YXIgY29lZmZ4ID0gcG9seW5vbWlhbENvZWZmaWNpZW50cyhwMFswXSwgcDFbMF0sIHAyWzBdLCBwM1swXSk7XG4gICAgdmFyIGNvZWZmeSA9IHBvbHlub21pYWxDb2VmZmljaWVudHMocDBbMV0sIHAxWzFdLCBwMlsxXSwgcDNbMV0pO1xuICAgIHRoaXMuYSA9IFtjb2VmZnhbMF0sIGNvZWZmeVswXV07XG4gICAgdGhpcy5iID0gW2NvZWZmeFsxXSwgY29lZmZ5WzFdXTtcbiAgICB0aGlzLmMgPSBbY29lZmZ4WzJdLCBjb2VmZnlbMl1dO1xuICAgIHRoaXMuZCA9IFtjb2VmZnhbM10sIGNvZWZmeVszXV07XG4gICAgdGhpcy5wb2ludHMgPSBbcDAsIHAxLCBwMiwgcDNdO1xuICB9XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBbKCh0aGlzLmFbMF0gKiB0ICsgdGhpcy5iWzBdKSAqIHQgKyB0aGlzLmNbMF0pICogdCArIHRoaXMuZFswXSwgKCh0aGlzLmFbMV0gKiB0ICsgdGhpcy5iWzFdKSAqIHQgKyB0aGlzLmNbMV0pICogdCArIHRoaXMuZFsxXV07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuZGVyaXZhdGl2ZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIFsoMyAqIHQgKiB0aGlzLmFbMF0gKyAyICogdGhpcy5iWzBdKSAqIHQgKyB0aGlzLmNbMF0sICgzICogdCAqIHRoaXMuYVsxXSArIDIgKiB0aGlzLmJbMV0pICogdCArIHRoaXMuY1sxXV07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUudGFuZ2VudEFuZ2xlID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgcCA9IHRoaXMuZGVyaXZhdGl2ZSh0KTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMihwWzFdLCBwWzBdKTtcbiAgfTtcblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS5ub3JtYWxBbmdsZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHAgPSB0aGlzLmRlcml2YXRpdmUodCk7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIocFswXSwgcFsxXSk7XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuaW5mbGVjdGlvblBvaW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVub20gPSB0aGlzLmFbMV0gKiB0aGlzLmJbMF0gLSB0aGlzLmFbMF0gKiB0aGlzLmJbMV07XG4gICAgaWYgKGZsb2F0WmVybyhkZW5vbSkpIHJldHVybiBbXTtcbiAgICB2YXIgdGN1c3AgPSAtMC41ICogKHRoaXMuYVsxXSAqIHRoaXMuY1swXSAtIHRoaXMuYVswXSAqIHRoaXMuY1sxXSkgLyBkZW5vbTtcbiAgICB2YXIgc3F1YXJlID0gdGN1c3AgKiB0Y3VzcCAtIDEgLyAzICogKHRoaXMuYlsxXSAqIHRoaXMuY1swXSAtIHRoaXMuYlswXSAqIHRoaXMuY1sxXSkgLyBkZW5vbTtcbiAgICBpZiAoc3F1YXJlIDwgMCkgcmV0dXJuIFtdO1xuICAgIHZhciByb290ID0gTWF0aC5zcXJ0KHNxdWFyZSk7XG5cbiAgICBpZiAoZmxvYXRaZXJvKHJvb3QpKSB7XG4gICAgICBpZiAocm9vdCA+IDAgJiYgcm9vdCA8IDEpIHJldHVybiBbdGN1c3BdO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiBbdGN1c3AgLSByb290LCB0Y3VzcCArIHJvb3RdLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIHIgPiAwICYmIHIgPCAxO1xuICAgIH0pO1xuICB9O1xuXG4gIFBvbHlub21pYWxCZXppZXIucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICBpZiAodCA8PSAwKSByZXR1cm4gW3NpbmdsZVBvaW50KHRoaXMucG9pbnRzWzBdKSwgdGhpc107XG4gICAgaWYgKHQgPj0gMSkgcmV0dXJuIFt0aGlzLCBzaW5nbGVQb2ludCh0aGlzLnBvaW50c1t0aGlzLnBvaW50cy5sZW5ndGggLSAxXSldO1xuICAgIHZhciBwMTAgPSBsZXJwUG9pbnQodGhpcy5wb2ludHNbMF0sIHRoaXMucG9pbnRzWzFdLCB0KTtcbiAgICB2YXIgcDExID0gbGVycFBvaW50KHRoaXMucG9pbnRzWzFdLCB0aGlzLnBvaW50c1syXSwgdCk7XG4gICAgdmFyIHAxMiA9IGxlcnBQb2ludCh0aGlzLnBvaW50c1syXSwgdGhpcy5wb2ludHNbM10sIHQpO1xuICAgIHZhciBwMjAgPSBsZXJwUG9pbnQocDEwLCBwMTEsIHQpO1xuICAgIHZhciBwMjEgPSBsZXJwUG9pbnQocDExLCBwMTIsIHQpO1xuICAgIHZhciBwMyA9IGxlcnBQb2ludChwMjAsIHAyMSwgdCk7XG4gICAgcmV0dXJuIFtuZXcgUG9seW5vbWlhbEJlemllcih0aGlzLnBvaW50c1swXSwgcDEwLCBwMjAsIHAzLCB0cnVlKSwgbmV3IFBvbHlub21pYWxCZXppZXIocDMsIHAyMSwgcDEyLCB0aGlzLnBvaW50c1szXSwgdHJ1ZSldO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGV4dHJlbWEoYmV6LCBjb21wKSB7XG4gICAgdmFyIG1pbiA9IGJlei5wb2ludHNbMF1bY29tcF07XG4gICAgdmFyIG1heCA9IGJlei5wb2ludHNbYmV6LnBvaW50cy5sZW5ndGggLSAxXVtjb21wXTtcblxuICAgIGlmIChtaW4gPiBtYXgpIHtcbiAgICAgIHZhciBlID0gbWF4O1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gZTtcbiAgICB9IC8vIERlcml2YXRpdmUgcm9vdHMgdG8gZmluZCBtaW4vbWF4XG5cblxuICAgIHZhciBmID0gcXVhZFJvb3RzKDMgKiBiZXouYVtjb21wXSwgMiAqIGJlei5iW2NvbXBdLCBiZXouY1tjb21wXSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChmW2ldID4gMCAmJiBmW2ldIDwgMSkge1xuICAgICAgICB2YXIgdmFsID0gYmV6LnBvaW50KGZbaV0pW2NvbXBdO1xuICAgICAgICBpZiAodmFsIDwgbWluKSBtaW4gPSB2YWw7ZWxzZSBpZiAodmFsID4gbWF4KSBtYXggPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbjogbWluLFxuICAgICAgbWF4OiBtYXhcbiAgICB9O1xuICB9XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuYm91bmRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBleHRyZW1hKHRoaXMsIDApLFxuICAgICAgeTogZXh0cmVtYSh0aGlzLCAxKVxuICAgIH07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuYm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvdW5kcyA9IHRoaXMuYm91bmRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGJvdW5kcy54Lm1pbixcbiAgICAgIHJpZ2h0OiBib3VuZHMueC5tYXgsXG4gICAgICB0b3A6IGJvdW5kcy55Lm1pbixcbiAgICAgIGJvdHRvbTogYm91bmRzLnkubWF4LFxuICAgICAgd2lkdGg6IGJvdW5kcy54Lm1heCAtIGJvdW5kcy54Lm1pbixcbiAgICAgIGhlaWdodDogYm91bmRzLnkubWF4IC0gYm91bmRzLnkubWluLFxuICAgICAgY3g6IChib3VuZHMueC5tYXggKyBib3VuZHMueC5taW4pIC8gMixcbiAgICAgIGN5OiAoYm91bmRzLnkubWF4ICsgYm91bmRzLnkubWluKSAvIDJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGludGVyc2VjdERhdGEoYmV6LCB0MSwgdDIpIHtcbiAgICB2YXIgYm94ID0gYmV6LmJvdW5kaW5nQm94KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN4OiBib3guY3gsXG4gICAgICBjeTogYm94LmN5LFxuICAgICAgd2lkdGg6IGJveC53aWR0aCxcbiAgICAgIGhlaWdodDogYm94LmhlaWdodCxcbiAgICAgIGJlejogYmV6LFxuICAgICAgdDogKHQxICsgdDIpIC8gMixcbiAgICAgIHQxOiB0MSxcbiAgICAgIHQyOiB0MlxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpdERhdGEoZGF0YSkge1xuICAgIHZhciBzcGxpdCA9IGRhdGEuYmV6LnNwbGl0KDAuNSk7XG4gICAgcmV0dXJuIFtpbnRlcnNlY3REYXRhKHNwbGl0WzBdLCBkYXRhLnQxLCBkYXRhLnQpLCBpbnRlcnNlY3REYXRhKHNwbGl0WzFdLCBkYXRhLnQsIGRhdGEudDIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJveEludGVyc2VjdChiMSwgYjIpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoYjEuY3ggLSBiMi5jeCkgKiAyIDwgYjEud2lkdGggKyBiMi53aWR0aCAmJiBNYXRoLmFicyhiMS5jeSAtIGIyLmN5KSAqIDIgPCBiMS5oZWlnaHQgKyBiMi5oZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RzSW1wbChkMSwgZDIsIGRlcHRoLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbikge1xuICAgIGlmICghYm94SW50ZXJzZWN0KGQxLCBkMikpIHJldHVybjtcblxuICAgIGlmIChkZXB0aCA+PSBtYXhSZWN1cnNpb24gfHwgZDEud2lkdGggPD0gdG9sZXJhbmNlICYmIGQxLmhlaWdodCA8PSB0b2xlcmFuY2UgJiYgZDIud2lkdGggPD0gdG9sZXJhbmNlICYmIGQyLmhlaWdodCA8PSB0b2xlcmFuY2UpIHtcbiAgICAgIGludGVyc2VjdGlvbnMucHVzaChbZDEudCwgZDIudF0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkMXMgPSBzcGxpdERhdGEoZDEpO1xuICAgIHZhciBkMnMgPSBzcGxpdERhdGEoZDIpO1xuICAgIGludGVyc2VjdHNJbXBsKGQxc1swXSwgZDJzWzBdLCBkZXB0aCArIDEsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKTtcbiAgICBpbnRlcnNlY3RzSW1wbChkMXNbMF0sIGQyc1sxXSwgZGVwdGggKyAxLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbik7XG4gICAgaW50ZXJzZWN0c0ltcGwoZDFzWzFdLCBkMnNbMF0sIGRlcHRoICsgMSwgdG9sZXJhbmNlLCBpbnRlcnNlY3Rpb25zLCBtYXhSZWN1cnNpb24pO1xuICAgIGludGVyc2VjdHNJbXBsKGQxc1sxXSwgZDJzWzFdLCBkZXB0aCArIDEsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKTtcbiAgfVxuXG4gIFBvbHlub21pYWxCZXppZXIucHJvdG90eXBlLmludGVyc2VjdGlvbnMgPSBmdW5jdGlvbiAob3RoZXIsIHRvbGVyYW5jZSwgbWF4UmVjdXJzaW9uKSB7XG4gICAgaWYgKHRvbGVyYW5jZSA9PT0gdW5kZWZpbmVkKSB0b2xlcmFuY2UgPSAyO1xuICAgIGlmIChtYXhSZWN1cnNpb24gPT09IHVuZGVmaW5lZCkgbWF4UmVjdXJzaW9uID0gNztcbiAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IFtdO1xuICAgIGludGVyc2VjdHNJbXBsKGludGVyc2VjdERhdGEodGhpcywgMCwgMSksIGludGVyc2VjdERhdGEob3RoZXIsIDAsIDEpLCAwLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbik7XG4gICAgcmV0dXJuIGludGVyc2VjdGlvbnM7XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnQgPSBmdW5jdGlvbiAoc2hhcGVQYXRoLCBpbmRleCkge1xuICAgIHZhciBuZXh0SW5kZXggPSAoaW5kZXggKyAxKSAlIHNoYXBlUGF0aC5sZW5ndGgoKTtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIoc2hhcGVQYXRoLnZbaW5kZXhdLCBzaGFwZVBhdGgub1tpbmRleF0sIHNoYXBlUGF0aC5pW25leHRJbmRleF0sIHNoYXBlUGF0aC52W25leHRJbmRleF0sIHRydWUpO1xuICB9O1xuXG4gIFBvbHlub21pYWxCZXppZXIuc2hhcGVTZWdtZW50SW52ZXJ0ZWQgPSBmdW5jdGlvbiAoc2hhcGVQYXRoLCBpbmRleCkge1xuICAgIHZhciBuZXh0SW5kZXggPSAoaW5kZXggKyAxKSAlIHNoYXBlUGF0aC5sZW5ndGgoKTtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIoc2hhcGVQYXRoLnZbbmV4dEluZGV4XSwgc2hhcGVQYXRoLmlbbmV4dEluZGV4XSwgc2hhcGVQYXRoLm9baW5kZXhdLCBzaGFwZVBhdGgudltpbmRleF0sIHRydWUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyb3NzUHJvZHVjdChhLCBiKSB7XG4gICAgcmV0dXJuIFthWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVJbnRlcnNlY3Rpb24oc3RhcnQxLCBlbmQxLCBzdGFydDIsIGVuZDIpIHtcbiAgICB2YXIgdjEgPSBbc3RhcnQxWzBdLCBzdGFydDFbMV0sIDFdO1xuICAgIHZhciB2MiA9IFtlbmQxWzBdLCBlbmQxWzFdLCAxXTtcbiAgICB2YXIgdjMgPSBbc3RhcnQyWzBdLCBzdGFydDJbMV0sIDFdO1xuICAgIHZhciB2NCA9IFtlbmQyWzBdLCBlbmQyWzFdLCAxXTtcbiAgICB2YXIgciA9IGNyb3NzUHJvZHVjdChjcm9zc1Byb2R1Y3QodjEsIHYyKSwgY3Jvc3NQcm9kdWN0KHYzLCB2NCkpO1xuICAgIGlmIChmbG9hdFplcm8oclsyXSkpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBbclswXSAvIHJbMl0sIHJbMV0gLyByWzJdXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbGFyT2Zmc2V0KHAsIGFuZ2xlLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gW3BbMF0gKyBNYXRoLmNvcyhhbmdsZSkgKiBsZW5ndGgsIHBbMV0gLSBNYXRoLnNpbihhbmdsZSkgKiBsZW5ndGhdO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnREaXN0YW5jZShwMSwgcDIpIHtcbiAgICByZXR1cm4gTWF0aC5oeXBvdChwMVswXSAtIHAyWzBdLCBwMVsxXSAtIHAyWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50RXF1YWwocDEsIHAyKSB7XG4gICAgcmV0dXJuIGZsb2F0RXF1YWwocDFbMF0sIHAyWzBdKSAmJiBmbG9hdEVxdWFsKHAxWzFdLCBwMlsxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBaaWdaYWdNb2RpZmllcigpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSwgWmlnWmFnTW9kaWZpZXIpO1xuXG4gIFppZ1phZ01vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLmFtcGxpdHVkZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucywgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5mcmVxdWVuY3kgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnIsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMucG9pbnRzVHlwZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucHQsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLmFtcGxpdHVkZS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICE9PSAwIHx8IHRoaXMuZnJlcXVlbmN5LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDAgfHwgdGhpcy5wb2ludHNUeXBlLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDA7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0UG9pbnQob3V0cHV0QmV6aWVyLCBwb2ludCwgYW5nbGUsIGRpcmVjdGlvbiwgYW1wbGl0dWRlLCBvdXRBbXBsaXR1ZGUsIGluQW1wbGl0dWRlKSB7XG4gICAgdmFyIGFuZ08gPSBhbmdsZSAtIE1hdGguUEkgLyAyO1xuICAgIHZhciBhbmdJID0gYW5nbGUgKyBNYXRoLlBJIC8gMjtcbiAgICB2YXIgcHggPSBwb2ludFswXSArIE1hdGguY29zKGFuZ2xlKSAqIGRpcmVjdGlvbiAqIGFtcGxpdHVkZTtcbiAgICB2YXIgcHkgPSBwb2ludFsxXSAtIE1hdGguc2luKGFuZ2xlKSAqIGRpcmVjdGlvbiAqIGFtcGxpdHVkZTtcbiAgICBvdXRwdXRCZXppZXIuc2V0VHJpcGxlQXQocHgsIHB5LCBweCArIE1hdGguY29zKGFuZ08pICogb3V0QW1wbGl0dWRlLCBweSAtIE1hdGguc2luKGFuZ08pICogb3V0QW1wbGl0dWRlLCBweCArIE1hdGguY29zKGFuZ0kpICogaW5BbXBsaXR1ZGUsIHB5IC0gTWF0aC5zaW4oYW5nSSkgKiBpbkFtcGxpdHVkZSwgb3V0cHV0QmV6aWVyLmxlbmd0aCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBlcnBlbmRpY3VsYXJWZWN0b3IocHQxLCBwdDIpIHtcbiAgICB2YXIgdmVjdG9yID0gW3B0MlswXSAtIHB0MVswXSwgcHQyWzFdIC0gcHQxWzFdXTtcbiAgICB2YXIgcm90ID0gLU1hdGguUEkgKiAwLjU7XG4gICAgdmFyIHJvdGF0ZWRWZWN0b3IgPSBbTWF0aC5jb3Mocm90KSAqIHZlY3RvclswXSAtIE1hdGguc2luKHJvdCkgKiB2ZWN0b3JbMV0sIE1hdGguc2luKHJvdCkgKiB2ZWN0b3JbMF0gKyBNYXRoLmNvcyhyb3QpICogdmVjdG9yWzFdXTtcbiAgICByZXR1cm4gcm90YXRlZFZlY3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByb2plY3RpbmdBbmdsZShwYXRoLCBjdXIpIHtcbiAgICB2YXIgcHJldkluZGV4ID0gY3VyID09PSAwID8gcGF0aC5sZW5ndGgoKSAtIDEgOiBjdXIgLSAxO1xuICAgIHZhciBuZXh0SW5kZXggPSAoY3VyICsgMSkgJSBwYXRoLmxlbmd0aCgpO1xuICAgIHZhciBwcmV2UG9pbnQgPSBwYXRoLnZbcHJldkluZGV4XTtcbiAgICB2YXIgbmV4dFBvaW50ID0gcGF0aC52W25leHRJbmRleF07XG4gICAgdmFyIHBWZWN0b3IgPSBnZXRQZXJwZW5kaWN1bGFyVmVjdG9yKHByZXZQb2ludCwgbmV4dFBvaW50KTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMigwLCAxKSAtIE1hdGguYXRhbjIocFZlY3RvclsxXSwgcFZlY3RvclswXSk7XG4gIH1cblxuICBmdW5jdGlvbiB6aWdaYWdDb3JuZXIob3V0cHV0QmV6aWVyLCBwYXRoLCBjdXIsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbikge1xuICAgIHZhciBhbmdsZSA9IGdldFByb2plY3RpbmdBbmdsZShwYXRoLCBjdXIpO1xuICAgIHZhciBwb2ludCA9IHBhdGgudltjdXIgJSBwYXRoLl9sZW5ndGhdO1xuICAgIHZhciBwcmV2UG9pbnQgPSBwYXRoLnZbY3VyID09PSAwID8gcGF0aC5fbGVuZ3RoIC0gMSA6IGN1ciAtIDFdO1xuICAgIHZhciBuZXh0UG9pbnQgPSBwYXRoLnZbKGN1ciArIDEpICUgcGF0aC5fbGVuZ3RoXTtcbiAgICB2YXIgcHJldkRpc3QgPSBwb2ludFR5cGUgPT09IDIgPyBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnRbMF0gLSBwcmV2UG9pbnRbMF0sIDIpICsgTWF0aC5wb3cocG9pbnRbMV0gLSBwcmV2UG9pbnRbMV0sIDIpKSA6IDA7XG4gICAgdmFyIG5leHREaXN0ID0gcG9pbnRUeXBlID09PSAyID8gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50WzBdIC0gbmV4dFBvaW50WzBdLCAyKSArIE1hdGgucG93KHBvaW50WzFdIC0gbmV4dFBvaW50WzFdLCAyKSkgOiAwO1xuICAgIHNldFBvaW50KG91dHB1dEJlemllciwgcGF0aC52W2N1ciAlIHBhdGguX2xlbmd0aF0sIGFuZ2xlLCBkaXJlY3Rpb24sIGFtcGxpdHVkZSwgbmV4dERpc3QgLyAoKGZyZXF1ZW5jeSArIDEpICogMiksIHByZXZEaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBwb2ludFR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gemlnWmFnU2VnbWVudChvdXRwdXRCZXppZXIsIHNlZ21lbnQsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJlcXVlbmN5OyBpICs9IDEpIHtcbiAgICAgIHZhciB0ID0gKGkgKyAxKSAvIChmcmVxdWVuY3kgKyAxKTtcbiAgICAgIHZhciBkaXN0ID0gcG9pbnRUeXBlID09PSAyID8gTWF0aC5zcXJ0KE1hdGgucG93KHNlZ21lbnQucG9pbnRzWzNdWzBdIC0gc2VnbWVudC5wb2ludHNbMF1bMF0sIDIpICsgTWF0aC5wb3coc2VnbWVudC5wb2ludHNbM11bMV0gLSBzZWdtZW50LnBvaW50c1swXVsxXSwgMikpIDogMDtcbiAgICAgIHZhciBhbmdsZSA9IHNlZ21lbnQubm9ybWFsQW5nbGUodCk7XG4gICAgICB2YXIgcG9pbnQgPSBzZWdtZW50LnBvaW50KHQpO1xuICAgICAgc2V0UG9pbnQob3V0cHV0QmV6aWVyLCBwb2ludCwgYW5nbGUsIGRpcmVjdGlvbiwgYW1wbGl0dWRlLCBkaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBkaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBwb2ludFR5cGUpO1xuICAgICAgZGlyZWN0aW9uID0gLWRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uO1xuICB9XG5cbiAgWmlnWmFnTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUpIHtcbiAgICB2YXIgY291bnQgPSBwYXRoLl9sZW5ndGg7XG4gICAgdmFyIGNsb25lZFBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgIGNsb25lZFBhdGguYyA9IHBhdGguYztcblxuICAgIGlmICghcGF0aC5jKSB7XG4gICAgICBjb3VudCAtPSAxO1xuICAgIH1cblxuICAgIGlmIChjb3VudCA9PT0gMCkgcmV0dXJuIGNsb25lZFBhdGg7XG4gICAgdmFyIGRpcmVjdGlvbiA9IC0xO1xuICAgIHZhciBzZWdtZW50ID0gUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnQocGF0aCwgMCk7XG4gICAgemlnWmFnQ29ybmVyKGNsb25lZFBhdGgsIHBhdGgsIDAsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIGRpcmVjdGlvbiA9IHppZ1phZ1NlZ21lbnQoY2xvbmVkUGF0aCwgc2VnbWVudCwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSwgLWRpcmVjdGlvbik7XG5cbiAgICAgIGlmIChpID09PSBjb3VudCAtIDEgJiYgIXBhdGguYykge1xuICAgICAgICBzZWdtZW50ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZ21lbnQgPSBQb2x5bm9taWFsQmV6aWVyLnNoYXBlU2VnbWVudChwYXRoLCAoaSArIDEpICUgY291bnQpO1xuICAgICAgfVxuXG4gICAgICB6aWdaYWdDb3JuZXIoY2xvbmVkUGF0aCwgcGF0aCwgaSArIDEsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lZFBhdGg7XG4gIH07XG5cbiAgWmlnWmFnTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBzaGFwZVBhdGhzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGFtcGxpdHVkZSA9IHRoaXMuYW1wbGl0dWRlLnY7XG4gICAgdmFyIGZyZXF1ZW5jeSA9IE1hdGgubWF4KDAsIE1hdGgucm91bmQodGhpcy5mcmVxdWVuY3kudikpO1xuICAgIHZhciBwb2ludFR5cGUgPSB0aGlzLnBvaW50c1R5cGUudjtcblxuICAgIGlmIChhbXBsaXR1ZGUgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxpbmVhck9mZnNldChwMSwgcDIsIGFtb3VudCkge1xuICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIocDJbMF0gLSBwMVswXSwgcDJbMV0gLSBwMVsxXSk7XG4gICAgcmV0dXJuIFtwb2xhck9mZnNldChwMSwgYW5nbGUsIGFtb3VudCksIHBvbGFyT2Zmc2V0KHAyLCBhbmdsZSwgYW1vdW50KV07XG4gIH1cblxuICBmdW5jdGlvbiBvZmZzZXRTZWdtZW50KHNlZ21lbnQsIGFtb3VudCkge1xuICAgIHZhciBwMDtcbiAgICB2YXIgcDFhO1xuICAgIHZhciBwMWI7XG4gICAgdmFyIHAyYjtcbiAgICB2YXIgcDJhO1xuICAgIHZhciBwMztcbiAgICB2YXIgZTtcbiAgICBlID0gbGluZWFyT2Zmc2V0KHNlZ21lbnQucG9pbnRzWzBdLCBzZWdtZW50LnBvaW50c1sxXSwgYW1vdW50KTtcbiAgICBwMCA9IGVbMF07XG4gICAgcDFhID0gZVsxXTtcbiAgICBlID0gbGluZWFyT2Zmc2V0KHNlZ21lbnQucG9pbnRzWzFdLCBzZWdtZW50LnBvaW50c1syXSwgYW1vdW50KTtcbiAgICBwMWIgPSBlWzBdO1xuICAgIHAyYiA9IGVbMV07XG4gICAgZSA9IGxpbmVhck9mZnNldChzZWdtZW50LnBvaW50c1syXSwgc2VnbWVudC5wb2ludHNbM10sIGFtb3VudCk7XG4gICAgcDJhID0gZVswXTtcbiAgICBwMyA9IGVbMV07XG4gICAgdmFyIHAxID0gbGluZUludGVyc2VjdGlvbihwMCwgcDFhLCBwMWIsIHAyYik7XG4gICAgaWYgKHAxID09PSBudWxsKSBwMSA9IHAxYTtcbiAgICB2YXIgcDIgPSBsaW5lSW50ZXJzZWN0aW9uKHAyYSwgcDMsIHAxYiwgcDJiKTtcbiAgICBpZiAocDIgPT09IG51bGwpIHAyID0gcDJhO1xuICAgIHJldHVybiBuZXcgUG9seW5vbWlhbEJlemllcihwMCwgcDEsIHAyLCBwMyk7XG4gIH1cblxuICBmdW5jdGlvbiBqb2luTGluZXMob3V0cHV0QmV6aWVyLCBzZWcxLCBzZWcyLCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCkge1xuICAgIHZhciBwMCA9IHNlZzEucG9pbnRzWzNdO1xuICAgIHZhciBwMSA9IHNlZzIucG9pbnRzWzBdOyAvLyBCZXZlbFxuXG4gICAgaWYgKGxpbmVKb2luID09PSAzKSByZXR1cm4gcDA7IC8vIENvbm5lY3RlZCwgdGhleSBkb24ndCBuZWVkIGEgam9pbnRcblxuICAgIGlmIChwb2ludEVxdWFsKHAwLCBwMSkpIHJldHVybiBwMDsgLy8gUm91bmRcblxuICAgIGlmIChsaW5lSm9pbiA9PT0gMikge1xuICAgICAgdmFyIGFuZ2xlT3V0ID0gLXNlZzEudGFuZ2VudEFuZ2xlKDEpO1xuICAgICAgdmFyIGFuZ2xlSW4gPSAtc2VnMi50YW5nZW50QW5nbGUoMCkgKyBNYXRoLlBJO1xuICAgICAgdmFyIGNlbnRlciA9IGxpbmVJbnRlcnNlY3Rpb24ocDAsIHBvbGFyT2Zmc2V0KHAwLCBhbmdsZU91dCArIE1hdGguUEkgLyAyLCAxMDApLCBwMSwgcG9sYXJPZmZzZXQocDEsIGFuZ2xlT3V0ICsgTWF0aC5QSSAvIDIsIDEwMCkpO1xuICAgICAgdmFyIHJhZGl1cyA9IGNlbnRlciA/IHBvaW50RGlzdGFuY2UoY2VudGVyLCBwMCkgOiBwb2ludERpc3RhbmNlKHAwLCBwMSkgLyAyO1xuICAgICAgdmFyIHRhbiA9IHBvbGFyT2Zmc2V0KHAwLCBhbmdsZU91dCwgMiAqIHJhZGl1cyAqIHJvdW5kQ29ybmVyKTtcbiAgICAgIG91dHB1dEJlemllci5zZXRYWUF0KHRhblswXSwgdGFuWzFdLCAnbycsIG91dHB1dEJlemllci5sZW5ndGgoKSAtIDEpO1xuICAgICAgdGFuID0gcG9sYXJPZmZzZXQocDEsIGFuZ2xlSW4sIDIgKiByYWRpdXMgKiByb3VuZENvcm5lcik7XG4gICAgICBvdXRwdXRCZXppZXIuc2V0VHJpcGxlQXQocDFbMF0sIHAxWzFdLCBwMVswXSwgcDFbMV0sIHRhblswXSwgdGFuWzFdLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICAgICAgcmV0dXJuIHAxO1xuICAgIH0gLy8gTWl0ZXJcblxuXG4gICAgdmFyIHQwID0gcG9pbnRFcXVhbChwMCwgc2VnMS5wb2ludHNbMl0pID8gc2VnMS5wb2ludHNbMF0gOiBzZWcxLnBvaW50c1syXTtcbiAgICB2YXIgdDEgPSBwb2ludEVxdWFsKHAxLCBzZWcyLnBvaW50c1sxXSkgPyBzZWcyLnBvaW50c1szXSA6IHNlZzIucG9pbnRzWzFdO1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBsaW5lSW50ZXJzZWN0aW9uKHQwLCBwMCwgcDEsIHQxKTtcblxuICAgIGlmIChpbnRlcnNlY3Rpb24gJiYgcG9pbnREaXN0YW5jZShpbnRlcnNlY3Rpb24sIHAwKSA8IG1pdGVyTGltaXQpIHtcbiAgICAgIG91dHB1dEJlemllci5zZXRUcmlwbGVBdChpbnRlcnNlY3Rpb25bMF0sIGludGVyc2VjdGlvblsxXSwgaW50ZXJzZWN0aW9uWzBdLCBpbnRlcnNlY3Rpb25bMV0sIGludGVyc2VjdGlvblswXSwgaW50ZXJzZWN0aW9uWzFdLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICAgICAgcmV0dXJuIGludGVyc2VjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gcDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb24oYSwgYikge1xuICAgIHZhciBpbnRlcnNlY3QgPSBhLmludGVyc2VjdGlvbnMoYik7XG4gICAgaWYgKGludGVyc2VjdC5sZW5ndGggJiYgZmxvYXRFcXVhbChpbnRlcnNlY3RbMF1bMF0sIDEpKSBpbnRlcnNlY3Quc2hpZnQoKTtcbiAgICBpZiAoaW50ZXJzZWN0Lmxlbmd0aCkgcmV0dXJuIGludGVyc2VjdFswXTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBydW5lU2VnbWVudEludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgdmFyIG91dGEgPSBhLnNsaWNlKCk7XG4gICAgdmFyIG91dGIgPSBiLnNsaWNlKCk7XG4gICAgdmFyIGludGVyc2VjdCA9IGdldEludGVyc2VjdGlvbihhW2EubGVuZ3RoIC0gMV0sIGJbMF0pO1xuXG4gICAgaWYgKGludGVyc2VjdCkge1xuICAgICAgb3V0YVthLmxlbmd0aCAtIDFdID0gYVthLmxlbmd0aCAtIDFdLnNwbGl0KGludGVyc2VjdFswXSlbMF07XG4gICAgICBvdXRiWzBdID0gYlswXS5zcGxpdChpbnRlcnNlY3RbMV0pWzFdO1xuICAgIH1cblxuICAgIGlmIChhLmxlbmd0aCA+IDEgJiYgYi5sZW5ndGggPiAxKSB7XG4gICAgICBpbnRlcnNlY3QgPSBnZXRJbnRlcnNlY3Rpb24oYVswXSwgYltiLmxlbmd0aCAtIDFdKTtcblxuICAgICAgaWYgKGludGVyc2VjdCkge1xuICAgICAgICByZXR1cm4gW1thWzBdLnNwbGl0KGludGVyc2VjdFswXSlbMF1dLCBbYltiLmxlbmd0aCAtIDFdLnNwbGl0KGludGVyc2VjdFsxXSlbMV1dXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW291dGEsIG91dGJdO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ1bmVJbnRlcnNlY3Rpb25zKHNlZ21lbnRzKSB7XG4gICAgdmFyIGU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBlID0gcHJ1bmVTZWdtZW50SW50ZXJzZWN0aW9uKHNlZ21lbnRzW2kgLSAxXSwgc2VnbWVudHNbaV0pO1xuICAgICAgc2VnbWVudHNbaSAtIDFdID0gZVswXTtcbiAgICAgIHNlZ21lbnRzW2ldID0gZVsxXTtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgZSA9IHBydW5lU2VnbWVudEludGVyc2VjdGlvbihzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXSwgc2VnbWVudHNbMF0pO1xuICAgICAgc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0gPSBlWzBdO1xuICAgICAgc2VnbWVudHNbMF0gPSBlWzFdO1xuICAgIH1cblxuICAgIHJldHVybiBzZWdtZW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9mZnNldFNlZ21lbnRTcGxpdChzZWdtZW50LCBhbW91bnQpIHtcbiAgICAvKlxuICAgICAgV2Ugc3BsaXQgZWFjaCBiZXppZXIgc2VnbWVudCBpbnRvIHNtYWxsZXIgcGllY2VzIGJhc2VkXG4gICAgICBvbiBpbmZsZWN0aW9uIHBvaW50cywgdGhpcyBlbnN1cmVzIHRoZSBjb250cm9sIHBvaW50XG4gICAgICBwb2x5Z29uIGlzIGNvbnZleC5cbiAgICAgICAgKEEgY3ViaWMgYmV6aWVyIGNhbiBoYXZlIG5vbmUsIG9uZSwgb3IgdHdvIGluZmxlY3Rpb24gcG9pbnRzKVxuICAgICovXG4gICAgdmFyIGZsZXggPSBzZWdtZW50LmluZmxlY3Rpb25Qb2ludHMoKTtcbiAgICB2YXIgbGVmdDtcbiAgICB2YXIgcmlnaHQ7XG4gICAgdmFyIHNwbGl0O1xuICAgIHZhciBtaWQ7XG5cbiAgICBpZiAoZmxleC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbb2Zmc2V0U2VnbWVudChzZWdtZW50LCBhbW91bnQpXTtcbiAgICB9XG5cbiAgICBpZiAoZmxleC5sZW5ndGggPT09IDEgfHwgZmxvYXRFcXVhbChmbGV4WzFdLCAxKSkge1xuICAgICAgc3BsaXQgPSBzZWdtZW50LnNwbGl0KGZsZXhbMF0pO1xuICAgICAgbGVmdCA9IHNwbGl0WzBdO1xuICAgICAgcmlnaHQgPSBzcGxpdFsxXTtcbiAgICAgIHJldHVybiBbb2Zmc2V0U2VnbWVudChsZWZ0LCBhbW91bnQpLCBvZmZzZXRTZWdtZW50KHJpZ2h0LCBhbW91bnQpXTtcbiAgICB9XG5cbiAgICBzcGxpdCA9IHNlZ21lbnQuc3BsaXQoZmxleFswXSk7XG4gICAgbGVmdCA9IHNwbGl0WzBdO1xuICAgIHZhciB0ID0gKGZsZXhbMV0gLSBmbGV4WzBdKSAvICgxIC0gZmxleFswXSk7XG4gICAgc3BsaXQgPSBzcGxpdFsxXS5zcGxpdCh0KTtcbiAgICBtaWQgPSBzcGxpdFswXTtcbiAgICByaWdodCA9IHNwbGl0WzFdO1xuICAgIHJldHVybiBbb2Zmc2V0U2VnbWVudChsZWZ0LCBhbW91bnQpLCBvZmZzZXRTZWdtZW50KG1pZCwgYW1vdW50KSwgb2Zmc2V0U2VnbWVudChyaWdodCwgYW1vdW50KV07XG4gIH1cblxuICBmdW5jdGlvbiBPZmZzZXRQYXRoTW9kaWZpZXIoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU2hhcGVNb2RpZmllcl0sIE9mZnNldFBhdGhNb2RpZmllcik7XG5cbiAgT2Zmc2V0UGF0aE1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLmFtb3VudCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYSwgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5taXRlckxpbWl0ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5tbCwgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5saW5lSm9pbiA9IGRhdGEubGo7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRoaXMuYW1vdW50LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDA7XG4gIH07XG5cbiAgT2Zmc2V0UGF0aE1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzUGF0aCA9IGZ1bmN0aW9uIChpbnB1dEJlemllciwgYW1vdW50LCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCkge1xuICAgIHZhciBvdXRwdXRCZXppZXIgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgIG91dHB1dEJlemllci5jID0gaW5wdXRCZXppZXIuYztcbiAgICB2YXIgY291bnQgPSBpbnB1dEJlemllci5sZW5ndGgoKTtcblxuICAgIGlmICghaW5wdXRCZXppZXIuYykge1xuICAgICAgY291bnQgLT0gMTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgajtcbiAgICB2YXIgc2VnbWVudDtcbiAgICB2YXIgbXVsdGlTZWdtZW50cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIHNlZ21lbnQgPSBQb2x5bm9taWFsQmV6aWVyLnNoYXBlU2VnbWVudChpbnB1dEJlemllciwgaSk7XG4gICAgICBtdWx0aVNlZ21lbnRzLnB1c2gob2Zmc2V0U2VnbWVudFNwbGl0KHNlZ21lbnQsIGFtb3VudCkpO1xuICAgIH1cblxuICAgIGlmICghaW5wdXRCZXppZXIuYykge1xuICAgICAgZm9yIChpID0gY291bnQgLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBzZWdtZW50ID0gUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnRJbnZlcnRlZChpbnB1dEJlemllciwgaSk7XG4gICAgICAgIG11bHRpU2VnbWVudHMucHVzaChvZmZzZXRTZWdtZW50U3BsaXQoc2VnbWVudCwgYW1vdW50KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbXVsdGlTZWdtZW50cyA9IHBydW5lSW50ZXJzZWN0aW9ucyhtdWx0aVNlZ21lbnRzKTsgLy8gQWRkIGJlemllciBzZWdtZW50cyB0byB0aGUgb3V0cHV0IGFuZCBhcHBseSBsaW5lIGpvaW50c1xuXG4gICAgdmFyIGxhc3RQb2ludCA9IG51bGw7XG4gICAgdmFyIGxhc3RTZWcgPSBudWxsO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG11bHRpU2VnbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBtdWx0aVNlZ21lbnQgPSBtdWx0aVNlZ21lbnRzW2ldO1xuICAgICAgaWYgKGxhc3RTZWcpIGxhc3RQb2ludCA9IGpvaW5MaW5lcyhvdXRwdXRCZXppZXIsIGxhc3RTZWcsIG11bHRpU2VnbWVudFswXSwgbGluZUpvaW4sIG1pdGVyTGltaXQpO1xuICAgICAgbGFzdFNlZyA9IG11bHRpU2VnbWVudFttdWx0aVNlZ21lbnQubGVuZ3RoIC0gMV07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBtdWx0aVNlZ21lbnQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgc2VnbWVudCA9IG11bHRpU2VnbWVudFtqXTtcblxuICAgICAgICBpZiAobGFzdFBvaW50ICYmIHBvaW50RXF1YWwoc2VnbWVudC5wb2ludHNbMF0sIGxhc3RQb2ludCkpIHtcbiAgICAgICAgICBvdXRwdXRCZXppZXIuc2V0WFlBdChzZWdtZW50LnBvaW50c1sxXVswXSwgc2VnbWVudC5wb2ludHNbMV1bMV0sICdvJywgb3V0cHV0QmV6aWVyLmxlbmd0aCgpIC0gMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0QmV6aWVyLnNldFRyaXBsZUF0KHNlZ21lbnQucG9pbnRzWzBdWzBdLCBzZWdtZW50LnBvaW50c1swXVsxXSwgc2VnbWVudC5wb2ludHNbMV1bMF0sIHNlZ21lbnQucG9pbnRzWzFdWzFdLCBzZWdtZW50LnBvaW50c1swXVswXSwgc2VnbWVudC5wb2ludHNbMF1bMV0sIG91dHB1dEJlemllci5sZW5ndGgoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXRCZXppZXIuc2V0VHJpcGxlQXQoc2VnbWVudC5wb2ludHNbM11bMF0sIHNlZ21lbnQucG9pbnRzWzNdWzFdLCBzZWdtZW50LnBvaW50c1szXVswXSwgc2VnbWVudC5wb2ludHNbM11bMV0sIHNlZ21lbnQucG9pbnRzWzJdWzBdLCBzZWdtZW50LnBvaW50c1syXVsxXSwgb3V0cHV0QmV6aWVyLmxlbmd0aCgpKTtcbiAgICAgICAgbGFzdFBvaW50ID0gc2VnbWVudC5wb2ludHNbM107XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG11bHRpU2VnbWVudHMubGVuZ3RoKSBqb2luTGluZXMob3V0cHV0QmV6aWVyLCBsYXN0U2VnLCBtdWx0aVNlZ21lbnRzWzBdWzBdLCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCk7XG4gICAgcmV0dXJuIG91dHB1dEJlemllcjtcbiAgfTtcblxuICBPZmZzZXRQYXRoTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBzaGFwZVBhdGhzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGFtb3VudCA9IHRoaXMuYW1vdW50LnY7XG4gICAgdmFyIG1pdGVyTGltaXQgPSB0aGlzLm1pdGVyTGltaXQudjtcbiAgICB2YXIgbGluZUpvaW4gPSB0aGlzLmxpbmVKb2luO1xuXG4gICAgaWYgKGFtb3VudCAhPT0gMCkge1xuICAgICAgdmFyIHNoYXBlRGF0YTtcbiAgICAgIHZhciBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlRGF0YSA9IHRoaXMuc2hhcGVzW2ldO1xuICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgICBpZiAoISghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgIXRoaXMuX21kZiAmJiAhX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICAgIHNoYXBlUGF0aHMgPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzO1xuICAgICAgICAgIGpMZW4gPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMucHJvY2Vzc1BhdGgoc2hhcGVQYXRoc1tqXSwgYW1vdW50LCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNoYXBlRGF0YS5zaGFwZS5wYXRocyA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0Rm9udFByb3BlcnRpZXMoZm9udERhdGEpIHtcbiAgICB2YXIgc3R5bGVzID0gZm9udERhdGEuZlN0eWxlID8gZm9udERhdGEuZlN0eWxlLnNwbGl0KCcgJykgOiBbXTtcbiAgICB2YXIgZldlaWdodCA9ICdub3JtYWwnO1xuICAgIHZhciBmU3R5bGUgPSAnbm9ybWFsJztcbiAgICB2YXIgbGVuID0gc3R5bGVzLmxlbmd0aDtcbiAgICB2YXIgc3R5bGVOYW1lO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgc3R5bGVOYW1lID0gc3R5bGVzW2ldLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIHN3aXRjaCAoc3R5bGVOYW1lKSB7XG4gICAgICAgIGNhc2UgJ2l0YWxpYyc6XG4gICAgICAgICAgZlN0eWxlID0gJ2l0YWxpYyc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnYm9sZCc6XG4gICAgICAgICAgZldlaWdodCA9ICc3MDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2JsYWNrJzpcbiAgICAgICAgICBmV2VpZ2h0ID0gJzkwMCc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbWVkaXVtJzpcbiAgICAgICAgICBmV2VpZ2h0ID0gJzUwMCc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVndWxhcic6XG4gICAgICAgIGNhc2UgJ25vcm1hbCc6XG4gICAgICAgICAgZldlaWdodCA9ICc0MDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgY2FzZSAndGhpbic6XG4gICAgICAgICAgZldlaWdodCA9ICcyMDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0eWxlOiBmU3R5bGUsXG4gICAgICB3ZWlnaHQ6IGZvbnREYXRhLmZXZWlnaHQgfHwgZldlaWdodFxuICAgIH07XG4gIH1cblxuICB2YXIgRm9udE1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1heFdhaXRpbmdUaW1lID0gNTAwMDtcbiAgICB2YXIgZW1wdHlDaGFyID0ge1xuICAgICAgdzogMCxcbiAgICAgIHNpemU6IDAsXG4gICAgICBzaGFwZXM6IFtdLFxuICAgICAgZGF0YToge1xuICAgICAgICBzaGFwZXM6IFtdXG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgY29tYmluZWRDaGFyYWN0ZXJzID0gW107IC8vIEhpbmRpIGNoYXJhY3RlcnNcblxuICAgIGNvbWJpbmVkQ2hhcmFjdGVycyA9IGNvbWJpbmVkQ2hhcmFjdGVycy5jb25jYXQoWzIzMDQsIDIzMDUsIDIzMDYsIDIzMDcsIDIzNjIsIDIzNjMsIDIzNjQsIDIzNjQsIDIzNjYsIDIzNjcsIDIzNjgsIDIzNjksIDIzNzAsIDIzNzEsIDIzNzIsIDIzNzMsIDIzNzQsIDIzNzUsIDIzNzYsIDIzNzcsIDIzNzgsIDIzNzksIDIzODAsIDIzODEsIDIzODIsIDIzODMsIDIzODcsIDIzODgsIDIzODksIDIzOTAsIDIzOTEsIDI0MDIsIDI0MDNdKTtcbiAgICB2YXIgQkxBQ0tfRkxBR19DT0RFX1BPSU5UID0gMTI3OTg4O1xuICAgIHZhciBDQU5DRUxfVEFHX0NPREVfUE9JTlQgPSA5MTc2MzE7XG4gICAgdmFyIEFfVEFHX0NPREVfUE9JTlQgPSA5MTc2MDE7XG4gICAgdmFyIFpfVEFHX0NPREVfUE9JTlQgPSA5MTc2MjY7XG4gICAgdmFyIFZBUklBVElPTl9TRUxFQ1RPUl8xNl9DT0RFX1BPSU5UID0gNjUwMzk7XG4gICAgdmFyIFpFUk9fV0lEVEhfSk9JTkVSX0NPREVfUE9JTlQgPSA4MjA1O1xuICAgIHZhciBSRUdJT05BTF9DSEFSQUNURVJfQV9DT0RFX1BPSU5UID0gMTI3NDYyO1xuICAgIHZhciBSRUdJT05BTF9DSEFSQUNURVJfWl9DT0RFX1BPSU5UID0gMTI3NDg3O1xuICAgIHZhciBzdXJyb2dhdGVNb2RpZmllcnMgPSBbJ2Q4M2NkZmZiJywgJ2Q4M2NkZmZjJywgJ2Q4M2NkZmZkJywgJ2Q4M2NkZmZlJywgJ2Q4M2NkZmZmJ107XG5cbiAgICBmdW5jdGlvbiB0cmltRm9udE9wdGlvbnMoZm9udCkge1xuICAgICAgdmFyIGZhbWlseUFycmF5ID0gZm9udC5zcGxpdCgnLCcpO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gZmFtaWx5QXJyYXkubGVuZ3RoO1xuICAgICAgdmFyIGVuYWJsZWRGYW1pbGllcyA9IFtdO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGZhbWlseUFycmF5W2ldICE9PSAnc2Fucy1zZXJpZicgJiYgZmFtaWx5QXJyYXlbaV0gIT09ICdtb25vc3BhY2UnKSB7XG4gICAgICAgICAgZW5hYmxlZEZhbWlsaWVzLnB1c2goZmFtaWx5QXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbmFibGVkRmFtaWxpZXMuam9pbignLCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFVwTm9kZShmb250LCBmYW1pbHkpIHtcbiAgICAgIHZhciBwYXJlbnROb2RlID0gY3JlYXRlVGFnKCdzcGFuJyk7IC8vIE5vZGUgaXMgaW52aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzLlxuXG4gICAgICBwYXJlbnROb2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgIHBhcmVudE5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGZhbWlseTtcbiAgICAgIHZhciBub2RlID0gY3JlYXRlVGFnKCdzcGFuJyk7IC8vIENoYXJhY3RlcnMgdGhhdCB2YXJ5IHNpZ25pZmljYW50bHkgYW1vbmcgZGlmZmVyZW50IGZvbnRzXG5cbiAgICAgIG5vZGUuaW5uZXJUZXh0ID0gJ2dpSXRUMVdReUAhLS8jJzsgLy8gVmlzaWJsZSAtIHNvIHdlIGNhbiBtZWFzdXJlIGl0IC0gYnV0IG5vdCBvbiB0aGUgc2NyZWVuXG5cbiAgICAgIHBhcmVudE5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5sZWZ0ID0gJy0xMDAwMHB4JztcbiAgICAgIHBhcmVudE5vZGUuc3R5bGUudG9wID0gJy0xMDAwMHB4JzsgLy8gTGFyZ2UgZm9udCBzaXplIG1ha2VzIGV2ZW4gc3VidGxlIGNoYW5nZXMgb2J2aW91c1xuXG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmZvbnRTaXplID0gJzMwMHB4JzsgLy8gUmVzZXQgYW55IGZvbnQgcHJvcGVydGllc1xuXG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmZvbnRWYXJpYW50ID0gJ25vcm1hbCc7XG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmZvbnRTdHlsZSA9ICdub3JtYWwnO1xuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmxldHRlclNwYWNpbmcgPSAnMCc7XG4gICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwYXJlbnROb2RlKTsgLy8gUmVtZW1iZXIgd2lkdGggd2l0aCBubyBhcHBsaWVkIHdlYiBmb250XG5cbiAgICAgIHZhciB3aWR0aCA9IG5vZGUub2Zmc2V0V2lkdGg7XG4gICAgICBub2RlLnN0eWxlLmZvbnRGYW1pbHkgPSB0cmltRm9udE9wdGlvbnMoZm9udCkgKyAnLCAnICsgZmFtaWx5O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgdzogd2lkdGgsXG4gICAgICAgIHBhcmVudDogcGFyZW50Tm9kZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0xvYWRlZEZvbnRzKCkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5mb250cy5sZW5ndGg7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHZhciB3O1xuICAgICAgdmFyIGxvYWRlZENvdW50ID0gbGVuO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9udHNbaV0ubG9hZGVkKSB7XG4gICAgICAgICAgbG9hZGVkQ291bnQgLT0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZvbnRzW2ldLmZPcmlnaW4gPT09ICduJyB8fCB0aGlzLmZvbnRzW2ldLm9yaWdpbiA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuZm9udHNbaV0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlID0gdGhpcy5mb250c1tpXS5tb25vQ2FzZS5ub2RlO1xuICAgICAgICAgIHcgPSB0aGlzLmZvbnRzW2ldLm1vbm9DYXNlLnc7XG5cbiAgICAgICAgICBpZiAobm9kZS5vZmZzZXRXaWR0aCAhPT0gdykge1xuICAgICAgICAgICAgbG9hZGVkQ291bnQgLT0gMTtcbiAgICAgICAgICAgIHRoaXMuZm9udHNbaV0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuZm9udHNbaV0uc2Fuc0Nhc2Uubm9kZTtcbiAgICAgICAgICAgIHcgPSB0aGlzLmZvbnRzW2ldLnNhbnNDYXNlLnc7XG5cbiAgICAgICAgICAgIGlmIChub2RlLm9mZnNldFdpZHRoICE9PSB3KSB7XG4gICAgICAgICAgICAgIGxvYWRlZENvdW50IC09IDE7XG4gICAgICAgICAgICAgIHRoaXMuZm9udHNbaV0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5mb250c1tpXS5sb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZm9udHNbaV0uc2Fuc0Nhc2UucGFyZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mb250c1tpXS5zYW5zQ2FzZS5wYXJlbnQpO1xuICAgICAgICAgICAgdGhpcy5mb250c1tpXS5tb25vQ2FzZS5wYXJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvbnRzW2ldLm1vbm9DYXNlLnBhcmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2FkZWRDb3VudCAhPT0gMCAmJiBEYXRlLm5vdygpIC0gdGhpcy5pbml0VGltZSA8IG1heFdhaXRpbmdUaW1lKSB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5jaGVja0xvYWRlZEZvbnRzQmluZGVkLCAyMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuc2V0SXNMb2FkZWRCaW5kZWQsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVIZWxwZXIoZm9udERhdGEsIGRlZikge1xuICAgICAgdmFyIGVuZ2luZSA9IGRvY3VtZW50LmJvZHkgJiYgZGVmID8gJ3N2ZycgOiAnY2FudmFzJztcbiAgICAgIHZhciBoZWxwZXI7XG4gICAgICB2YXIgZm9udFByb3BzID0gZ2V0Rm9udFByb3BlcnRpZXMoZm9udERhdGEpO1xuXG4gICAgICBpZiAoZW5naW5lID09PSAnc3ZnJykge1xuICAgICAgICB2YXIgdEhlbHBlciA9IGNyZWF0ZU5TKCd0ZXh0Jyk7XG4gICAgICAgIHRIZWxwZXIuc3R5bGUuZm9udFNpemUgPSAnMTAwcHgnOyAvLyB0SGVscGVyLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RGF0YS5mRmFtaWx5O1xuXG4gICAgICAgIHRIZWxwZXIuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsIGZvbnREYXRhLmZGYW1pbHkpO1xuICAgICAgICB0SGVscGVyLnNldEF0dHJpYnV0ZSgnZm9udC1zdHlsZScsIGZvbnRQcm9wcy5zdHlsZSk7XG4gICAgICAgIHRIZWxwZXIuc2V0QXR0cmlidXRlKCdmb250LXdlaWdodCcsIGZvbnRQcm9wcy53ZWlnaHQpO1xuICAgICAgICB0SGVscGVyLnRleHRDb250ZW50ID0gJzEnO1xuXG4gICAgICAgIGlmIChmb250RGF0YS5mQ2xhc3MpIHtcbiAgICAgICAgICB0SGVscGVyLnN0eWxlLmZvbnRGYW1pbHkgPSAnaW5oZXJpdCc7XG4gICAgICAgICAgdEhlbHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgZm9udERhdGEuZkNsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0SGVscGVyLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RGF0YS5mRmFtaWx5O1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmLmFwcGVuZENoaWxkKHRIZWxwZXIpO1xuICAgICAgICBoZWxwZXIgPSB0SGVscGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRDYW52YXNIZWxwZXIgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKDUwMCwgNTAwKS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB0Q2FudmFzSGVscGVyLmZvbnQgPSBmb250UHJvcHMuc3R5bGUgKyAnICcgKyBmb250UHJvcHMud2VpZ2h0ICsgJyAxMDBweCAnICsgZm9udERhdGEuZkZhbWlseTtcbiAgICAgICAgaGVscGVyID0gdENhbnZhc0hlbHBlcjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbWVhc3VyZSh0ZXh0KSB7XG4gICAgICAgIGlmIChlbmdpbmUgPT09ICdzdmcnKSB7XG4gICAgICAgICAgaGVscGVyLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICByZXR1cm4gaGVscGVyLmdldENvbXB1dGVkVGV4dExlbmd0aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhlbHBlci5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVhc3VyZVRleHQ6IG1lYXN1cmVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkRm9udHMoZm9udERhdGEsIGRlZnMpIHtcbiAgICAgIGlmICghZm9udERhdGEpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY2hhcnMpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZm9udHMgPSBmb250RGF0YS5saXN0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghZG9jdW1lbnQuYm9keSkge1xuICAgICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgZm9udERhdGEubGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgZGF0YS5oZWxwZXIgPSBjcmVhdGVIZWxwZXIoZGF0YSk7XG4gICAgICAgICAgZGF0YS5jYWNoZSA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5mb250cyA9IGZvbnREYXRhLmxpc3Q7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGZvbnRBcnIgPSBmb250RGF0YS5saXN0O1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gZm9udEFyci5sZW5ndGg7XG4gICAgICB2YXIgX3BlbmRpbmdGb250cyA9IGxlbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzaG91bGRMb2FkRm9udCA9IHRydWU7XG4gICAgICAgIHZhciBsb2FkZWRTZWxlY3RvcjtcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIGZvbnRBcnJbaV0ubG9hZGVkID0gZmFsc2U7XG4gICAgICAgIGZvbnRBcnJbaV0ubW9ub0Nhc2UgPSBzZXRVcE5vZGUoZm9udEFycltpXS5mRmFtaWx5LCAnbW9ub3NwYWNlJyk7XG4gICAgICAgIGZvbnRBcnJbaV0uc2Fuc0Nhc2UgPSBzZXRVcE5vZGUoZm9udEFycltpXS5mRmFtaWx5LCAnc2Fucy1zZXJpZicpO1xuXG4gICAgICAgIGlmICghZm9udEFycltpXS5mUGF0aCkge1xuICAgICAgICAgIGZvbnRBcnJbaV0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICBfcGVuZGluZ0ZvbnRzIC09IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udEFycltpXS5mT3JpZ2luID09PSAncCcgfHwgZm9udEFycltpXS5vcmlnaW4gPT09IDMpIHtcbiAgICAgICAgICBsb2FkZWRTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlW2YtZm9yaWdpbj1cInBcIl1bZi1mYW1pbHk9XCInICsgZm9udEFycltpXS5mRmFtaWx5ICsgJ1wiXSwgc3R5bGVbZi1vcmlnaW49XCIzXCJdW2YtZmFtaWx5PVwiJyArIGZvbnRBcnJbaV0uZkZhbWlseSArICdcIl0nKTtcblxuICAgICAgICAgIGlmIChsb2FkZWRTZWxlY3Rvci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzaG91bGRMb2FkRm9udCA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaG91bGRMb2FkRm9udCkge1xuICAgICAgICAgICAgdmFyIHMgPSBjcmVhdGVUYWcoJ3N0eWxlJyk7XG4gICAgICAgICAgICBzLnNldEF0dHJpYnV0ZSgnZi1mb3JpZ2luJywgZm9udEFycltpXS5mT3JpZ2luKTtcbiAgICAgICAgICAgIHMuc2V0QXR0cmlidXRlKCdmLW9yaWdpbicsIGZvbnRBcnJbaV0ub3JpZ2luKTtcbiAgICAgICAgICAgIHMuc2V0QXR0cmlidXRlKCdmLWZhbWlseScsIGZvbnRBcnJbaV0uZkZhbWlseSk7XG4gICAgICAgICAgICBzLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICAgICAgcy5pbm5lclRleHQgPSAnQGZvbnQtZmFjZSB7Zm9udC1mYW1pbHk6ICcgKyBmb250QXJyW2ldLmZGYW1pbHkgKyBcIjsgZm9udC1zdHlsZTogbm9ybWFsOyBzcmM6IHVybCgnXCIgKyBmb250QXJyW2ldLmZQYXRoICsgXCInKTt9XCI7XG4gICAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmb250QXJyW2ldLmZPcmlnaW4gPT09ICdnJyB8fCBmb250QXJyW2ldLm9yaWdpbiA9PT0gMSkge1xuICAgICAgICAgIGxvYWRlZFNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGlua1tmLWZvcmlnaW49XCJnXCJdLCBsaW5rW2Ytb3JpZ2luPVwiMVwiXScpO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxvYWRlZFNlbGVjdG9yLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICBpZiAobG9hZGVkU2VsZWN0b3Jbal0uaHJlZi5pbmRleE9mKGZvbnRBcnJbaV0uZlBhdGgpICE9PSAtMSkge1xuICAgICAgICAgICAgICAvLyBGb250IGlzIGFscmVhZHkgbG9hZGVkXG4gICAgICAgICAgICAgIHNob3VsZExvYWRGb250ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNob3VsZExvYWRGb250KSB7XG4gICAgICAgICAgICB2YXIgbCA9IGNyZWF0ZVRhZygnbGluaycpO1xuICAgICAgICAgICAgbC5zZXRBdHRyaWJ1dGUoJ2YtZm9yaWdpbicsIGZvbnRBcnJbaV0uZk9yaWdpbik7XG4gICAgICAgICAgICBsLnNldEF0dHJpYnV0ZSgnZi1vcmlnaW4nLCBmb250QXJyW2ldLm9yaWdpbik7XG4gICAgICAgICAgICBsLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICAgICAgbC5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgICAgICAgICBsLmhyZWYgPSBmb250QXJyW2ldLmZQYXRoO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udEFycltpXS5mT3JpZ2luID09PSAndCcgfHwgZm9udEFycltpXS5vcmlnaW4gPT09IDIpIHtcbiAgICAgICAgICBsb2FkZWRTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdFtmLWZvcmlnaW49XCJ0XCJdLCBzY3JpcHRbZi1vcmlnaW49XCIyXCJdJyk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbG9hZGVkU2VsZWN0b3IubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChmb250QXJyW2ldLmZQYXRoID09PSBsb2FkZWRTZWxlY3RvcltqXS5zcmMpIHtcbiAgICAgICAgICAgICAgLy8gRm9udCBpcyBhbHJlYWR5IGxvYWRlZFxuICAgICAgICAgICAgICBzaG91bGRMb2FkRm9udCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaG91bGRMb2FkRm9udCkge1xuICAgICAgICAgICAgdmFyIHNjID0gY3JlYXRlVGFnKCdsaW5rJyk7XG4gICAgICAgICAgICBzYy5zZXRBdHRyaWJ1dGUoJ2YtZm9yaWdpbicsIGZvbnRBcnJbaV0uZk9yaWdpbik7XG4gICAgICAgICAgICBzYy5zZXRBdHRyaWJ1dGUoJ2Ytb3JpZ2luJywgZm9udEFycltpXS5vcmlnaW4pO1xuICAgICAgICAgICAgc2Muc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xuICAgICAgICAgICAgc2Muc2V0QXR0cmlidXRlKCdocmVmJywgZm9udEFycltpXS5mUGF0aCk7XG4gICAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKHNjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb250QXJyW2ldLmhlbHBlciA9IGNyZWF0ZUhlbHBlcihmb250QXJyW2ldLCBkZWZzKTtcbiAgICAgICAgZm9udEFycltpXS5jYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLmZvbnRzLnB1c2goZm9udEFycltpXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfcGVuZGluZ0ZvbnRzID09PSAwKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT24gc29tZSBjYXNlcyBldmVuIGlmIHRoZSBmb250IGlzIGxvYWRlZCwgaXQgd29uJ3QgbG9hZCBjb3JyZWN0bHkgd2hlbiBtZWFzdXJpbmcgdGV4dCBvbiBjYW52YXMuXG4gICAgICAgIC8vIEFkZGluZyB0aGlzIHRpbWVvdXQgc2VlbXMgdG8gZml4IGl0XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5jaGVja0xvYWRlZEZvbnRzLmJpbmQodGhpcyksIDEwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQ2hhcnMoY2hhcnMpIHtcbiAgICAgIGlmICghY2hhcnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY2hhcnMpIHtcbiAgICAgICAgdGhpcy5jaGFycyA9IFtdO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBjaGFycy5sZW5ndGg7XG4gICAgICB2YXIgajtcbiAgICAgIHZhciBqTGVuID0gdGhpcy5jaGFycy5sZW5ndGg7XG4gICAgICB2YXIgZm91bmQ7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBqID0gMDtcbiAgICAgICAgZm91bmQgPSBmYWxzZTtcblxuICAgICAgICB3aGlsZSAoaiA8IGpMZW4pIHtcbiAgICAgICAgICBpZiAodGhpcy5jaGFyc1tqXS5zdHlsZSA9PT0gY2hhcnNbaV0uc3R5bGUgJiYgdGhpcy5jaGFyc1tqXS5mRmFtaWx5ID09PSBjaGFyc1tpXS5mRmFtaWx5ICYmIHRoaXMuY2hhcnNbal0uY2ggPT09IGNoYXJzW2ldLmNoKSB7XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgIHRoaXMuY2hhcnMucHVzaChjaGFyc1tpXSk7XG4gICAgICAgICAgakxlbiArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2hhckRhdGEoX2NoYXIsIHN0eWxlLCBmb250KSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5jaGFycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJzW2ldLmNoID09PSBfY2hhciAmJiB0aGlzLmNoYXJzW2ldLnN0eWxlID09PSBzdHlsZSAmJiB0aGlzLmNoYXJzW2ldLmZGYW1pbHkgPT09IGZvbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jaGFyc1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKCh0eXBlb2YgX2NoYXIgPT09ICdzdHJpbmcnICYmIF9jaGFyLmNoYXJDb2RlQXQoMCkgIT09IDEzIHx8ICFfY2hhcikgJiYgY29uc29sZSAmJiBjb25zb2xlLndhcm4gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAmJiAhdGhpcy5fd2FybmVkKSB7XG4gICAgICAgIHRoaXMuX3dhcm5lZCA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUud2FybignTWlzc2luZyBjaGFyYWN0ZXIgZnJvbSBleHBvcnRlZCBjaGFyYWN0ZXJzIGxpc3Q6ICcsIF9jaGFyLCBzdHlsZSwgZm9udCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW1wdHlDaGFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lYXN1cmVUZXh0KF9jaGFyMiwgZm9udE5hbWUsIHNpemUpIHtcbiAgICAgIHZhciBmb250RGF0YSA9IHRoaXMuZ2V0Rm9udEJ5TmFtZShmb250TmFtZSk7IC8vIFVzaW5nIHRoZSBjaGFyIGluc3RlYWQgb2YgY2hhci5jaGFyQ29kZUF0KDApXG4gICAgICAvLyB0byBhdm9pZCBjb2xsaXNpb25zIGJldHdlZW4gZXF1YWwgY2hhcnNcblxuICAgICAgdmFyIGluZGV4ID0gX2NoYXIyO1xuXG4gICAgICBpZiAoIWZvbnREYXRhLmNhY2hlW2luZGV4XSkge1xuICAgICAgICB2YXIgdEhlbHBlciA9IGZvbnREYXRhLmhlbHBlcjtcblxuICAgICAgICBpZiAoX2NoYXIyID09PSAnICcpIHtcbiAgICAgICAgICB2YXIgZG91YmxlU2l6ZSA9IHRIZWxwZXIubWVhc3VyZVRleHQoJ3wnICsgX2NoYXIyICsgJ3wnKTtcbiAgICAgICAgICB2YXIgc2luZ2xlU2l6ZSA9IHRIZWxwZXIubWVhc3VyZVRleHQoJ3x8Jyk7XG4gICAgICAgICAgZm9udERhdGEuY2FjaGVbaW5kZXhdID0gKGRvdWJsZVNpemUgLSBzaW5nbGVTaXplKSAvIDEwMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb250RGF0YS5jYWNoZVtpbmRleF0gPSB0SGVscGVyLm1lYXN1cmVUZXh0KF9jaGFyMikgLyAxMDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvbnREYXRhLmNhY2hlW2luZGV4XSAqIHNpemU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Rm9udEJ5TmFtZShuYW1lKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5mb250cy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmZvbnRzW2ldLmZOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZm9udHNbaV07XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmZvbnRzWzBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvZGVQb2ludChzdHJpbmcpIHtcbiAgICAgIHZhciBjb2RlUG9pbnQgPSAwO1xuICAgICAgdmFyIGZpcnN0ID0gc3RyaW5nLmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgIGlmIChmaXJzdCA+PSAweEQ4MDAgJiYgZmlyc3QgPD0gMHhEQkZGKSB7XG4gICAgICAgIHZhciBzZWNvbmQgPSBzdHJpbmcuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICBpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG4gICAgICAgICAgY29kZVBvaW50ID0gKGZpcnN0IC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29kZVBvaW50O1xuICAgIH0gLy8gU2tpbiB0b25lIG1vZGlmaWVyc1xuXG5cbiAgICBmdW5jdGlvbiBpc01vZGlmaWVyKGZpcnN0Q2hhckNvZGUsIHNlY29uZENoYXJDb2RlKSB7XG4gICAgICB2YXIgc3VtID0gZmlyc3RDaGFyQ29kZS50b1N0cmluZygxNikgKyBzZWNvbmRDaGFyQ29kZS50b1N0cmluZygxNik7XG4gICAgICByZXR1cm4gc3Vycm9nYXRlTW9kaWZpZXJzLmluZGV4T2Yoc3VtKSAhPT0gLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNaZXJvV2lkdGhKb2luZXIoY2hhckNvZGUpIHtcbiAgICAgIHJldHVybiBjaGFyQ29kZSA9PT0gWkVST19XSURUSF9KT0lORVJfQ09ERV9QT0lOVDtcbiAgICB9IC8vIFRoaXMgY29kZXBvaW50IG1heSBjaGFuZ2UgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHByZWNlZGluZyBjaGFyYWN0ZXIuXG4gICAgLy8gSWYgdGhhdCBpcyBhIHN5bWJvbCwgZGluZ2JhdCBvciBlbW9qaSwgVStGRTBGIGZvcmNlcyBpdCB0byBiZSByZW5kZXJlZFxuICAgIC8vIGFzIGEgY29sb3JmdWwgaW1hZ2UgYXMgY29tcGFyZWQgdG8gYSBtb25vY2hyb21lIHRleHQgdmFyaWFudC5cblxuXG4gICAgZnVuY3Rpb24gaXNWYXJpYXRpb25TZWxlY3RvcihjaGFyQ29kZSkge1xuICAgICAgcmV0dXJuIGNoYXJDb2RlID09PSBWQVJJQVRJT05fU0VMRUNUT1JfMTZfQ09ERV9QT0lOVDtcbiAgICB9IC8vIFRoZSByZWdpb25hbCBpbmRpY2F0b3Igc3ltYm9scyBhcmUgYSBzZXQgb2YgMjYgYWxwaGFiZXRpYyBVbmljb2RlXG4gICAgLy8vIGNoYXJhY3RlcnMgKEHigJNaKSBpbnRlbmRlZCB0byBiZSB1c2VkIHRvIGVuY29kZSBJU08gMzE2Ni0xIGFscGhhLTJcbiAgICAvLyB0d28tbGV0dGVyIGNvdW50cnkgY29kZXMgaW4gYSB3YXkgdGhhdCBhbGxvd3Mgb3B0aW9uYWwgc3BlY2lhbCB0cmVhdG1lbnQuXG5cblxuICAgIGZ1bmN0aW9uIGlzUmVnaW9uYWxDb2RlKHN0cmluZykge1xuICAgICAgdmFyIGNvZGVQb2ludCA9IGdldENvZGVQb2ludChzdHJpbmcpO1xuXG4gICAgICBpZiAoY29kZVBvaW50ID49IFJFR0lPTkFMX0NIQVJBQ1RFUl9BX0NPREVfUE9JTlQgJiYgY29kZVBvaW50IDw9IFJFR0lPTkFMX0NIQVJBQ1RFUl9aX0NPREVfUE9JTlQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIFNvbWUgRW1vamkgaW1wbGVtZW50YXRpb25zIHJlcHJlc2VudCBjb21iaW5hdGlvbnMgb2ZcbiAgICAvLyB0d28g4oCccmVnaW9uYWwgaW5kaWNhdG9y4oCdIGxldHRlcnMgYXMgYSBzaW5nbGUgZmxhZyBzeW1ib2wuXG5cblxuICAgIGZ1bmN0aW9uIGlzRmxhZ0Vtb2ppKHN0cmluZykge1xuICAgICAgcmV0dXJuIGlzUmVnaW9uYWxDb2RlKHN0cmluZy5zdWJzdHIoMCwgMikpICYmIGlzUmVnaW9uYWxDb2RlKHN0cmluZy5zdWJzdHIoMiwgMikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ29tYmluZWRDaGFyYWN0ZXIoX2NoYXIzKSB7XG4gICAgICByZXR1cm4gY29tYmluZWRDaGFyYWN0ZXJzLmluZGV4T2YoX2NoYXIzKSAhPT0gLTE7XG4gICAgfSAvLyBSZWdpb25hbCBmbGFncyBzdGFydCB3aXRoIGEgQkxBQ0tfRkxBR19DT0RFX1BPSU5UXG4gICAgLy8gZm9sb3dlZCBieSA1IGNoYXJzIGluIHRoZSBUQUcgcmFuZ2VcbiAgICAvLyBhbmQgZW5kIHdpdGggYSBDQU5DRUxfVEFHX0NPREVfUE9JTlRcblxuXG4gICAgZnVuY3Rpb24gaXNSZWdpb25hbEZsYWcodGV4dCwgaW5kZXgpIHtcbiAgICAgIHZhciBjb2RlUG9pbnQgPSBnZXRDb2RlUG9pbnQodGV4dC5zdWJzdHIoaW5kZXgsIDIpKTtcblxuICAgICAgaWYgKGNvZGVQb2ludCAhPT0gQkxBQ0tfRkxBR19DT0RFX1BPSU5UKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIGluZGV4ICs9IDI7XG5cbiAgICAgIHdoaWxlIChjb3VudCA8IDUpIHtcbiAgICAgICAgY29kZVBvaW50ID0gZ2V0Q29kZVBvaW50KHRleHQuc3Vic3RyKGluZGV4LCAyKSk7XG5cbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IEFfVEFHX0NPREVfUE9JTlQgfHwgY29kZVBvaW50ID4gWl9UQUdfQ09ERV9QT0lOVCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRDb2RlUG9pbnQodGV4dC5zdWJzdHIoaW5kZXgsIDIpKSA9PT0gQ0FOQ0VMX1RBR19DT0RFX1BPSU5UO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldElzTG9hZGVkKCkge1xuICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIEZvbnQgPSBmdW5jdGlvbiBGb250KCkge1xuICAgICAgdGhpcy5mb250cyA9IFtdO1xuICAgICAgdGhpcy5jaGFycyA9IG51bGw7XG4gICAgICB0aGlzLnR5cGVraXRMb2FkZWQgPSAwO1xuICAgICAgdGhpcy5pc0xvYWRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fd2FybmVkID0gZmFsc2U7XG4gICAgICB0aGlzLmluaXRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHRoaXMuc2V0SXNMb2FkZWRCaW5kZWQgPSB0aGlzLnNldElzTG9hZGVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmNoZWNrTG9hZGVkRm9udHNCaW5kZWQgPSB0aGlzLmNoZWNrTG9hZGVkRm9udHMuYmluZCh0aGlzKTtcbiAgICB9O1xuXG4gICAgRm9udC5pc01vZGlmaWVyID0gaXNNb2RpZmllcjtcbiAgICBGb250LmlzWmVyb1dpZHRoSm9pbmVyID0gaXNaZXJvV2lkdGhKb2luZXI7XG4gICAgRm9udC5pc0ZsYWdFbW9qaSA9IGlzRmxhZ0Vtb2ppO1xuICAgIEZvbnQuaXNSZWdpb25hbENvZGUgPSBpc1JlZ2lvbmFsQ29kZTtcbiAgICBGb250LmlzQ29tYmluZWRDaGFyYWN0ZXIgPSBpc0NvbWJpbmVkQ2hhcmFjdGVyO1xuICAgIEZvbnQuaXNSZWdpb25hbEZsYWcgPSBpc1JlZ2lvbmFsRmxhZztcbiAgICBGb250LmlzVmFyaWF0aW9uU2VsZWN0b3IgPSBpc1ZhcmlhdGlvblNlbGVjdG9yO1xuICAgIEZvbnQuQkxBQ0tfRkxBR19DT0RFX1BPSU5UID0gQkxBQ0tfRkxBR19DT0RFX1BPSU5UO1xuICAgIHZhciBmb250UHJvdG90eXBlID0ge1xuICAgICAgYWRkQ2hhcnM6IGFkZENoYXJzLFxuICAgICAgYWRkRm9udHM6IGFkZEZvbnRzLFxuICAgICAgZ2V0Q2hhckRhdGE6IGdldENoYXJEYXRhLFxuICAgICAgZ2V0Rm9udEJ5TmFtZTogZ2V0Rm9udEJ5TmFtZSxcbiAgICAgIG1lYXN1cmVUZXh0OiBtZWFzdXJlVGV4dCxcbiAgICAgIGNoZWNrTG9hZGVkRm9udHM6IGNoZWNrTG9hZGVkRm9udHMsXG4gICAgICBzZXRJc0xvYWRlZDogc2V0SXNMb2FkZWRcbiAgICB9O1xuICAgIEZvbnQucHJvdG90eXBlID0gZm9udFByb3RvdHlwZTtcbiAgICByZXR1cm4gRm9udDtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNsb3RNYW5hZ2VyKGFuaW1hdGlvbkRhdGEpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkRhdGEgPSBhbmltYXRpb25EYXRhO1xuICB9XG5cbiAgU2xvdE1hbmFnZXIucHJvdG90eXBlLmdldFByb3AgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkRhdGEuc2xvdHMgJiYgdGhpcy5hbmltYXRpb25EYXRhLnNsb3RzW2RhdGEuc2lkXSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGF0YSwgdGhpcy5hbmltYXRpb25EYXRhLnNsb3RzW2RhdGEuc2lkXS5wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbG90RmFjdG9yeShhbmltYXRpb25EYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTbG90TWFuYWdlcihhbmltYXRpb25EYXRhKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlbmRlcmFibGVFbGVtZW50KCkge31cblxuICBSZW5kZXJhYmxlRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgaW5pdFJlbmRlcmFibGU6IGZ1bmN0aW9uIGluaXRSZW5kZXJhYmxlKCkge1xuICAgICAgLy8gbGF5ZXIncyB2aXNpYmlsaXR5IHJlbGF0ZWQgdG8gaW5wb2ludCBhbmQgb3V0cG9pbnQuIFJlbmFtZSBpc1Zpc2libGUgdG8gaXNJblJhbmdlXG4gICAgICB0aGlzLmlzSW5SYW5nZSA9IGZhbHNlOyAvLyBsYXllcidzIGRpc3BsYXkgc3RhdGVcblxuICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTsgLy8gSWYgbGF5ZXIncyB0cmFuc3BhcmVuY3kgZXF1YWxzIDAsIGl0IGNhbiBiZSBoaWRkZW5cblxuICAgICAgdGhpcy5pc1RyYW5zcGFyZW50ID0gZmFsc2U7IC8vIGxpc3Qgb2YgYW5pbWF0ZWQgY29tcG9uZW50c1xuXG4gICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzID0gW107XG4gICAgfSxcbiAgICBhZGRSZW5kZXJhYmxlQ29tcG9uZW50OiBmdW5jdGlvbiBhZGRSZW5kZXJhYmxlQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgICAgaWYgKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpID09PSAtMSkge1xuICAgICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZVJlbmRlcmFibGVDb21wb25lbnQ6IGZ1bmN0aW9uIHJlbW92ZVJlbmRlcmFibGVDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgICBpZiAodGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cy5pbmRleE9mKGNvbXBvbmVudCkgIT09IC0xKSB7XG4gICAgICAgIHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuc3BsaWNlKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpLCAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHByZXBhcmVSZW5kZXJhYmxlRnJhbWU6IGZ1bmN0aW9uIHByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKSB7XG4gICAgICB0aGlzLmNoZWNrTGF5ZXJMaW1pdHMobnVtKTtcbiAgICB9LFxuICAgIGNoZWNrVHJhbnNwYXJlbmN5OiBmdW5jdGlvbiBjaGVja1RyYW5zcGFyZW5jeSgpIHtcbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8udiA8PSAwKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1RyYW5zcGFyZW50ICYmIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaGlkZU9uVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICB0aGlzLmlzVHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNUcmFuc3BhcmVudCkge1xuICAgICAgICB0aGlzLmlzVHJhbnNwYXJlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBJbml0aWFsaXplcyBmcmFtZSByZWxhdGVkIHByb3BlcnRpZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG51bVxuICAgICAgICogY3VycmVudCBmcmFtZSBudW1iZXIgaW4gTGF5ZXIncyB0aW1lXG4gICAgICAgKlxuICAgICAgICovXG4gICAgY2hlY2tMYXllckxpbWl0czogZnVuY3Rpb24gY2hlY2tMYXllckxpbWl0cyhudW0pIHtcbiAgICAgIGlmICh0aGlzLmRhdGEuaXAgLSB0aGlzLmRhdGEuc3QgPD0gbnVtICYmIHRoaXMuZGF0YS5vcCAtIHRoaXMuZGF0YS5zdCA+IG51bSkge1xuICAgICAgICBpZiAodGhpcy5pc0luUmFuZ2UgIT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuX21kZiA9IHRydWU7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmlzSW5SYW5nZSA9IHRydWU7XG4gICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0luUmFuZ2UgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc0luUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJSZW5kZXJhYmxlOiBmdW5jdGlvbiByZW5kZXJSZW5kZXJhYmxlKCkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzW2ldLnJlbmRlckZyYW1lKHRoaXMuX2lzRmlyc3RGcmFtZSk7XG4gICAgICB9XG4gICAgICAvKiB0aGlzLm1hc2tNYW5hZ2VyLnJlbmRlckZyYW1lKHRoaXMuZmluYWxUcmFuc2Zvcm0ubWF0KTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlci5yZW5kZXJGcmFtZSh0aGlzLl9pc0ZpcnN0RnJhbWUpOyAqL1xuXG4gICAgfSxcbiAgICBzb3VyY2VSZWN0QXRUaW1lOiBmdW5jdGlvbiBzb3VyY2VSZWN0QXRUaW1lKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICBoZWlnaHQ6IDEwMFxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldExheWVyU2l6ZTogZnVuY3Rpb24gZ2V0TGF5ZXJTaXplKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS50eSA9PT0gNSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHc6IHRoaXMuZGF0YS50ZXh0RGF0YS53aWR0aCxcbiAgICAgICAgICBoOiB0aGlzLmRhdGEudGV4dERhdGEuaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHc6IHRoaXMuZGF0YS53aWR0aCxcbiAgICAgICAgaDogdGhpcy5kYXRhLmhlaWdodFxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEJsZW5kTW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYmxlbmRNb2RlRW51bXMgPSB7XG4gICAgICAwOiAnc291cmNlLW92ZXInLFxuICAgICAgMTogJ211bHRpcGx5JyxcbiAgICAgIDI6ICdzY3JlZW4nLFxuICAgICAgMzogJ292ZXJsYXknLFxuICAgICAgNDogJ2RhcmtlbicsXG4gICAgICA1OiAnbGlnaHRlbicsXG4gICAgICA2OiAnY29sb3ItZG9kZ2UnLFxuICAgICAgNzogJ2NvbG9yLWJ1cm4nLFxuICAgICAgODogJ2hhcmQtbGlnaHQnLFxuICAgICAgOTogJ3NvZnQtbGlnaHQnLFxuICAgICAgMTA6ICdkaWZmZXJlbmNlJyxcbiAgICAgIDExOiAnZXhjbHVzaW9uJyxcbiAgICAgIDEyOiAnaHVlJyxcbiAgICAgIDEzOiAnc2F0dXJhdGlvbicsXG4gICAgICAxNDogJ2NvbG9yJyxcbiAgICAgIDE1OiAnbHVtaW5vc2l0eSdcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAobW9kZSkge1xuICAgICAgcmV0dXJuIGJsZW5kTW9kZUVudW1zW21vZGVdIHx8ICcnO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTbGlkZXJFZmZlY3QoZGF0YSwgZWxlbSwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS52LCAwLCAwLCBjb250YWluZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gQW5nbGVFZmZlY3QoZGF0YSwgZWxlbSwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS52LCAwLCAwLCBjb250YWluZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29sb3JFZmZlY3QoZGF0YSwgZWxlbSwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS52LCAxLCAwLCBjb250YWluZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gUG9pbnRFZmZlY3QoZGF0YSwgZWxlbSwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS52LCAxLCAwLCBjb250YWluZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gTGF5ZXJJbmRleEVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBNYXNrSW5kZXhFZmZlY3QoZGF0YSwgZWxlbSwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS52LCAwLCAwLCBjb250YWluZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gQ2hlY2tib3hFZmZlY3QoZGF0YSwgZWxlbSwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS52LCAwLCAwLCBjb250YWluZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gTm9WYWx1ZUVmZmVjdCgpIHtcbiAgICB0aGlzLnAgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVmZmVjdHNNYW5hZ2VyKGRhdGEsIGVsZW1lbnQpIHtcbiAgICB2YXIgZWZmZWN0cyA9IGRhdGEuZWYgfHwgW107XG4gICAgdGhpcy5lZmZlY3RFbGVtZW50cyA9IFtdO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBlZmZlY3RzLmxlbmd0aDtcbiAgICB2YXIgZWZmZWN0SXRlbTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZWZmZWN0SXRlbSA9IG5ldyBHcm91cEVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50KTtcbiAgICAgIHRoaXMuZWZmZWN0RWxlbWVudHMucHVzaChlZmZlY3RJdGVtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBHcm91cEVmZmVjdChkYXRhLCBlbGVtZW50KSB7XG4gICAgdGhpcy5pbml0KGRhdGEsIGVsZW1lbnQpO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBHcm91cEVmZmVjdCk7XG4gIEdyb3VwRWZmZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IEdyb3VwRWZmZWN0LnByb3RvdHlwZS5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG5cbiAgR3JvdXBFZmZlY3QucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZGF0YSwgZWxlbWVudCkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5lZmZlY3RFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtZW50KTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5kYXRhLmVmLmxlbmd0aDtcbiAgICB2YXIgZWZmO1xuICAgIHZhciBlZmZlY3RzID0gdGhpcy5kYXRhLmVmO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBlZmYgPSBudWxsO1xuXG4gICAgICBzd2l0Y2ggKGVmZmVjdHNbaV0udHkpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGVmZiA9IG5ldyBTbGlkZXJFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGVmZiA9IG5ldyBBbmdsZUVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgZWZmID0gbmV3IENvbG9yRWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBlZmYgPSBuZXcgUG9pbnRFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA0OlxuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgZWZmID0gbmV3IENoZWNrYm94RWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgZWZmID0gbmV3IExheWVySW5kZXhFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICBlZmYgPSBuZXcgTWFza0luZGV4RWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBlZmYgPSBuZXcgRWZmZWN0c01hbmFnZXIoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIGNhc2UgNjpcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGVmZiA9IG5ldyBOb1ZhbHVlRWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWZmKSB7XG4gICAgICAgIHRoaXMuZWZmZWN0RWxlbWVudHMucHVzaChlZmYpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBCYXNlRWxlbWVudCgpIHt9XG5cbiAgQmFzZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGNoZWNrTWFza3M6IGZ1bmN0aW9uIGNoZWNrTWFza3MoKSB7XG4gICAgICBpZiAoIXRoaXMuZGF0YS5oYXNNYXNrKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZGF0YS5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAodGhpcy5kYXRhLm1hc2tzUHJvcGVydGllc1tpXS5tb2RlICE9PSAnbicgJiYgdGhpcy5kYXRhLm1hc2tzUHJvcGVydGllc1tpXS5jbCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgaW5pdEV4cHJlc3Npb25zOiBmdW5jdGlvbiBpbml0RXhwcmVzc2lvbnMoKSB7XG4gICAgICB2YXIgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gZ2V0RXhwcmVzc2lvbkludGVyZmFjZXMoKTtcblxuICAgICAgaWYgKCFleHByZXNzaW9uc0ludGVyZmFjZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgTGF5ZXJFeHByZXNzaW9uSW50ZXJmYWNlID0gZXhwcmVzc2lvbnNJbnRlcmZhY2VzKCdsYXllcicpO1xuICAgICAgdmFyIEVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlID0gZXhwcmVzc2lvbnNJbnRlcmZhY2VzKCdlZmZlY3RzJyk7XG4gICAgICB2YXIgU2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlID0gZXhwcmVzc2lvbnNJbnRlcmZhY2VzKCdzaGFwZScpO1xuICAgICAgdmFyIFRleHRFeHByZXNzaW9uSW50ZXJmYWNlID0gZXhwcmVzc2lvbnNJbnRlcmZhY2VzKCd0ZXh0Jyk7XG4gICAgICB2YXIgQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ2NvbXAnKTtcbiAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UgPSBMYXllckV4cHJlc3Npb25JbnRlcmZhY2UodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzayAmJiB0aGlzLm1hc2tNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UucmVnaXN0ZXJNYXNrSW50ZXJmYWNlKHRoaXMubWFza01hbmFnZXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWZmZWN0c0ludGVyZmFjZSA9IEVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlLmNyZWF0ZUVmZmVjdHNJbnRlcmZhY2UodGhpcywgdGhpcy5sYXllckludGVyZmFjZSk7XG4gICAgICB0aGlzLmxheWVySW50ZXJmYWNlLnJlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZShlZmZlY3RzSW50ZXJmYWNlKTtcblxuICAgICAgaWYgKHRoaXMuZGF0YS50eSA9PT0gMCB8fCB0aGlzLmRhdGEueHQpIHtcbiAgICAgICAgdGhpcy5jb21wSW50ZXJmYWNlID0gQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UodGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS50eSA9PT0gNCkge1xuICAgICAgICB0aGlzLmxheWVySW50ZXJmYWNlLnNoYXBlSW50ZXJmYWNlID0gU2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlKHRoaXMuc2hhcGVzRGF0YSwgdGhpcy5pdGVtc0RhdGEsIHRoaXMubGF5ZXJJbnRlcmZhY2UpO1xuICAgICAgICB0aGlzLmxheWVySW50ZXJmYWNlLmNvbnRlbnQgPSB0aGlzLmxheWVySW50ZXJmYWNlLnNoYXBlSW50ZXJmYWNlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEudHkgPT09IDUpIHtcbiAgICAgICAgdGhpcy5sYXllckludGVyZmFjZS50ZXh0SW50ZXJmYWNlID0gVGV4dEV4cHJlc3Npb25JbnRlcmZhY2UodGhpcyk7XG4gICAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UudGV4dCA9IHRoaXMubGF5ZXJJbnRlcmZhY2UudGV4dEludGVyZmFjZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldEJsZW5kTW9kZTogZnVuY3Rpb24gc2V0QmxlbmRNb2RlKCkge1xuICAgICAgdmFyIGJsZW5kTW9kZVZhbHVlID0gZ2V0QmxlbmRNb2RlKHRoaXMuZGF0YS5ibSk7XG4gICAgICB2YXIgZWxlbSA9IHRoaXMuYmFzZUVsZW1lbnQgfHwgdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICBlbGVtLnN0eWxlWydtaXgtYmxlbmQtbW9kZSddID0gYmxlbmRNb2RlVmFsdWU7XG4gICAgfSxcbiAgICBpbml0QmFzZURhdGE6IGZ1bmN0aW9uIGluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgICB0aGlzLmdsb2JhbERhdGEgPSBnbG9iYWxEYXRhO1xuICAgICAgdGhpcy5jb21wID0gY29tcDtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLmxheWVySWQgPSBjcmVhdGVFbGVtZW50SUQoKTsgLy8gU3RyZXRjaCBmYWN0b3IgZm9yIG9sZCBhbmltYXRpb25zIG1pc3NpbmcgdGhpcyBwcm9wZXJ0eS5cblxuICAgICAgaWYgKCF0aGlzLmRhdGEuc3IpIHtcbiAgICAgICAgdGhpcy5kYXRhLnNyID0gMTtcbiAgICAgIH0gLy8gZWZmZWN0cyBtYW5hZ2VyXG5cblxuICAgICAgdGhpcy5lZmZlY3RzTWFuYWdlciA9IG5ldyBFZmZlY3RzTWFuYWdlcih0aGlzLmRhdGEsIHRoaXMsIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMpO1xuICAgIH0sXG4gICAgZ2V0VHlwZTogZnVuY3Rpb24gZ2V0VHlwZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgfSxcbiAgICBzb3VyY2VSZWN0QXRUaW1lOiBmdW5jdGlvbiBzb3VyY2VSZWN0QXRUaW1lKCkge31cbiAgfTtcblxuICAvKipcbiAgICogQGZpbGVcbiAgICogSGFuZGxlcyBlbGVtZW50J3MgbGF5ZXIgZnJhbWUgdXBkYXRlLlxuICAgKiBDaGVja3MgbGF5ZXIgaW4gcG9pbnQgYW5kIG91dCBwb2ludFxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gRnJhbWVFbGVtZW50KCkge31cblxuICBGcmFtZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBJbml0aWFsaXplcyBmcmFtZSByZWxhdGVkIHByb3BlcnRpZXMuXG4gICAgICAgKlxuICAgICAgICovXG4gICAgaW5pdEZyYW1lOiBmdW5jdGlvbiBpbml0RnJhbWUoKSB7XG4gICAgICAvLyBzZXQgdG8gdHJ1ZSB3aGVuIGlucG9pbnQgaXMgcmVuZGVyZWRcbiAgICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlOyAvLyBsaXN0IG9mIGFuaW1hdGVkIHByb3BlcnRpZXNcblxuICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllcyA9IFtdOyAvLyBJZiBsYXllciBoYXMgYmVlbiBtb2RpZmllZCBpbiBjdXJyZW50IHRpY2sgdGhpcyB3aWxsIGJlIHRydWVcblxuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBDYWxjdWxhdGVzIGFsbCBkeW5hbWljIHZhbHVlc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAgICAgICAqIGN1cnJlbnQgZnJhbWUgbnVtYmVyIGluIExheWVyJ3MgdGltZVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc1Zpc2libGVcbiAgICAgICAqIGlmIGxheWVycyBpcyBjdXJyZW50bHkgaW4gcmFuZ2VcbiAgICAgICAqXG4gICAgICAgKi9cbiAgICBwcmVwYXJlUHJvcGVydGllczogZnVuY3Rpb24gcHJlcGFyZVByb3BlcnRpZXMobnVtLCBpc1Zpc2libGUpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGlzVmlzaWJsZSB8fCB0aGlzLl9pc1BhcmVudCAmJiB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLnByb3BUeXBlID09PSAndHJhbnNmb3JtJykge1xuICAgICAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uZ2V0VmFsdWUoKTtcblxuICAgICAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLl9tZGYpIHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX21kZiA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhZGREeW5hbWljUHJvcGVydHk6IGZ1bmN0aW9uIGFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKSB7XG4gICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLnB1c2gocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEZvb3RhZ2VFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmluaXRGcmFtZSgpO1xuICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICB0aGlzLmFzc2V0RGF0YSA9IGdsb2JhbERhdGEuZ2V0QXNzZXREYXRhKGRhdGEucmVmSWQpO1xuICAgIHRoaXMuZm9vdGFnZURhdGEgPSBnbG9iYWxEYXRhLmltYWdlTG9hZGVyLmdldEFzc2V0KHRoaXMuYXNzZXREYXRhKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgfVxuXG4gIEZvb3RhZ2VFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBleHRlbmRQcm90b3R5cGUoW1JlbmRlcmFibGVFbGVtZW50LCBCYXNlRWxlbWVudCwgRnJhbWVFbGVtZW50XSwgRm9vdGFnZUVsZW1lbnQpO1xuXG4gIEZvb3RhZ2VFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBGb290YWdlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBGb290YWdlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEZvb3RhZ2VFbGVtZW50LnByb3RvdHlwZS5pbml0RXhwcmVzc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4cHJlc3Npb25zSW50ZXJmYWNlcyA9IGdldEV4cHJlc3Npb25JbnRlcmZhY2VzKCk7XG5cbiAgICBpZiAoIWV4cHJlc3Npb25zSW50ZXJmYWNlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBGb290YWdlSW50ZXJmYWNlID0gZXhwcmVzc2lvbnNJbnRlcmZhY2VzKCdmb290YWdlJyk7XG4gICAgdGhpcy5sYXllckludGVyZmFjZSA9IEZvb3RhZ2VJbnRlcmZhY2UodGhpcyk7XG4gIH07XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLmdldEZvb3RhZ2VEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmZvb3RhZ2VEYXRhO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEF1ZGlvRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRSZW5kZXJhYmxlKCk7XG4gICAgdGhpcy5hc3NldERhdGEgPSBnbG9iYWxEYXRhLmdldEFzc2V0RGF0YShkYXRhLnJlZklkKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9jYW5QbGF5ID0gZmFsc2U7XG4gICAgdmFyIGFzc2V0UGF0aCA9IHRoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldHNQYXRoKHRoaXMuYXNzZXREYXRhKTtcbiAgICB0aGlzLmF1ZGlvID0gdGhpcy5nbG9iYWxEYXRhLmF1ZGlvQ29udHJvbGxlci5jcmVhdGVBdWRpbyhhc3NldFBhdGgpO1xuICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gMDtcbiAgICB0aGlzLmdsb2JhbERhdGEuYXVkaW9Db250cm9sbGVyLmFkZEF1ZGlvKHRoaXMpO1xuICAgIHRoaXMuX3ZvbHVtZU11bHRpcGxpZXIgPSAxO1xuICAgIHRoaXMuX3ZvbHVtZSA9IDE7XG4gICAgdGhpcy5fcHJldmlvdXNWb2x1bWUgPSBudWxsO1xuICAgIHRoaXMudG0gPSBkYXRhLnRtID8gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS50bSwgMCwgZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIHRoaXMpIDoge1xuICAgICAgX3BsYWNlaG9sZGVyOiB0cnVlXG4gICAgfTtcbiAgICB0aGlzLmx2ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5hdSAmJiBkYXRhLmF1Lmx2ID8gZGF0YS5hdS5sdiA6IHtcbiAgICAgIGs6IFsxMDBdXG4gICAgfSwgMSwgMC4wMSwgdGhpcyk7XG4gIH1cblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICB0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtLCB0cnVlKTtcbiAgICB0aGlzLnByZXBhcmVQcm9wZXJ0aWVzKG51bSwgdHJ1ZSk7XG5cbiAgICBpZiAoIXRoaXMudG0uX3BsYWNlaG9sZGVyKSB7XG4gICAgICB2YXIgdGltZVJlbWFwcGVkID0gdGhpcy50bS52O1xuICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSB0aW1lUmVtYXBwZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gbnVtIC8gdGhpcy5kYXRhLnNyO1xuICAgIH1cblxuICAgIHRoaXMuX3ZvbHVtZSA9IHRoaXMubHYudlswXTtcbiAgICB2YXIgdG90YWxWb2x1bWUgPSB0aGlzLl92b2x1bWUgKiB0aGlzLl92b2x1bWVNdWx0aXBsaWVyO1xuXG4gICAgaWYgKHRoaXMuX3ByZXZpb3VzVm9sdW1lICE9PSB0b3RhbFZvbHVtZSkge1xuICAgICAgdGhpcy5fcHJldmlvdXNWb2x1bWUgPSB0b3RhbFZvbHVtZTtcbiAgICAgIHRoaXMuYXVkaW8udm9sdW1lKHRvdGFsVm9sdW1lKTtcbiAgICB9XG4gIH07XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtSZW5kZXJhYmxlRWxlbWVudCwgQmFzZUVsZW1lbnQsIEZyYW1lRWxlbWVudF0sIEF1ZGlvRWxlbWVudCk7XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc0luUmFuZ2UgJiYgdGhpcy5fY2FuUGxheSkge1xuICAgICAgaWYgKCF0aGlzLl9pc1BsYXlpbmcpIHtcbiAgICAgICAgdGhpcy5hdWRpby5wbGF5KCk7XG4gICAgICAgIHRoaXMuYXVkaW8uc2Vlayh0aGlzLl9jdXJyZW50VGltZSAvIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZVJhdGUpO1xuICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5hdWRpby5wbGF5aW5nKCkgfHwgTWF0aC5hYnModGhpcy5fY3VycmVudFRpbWUgLyB0aGlzLmdsb2JhbERhdGEuZnJhbWVSYXRlIC0gdGhpcy5hdWRpby5zZWVrKCkpID4gMC4xKSB7XG4gICAgICAgIHRoaXMuYXVkaW8uc2Vlayh0aGlzLl9jdXJyZW50VGltZSAvIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZVJhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7Ly8gdGhpcy5hdWRpby5wbGF5KClcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hdWRpby5wYXVzZSgpO1xuICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hdWRpby5wYXVzZSgpO1xuICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2NhblBsYXkgPSBmYWxzZTtcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9jYW5QbGF5ID0gdHJ1ZTtcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnNldFJhdGUgPSBmdW5jdGlvbiAocmF0ZVZhbHVlKSB7XG4gICAgdGhpcy5hdWRpby5yYXRlKHJhdGVWYWx1ZSk7XG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS52b2x1bWUgPSBmdW5jdGlvbiAodm9sdW1lVmFsdWUpIHtcbiAgICB0aGlzLl92b2x1bWVNdWx0aXBsaWVyID0gdm9sdW1lVmFsdWU7XG4gICAgdGhpcy5fcHJldmlvdXNWb2x1bWUgPSB2b2x1bWVWYWx1ZSAqIHRoaXMuX3ZvbHVtZTtcbiAgICB0aGlzLmF1ZGlvLnZvbHVtZSh0aGlzLl9wcmV2aW91c1ZvbHVtZSk7XG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnNvdXJjZVJlY3RBdFRpbWUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLmluaXRFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGZ1bmN0aW9uIEJhc2VSZW5kZXJlcigpIHt9XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5jaGVja0xheWVycyA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuICAgIHZhciBkYXRhO1xuICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSB0cnVlO1xuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmICghdGhpcy5lbGVtZW50c1tpXSkge1xuICAgICAgICBkYXRhID0gdGhpcy5sYXllcnNbaV07XG5cbiAgICAgICAgaWYgKGRhdGEuaXAgLSBkYXRhLnN0IDw9IG51bSAtIHRoaXMubGF5ZXJzW2ldLnN0ICYmIGRhdGEub3AgLSBkYXRhLnN0ID4gbnVtIC0gdGhpcy5sYXllcnNbaV0uc3QpIHtcbiAgICAgICAgICB0aGlzLmJ1aWxkSXRlbShpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gdGhpcy5lbGVtZW50c1tpXSA/IHRoaXMuY29tcGxldGVMYXllcnMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrUGVuZGluZ0VsZW1lbnRzKCk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVJdGVtID0gZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgc3dpdGNoIChsYXllci50eSkge1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVJbWFnZShsYXllcik7XG5cbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ29tcChsYXllcik7XG5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU29saWQobGF5ZXIpO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU51bGwobGF5ZXIpO1xuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNoYXBlKGxheWVyKTtcblxuICAgICAgY2FzZSA1OlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUZXh0KGxheWVyKTtcblxuICAgICAgY2FzZSA2OlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVBdWRpbyhsYXllcik7XG5cbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNhbWVyYShsYXllcik7XG5cbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUZvb3RhZ2UobGF5ZXIpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVOdWxsKGxheWVyKTtcbiAgICB9XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVDYW1lcmEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3VcXCdyZSB1c2luZyBhIDNkIGNhbWVyYS4gVHJ5IHRoZSBodG1sIHJlbmRlcmVyLicpO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQXVkaW8gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQXVkaW9FbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVGb290YWdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IEZvb3RhZ2VFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5idWlsZEFsbEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuYnVpbGRJdGVtKGkpO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tQZW5kaW5nRWxlbWVudHMoKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmluY2x1ZGVMYXllcnMgPSBmdW5jdGlvbiAobmV3TGF5ZXJzKSB7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IGZhbHNlO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBuZXdMYXllcnMubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBqID0gMDtcblxuICAgICAgd2hpbGUgKGogPCBqTGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmxheWVyc1tqXS5pZCA9PT0gbmV3TGF5ZXJzW2ldLmlkKSB7XG4gICAgICAgICAgdGhpcy5sYXllcnNbal0gPSBuZXdMYXllcnNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBqICs9IDE7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuc2V0UHJvamVjdEludGVyZmFjZSA9IGZ1bmN0aW9uIChwSW50ZXJmYWNlKSB7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UgPSBwSW50ZXJmYWNlO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuaW5pdEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5nbG9iYWxEYXRhLnByb2dyZXNzaXZlTG9hZCkge1xuICAgICAgdGhpcy5idWlsZEFsbEl0ZW1zKCk7XG4gICAgfVxuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuYnVpbGRFbGVtZW50UGFyZW50aW5nID0gZnVuY3Rpb24gKGVsZW1lbnQsIHBhcmVudE5hbWUsIGhpZXJhcmNoeSkge1xuICAgIHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHM7XG4gICAgdmFyIGxheWVycyA9IHRoaXMubGF5ZXJzO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gbGF5ZXJzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAobGF5ZXJzW2ldLmluZCA9PSBwYXJlbnROYW1lKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgIGlmICghZWxlbWVudHNbaV0gfHwgZWxlbWVudHNbaV0gPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLmJ1aWxkSXRlbShpKTtcbiAgICAgICAgICB0aGlzLmFkZFBlbmRpbmdFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZXJhcmNoeS5wdXNoKGVsZW1lbnRzW2ldKTtcbiAgICAgICAgICBlbGVtZW50c1tpXS5zZXRBc1BhcmVudCgpO1xuXG4gICAgICAgICAgaWYgKGxheWVyc1tpXS5wYXJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5idWlsZEVsZW1lbnRQYXJlbnRpbmcoZWxlbWVudCwgbGF5ZXJzW2ldLnBhcmVudCwgaGllcmFyY2h5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRIaWVyYXJjaHkoaGllcmFyY2h5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmFkZFBlbmRpbmdFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB0aGlzLnBlbmRpbmdFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuc2VhcmNoRXh0cmFDb21wb3NpdGlvbnMgPSBmdW5jdGlvbiAoYXNzZXRzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGFzc2V0cy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmIChhc3NldHNbaV0ueHQpIHtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLmNyZWF0ZUNvbXAoYXNzZXRzW2ldKTtcbiAgICAgICAgY29tcC5pbml0RXhwcmVzc2lvbnMoKTtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UucmVnaXN0ZXJDb21wb3NpdGlvbihjb21wKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uIChpbmQpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldLmRhdGEuaW5kID09PSBpbmQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5nZXRFbGVtZW50QnlQYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICB2YXIgcGF0aFZhbHVlID0gcGF0aC5zaGlmdCgpO1xuICAgIHZhciBlbGVtZW50O1xuXG4gICAgaWYgKHR5cGVvZiBwYXRoVmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50c1twYXRoVmFsdWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldLmRhdGEubm0gPT09IHBhdGhWYWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW2ldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudC5nZXRFbGVtZW50QnlQYXRoKHBhdGgpO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuc2V0dXBHbG9iYWxEYXRhID0gZnVuY3Rpb24gKGFuaW1EYXRhLCBmb250c0NvbnRhaW5lcikge1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlciA9IG5ldyBGb250TWFuYWdlcigpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5zbG90TWFuYWdlciA9IHNsb3RGYWN0b3J5KGFuaW1EYXRhKTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuYWRkQ2hhcnMoYW5pbURhdGEuY2hhcnMpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRGb250cyhhbmltRGF0YS5mb250cywgZm9udHNDb250YWluZXIpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEgPSB0aGlzLmFuaW1hdGlvbkl0ZW0uZ2V0QXNzZXREYXRhLmJpbmQodGhpcy5hbmltYXRpb25JdGVtKTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZ2V0QXNzZXRzUGF0aCA9IHRoaXMuYW5pbWF0aW9uSXRlbS5nZXRBc3NldHNQYXRoLmJpbmQodGhpcy5hbmltYXRpb25JdGVtKTtcbiAgICB0aGlzLmdsb2JhbERhdGEuaW1hZ2VMb2FkZXIgPSB0aGlzLmFuaW1hdGlvbkl0ZW0uaW1hZ2VQcmVsb2FkZXI7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmF1ZGlvQ29udHJvbGxlciA9IHRoaXMuYW5pbWF0aW9uSXRlbS5hdWRpb0NvbnRyb2xsZXI7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZyYW1lSWQgPSAwO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZVJhdGUgPSBhbmltRGF0YS5mcjtcbiAgICB0aGlzLmdsb2JhbERhdGEubm0gPSBhbmltRGF0YS5ubTtcbiAgICB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUgPSB7XG4gICAgICB3OiBhbmltRGF0YS53LFxuICAgICAgaDogYW5pbURhdGEuaFxuICAgIH07XG4gIH07XG5cbiAgdmFyIGVmZmVjdFR5cGVzID0ge1xuICAgIFRSQU5TRk9STV9FRkZFQ1Q6ICd0cmFuc2Zvcm1FRmZlY3QnXG4gIH07XG5cbiAgZnVuY3Rpb24gVHJhbnNmb3JtRWxlbWVudCgpIHt9XG5cbiAgVHJhbnNmb3JtRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgaW5pdFRyYW5zZm9ybTogZnVuY3Rpb24gaW5pdFRyYW5zZm9ybSgpIHtcbiAgICAgIHZhciBtYXQgPSBuZXcgTWF0cml4KCk7XG4gICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtID0ge1xuICAgICAgICBtUHJvcDogdGhpcy5kYXRhLmtzID8gVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KHRoaXMsIHRoaXMuZGF0YS5rcywgdGhpcykgOiB7XG4gICAgICAgICAgbzogMFxuICAgICAgICB9LFxuICAgICAgICBfbWF0TWRmOiBmYWxzZSxcbiAgICAgICAgX2xvY2FsTWF0TWRmOiBmYWxzZSxcbiAgICAgICAgX29wTWRmOiBmYWxzZSxcbiAgICAgICAgbWF0OiBtYXQsXG4gICAgICAgIGxvY2FsTWF0OiBtYXQsXG4gICAgICAgIGxvY2FsT3BhY2l0eTogMVxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5hbykge1xuICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLmF1dG9PcmllbnRlZCA9IHRydWU7XG4gICAgICB9IC8vIFRPRE86IGNoZWNrIFRZUEUgMTE6IEd1aWRlZCBlbGVtZW50c1xuXG5cbiAgICAgIGlmICh0aGlzLmRhdGEudHkgIT09IDExKSB7Ly8gdGhpcy5jcmVhdGVFbGVtZW50cygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyVHJhbnNmb3JtOiBmdW5jdGlvbiByZW5kZXJUcmFuc2Zvcm0oKSB7XG4gICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZiA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Auby5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZTtcbiAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZiA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AuX21kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWU7XG5cbiAgICAgIGlmICh0aGlzLmhpZXJhcmNoeSkge1xuICAgICAgICB2YXIgbWF0O1xuICAgICAgICB2YXIgZmluYWxNYXQgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1hdDtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5oaWVyYXJjaHkubGVuZ3RoOyAvLyBDaGVja2luZyBpZiBhbnkgb2YgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpY2VzIGluIHRoZSBoaWVyYXJjaHkgY2hhaW4gaGFzIGNoYW5nZWQuXG5cbiAgICAgICAgaWYgKCF0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYpIHtcbiAgICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLl9tZGYpIHtcbiAgICAgICAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmKSB7XG4gICAgICAgICAgbWF0ID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC52LnByb3BzO1xuICAgICAgICAgIGZpbmFsTWF0LmNsb25lRnJvbVByb3BzKG1hdCk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZpbmFsTWF0Lm11bHRpcGx5KHRoaXMuaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmKSB7XG4gICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0uX2xvY2FsTWF0TWRmID0gdGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYpIHtcbiAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE9wYWNpdHkgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8udjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlckxvY2FsVHJhbnNmb3JtOiBmdW5jdGlvbiByZW5kZXJMb2NhbFRyYW5zZm9ybSgpIHtcbiAgICAgIGlmICh0aGlzLmxvY2FsVHJhbnNmb3Jtcykge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmxvY2FsVHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0uX2xvY2FsTWF0TWRmID0gdGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmO1xuXG4gICAgICAgIGlmICghdGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYgfHwgIXRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmKSB7XG4gICAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxvY2FsVHJhbnNmb3Jtc1tpXS5fbWRmKSB7XG4gICAgICAgICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0uX2xvY2FsTWF0TWRmID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxUcmFuc2Zvcm1zW2ldLl9vcE1kZiAmJiAhdGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYpIHtcbiAgICAgICAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE9wYWNpdHkgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8udjtcbiAgICAgICAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX2xvY2FsTWF0TWRmKSB7XG4gICAgICAgICAgdmFyIGxvY2FsTWF0ID0gdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE1hdDtcbiAgICAgICAgICB0aGlzLmxvY2FsVHJhbnNmb3Jtc1swXS5tYXRyaXguY2xvbmUobG9jYWxNYXQpO1xuXG4gICAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgbG1hdCA9IHRoaXMubG9jYWxUcmFuc2Zvcm1zW2ldLm1hdHJpeDtcbiAgICAgICAgICAgIGxvY2FsTWF0Lm11bHRpcGx5KGxtYXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxvY2FsTWF0Lm11bHRpcGx5KHRoaXMuZmluYWxUcmFuc2Zvcm0ubWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICAgIHZhciBsb2NhbE9wID0gdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE9wYWNpdHk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGxvY2FsT3AgKj0gdGhpcy5sb2NhbFRyYW5zZm9ybXNbaV0ub3BhY2l0eSAqIDAuMDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE9wYWNpdHkgPSBsb2NhbE9wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzZWFyY2hFZmZlY3RUcmFuc2Zvcm1zOiBmdW5jdGlvbiBzZWFyY2hFZmZlY3RUcmFuc2Zvcm1zKCkge1xuICAgICAgaWYgKHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1FZmZlY3RzID0gdGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIuZ2V0RWZmZWN0cyhlZmZlY3RUeXBlcy5UUkFOU0ZPUk1fRUZGRUNUKTtcblxuICAgICAgICBpZiAodHJhbnNmb3JtRWZmZWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmxvY2FsVHJhbnNmb3JtcyA9IFtdO1xuICAgICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxNYXQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgIHZhciBsZW4gPSB0cmFuc2Zvcm1FZmZlY3RzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgdGhpcy5sb2NhbFRyYW5zZm9ybXMucHVzaCh0cmFuc2Zvcm1FZmZlY3RzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGdsb2JhbFRvTG9jYWw6IGZ1bmN0aW9uIGdsb2JhbFRvTG9jYWwocHQpIHtcbiAgICAgIHZhciB0cmFuc2Zvcm1zID0gW107XG4gICAgICB0cmFuc2Zvcm1zLnB1c2godGhpcy5maW5hbFRyYW5zZm9ybSk7XG4gICAgICB2YXIgZmxhZyA9IHRydWU7XG4gICAgICB2YXIgY29tcCA9IHRoaXMuY29tcDtcblxuICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgaWYgKGNvbXAuZmluYWxUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBpZiAoY29tcC5kYXRhLmhhc01hc2spIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybXMuc3BsaWNlKDAsIDAsIGNvbXAuZmluYWxUcmFuc2Zvcm0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbXAgPSBjb21wLmNvbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgdmFyIHB0TmV3O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcHROZXcgPSB0cmFuc2Zvcm1zW2ldLm1hdC5hcHBseVRvUG9pbnRBcnJheSgwLCAwLCAwKTsgLy8gcHROZXcgPSB0cmFuc2Zvcm1zW2ldLm1hdC5hcHBseVRvUG9pbnRBcnJheShwdFswXSxwdFsxXSxwdFsyXSk7XG5cbiAgICAgICAgcHQgPSBbcHRbMF0gLSBwdE5ld1swXSwgcHRbMV0gLSBwdE5ld1sxXSwgMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwdDtcbiAgICB9LFxuICAgIG1IZWxwZXI6IG5ldyBNYXRyaXgoKVxuICB9O1xuXG4gIGZ1bmN0aW9uIE1hc2tFbGVtZW50KGRhdGEsIGVsZW1lbnQsIGdsb2JhbERhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5nbG9iYWxEYXRhID0gZ2xvYmFsRGF0YTtcbiAgICB0aGlzLnN0b3JlZERhdGEgPSBbXTtcbiAgICB0aGlzLm1hc2tzUHJvcGVydGllcyA9IHRoaXMuZGF0YS5tYXNrc1Byb3BlcnRpZXMgfHwgW107XG4gICAgdGhpcy5tYXNrRWxlbWVudCA9IG51bGw7XG4gICAgdmFyIGRlZnMgPSB0aGlzLmdsb2JhbERhdGEuZGVmcztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5tYXNrc1Byb3BlcnRpZXMgPyB0aGlzLm1hc2tzUHJvcGVydGllcy5sZW5ndGggOiAwO1xuICAgIHRoaXMudmlld0RhdGEgPSBjcmVhdGVTaXplZEFycmF5KGxlbik7XG4gICAgdGhpcy5zb2xpZFBhdGggPSAnJztcbiAgICB2YXIgcGF0aDtcbiAgICB2YXIgcHJvcGVydGllcyA9IHRoaXMubWFza3NQcm9wZXJ0aWVzO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRNYXNrcyA9IFtdO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBsYXllcklkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgdmFyIHJlY3Q7XG4gICAgdmFyIGV4cGFuc29yO1xuICAgIHZhciBmZU1vcnBoO1xuICAgIHZhciB4O1xuICAgIHZhciBtYXNrVHlwZSA9ICdjbGlwUGF0aCc7XG4gICAgdmFyIG1hc2tSZWYgPSAnY2xpcC1wYXRoJztcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHByb3BlcnRpZXNbaV0ubW9kZSAhPT0gJ2EnICYmIHByb3BlcnRpZXNbaV0ubW9kZSAhPT0gJ24nIHx8IHByb3BlcnRpZXNbaV0uaW52IHx8IHByb3BlcnRpZXNbaV0uby5rICE9PSAxMDAgfHwgcHJvcGVydGllc1tpXS5vLngpIHtcbiAgICAgICAgbWFza1R5cGUgPSAnbWFzayc7XG4gICAgICAgIG1hc2tSZWYgPSAnbWFzayc7XG4gICAgICB9XG5cbiAgICAgIGlmICgocHJvcGVydGllc1tpXS5tb2RlID09PSAncycgfHwgcHJvcGVydGllc1tpXS5tb2RlID09PSAnaScpICYmIGNvdW50ID09PSAwKSB7XG4gICAgICAgIHJlY3QgPSBjcmVhdGVOUygncmVjdCcpO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsICcjZmZmZmZmJyk7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuZWxlbWVudC5jb21wLmRhdGEudyB8fCAwKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuZWxlbWVudC5jb21wLmRhdGEuaCB8fCAwKTtcbiAgICAgICAgY3VycmVudE1hc2tzLnB1c2gocmVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWN0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcGF0aCA9IGNyZWF0ZU5TKCdwYXRoJyk7XG5cbiAgICAgIGlmIChwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICduJykge1xuICAgICAgICAvLyBUT0RPIG1vdmUgdGhpcyB0byBhIGZhY3Rvcnkgb3IgdG8gYSBjb25zdHJ1Y3RvclxuICAgICAgICB0aGlzLnZpZXdEYXRhW2ldID0ge1xuICAgICAgICAgIG9wOiBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLmVsZW1lbnQsIHByb3BlcnRpZXNbaV0ubywgMCwgMC4wMSwgdGhpcy5lbGVtZW50KSxcbiAgICAgICAgICBwcm9wOiBTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRTaGFwZVByb3AodGhpcy5lbGVtZW50LCBwcm9wZXJ0aWVzW2ldLCAzKSxcbiAgICAgICAgICBlbGVtOiBwYXRoLFxuICAgICAgICAgIGxhc3RQYXRoOiAnJ1xuICAgICAgICB9O1xuICAgICAgICBkZWZzLmFwcGVuZENoaWxkKHBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICdzJyA/ICcjMDAwMDAwJyA6ICcjZmZmZmZmJyk7XG4gICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdjbGlwLXJ1bGUnLCAnbm9uemVybycpO1xuICAgICAgICB2YXIgZmlsdGVySUQ7XG5cbiAgICAgICAgaWYgKHByb3BlcnRpZXNbaV0ueC5rICE9PSAwKSB7XG4gICAgICAgICAgbWFza1R5cGUgPSAnbWFzayc7XG4gICAgICAgICAgbWFza1JlZiA9ICdtYXNrJztcbiAgICAgICAgICB4ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcy5lbGVtZW50LCBwcm9wZXJ0aWVzW2ldLngsIDAsIG51bGwsIHRoaXMuZWxlbWVudCk7XG4gICAgICAgICAgZmlsdGVySUQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgICAgICBleHBhbnNvciA9IGNyZWF0ZU5TKCdmaWx0ZXInKTtcbiAgICAgICAgICBleHBhbnNvci5zZXRBdHRyaWJ1dGUoJ2lkJywgZmlsdGVySUQpO1xuICAgICAgICAgIGZlTW9ycGggPSBjcmVhdGVOUygnZmVNb3JwaG9sb2d5Jyk7XG4gICAgICAgICAgZmVNb3JwaC5zZXRBdHRyaWJ1dGUoJ29wZXJhdG9yJywgJ2Vyb2RlJyk7XG4gICAgICAgICAgZmVNb3JwaC5zZXRBdHRyaWJ1dGUoJ2luJywgJ1NvdXJjZUdyYXBoaWMnKTtcbiAgICAgICAgICBmZU1vcnBoLnNldEF0dHJpYnV0ZSgncmFkaXVzJywgJzAnKTtcbiAgICAgICAgICBleHBhbnNvci5hcHBlbmRDaGlsZChmZU1vcnBoKTtcbiAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKGV4cGFuc29yKTtcbiAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgcHJvcGVydGllc1tpXS5tb2RlID09PSAncycgPyAnIzAwMDAwMCcgOiAnI2ZmZmZmZicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZlTW9ycGggPSBudWxsO1xuICAgICAgICAgIHggPSBudWxsO1xuICAgICAgICB9IC8vIFRPRE8gbW92ZSB0aGlzIHRvIGEgZmFjdG9yeSBvciB0byBhIGNvbnN0cnVjdG9yXG5cblxuICAgICAgICB0aGlzLnN0b3JlZERhdGFbaV0gPSB7XG4gICAgICAgICAgZWxlbTogcGF0aCxcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIGV4cGFuOiBmZU1vcnBoLFxuICAgICAgICAgIGxhc3RQYXRoOiAnJyxcbiAgICAgICAgICBsYXN0T3BlcmF0b3I6ICcnLFxuICAgICAgICAgIGZpbHRlcklkOiBmaWx0ZXJJRCxcbiAgICAgICAgICBsYXN0UmFkaXVzOiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHByb3BlcnRpZXNbaV0ubW9kZSA9PT0gJ2knKSB7XG4gICAgICAgICAgakxlbiA9IGN1cnJlbnRNYXNrcy5sZW5ndGg7XG4gICAgICAgICAgdmFyIGcgPSBjcmVhdGVOUygnZycpO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgZy5hcHBlbmRDaGlsZChjdXJyZW50TWFza3Nbal0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXNrID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgICAgICBtYXNrLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywgJ2FscGhhJyk7XG4gICAgICAgICAgbWFzay5zZXRBdHRyaWJ1dGUoJ2lkJywgbGF5ZXJJZCArICdfJyArIGNvdW50KTtcbiAgICAgICAgICBtYXNrLmFwcGVuZENoaWxkKHBhdGgpO1xuICAgICAgICAgIGRlZnMuYXBwZW5kQ2hpbGQobWFzayk7XG4gICAgICAgICAgZy5zZXRBdHRyaWJ1dGUoJ21hc2snLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGxheWVySWQgKyAnXycgKyBjb3VudCArICcpJyk7XG4gICAgICAgICAgY3VycmVudE1hc2tzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgY3VycmVudE1hc2tzLnB1c2goZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudE1hc2tzLnB1c2gocGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcGVydGllc1tpXS5pbnYgJiYgIXRoaXMuc29saWRQYXRoKSB7XG4gICAgICAgICAgdGhpcy5zb2xpZFBhdGggPSB0aGlzLmNyZWF0ZUxheWVyU29saWRQYXRoKCk7XG4gICAgICAgIH0gLy8gVE9ETyBtb3ZlIHRoaXMgdG8gYSBmYWN0b3J5IG9yIHRvIGEgY29uc3RydWN0b3JcblxuXG4gICAgICAgIHRoaXMudmlld0RhdGFbaV0gPSB7XG4gICAgICAgICAgZWxlbTogcGF0aCxcbiAgICAgICAgICBsYXN0UGF0aDogJycsXG4gICAgICAgICAgb3A6IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMuZWxlbWVudCwgcHJvcGVydGllc1tpXS5vLCAwLCAwLjAxLCB0aGlzLmVsZW1lbnQpLFxuICAgICAgICAgIHByb3A6IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLmVsZW1lbnQsIHByb3BlcnRpZXNbaV0sIDMpLFxuICAgICAgICAgIGludlJlY3Q6IHJlY3RcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXRoaXMudmlld0RhdGFbaV0ucHJvcC5rKSB7XG4gICAgICAgICAgdGhpcy5kcmF3UGF0aChwcm9wZXJ0aWVzW2ldLCB0aGlzLnZpZXdEYXRhW2ldLnByb3AudiwgdGhpcy52aWV3RGF0YVtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1hc2tFbGVtZW50ID0gY3JlYXRlTlMobWFza1R5cGUpO1xuICAgIGxlbiA9IGN1cnJlbnRNYXNrcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMubWFza0VsZW1lbnQuYXBwZW5kQ2hpbGQoY3VycmVudE1hc2tzW2ldKTtcbiAgICB9XG5cbiAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICB0aGlzLm1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCBsYXllcklkKTtcbiAgICAgIHRoaXMuZWxlbWVudC5tYXNrZWRFbGVtZW50LnNldEF0dHJpYnV0ZShtYXNrUmVmLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGxheWVySWQgKyAnKScpO1xuICAgICAgZGVmcy5hcHBlbmRDaGlsZCh0aGlzLm1hc2tFbGVtZW50KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52aWV3RGF0YS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIE1hc2tFbGVtZW50LnByb3RvdHlwZS5nZXRNYXNrUHJvcGVydHkgPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgcmV0dXJuIHRoaXMudmlld0RhdGFbcG9zXS5wcm9wO1xuICB9O1xuXG4gIE1hc2tFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChpc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgZmluYWxNYXQgPSB0aGlzLmVsZW1lbnQuZmluYWxUcmFuc2Zvcm0ubWF0O1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLm1hc2tzUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLnZpZXdEYXRhW2ldLnByb3AuX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgdGhpcy5kcmF3UGF0aCh0aGlzLm1hc2tzUHJvcGVydGllc1tpXSwgdGhpcy52aWV3RGF0YVtpXS5wcm9wLnYsIHRoaXMudmlld0RhdGFbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy52aWV3RGF0YVtpXS5vcC5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICB0aGlzLnZpZXdEYXRhW2ldLmVsZW0uc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCB0aGlzLnZpZXdEYXRhW2ldLm9wLnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0ubW9kZSAhPT0gJ24nKSB7XG4gICAgICAgIGlmICh0aGlzLnZpZXdEYXRhW2ldLmludlJlY3QgJiYgKHRoaXMuZWxlbWVudC5maW5hbFRyYW5zZm9ybS5tUHJvcC5fbWRmIHx8IGlzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICB0aGlzLnZpZXdEYXRhW2ldLmludlJlY3Quc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBmaW5hbE1hdC5nZXRJbnZlcnNlTWF0cml4KCkudG8yZENTUygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0b3JlZERhdGFbaV0ueCAmJiAodGhpcy5zdG9yZWREYXRhW2ldLnguX21kZiB8fCBpc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgdmFyIGZlTW9ycGggPSB0aGlzLnN0b3JlZERhdGFbaV0uZXhwYW47XG5cbiAgICAgICAgICBpZiAodGhpcy5zdG9yZWREYXRhW2ldLngudiA8IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlZERhdGFbaV0ubGFzdE9wZXJhdG9yICE9PSAnZXJvZGUnKSB7XG4gICAgICAgICAgICAgIHRoaXMuc3RvcmVkRGF0YVtpXS5sYXN0T3BlcmF0b3IgPSAnZXJvZGUnO1xuICAgICAgICAgICAgICB0aGlzLnN0b3JlZERhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgdGhpcy5zdG9yZWREYXRhW2ldLmZpbHRlcklkICsgJyknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmVNb3JwaC5zZXRBdHRyaWJ1dGUoJ3JhZGl1cycsIC10aGlzLnN0b3JlZERhdGFbaV0ueC52KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVkRGF0YVtpXS5sYXN0T3BlcmF0b3IgIT09ICdkaWxhdGUnKSB7XG4gICAgICAgICAgICAgIHRoaXMuc3RvcmVkRGF0YVtpXS5sYXN0T3BlcmF0b3IgPSAnZGlsYXRlJztcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZWREYXRhW2ldLmVsZW0uc2V0QXR0cmlidXRlKCdmaWx0ZXInLCBudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdG9yZWREYXRhW2ldLmVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCB0aGlzLnN0b3JlZERhdGFbaV0ueC52ICogMik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIE1hc2tFbGVtZW50LnByb3RvdHlwZS5nZXRNYXNrZWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrRWxlbWVudDtcbiAgfTtcblxuICBNYXNrRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlTGF5ZXJTb2xpZFBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGggPSAnTTAsMCAnO1xuICAgIHBhdGggKz0gJyBoJyArIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgIHBhdGggKz0gJyB2JyArIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO1xuICAgIHBhdGggKz0gJyBoLScgKyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudztcbiAgICBwYXRoICs9ICcgdi0nICsgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmggKyAnICc7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLmRyYXdQYXRoID0gZnVuY3Rpb24gKHBhdGhEYXRhLCBwYXRoTm9kZXMsIHZpZXdEYXRhKSB7XG4gICAgdmFyIHBhdGhTdHJpbmcgPSAnIE0nICsgcGF0aE5vZGVzLnZbMF1bMF0gKyAnLCcgKyBwYXRoTm9kZXMudlswXVsxXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIGxlbiA9IHBhdGhOb2Rlcy5fbGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAvLyBwYXRoU3RyaW5nICs9IFwiIENcIitwYXRoTm9kZXMub1tpLTFdWzBdKycsJytwYXRoTm9kZXMub1tpLTFdWzFdICsgXCIgXCIrcGF0aE5vZGVzLmlbaV1bMF0rJywnK3BhdGhOb2Rlcy5pW2ldWzFdICsgXCIgXCIrcGF0aE5vZGVzLnZbaV1bMF0rJywnK3BhdGhOb2Rlcy52W2ldWzFdO1xuICAgICAgcGF0aFN0cmluZyArPSAnIEMnICsgcGF0aE5vZGVzLm9baSAtIDFdWzBdICsgJywnICsgcGF0aE5vZGVzLm9baSAtIDFdWzFdICsgJyAnICsgcGF0aE5vZGVzLmlbaV1bMF0gKyAnLCcgKyBwYXRoTm9kZXMuaVtpXVsxXSArICcgJyArIHBhdGhOb2Rlcy52W2ldWzBdICsgJywnICsgcGF0aE5vZGVzLnZbaV1bMV07XG4gICAgfSAvLyBwYXRoU3RyaW5nICs9IFwiIENcIitwYXRoTm9kZXMub1tpLTFdWzBdKycsJytwYXRoTm9kZXMub1tpLTFdWzFdICsgXCIgXCIrcGF0aE5vZGVzLmlbMF1bMF0rJywnK3BhdGhOb2Rlcy5pWzBdWzFdICsgXCIgXCIrcGF0aE5vZGVzLnZbMF1bMF0rJywnK3BhdGhOb2Rlcy52WzBdWzFdO1xuXG5cbiAgICBpZiAocGF0aE5vZGVzLmMgJiYgbGVuID4gMSkge1xuICAgICAgcGF0aFN0cmluZyArPSAnIEMnICsgcGF0aE5vZGVzLm9baSAtIDFdWzBdICsgJywnICsgcGF0aE5vZGVzLm9baSAtIDFdWzFdICsgJyAnICsgcGF0aE5vZGVzLmlbMF1bMF0gKyAnLCcgKyBwYXRoTm9kZXMuaVswXVsxXSArICcgJyArIHBhdGhOb2Rlcy52WzBdWzBdICsgJywnICsgcGF0aE5vZGVzLnZbMF1bMV07XG4gICAgfSAvLyBwYXRoTm9kZXMuX19yZW5kZXJlZFN0cmluZyA9IHBhdGhTdHJpbmc7XG5cblxuICAgIGlmICh2aWV3RGF0YS5sYXN0UGF0aCAhPT0gcGF0aFN0cmluZykge1xuICAgICAgdmFyIHBhdGhTaGFwZVZhbHVlID0gJyc7XG5cbiAgICAgIGlmICh2aWV3RGF0YS5lbGVtKSB7XG4gICAgICAgIGlmIChwYXRoTm9kZXMuYykge1xuICAgICAgICAgIHBhdGhTaGFwZVZhbHVlID0gcGF0aERhdGEuaW52ID8gdGhpcy5zb2xpZFBhdGggKyBwYXRoU3RyaW5nIDogcGF0aFN0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIHZpZXdEYXRhLmVsZW0uc2V0QXR0cmlidXRlKCdkJywgcGF0aFNoYXBlVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2aWV3RGF0YS5sYXN0UGF0aCA9IHBhdGhTdHJpbmc7XG4gICAgfVxuICB9O1xuXG4gIE1hc2tFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5nbG9iYWxEYXRhID0gbnVsbDtcbiAgICB0aGlzLm1hc2tFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgIHRoaXMubWFza3NQcm9wZXJ0aWVzID0gbnVsbDtcbiAgfTtcblxuICB2YXIgZmlsdGVyc0ZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iID0ge307XG4gICAgb2IuY3JlYXRlRmlsdGVyID0gY3JlYXRlRmlsdGVyO1xuICAgIG9iLmNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXIgPSBjcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRmlsdGVyKGZpbElkLCBza2lwQ29vcmRpbmF0ZXMpIHtcbiAgICAgIHZhciBmaWwgPSBjcmVhdGVOUygnZmlsdGVyJyk7XG4gICAgICBmaWwuc2V0QXR0cmlidXRlKCdpZCcsIGZpbElkKTtcblxuICAgICAgaWYgKHNraXBDb29yZGluYXRlcyAhPT0gdHJ1ZSkge1xuICAgICAgICBmaWwuc2V0QXR0cmlidXRlKCdmaWx0ZXJVbml0cycsICdvYmplY3RCb3VuZGluZ0JveCcpO1xuICAgICAgICBmaWwuc2V0QXR0cmlidXRlKCd4JywgJzAlJyk7XG4gICAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ3knLCAnMCUnKTtcbiAgICAgICAgZmlsLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMTAwJScpO1xuICAgICAgICBmaWwuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMTAwJScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmlsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXIoKSB7XG4gICAgICB2YXIgZmVDb2xvck1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsICdtYXRyaXgnKTtcbiAgICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsICcwIDAgMCAxIDAgIDAgMCAwIDEgMCAgMCAwIDAgMSAwICAwIDAgMCAxIDEnKTtcbiAgICAgIHJldHVybiBmZUNvbG9yTWF0cml4O1xuICAgIH1cblxuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIHZhciBmZWF0dXJlU3VwcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7XG4gICAgICBtYXNrVHlwZTogdHJ1ZSxcbiAgICAgIHN2Z0x1bWFIaWRkZW46IHRydWUsXG4gICAgICBvZmZzY3JlZW5DYW52YXM6IHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnXG4gICAgfTtcblxuICAgIGlmICgvTVNJRSAxMC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgL01TSUUgOS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgL3J2OjExLjAvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC9FZGdlXFwvXFxkLi9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIG9iLm1hc2tUeXBlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKC9maXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgb2Iuc3ZnTHVtYUhpZGRlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIHZhciByZWdpc3RlcmVkRWZmZWN0cyQxID0ge307XG4gIHZhciBpZFByZWZpeCA9ICdmaWx0ZXJfcmVzdWx0Xyc7XG5cbiAgZnVuY3Rpb24gU1ZHRWZmZWN0cyhlbGVtKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHNvdXJjZSA9ICdTb3VyY2VHcmFwaGljJztcbiAgICB2YXIgbGVuID0gZWxlbS5kYXRhLmVmID8gZWxlbS5kYXRhLmVmLmxlbmd0aCA6IDA7XG4gICAgdmFyIGZpbElkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgdmFyIGZpbCA9IGZpbHRlcnNGYWN0b3J5LmNyZWF0ZUZpbHRlcihmaWxJZCwgdHJ1ZSk7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB0aGlzLmZpbHRlcnMgPSBbXTtcbiAgICB2YXIgZmlsdGVyTWFuYWdlcjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZmlsdGVyTWFuYWdlciA9IG51bGw7XG4gICAgICB2YXIgdHlwZSA9IGVsZW0uZGF0YS5lZltpXS50eTtcblxuICAgICAgaWYgKHJlZ2lzdGVyZWRFZmZlY3RzJDFbdHlwZV0pIHtcbiAgICAgICAgdmFyIEVmZmVjdCA9IHJlZ2lzdGVyZWRFZmZlY3RzJDFbdHlwZV0uZWZmZWN0O1xuICAgICAgICBmaWx0ZXJNYW5hZ2VyID0gbmV3IEVmZmVjdChmaWwsIGVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHNbaV0sIGVsZW0sIGlkUHJlZml4ICsgY291bnQsIHNvdXJjZSk7XG4gICAgICAgIHNvdXJjZSA9IGlkUHJlZml4ICsgY291bnQ7XG5cbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRFZmZlY3RzJDFbdHlwZV0uY291bnRzQXNFZmZlY3QpIHtcbiAgICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWx0ZXJNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycy5wdXNoKGZpbHRlck1hbmFnZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb3VudCkge1xuICAgICAgZWxlbS5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZmlsKTtcbiAgICAgIGVsZW0ubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZmlsdGVyJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBmaWxJZCArICcpJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmlsdGVycy5sZW5ndGgpIHtcbiAgICAgIGVsZW0uYWRkUmVuZGVyYWJsZUNvbXBvbmVudCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBTVkdFZmZlY3RzLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZmlsdGVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuZmlsdGVyc1tpXS5yZW5kZXJGcmFtZShfaXNGaXJzdEZyYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgU1ZHRWZmZWN0cy5wcm90b3R5cGUuZ2V0RWZmZWN0cyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZmlsdGVycy5sZW5ndGg7XG4gICAgdmFyIGVmZmVjdHMgPSBbXTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuZmlsdGVyc1tpXS50eXBlID09PSB0eXBlKSB7XG4gICAgICAgIGVmZmVjdHMucHVzaCh0aGlzLmZpbHRlcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlZmZlY3RzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0JDEoaWQsIGVmZmVjdCwgY291bnRzQXNFZmZlY3QpIHtcbiAgICByZWdpc3RlcmVkRWZmZWN0cyQxW2lkXSA9IHtcbiAgICAgIGVmZmVjdDogZWZmZWN0LFxuICAgICAgY291bnRzQXNFZmZlY3Q6IGNvdW50c0FzRWZmZWN0XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNWR0Jhc2VFbGVtZW50KCkge31cblxuICBTVkdCYXNlRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgaW5pdFJlbmRlcmVyRWxlbWVudDogZnVuY3Rpb24gaW5pdFJlbmRlcmVyRWxlbWVudCgpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gY3JlYXRlTlMoJ2cnKTtcbiAgICB9LFxuICAgIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzOiBmdW5jdGlvbiBjcmVhdGVDb250YWluZXJFbGVtZW50cygpIHtcbiAgICAgIHRoaXMubWF0dGVFbGVtZW50ID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICB0aGlzLm1hc2tlZEVsZW1lbnQgPSB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgIHRoaXMuX3NpemVDaGFuZ2VkID0gZmFsc2U7XG4gICAgICB2YXIgbGF5ZXJFbGVtZW50UGFyZW50ID0gbnVsbDsgLy8gSWYgdGhpcyBsYXllciBhY3RzIGFzIGEgbWFzayBmb3IgdGhlIGZvbGxvd2luZyBsYXllclxuXG4gICAgICBpZiAodGhpcy5kYXRhLnRkKSB7XG4gICAgICAgIHRoaXMubWF0dGVNYXNrcyA9IHt9O1xuICAgICAgICB2YXIgZ2cgPSBjcmVhdGVOUygnZycpO1xuICAgICAgICBnZy5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5sYXllcklkKTtcbiAgICAgICAgZ2cuYXBwZW5kQ2hpbGQodGhpcy5sYXllckVsZW1lbnQpO1xuICAgICAgICBsYXllckVsZW1lbnRQYXJlbnQgPSBnZztcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZ2cpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEudHQpIHtcbiAgICAgICAgdGhpcy5tYXR0ZUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5sYXllckVsZW1lbnQpO1xuICAgICAgICBsYXllckVsZW1lbnRQYXJlbnQgPSB0aGlzLm1hdHRlRWxlbWVudDtcbiAgICAgICAgdGhpcy5iYXNlRWxlbWVudCA9IHRoaXMubWF0dGVFbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iYXNlRWxlbWVudCA9IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLmxuKSB7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmRhdGEubG4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLmNsKSB7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLmRhdGEuY2wpO1xuICAgICAgfSAvLyBDbGlwcGluZyBjb21wb3NpdGlvbnMgdG8gaGlkZSBjb250ZW50IHRoYXQgZXhjZWVkcyBib3VuZGFyaWVzLiBJZiBjb2xsYXBzZWQgdHJhbnNmb3JtYXRpb25zIGlzIG9uLCBjb21wb25lbnQgc2hvdWxkIG5vdCBiZSBjbGlwcGVkXG5cblxuICAgICAgaWYgKHRoaXMuZGF0YS50eSA9PT0gMCAmJiAhdGhpcy5kYXRhLmhkKSB7XG4gICAgICAgIHZhciBjcCA9IGNyZWF0ZU5TKCdjbGlwUGF0aCcpO1xuICAgICAgICB2YXIgcHQgPSBjcmVhdGVOUygncGF0aCcpO1xuICAgICAgICBwdC5zZXRBdHRyaWJ1dGUoJ2QnLCAnTTAsMCBMJyArIHRoaXMuZGF0YS53ICsgJywwIEwnICsgdGhpcy5kYXRhLncgKyAnLCcgKyB0aGlzLmRhdGEuaCArICcgTDAsJyArIHRoaXMuZGF0YS5oICsgJ3onKTtcbiAgICAgICAgdmFyIGNsaXBJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgICBjcC5zZXRBdHRyaWJ1dGUoJ2lkJywgY2xpcElkKTtcbiAgICAgICAgY3AuYXBwZW5kQ2hpbGQocHQpO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChjcCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tNYXNrcygpKSB7XG4gICAgICAgICAgdmFyIGNwR3JvdXAgPSBjcmVhdGVOUygnZycpO1xuICAgICAgICAgIGNwR3JvdXAuc2V0QXR0cmlidXRlKCdjbGlwLXBhdGgnLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGNsaXBJZCArICcpJyk7XG4gICAgICAgICAgY3BHcm91cC5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQgPSBjcEdyb3VwO1xuXG4gICAgICAgICAgaWYgKGxheWVyRWxlbWVudFBhcmVudCkge1xuICAgICAgICAgICAgbGF5ZXJFbGVtZW50UGFyZW50LmFwcGVuZENoaWxkKHRoaXMudHJhbnNmb3JtZWRFbGVtZW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYXNlRWxlbWVudCA9IHRoaXMudHJhbnNmb3JtZWRFbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsaXAtcGF0aCcsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgY2xpcElkICsgJyknKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLmJtICE9PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0QmxlbmRNb2RlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJFbGVtZW50OiBmdW5jdGlvbiByZW5kZXJFbGVtZW50KCkge1xuICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX2xvY2FsTWF0TWRmKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE1hdC50bzJkQ1NTKCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQuc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE9wYWNpdHkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveUJhc2VFbGVtZW50OiBmdW5jdGlvbiBkZXN0cm95QmFzZUVsZW1lbnQoKSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLm1hdHRlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLm1hc2tNYW5hZ2VyLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIGdldEJhc2VFbGVtZW50OiBmdW5jdGlvbiBnZXRCYXNlRWxlbWVudCgpIHtcbiAgICAgIGlmICh0aGlzLmRhdGEuaGQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmJhc2VFbGVtZW50O1xuICAgIH0sXG4gICAgY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHM6IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCkge1xuICAgICAgdGhpcy5tYXNrTWFuYWdlciA9IG5ldyBNYXNrRWxlbWVudCh0aGlzLmRhdGEsIHRoaXMsIHRoaXMuZ2xvYmFsRGF0YSk7XG4gICAgICB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlciA9IG5ldyBTVkdFZmZlY3RzKHRoaXMpO1xuICAgICAgdGhpcy5zZWFyY2hFZmZlY3RUcmFuc2Zvcm1zKCk7XG4gICAgfSxcbiAgICBnZXRNYXR0ZTogZnVuY3Rpb24gZ2V0TWF0dGUobWF0dGVUeXBlKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBub3QgYmUgYSBjb21tb24gY2FzZS4gQnV0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB3ZSdsbCBjcmVhdGUgdGhlIG1hdHRlIG9iamVjdC5cbiAgICAgIC8vIEl0IHNvbHZlcyBhbmltYXRpb25zIHRoYXQgaGF2ZSB0d28gY29uc2VjdXRpdmUgbGF5ZXJzIG1hcmtlZCBhcyBtYXR0ZSBtYXNrcy5cbiAgICAgIC8vIFdoaWNoIGlzIGFuIHVuZGVmaW5lZCBiZWhhdmlvciBpbiBBRS5cbiAgICAgIGlmICghdGhpcy5tYXR0ZU1hc2tzKSB7XG4gICAgICAgIHRoaXMubWF0dGVNYXNrcyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMubWF0dGVNYXNrc1ttYXR0ZVR5cGVdKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXMubGF5ZXJJZCArICdfJyArIG1hdHRlVHlwZTtcbiAgICAgICAgdmFyIGZpbElkO1xuICAgICAgICB2YXIgZmlsO1xuICAgICAgICB2YXIgdXNlRWxlbWVudDtcbiAgICAgICAgdmFyIGdnO1xuXG4gICAgICAgIGlmIChtYXR0ZVR5cGUgPT09IDEgfHwgbWF0dGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgdmFyIG1hc2tlciA9IGNyZWF0ZU5TKCdtYXNrJyk7XG4gICAgICAgICAgbWFza2VyLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgICAgbWFza2VyLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywgbWF0dGVUeXBlID09PSAzID8gJ2x1bWluYW5jZScgOiAnYWxwaGEnKTtcbiAgICAgICAgICB1c2VFbGVtZW50ID0gY3JlYXRlTlMoJ3VzZScpO1xuICAgICAgICAgIHVzZUVsZW1lbnQuc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCAnaHJlZicsICcjJyArIHRoaXMubGF5ZXJJZCk7XG4gICAgICAgICAgbWFza2VyLmFwcGVuZENoaWxkKHVzZUVsZW1lbnQpO1xuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKG1hc2tlcik7XG5cbiAgICAgICAgICBpZiAoIWZlYXR1cmVTdXBwb3J0Lm1hc2tUeXBlICYmIG1hdHRlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgbWFza2VyLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywgJ2x1bWluYW5jZScpO1xuICAgICAgICAgICAgZmlsSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgICAgICAgIGZpbCA9IGZpbHRlcnNGYWN0b3J5LmNyZWF0ZUZpbHRlcihmaWxJZCk7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChmaWwpO1xuICAgICAgICAgICAgZmlsLmFwcGVuZENoaWxkKGZpbHRlcnNGYWN0b3J5LmNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXIoKSk7XG4gICAgICAgICAgICBnZyA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgICAgICBnZy5hcHBlbmRDaGlsZCh1c2VFbGVtZW50KTtcbiAgICAgICAgICAgIG1hc2tlci5hcHBlbmRDaGlsZChnZyk7XG4gICAgICAgICAgICBnZy5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgZmlsSWQgKyAnKScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtYXR0ZVR5cGUgPT09IDIpIHtcbiAgICAgICAgICB2YXIgbWFza0dyb3VwID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgICAgICBtYXNrR3JvdXAuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICBtYXNrR3JvdXAuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnYWxwaGEnKTtcbiAgICAgICAgICB2YXIgbWFza0dyb3VwZXIgPSBjcmVhdGVOUygnZycpO1xuICAgICAgICAgIG1hc2tHcm91cC5hcHBlbmRDaGlsZChtYXNrR3JvdXBlcik7XG4gICAgICAgICAgZmlsSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgICAgICBmaWwgPSBmaWx0ZXJzRmFjdG9yeS5jcmVhdGVGaWx0ZXIoZmlsSWQpOyAvLy8gL1xuXG4gICAgICAgICAgdmFyIGZlQ1RyID0gY3JlYXRlTlMoJ2ZlQ29tcG9uZW50VHJhbnNmZXInKTtcbiAgICAgICAgICBmZUNUci5zZXRBdHRyaWJ1dGUoJ2luJywgJ1NvdXJjZUdyYXBoaWMnKTtcbiAgICAgICAgICBmaWwuYXBwZW5kQ2hpbGQoZmVDVHIpO1xuICAgICAgICAgIHZhciBmZUZ1bmMgPSBjcmVhdGVOUygnZmVGdW5jQScpO1xuICAgICAgICAgIGZlRnVuYy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGFibGUnKTtcbiAgICAgICAgICBmZUZ1bmMuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsICcxLjAgMC4wJyk7XG4gICAgICAgICAgZmVDVHIuYXBwZW5kQ2hpbGQoZmVGdW5jKTsgLy8vIC9cblxuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGZpbCk7XG4gICAgICAgICAgdmFyIGFscGhhUmVjdCA9IGNyZWF0ZU5TKCdyZWN0Jyk7XG4gICAgICAgICAgYWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmNvbXAuZGF0YS53KTtcbiAgICAgICAgICBhbHBoYVJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmNvbXAuZGF0YS5oKTtcbiAgICAgICAgICBhbHBoYVJlY3Quc2V0QXR0cmlidXRlKCd4JywgJzAnKTtcbiAgICAgICAgICBhbHBoYVJlY3Quc2V0QXR0cmlidXRlKCd5JywgJzAnKTtcbiAgICAgICAgICBhbHBoYVJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywgJyNmZmZmZmYnKTtcbiAgICAgICAgICBhbHBoYVJlY3Quc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgJzAnKTtcbiAgICAgICAgICBtYXNrR3JvdXBlci5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgZmlsSWQgKyAnKScpO1xuICAgICAgICAgIG1hc2tHcm91cGVyLmFwcGVuZENoaWxkKGFscGhhUmVjdCk7XG4gICAgICAgICAgdXNlRWxlbWVudCA9IGNyZWF0ZU5TKCd1c2UnKTtcbiAgICAgICAgICB1c2VFbGVtZW50LnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgJ2hyZWYnLCAnIycgKyB0aGlzLmxheWVySWQpO1xuICAgICAgICAgIG1hc2tHcm91cGVyLmFwcGVuZENoaWxkKHVzZUVsZW1lbnQpO1xuXG4gICAgICAgICAgaWYgKCFmZWF0dXJlU3VwcG9ydC5tYXNrVHlwZSkge1xuICAgICAgICAgICAgbWFza0dyb3VwLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywgJ2x1bWluYW5jZScpO1xuICAgICAgICAgICAgZmlsLmFwcGVuZENoaWxkKGZpbHRlcnNGYWN0b3J5LmNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXIoKSk7XG4gICAgICAgICAgICBnZyA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgICAgICBtYXNrR3JvdXBlci5hcHBlbmRDaGlsZChhbHBoYVJlY3QpO1xuICAgICAgICAgICAgZ2cuYXBwZW5kQ2hpbGQodGhpcy5sYXllckVsZW1lbnQpO1xuICAgICAgICAgICAgbWFza0dyb3VwZXIuYXBwZW5kQ2hpbGQoZ2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKG1hc2tHcm91cCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hdHRlTWFza3NbbWF0dGVUeXBlXSA9IGlkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5tYXR0ZU1hc2tzW21hdHRlVHlwZV07XG4gICAgfSxcbiAgICBzZXRNYXR0ZTogZnVuY3Rpb24gc2V0TWF0dGUoaWQpIHtcbiAgICAgIGlmICghdGhpcy5tYXR0ZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1hdHRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21hc2snLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGlkICsgJyknKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBmaWxlXG4gICAqIEhhbmRsZXMgQUUncyBsYXllciBwYXJlbnRpbmcgcHJvcGVydHkuXG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBIaWVyYXJjaHlFbGVtZW50KCkge31cblxuICBIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICogSW5pdGlhbGl6ZXMgaGllcmFyY2h5IHByb3BlcnRpZXNcbiAgICAgICAqXG4gICAgICAgKi9cbiAgICBpbml0SGllcmFyY2h5OiBmdW5jdGlvbiBpbml0SGllcmFyY2h5KCkge1xuICAgICAgLy8gZWxlbWVudCdzIHBhcmVudCBsaXN0XG4gICAgICB0aGlzLmhpZXJhcmNoeSA9IFtdOyAvLyBpZiBlbGVtZW50IGlzIHBhcmVudCBvZiBhbm90aGVyIGxheWVyIF9pc1BhcmVudCB3aWxsIGJlIHRydWVcblxuICAgICAgdGhpcy5faXNQYXJlbnQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hlY2tQYXJlbnRpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIFNldHMgbGF5ZXIncyBoaWVyYXJjaHkuXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBoaWVyYXJjaFxuICAgICAgICogbGF5ZXIncyBwYXJlbnQgbGlzdFxuICAgICAgICpcbiAgICAgICAqL1xuICAgIHNldEhpZXJhcmNoeTogZnVuY3Rpb24gc2V0SGllcmFyY2h5KGhpZXJhcmNoeSkge1xuICAgICAgdGhpcy5oaWVyYXJjaHkgPSBoaWVyYXJjaHk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBTZXRzIGxheWVyIGFzIHBhcmVudC5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICBzZXRBc1BhcmVudDogZnVuY3Rpb24gc2V0QXNQYXJlbnQoKSB7XG4gICAgICB0aGlzLl9pc1BhcmVudCA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBTZWFyY2hlcyBsYXllcidzIHBhcmVudGluZyBjaGFpblxuICAgICAgICpcbiAgICAgICAqL1xuICAgIGNoZWNrUGFyZW50aW5nOiBmdW5jdGlvbiBjaGVja1BhcmVudGluZygpIHtcbiAgICAgIGlmICh0aGlzLmRhdGEucGFyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jb21wLmJ1aWxkRWxlbWVudFBhcmVudGluZyh0aGlzLCB0aGlzLmRhdGEucGFyZW50LCBbXSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFJlbmRlcmFibGVET01FbGVtZW50KCkge31cblxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvdG90eXBlID0ge1xuICAgICAgaW5pdEVsZW1lbnQ6IGZ1bmN0aW9uIGluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICAgICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICAgICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgICAgIHRoaXMuaW5pdFRyYW5zZm9ybShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICAgICAgdGhpcy5pbml0SGllcmFyY2h5KCk7XG4gICAgICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICAgICAgdGhpcy5pbml0UmVuZGVyZXJFbGVtZW50KCk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9LFxuICAgICAgaGlkZTogZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0hJREUnLCB0aGlzKTtcbiAgICAgICAgaWYgKCF0aGlzLmhpZGRlbiAmJiAoIXRoaXMuaXNJblJhbmdlIHx8IHRoaXMuaXNUcmFuc3BhcmVudCkpIHtcbiAgICAgICAgICB2YXIgZWxlbSA9IHRoaXMuYmFzZUVsZW1lbnQgfHwgdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdTSE9XJywgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmlzSW5SYW5nZSAmJiAhdGhpcy5pc1RyYW5zcGFyZW50KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGQpIHtcbiAgICAgICAgICAgIHZhciBlbGVtID0gdGhpcy5iYXNlRWxlbWVudCB8fCB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVuZGVyRnJhbWU6IGZ1bmN0aW9uIHJlbmRlckZyYW1lKCkge1xuICAgICAgICAvLyBJZiBpdCBpcyBleHBvcnRlZCBhcyBoaWRkZW4gKGRhdGEuaGQgPT09IHRydWUpIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICAgIC8vIElmIGl0IGlzIG5vdCB2aXNpYmxlIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICAgIGlmICh0aGlzLmRhdGEuaGQgfHwgdGhpcy5oaWRkZW4pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgICB0aGlzLnJlbmRlclJlbmRlcmFibGUoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJMb2NhbFRyYW5zZm9ybSgpO1xuICAgICAgICB0aGlzLnJlbmRlckVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZW5kZXJJbm5lckNvbnRlbnQ6IGZ1bmN0aW9uIHJlbmRlcklubmVyQ29udGVudCgpIHt9LFxuICAgICAgcHJlcGFyZUZyYW1lOiBmdW5jdGlvbiBwcmVwYXJlRnJhbWUobnVtKSB7XG4gICAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKTtcbiAgICAgICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRoaXMuaXNJblJhbmdlKTtcbiAgICAgICAgdGhpcy5jaGVja1RyYW5zcGFyZW5jeSgpO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuaW5uZXJFbGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZXN0cm95QmFzZUVsZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGV4dGVuZFByb3RvdHlwZShbUmVuZGVyYWJsZUVsZW1lbnQsIGNyZWF0ZVByb3h5RnVuY3Rpb24oX3Byb3RvdHlwZSldLCBSZW5kZXJhYmxlRE9NRWxlbWVudCk7XG4gIH0pKCk7XG5cbiAgZnVuY3Rpb24gSUltYWdlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5hc3NldERhdGEgPSBnbG9iYWxEYXRhLmdldEFzc2V0RGF0YShkYXRhLnJlZklkKTtcblxuICAgIGlmICh0aGlzLmFzc2V0RGF0YSAmJiB0aGlzLmFzc2V0RGF0YS5zaWQpIHtcbiAgICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5zbG90TWFuYWdlci5nZXRQcm9wKHRoaXMuYXNzZXREYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuc291cmNlUmVjdCA9IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB3aWR0aDogdGhpcy5hc3NldERhdGEudyxcbiAgICAgIGhlaWdodDogdGhpcy5hc3NldERhdGEuaFxuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBTVkdCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRE9NRWxlbWVudF0sIElJbWFnZUVsZW1lbnQpO1xuXG4gIElJbWFnZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFzc2V0UGF0aCA9IHRoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldHNQYXRoKHRoaXMuYXNzZXREYXRhKTtcbiAgICB0aGlzLmlubmVyRWxlbSA9IGNyZWF0ZU5TKCdpbWFnZScpO1xuICAgIHRoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmFzc2V0RGF0YS53ICsgJ3B4Jyk7XG4gICAgdGhpcy5pbm5lckVsZW0uc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmFzc2V0RGF0YS5oICsgJ3B4Jyk7XG4gICAgdGhpcy5pbm5lckVsZW0uc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgdGhpcy5hc3NldERhdGEucHIgfHwgdGhpcy5nbG9iYWxEYXRhLnJlbmRlckNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW8pO1xuICAgIHRoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgJ2hyZWYnLCBhc3NldFBhdGgpO1xuICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaW5uZXJFbGVtKTtcbiAgfTtcblxuICBJSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5zb3VyY2VSZWN0QXRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZVJlY3Q7XG4gIH07XG5cbiAgZnVuY3Rpb24gUHJvY2Vzc2VkRWxlbWVudChlbGVtZW50LCBwb3NpdGlvbikge1xuICAgIHRoaXMuZWxlbSA9IGVsZW1lbnQ7XG4gICAgdGhpcy5wb3MgPSBwb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIElTaGFwZUVsZW1lbnQoKSB7fVxuXG4gIElTaGFwZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGFkZFNoYXBlVG9Nb2RpZmllcnM6IGZ1bmN0aW9uIGFkZFNoYXBlVG9Nb2RpZmllcnMoZGF0YSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5zaGFwZU1vZGlmaWVycy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnNoYXBlTW9kaWZpZXJzW2ldLmFkZFNoYXBlKGRhdGEpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNTaGFwZUluQW5pbWF0ZWRNb2RpZmllcnM6IGZ1bmN0aW9uIGlzU2hhcGVJbkFuaW1hdGVkTW9kaWZpZXJzKGRhdGEpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuc2hhcGVNb2RpZmllcnNbaV0uaXNBbmltYXRlZFdpdGhTaGFwZShkYXRhKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIHJlbmRlck1vZGlmaWVyczogZnVuY3Rpb24gcmVuZGVyTW9kaWZpZXJzKCkge1xuICAgICAgaWYgKCF0aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLnNoLnJlc2V0KCk7XG4gICAgICB9XG5cbiAgICAgIGxlbiA9IHRoaXMuc2hhcGVNb2RpZmllcnMubGVuZ3RoO1xuICAgICAgdmFyIHNob3VsZEJyZWFrUHJvY2VzcztcblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgc2hvdWxkQnJlYWtQcm9jZXNzID0gdGhpcy5zaGFwZU1vZGlmaWVyc1tpXS5wcm9jZXNzU2hhcGVzKHRoaXMuX2lzRmlyc3RGcmFtZSk7IC8vIHdvcmthcm91bmQgdG8gZml4IGNhc2VzIHdoZXJlIGEgcmVwZWF0ZXIgcmVzZXRzIHRoZSBzaGFwZSBzbyB0aGUgZm9sbG93aW5nIHByb2Nlc3NlcyBnZXQgY2FsbGVkIHR3aWNlXG4gICAgICAgIC8vIFRPRE86IGZpbmQgYSBiZXR0ZXIgc29sdXRpb24gZm9yIHRoaXNcblxuICAgICAgICBpZiAoc2hvdWxkQnJlYWtQcm9jZXNzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNlYXJjaFByb2Nlc3NlZEVsZW1lbnQ6IGZ1bmN0aW9uIHNlYXJjaFByb2Nlc3NlZEVsZW1lbnQoZWxlbSkge1xuICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5wcm9jZXNzZWRFbGVtZW50cztcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmIChlbGVtZW50c1tpXS5lbGVtID09PSBlbGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzW2ldLnBvcztcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICBhZGRQcm9jZXNzZWRFbGVtZW50OiBmdW5jdGlvbiBhZGRQcm9jZXNzZWRFbGVtZW50KGVsZW0sIHBvcykge1xuICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5wcm9jZXNzZWRFbGVtZW50cztcbiAgICAgIHZhciBpID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSkge1xuICAgICAgICBpIC09IDE7XG5cbiAgICAgICAgaWYgKGVsZW1lbnRzW2ldLmVsZW0gPT09IGVsZW0pIHtcbiAgICAgICAgICBlbGVtZW50c1tpXS5wb3MgPSBwb3M7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnRzLnB1c2gobmV3IFByb2Nlc3NlZEVsZW1lbnQoZWxlbSwgcG9zKSk7XG4gICAgfSxcbiAgICBwcmVwYXJlRnJhbWU6IGZ1bmN0aW9uIHByZXBhcmVGcmFtZShudW0pIHtcbiAgICAgIHRoaXMucHJlcGFyZVJlbmRlcmFibGVGcmFtZShudW0pO1xuICAgICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRoaXMuaXNJblJhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpbmVDYXBFbnVtID0ge1xuICAgIDE6ICdidXR0JyxcbiAgICAyOiAncm91bmQnLFxuICAgIDM6ICdzcXVhcmUnXG4gIH07XG4gIHZhciBsaW5lSm9pbkVudW0gPSB7XG4gICAgMTogJ21pdGVyJyxcbiAgICAyOiAncm91bmQnLFxuICAgIDM6ICdiZXZlbCdcbiAgfTtcblxuICBmdW5jdGlvbiBTVkdTaGFwZURhdGEodHJhbnNmb3JtZXJzLCBsZXZlbCwgc2hhcGUpIHtcbiAgICB0aGlzLmNhY2hlcyA9IFtdO1xuICAgIHRoaXMuc3R5bGVzID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1lcnMgPSB0cmFuc2Zvcm1lcnM7XG4gICAgdGhpcy5sU3RyID0gJyc7XG4gICAgdGhpcy5zaCA9IHNoYXBlO1xuICAgIHRoaXMubHZsID0gbGV2ZWw7IC8vIFRPRE8gZmluZCBpZiB0aGVyZSBhcmUgc29tZSBjYXNlcyB3aGVyZSBfaXNBbmltYXRlZCBjYW4gYmUgZmFsc2UuXG4gICAgLy8gRm9yIG5vdywgc2luY2Ugc2hhcGVzIGFkZCB1cCB3aXRoIG90aGVyIHNoYXBlcy4gVGhleSBoYXZlIHRvIGJlIGNhbGN1bGF0ZWQgZXZlcnkgdGltZS5cbiAgICAvLyBPbmUgd2F5IG9mIGZpbmRpbmcgb3V0IGlzIGNoZWNraW5nIGlmIGFsbCBzdHlsZXMgYXNzb2NpYXRlZCB0byB0aGlzIHNoYXBlIGRlcGVuZCBvbmx5IG9mIHRoaXMgc2hhcGVcblxuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXNoYXBlLms7IC8vIFRPRE86IGNvbW1lbnRpbmcgdGhpcyBmb3Igbm93IHNpbmNlIGFsbCBzaGFwZXMgYXJlIGFuaW1hdGVkXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRyYW5zZm9ybWVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKHRyYW5zZm9ybWVyc1tpXS5tUHJvcHMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cbiAgfVxuXG4gIFNWR1NoYXBlRGF0YS5wcm90b3R5cGUuc2V0QXNBbmltYXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gdHJ1ZTtcbiAgfTtcblxuICBmdW5jdGlvbiBTVkdTdHlsZURhdGEoZGF0YSwgbGV2ZWwpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMudHlwZSA9IGRhdGEudHk7XG4gICAgdGhpcy5kID0gJyc7XG4gICAgdGhpcy5sdmwgPSBsZXZlbDtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLmNsb3NlZCA9IGRhdGEuaGQgPT09IHRydWU7XG4gICAgdGhpcy5wRWxlbSA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgdGhpcy5tc0VsZW0gPSBudWxsO1xuICB9XG5cbiAgU1ZHU3R5bGVEYXRhLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmQgPSAnJztcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgfTtcblxuICBmdW5jdGlvbiBEYXNoUHJvcGVydHkoZWxlbSwgZGF0YSwgcmVuZGVyZXIsIGNvbnRhaW5lcikge1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgdGhpcy5kYXRhUHJvcHMgPSBjcmVhdGVTaXplZEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5rID0gZmFsc2U7XG4gICAgdGhpcy5kYXNoU3RyID0gJyc7XG4gICAgdGhpcy5kYXNoQXJyYXkgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgZGF0YS5sZW5ndGggPyBkYXRhLmxlbmd0aCAtIDEgOiAwKTtcbiAgICB0aGlzLmRhc2hvZmZzZXQgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgMSk7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoIHx8IDA7XG4gICAgdmFyIHByb3A7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhW2ldLnYsIDAsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5rID0gcHJvcC5rIHx8IHRoaXMuaztcbiAgICAgIHRoaXMuZGF0YVByb3BzW2ldID0ge1xuICAgICAgICBuOiBkYXRhW2ldLm4sXG4gICAgICAgIHA6IHByb3BcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmspIHtcbiAgICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRoaXMuaztcbiAgfVxuXG4gIERhc2hQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkICYmICFmb3JjZVJlbmRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcbiAgICB0aGlzLl9tZGYgPSB0aGlzLl9tZGYgfHwgZm9yY2VSZW5kZXI7XG5cbiAgICBpZiAodGhpcy5fbWRmKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5kYXRhUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAodGhpcy5yZW5kZXJlciA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdGhpcy5kYXNoU3RyID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAodGhpcy5kYXRhUHJvcHNbaV0ubiAhPT0gJ28nKSB7XG4gICAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIgPT09ICdzdmcnKSB7XG4gICAgICAgICAgICB0aGlzLmRhc2hTdHIgKz0gJyAnICsgdGhpcy5kYXRhUHJvcHNbaV0ucC52O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhc2hBcnJheVtpXSA9IHRoaXMuZGF0YVByb3BzW2ldLnAudjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kYXNob2Zmc2V0WzBdID0gdGhpcy5kYXRhUHJvcHNbaV0ucC52O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgRGFzaFByb3BlcnR5KTtcblxuICBmdW5jdGlvbiBTVkdTdHJva2VTdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLncgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLncsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuZCA9IG5ldyBEYXNoUHJvcGVydHkoZWxlbSwgZGF0YS5kIHx8IHt9LCAnc3ZnJywgdGhpcyk7XG4gICAgdGhpcy5jID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5jLCAxLCAyNTUsIHRoaXMpO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZU9iO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMuX2lzQW5pbWF0ZWQ7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR1N0cm9rZVN0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gU1ZHRmlsbFN0eWxlRGF0YShlbGVtLCBkYXRhLCBzdHlsZU9iKSB7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcztcbiAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMuYyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYywgMSwgMjU1LCB0aGlzKTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGVPYjtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgU1ZHRmlsbFN0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gU1ZHTm9TdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlT2I7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR05vU3R5bGVEYXRhKTtcblxuICBmdW5jdGlvbiBHcmFkaWVudFByb3BlcnR5KGVsZW0sIGRhdGEsIGNvbnRhaW5lcikge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5jID0gY3JlYXRlVHlwZWRBcnJheSgndWludDhjJywgZGF0YS5wICogNCk7XG4gICAgdmFyIGNMZW5ndGggPSBkYXRhLmsua1swXS5zID8gZGF0YS5rLmtbMF0ucy5sZW5ndGggLSBkYXRhLnAgKiA0IDogZGF0YS5rLmsubGVuZ3RoIC0gZGF0YS5wICogNDtcbiAgICB0aGlzLm8gPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgY0xlbmd0aCk7XG4gICAgdGhpcy5fY21kZiA9IGZhbHNlO1xuICAgIHRoaXMuX29tZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9jb2xsYXBzYWJsZSA9IHRoaXMuY2hlY2tDb2xsYXBzYWJsZSgpO1xuICAgIHRoaXMuX2hhc09wYWNpdHkgPSBjTGVuZ3RoO1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIHRoaXMucHJvcCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuaywgMSwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5rID0gdGhpcy5wcm9wLms7XG4gICAgdGhpcy5nZXRWYWx1ZSh0cnVlKTtcbiAgfVxuXG4gIEdyYWRpZW50UHJvcGVydHkucHJvdG90eXBlLmNvbXBhcmVQb2ludHMgPSBmdW5jdGlvbiAodmFsdWVzLCBwb2ludHMpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRoaXMuby5sZW5ndGggLyAyO1xuICAgIHZhciBkaWZmO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGRpZmYgPSBNYXRoLmFicyh2YWx1ZXNbaSAqIDRdIC0gdmFsdWVzW3BvaW50cyAqIDQgKyBpICogMl0pO1xuXG4gICAgICBpZiAoZGlmZiA+IDAuMDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgR3JhZGllbnRQcm9wZXJ0eS5wcm90b3R5cGUuY2hlY2tDb2xsYXBzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5vLmxlbmd0aCAvIDIgIT09IHRoaXMuYy5sZW5ndGggLyA0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS5rLmtbMF0ucykge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZGF0YS5rLmsubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAoIXRoaXMuY29tcGFyZVBvaW50cyh0aGlzLmRhdGEuay5rW2ldLnMsIHRoaXMuZGF0YS5wKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmNvbXBhcmVQb2ludHModGhpcy5kYXRhLmsuaywgdGhpcy5kYXRhLnApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgR3JhZGllbnRQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICB0aGlzLnByb3AuZ2V0VmFsdWUoKTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9jbWRmID0gZmFsc2U7XG4gICAgdGhpcy5fb21kZiA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMucHJvcC5fbWRmIHx8IGZvcmNlUmVuZGVyKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmRhdGEucCAqIDQ7XG4gICAgICB2YXIgbXVsdDtcbiAgICAgIHZhciB2YWw7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBtdWx0ID0gaSAlIDQgPT09IDAgPyAxMDAgOiAyNTU7XG4gICAgICAgIHZhbCA9IE1hdGgucm91bmQodGhpcy5wcm9wLnZbaV0gKiBtdWx0KTtcblxuICAgICAgICBpZiAodGhpcy5jW2ldICE9PSB2YWwpIHtcbiAgICAgICAgICB0aGlzLmNbaV0gPSB2YWw7XG4gICAgICAgICAgdGhpcy5fY21kZiA9ICFmb3JjZVJlbmRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vLmxlbmd0aCkge1xuICAgICAgICBsZW4gPSB0aGlzLnByb3Audi5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gdGhpcy5kYXRhLnAgKiA0OyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBtdWx0ID0gaSAlIDIgPT09IDAgPyAxMDAgOiAxO1xuICAgICAgICAgIHZhbCA9IGkgJSAyID09PSAwID8gTWF0aC5yb3VuZCh0aGlzLnByb3AudltpXSAqIDEwMCkgOiB0aGlzLnByb3AudltpXTtcblxuICAgICAgICAgIGlmICh0aGlzLm9baSAtIHRoaXMuZGF0YS5wICogNF0gIT09IHZhbCkge1xuICAgICAgICAgICAgdGhpcy5vW2kgLSB0aGlzLmRhdGEucCAqIDRdID0gdmFsO1xuICAgICAgICAgICAgdGhpcy5fb21kZiA9ICFmb3JjZVJlbmRlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fbWRmID0gIWZvcmNlUmVuZGVyO1xuICAgIH1cbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIEdyYWRpZW50UHJvcGVydHkpO1xuXG4gIGZ1bmN0aW9uIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YShlbGVtLCBkYXRhLCBzdHlsZU9iKSB7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcztcbiAgICB0aGlzLmluaXRHcmFkaWVudERhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYik7XG4gIH1cblxuICBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEucHJvdG90eXBlLmluaXRHcmFkaWVudERhdGEgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zLCAxLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmUsIDEsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuaCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuaCB8fCB7XG4gICAgICBrOiAwXG4gICAgfSwgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5hID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5hIHx8IHtcbiAgICAgIGs6IDBcbiAgICB9LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgIHRoaXMuZyA9IG5ldyBHcmFkaWVudFByb3BlcnR5KGVsZW0sIGRhdGEuZywgdGhpcyk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlT2I7XG4gICAgdGhpcy5zdG9wcyA9IFtdO1xuICAgIHRoaXMuc2V0R3JhZGllbnREYXRhKHN0eWxlT2IucEVsZW0sIGRhdGEpO1xuICAgIHRoaXMuc2V0R3JhZGllbnRPcGFjaXR5KGRhdGEsIHN0eWxlT2IpO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMuX2lzQW5pbWF0ZWQ7XG4gIH07XG5cbiAgU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLnByb3RvdHlwZS5zZXRHcmFkaWVudERhdGEgPSBmdW5jdGlvbiAocGF0aEVsZW1lbnQsIGRhdGEpIHtcbiAgICB2YXIgZ3JhZGllbnRJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgIHZhciBnZmlsbCA9IGNyZWF0ZU5TKGRhdGEudCA9PT0gMSA/ICdsaW5lYXJHcmFkaWVudCcgOiAncmFkaWFsR3JhZGllbnQnKTtcbiAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ2lkJywgZ3JhZGllbnRJZCk7XG4gICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdzcHJlYWRNZXRob2QnLCAncGFkJyk7XG4gICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdncmFkaWVudFVuaXRzJywgJ3VzZXJTcGFjZU9uVXNlJyk7XG4gICAgdmFyIHN0b3BzID0gW107XG4gICAgdmFyIHN0b3A7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgakxlbiA9IGRhdGEuZy5wICogNDtcblxuICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDQpIHtcbiAgICAgIHN0b3AgPSBjcmVhdGVOUygnc3RvcCcpO1xuICAgICAgZ2ZpbGwuYXBwZW5kQ2hpbGQoc3RvcCk7XG4gICAgICBzdG9wcy5wdXNoKHN0b3ApO1xuICAgIH1cblxuICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZShkYXRhLnR5ID09PSAnZ2YnID8gJ2ZpbGwnIDogJ3N0cm9rZScsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgZ3JhZGllbnRJZCArICcpJyk7XG4gICAgdGhpcy5nZiA9IGdmaWxsO1xuICAgIHRoaXMuY3N0ID0gc3RvcHM7XG4gIH07XG5cbiAgU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLnByb3RvdHlwZS5zZXRHcmFkaWVudE9wYWNpdHkgPSBmdW5jdGlvbiAoZGF0YSwgc3R5bGVPYikge1xuICAgIGlmICh0aGlzLmcuX2hhc09wYWNpdHkgJiYgIXRoaXMuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgIHZhciBzdG9wO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbjtcbiAgICAgIHZhciBtYXNrID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgIHZhciBtYXNrRWxlbWVudCA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgICBtYXNrLmFwcGVuZENoaWxkKG1hc2tFbGVtZW50KTtcbiAgICAgIHZhciBvcGFjaXR5SWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIHZhciBtYXNrSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIG1hc2suc2V0QXR0cmlidXRlKCdpZCcsIG1hc2tJZCk7XG4gICAgICB2YXIgb3BGaWxsID0gY3JlYXRlTlMoZGF0YS50ID09PSAxID8gJ2xpbmVhckdyYWRpZW50JyA6ICdyYWRpYWxHcmFkaWVudCcpO1xuICAgICAgb3BGaWxsLnNldEF0dHJpYnV0ZSgnaWQnLCBvcGFjaXR5SWQpO1xuICAgICAgb3BGaWxsLnNldEF0dHJpYnV0ZSgnc3ByZWFkTWV0aG9kJywgJ3BhZCcpO1xuICAgICAgb3BGaWxsLnNldEF0dHJpYnV0ZSgnZ3JhZGllbnRVbml0cycsICd1c2VyU3BhY2VPblVzZScpO1xuICAgICAgakxlbiA9IGRhdGEuZy5rLmtbMF0ucyA/IGRhdGEuZy5rLmtbMF0ucy5sZW5ndGggOiBkYXRhLmcuay5rLmxlbmd0aDtcbiAgICAgIHZhciBzdG9wcyA9IHRoaXMuc3RvcHM7XG5cbiAgICAgIGZvciAoaiA9IGRhdGEuZy5wICogNDsgaiA8IGpMZW47IGogKz0gMikge1xuICAgICAgICBzdG9wID0gY3JlYXRlTlMoJ3N0b3AnKTtcbiAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ3N0b3AtY29sb3InLCAncmdiKDI1NSwyNTUsMjU1KScpO1xuICAgICAgICBvcEZpbGwuYXBwZW5kQ2hpbGQoc3RvcCk7XG4gICAgICAgIHN0b3BzLnB1c2goc3RvcCk7XG4gICAgICB9XG5cbiAgICAgIG1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZShkYXRhLnR5ID09PSAnZ2YnID8gJ2ZpbGwnIDogJ3N0cm9rZScsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgb3BhY2l0eUlkICsgJyknKTtcblxuICAgICAgaWYgKGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgICAgbWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsIGxpbmVDYXBFbnVtW2RhdGEubGMgfHwgMl0pO1xuICAgICAgICBtYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsIGxpbmVKb2luRW51bVtkYXRhLmxqIHx8IDJdKTtcblxuICAgICAgICBpZiAoZGF0YS5saiA9PT0gMSkge1xuICAgICAgICAgIG1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW1pdGVybGltaXQnLCBkYXRhLm1sKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm9mID0gb3BGaWxsO1xuICAgICAgdGhpcy5tcyA9IG1hc2s7XG4gICAgICB0aGlzLm9zdCA9IHN0b3BzO1xuICAgICAgdGhpcy5tYXNrSWQgPSBtYXNrSWQ7XG4gICAgICBzdHlsZU9iLm1zRWxlbSA9IG1hc2tFbGVtZW50O1xuICAgIH1cbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gU1ZHR3JhZGllbnRTdHJva2VTdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy53ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS53LCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmQgPSBuZXcgRGFzaFByb3BlcnR5KGVsZW0sIGRhdGEuZCB8fCB7fSwgJ3N2ZycsIHRoaXMpO1xuICAgIHRoaXMuaW5pdEdyYWRpZW50RGF0YShlbGVtLCBkYXRhLCBzdHlsZU9iKTtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLl9pc0FuaW1hdGVkO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEsIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR0dyYWRpZW50U3Ryb2tlU3R5bGVEYXRhKTtcblxuICBmdW5jdGlvbiBTaGFwZUdyb3VwRGF0YSgpIHtcbiAgICB0aGlzLml0ID0gW107XG4gICAgdGhpcy5wcmV2Vmlld0RhdGEgPSBbXTtcbiAgICB0aGlzLmdyID0gY3JlYXRlTlMoJ2cnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNWR1RyYW5zZm9ybURhdGEobVByb3BzLCBvcCwgY29udGFpbmVyKSB7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSB7XG4gICAgICBtUHJvcHM6IG1Qcm9wcyxcbiAgICAgIG9wOiBvcCxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyXG4gICAgfTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRoaXMudHJhbnNmb3JtLm1Qcm9wcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGggfHwgdGhpcy50cmFuc2Zvcm0ub3AuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgfVxuXG4gIHZhciBidWlsZFNoYXBlU3RyaW5nID0gZnVuY3Rpb24gYnVpbGRTaGFwZVN0cmluZyhwYXRoTm9kZXMsIGxlbmd0aCwgY2xvc2VkLCBtYXQpIHtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIF9vID0gcGF0aE5vZGVzLm87XG4gICAgdmFyIF9pID0gcGF0aE5vZGVzLmk7XG4gICAgdmFyIF92ID0gcGF0aE5vZGVzLnY7XG4gICAgdmFyIGk7XG4gICAgdmFyIHNoYXBlU3RyaW5nID0gJyBNJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfdlswXVswXSwgX3ZbMF1bMV0pO1xuXG4gICAgZm9yIChpID0gMTsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzaGFwZVN0cmluZyArPSAnIEMnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF9vW2kgLSAxXVswXSwgX29baSAtIDFdWzFdKSArICcgJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfaVtpXVswXSwgX2lbaV1bMV0pICsgJyAnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF92W2ldWzBdLCBfdltpXVsxXSk7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlZCAmJiBsZW5ndGgpIHtcbiAgICAgIHNoYXBlU3RyaW5nICs9ICcgQycgKyBtYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX29baSAtIDFdWzBdLCBfb1tpIC0gMV1bMV0pICsgJyAnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF9pWzBdWzBdLCBfaVswXVsxXSkgKyAnICcgKyBtYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX3ZbMF1bMF0sIF92WzBdWzFdKTtcbiAgICAgIHNoYXBlU3RyaW5nICs9ICd6JztcbiAgICB9XG5cbiAgICByZXR1cm4gc2hhcGVTdHJpbmc7XG4gIH07XG5cbiAgdmFyIFNWR0VsZW1lbnRzUmVuZGVyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9pZGVudGl0eU1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblxuICAgIHZhciBfbWF0cml4SGVscGVyID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgdmFyIG9iID0ge1xuICAgICAgY3JlYXRlUmVuZGVyRnVuY3Rpb246IGNyZWF0ZVJlbmRlckZ1bmN0aW9uXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbmRlckZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHN3aXRjaCAoZGF0YS50eSkge1xuICAgICAgICBjYXNlICdmbCc6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlckZpbGw7XG5cbiAgICAgICAgY2FzZSAnZ2YnOlxuICAgICAgICAgIHJldHVybiByZW5kZXJHcmFkaWVudDtcblxuICAgICAgICBjYXNlICdncyc6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlckdyYWRpZW50U3Ryb2tlO1xuXG4gICAgICAgIGNhc2UgJ3N0JzpcbiAgICAgICAgICByZXR1cm4gcmVuZGVyU3Ryb2tlO1xuXG4gICAgICAgIGNhc2UgJ3NoJzpcbiAgICAgICAgY2FzZSAnZWwnOlxuICAgICAgICBjYXNlICdyYyc6XG4gICAgICAgIGNhc2UgJ3NyJzpcbiAgICAgICAgICByZXR1cm4gcmVuZGVyUGF0aDtcblxuICAgICAgICBjYXNlICd0cic6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlckNvbnRlbnRUcmFuc2Zvcm07XG5cbiAgICAgICAgY2FzZSAnbm8nOlxuICAgICAgICAgIHJldHVybiByZW5kZXJOb29wO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyQ29udGVudFRyYW5zZm9ybShzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgIGlmIChpc0ZpcnN0RnJhbWUgfHwgaXRlbURhdGEudHJhbnNmb3JtLm9wLl9tZGYpIHtcbiAgICAgICAgaXRlbURhdGEudHJhbnNmb3JtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCBpdGVtRGF0YS50cmFuc2Zvcm0ub3Audik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZpcnN0RnJhbWUgfHwgaXRlbURhdGEudHJhbnNmb3JtLm1Qcm9wcy5fbWRmKSB7XG4gICAgICAgIGl0ZW1EYXRhLnRyYW5zZm9ybS5jb250YWluZXIuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBpdGVtRGF0YS50cmFuc2Zvcm0ubVByb3BzLnYudG8yZENTUygpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJOb29wKCkge31cblxuICAgIGZ1bmN0aW9uIHJlbmRlclBhdGgoc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICB2YXIgajtcbiAgICAgIHZhciBqTGVuO1xuICAgICAgdmFyIHBhdGhTdHJpbmdUcmFuc2Zvcm1lZDtcbiAgICAgIHZhciByZWRyYXc7XG4gICAgICB2YXIgcGF0aE5vZGVzO1xuICAgICAgdmFyIGw7XG4gICAgICB2YXIgbExlbiA9IGl0ZW1EYXRhLnN0eWxlcy5sZW5ndGg7XG4gICAgICB2YXIgbHZsID0gaXRlbURhdGEubHZsO1xuICAgICAgdmFyIHBhdGhzO1xuICAgICAgdmFyIG1hdDtcbiAgICAgIHZhciBpdGVyYXRpb25zO1xuICAgICAgdmFyIGs7XG5cbiAgICAgIGZvciAobCA9IDA7IGwgPCBsTGVuOyBsICs9IDEpIHtcbiAgICAgICAgcmVkcmF3ID0gaXRlbURhdGEuc2guX21kZiB8fCBpc0ZpcnN0RnJhbWU7XG5cbiAgICAgICAgaWYgKGl0ZW1EYXRhLnN0eWxlc1tsXS5sdmwgPCBsdmwpIHtcbiAgICAgICAgICBtYXQgPSBfbWF0cml4SGVscGVyLnJlc2V0KCk7XG4gICAgICAgICAgaXRlcmF0aW9ucyA9IGx2bCAtIGl0ZW1EYXRhLnN0eWxlc1tsXS5sdmw7XG4gICAgICAgICAgayA9IGl0ZW1EYXRhLnRyYW5zZm9ybWVycy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgd2hpbGUgKCFyZWRyYXcgJiYgaXRlcmF0aW9ucyA+IDApIHtcbiAgICAgICAgICAgIHJlZHJhdyA9IGl0ZW1EYXRhLnRyYW5zZm9ybWVyc1trXS5tUHJvcHMuX21kZiB8fCByZWRyYXc7XG4gICAgICAgICAgICBpdGVyYXRpb25zIC09IDE7XG4gICAgICAgICAgICBrIC09IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlZHJhdykge1xuICAgICAgICAgICAgaXRlcmF0aW9ucyA9IGx2bCAtIGl0ZW1EYXRhLnN0eWxlc1tsXS5sdmw7XG4gICAgICAgICAgICBrID0gaXRlbURhdGEudHJhbnNmb3JtZXJzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgIHdoaWxlIChpdGVyYXRpb25zID4gMCkge1xuICAgICAgICAgICAgICBtYXQubXVsdGlwbHkoaXRlbURhdGEudHJhbnNmb3JtZXJzW2tdLm1Qcm9wcy52KTtcbiAgICAgICAgICAgICAgaXRlcmF0aW9ucyAtPSAxO1xuICAgICAgICAgICAgICBrIC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdCA9IF9pZGVudGl0eU1hdHJpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhdGhzID0gaXRlbURhdGEuc2gucGF0aHM7XG4gICAgICAgIGpMZW4gPSBwYXRocy5fbGVuZ3RoO1xuXG4gICAgICAgIGlmIChyZWRyYXcpIHtcbiAgICAgICAgICBwYXRoU3RyaW5nVHJhbnNmb3JtZWQgPSAnJztcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHBhdGhOb2RlcyA9IHBhdGhzLnNoYXBlc1tqXTtcblxuICAgICAgICAgICAgaWYgKHBhdGhOb2RlcyAmJiBwYXRoTm9kZXMuX2xlbmd0aCkge1xuICAgICAgICAgICAgICBwYXRoU3RyaW5nVHJhbnNmb3JtZWQgKz0gYnVpbGRTaGFwZVN0cmluZyhwYXRoTm9kZXMsIHBhdGhOb2Rlcy5fbGVuZ3RoLCBwYXRoTm9kZXMuYywgbWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpdGVtRGF0YS5jYWNoZXNbbF0gPSBwYXRoU3RyaW5nVHJhbnNmb3JtZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aFN0cmluZ1RyYW5zZm9ybWVkID0gaXRlbURhdGEuY2FjaGVzW2xdO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlbURhdGEuc3R5bGVzW2xdLmQgKz0gc3R5bGVEYXRhLmhkID09PSB0cnVlID8gJycgOiBwYXRoU3RyaW5nVHJhbnNmb3JtZWQ7XG4gICAgICAgIGl0ZW1EYXRhLnN0eWxlc1tsXS5fbWRmID0gcmVkcmF3IHx8IGl0ZW1EYXRhLnN0eWxlc1tsXS5fbWRmO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckZpbGwoc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICB2YXIgc3R5bGVFbGVtID0gaXRlbURhdGEuc3R5bGU7XG5cbiAgICAgIGlmIChpdGVtRGF0YS5jLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHN0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAncmdiKCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlswXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsxXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkgKyAnKScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEuby5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCBpdGVtRGF0YS5vLnYpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckdyYWRpZW50U3Ryb2tlKHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgcmVuZGVyR3JhZGllbnQoc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKTtcbiAgICAgIHJlbmRlclN0cm9rZShzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckdyYWRpZW50KHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGdmaWxsID0gaXRlbURhdGEuZ2Y7XG4gICAgICB2YXIgaGFzT3BhY2l0eSA9IGl0ZW1EYXRhLmcuX2hhc09wYWNpdHk7XG4gICAgICB2YXIgcHQxID0gaXRlbURhdGEucy52O1xuICAgICAgdmFyIHB0MiA9IGl0ZW1EYXRhLmUudjtcblxuICAgICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgdmFyIGF0dHIgPSBzdHlsZURhdGEudHkgPT09ICdnZicgPyAnZmlsbC1vcGFjaXR5JyA6ICdzdHJva2Utb3BhY2l0eSc7XG4gICAgICAgIGl0ZW1EYXRhLnN0eWxlLnBFbGVtLnNldEF0dHJpYnV0ZShhdHRyLCBpdGVtRGF0YS5vLnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEucy5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICB2YXIgYXR0cjEgPSBzdHlsZURhdGEudCA9PT0gMSA/ICd4MScgOiAnY3gnO1xuICAgICAgICB2YXIgYXR0cjIgPSBhdHRyMSA9PT0gJ3gxJyA/ICd5MScgOiAnY3knO1xuICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoYXR0cjEsIHB0MVswXSk7XG4gICAgICAgIGdmaWxsLnNldEF0dHJpYnV0ZShhdHRyMiwgcHQxWzFdKTtcblxuICAgICAgICBpZiAoaGFzT3BhY2l0eSAmJiAhaXRlbURhdGEuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoYXR0cjEsIHB0MVswXSk7XG4gICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKGF0dHIyLCBwdDFbMV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzdG9wcztcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcbiAgICAgIHZhciBzdG9wO1xuXG4gICAgICBpZiAoaXRlbURhdGEuZy5fY21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgc3RvcHMgPSBpdGVtRGF0YS5jc3Q7XG4gICAgICAgIHZhciBjVmFsdWVzID0gaXRlbURhdGEuZy5jO1xuICAgICAgICBsZW4gPSBzdG9wcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgc3RvcCA9IHN0b3BzW2ldO1xuICAgICAgICAgIHN0b3Auc2V0QXR0cmlidXRlKCdvZmZzZXQnLCBjVmFsdWVzW2kgKiA0XSArICclJyk7XG4gICAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ3N0b3AtY29sb3InLCAncmdiKCcgKyBjVmFsdWVzW2kgKiA0ICsgMV0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgMl0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgM10gKyAnKScpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPcGFjaXR5ICYmIChpdGVtRGF0YS5nLl9vbWRmIHx8IGlzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgdmFyIG9WYWx1ZXMgPSBpdGVtRGF0YS5nLm87XG5cbiAgICAgICAgaWYgKGl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgc3RvcHMgPSBpdGVtRGF0YS5jc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RvcHMgPSBpdGVtRGF0YS5vc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBsZW4gPSBzdG9wcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgc3RvcCA9IHN0b3BzW2ldO1xuXG4gICAgICAgICAgaWYgKCFpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ29mZnNldCcsIG9WYWx1ZXNbaSAqIDJdICsgJyUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdG9wLnNldEF0dHJpYnV0ZSgnc3RvcC1vcGFjaXR5Jywgb1ZhbHVlc1tpICogMiArIDFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3R5bGVEYXRhLnQgPT09IDEpIHtcbiAgICAgICAgaWYgKGl0ZW1EYXRhLmUuX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ3gyJywgcHQyWzBdKTtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ3kyJywgcHQyWzFdKTtcblxuICAgICAgICAgIGlmIChoYXNPcGFjaXR5ICYmICFpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKCd4MicsIHB0MlswXSk7XG4gICAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ3kyJywgcHQyWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByYWQ7XG5cbiAgICAgICAgaWYgKGl0ZW1EYXRhLnMuX21kZiB8fCBpdGVtRGF0YS5lLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgICAgcmFkID0gTWF0aC5zcXJ0KE1hdGgucG93KHB0MVswXSAtIHB0MlswXSwgMikgKyBNYXRoLnBvdyhwdDFbMV0gLSBwdDJbMV0sIDIpKTtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ3InLCByYWQpO1xuXG4gICAgICAgICAgaWYgKGhhc09wYWNpdHkgJiYgIWl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ3InLCByYWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVtRGF0YS5lLl9tZGYgfHwgaXRlbURhdGEuaC5fbWRmIHx8IGl0ZW1EYXRhLmEuX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgICBpZiAoIXJhZCkge1xuICAgICAgICAgICAgcmFkID0gTWF0aC5zcXJ0KE1hdGgucG93KHB0MVswXSAtIHB0MlswXSwgMikgKyBNYXRoLnBvdyhwdDFbMV0gLSBwdDJbMV0sIDIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYW5nID0gTWF0aC5hdGFuMihwdDJbMV0gLSBwdDFbMV0sIHB0MlswXSAtIHB0MVswXSk7XG4gICAgICAgICAgdmFyIHBlcmNlbnQgPSBpdGVtRGF0YS5oLnY7XG5cbiAgICAgICAgICBpZiAocGVyY2VudCA+PSAxKSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gMC45OTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBlcmNlbnQgPD0gLTEpIHtcbiAgICAgICAgICAgIHBlcmNlbnQgPSAtMC45OTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGlzdCA9IHJhZCAqIHBlcmNlbnQ7XG4gICAgICAgICAgdmFyIHggPSBNYXRoLmNvcyhhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVswXTtcbiAgICAgICAgICB2YXIgeSA9IE1hdGguc2luKGFuZyArIGl0ZW1EYXRhLmEudikgKiBkaXN0ICsgcHQxWzFdO1xuICAgICAgICAgIGdmaWxsLnNldEF0dHJpYnV0ZSgnZngnLCB4KTtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ2Z5JywgeSk7XG5cbiAgICAgICAgICBpZiAoaGFzT3BhY2l0eSAmJiAhaXRlbURhdGEuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgICAgICAgIGl0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZSgnZngnLCB4KTtcbiAgICAgICAgICAgIGl0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZSgnZnknLCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZ2ZpbGwuc2V0QXR0cmlidXRlKCdmeScsJzIwMCcpO1xuXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyU3Ryb2tlKHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIHN0eWxlRWxlbSA9IGl0ZW1EYXRhLnN0eWxlO1xuICAgICAgdmFyIGQgPSBpdGVtRGF0YS5kO1xuXG4gICAgICBpZiAoZCAmJiAoZC5fbWRmIHx8IGlzRmlyc3RGcmFtZSkgJiYgZC5kYXNoU3RyKSB7XG4gICAgICAgIHN0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBkLmRhc2hTdHIpO1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaG9mZnNldCcsIGQuZGFzaG9mZnNldFswXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtRGF0YS5jICYmIChpdGVtRGF0YS5jLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2UnLCAncmdiKCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlswXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsxXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkgKyAnKScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEuby5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2Utb3BhY2l0eScsIGl0ZW1EYXRhLm8udik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtRGF0YS53Ll9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHN0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIGl0ZW1EYXRhLncudik7XG5cbiAgICAgICAgaWYgKHN0eWxlRWxlbS5tc0VsZW0pIHtcbiAgICAgICAgICBzdHlsZUVsZW0ubXNFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgaXRlbURhdGEudy52KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNWR1NoYXBlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgLy8gTGlzdCBvZiBkcmF3YWJsZSBlbGVtZW50c1xuICAgIHRoaXMuc2hhcGVzID0gW107IC8vIEZ1bGwgc2hhcGUgZGF0YVxuXG4gICAgdGhpcy5zaGFwZXNEYXRhID0gZGF0YS5zaGFwZXM7IC8vIExpc3Qgb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHNoYXBlc1xuXG4gICAgdGhpcy5zdHlsZXNMaXN0ID0gW107IC8vIExpc3Qgb2YgbW9kaWZpZXJzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHNoYXBlc1xuXG4gICAgdGhpcy5zaGFwZU1vZGlmaWVycyA9IFtdOyAvLyBMaXN0IG9mIGl0ZW1zIGluIHNoYXBlIHRyZWVcblxuICAgIHRoaXMuaXRlbXNEYXRhID0gW107IC8vIExpc3Qgb2YgaXRlbXMgaW4gcHJldmlvdXMgc2hhcGUgdHJlZVxuXG4gICAgdGhpcy5wcm9jZXNzZWRFbGVtZW50cyA9IFtdOyAvLyBMaXN0IG9mIGFuaW1hdGVkIGNvbXBvbmVudHNcblxuICAgIHRoaXMuYW5pbWF0ZWRDb250ZW50cyA9IFtdO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7IC8vIE1vdmluZyBhbnkgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGdldCB0b28gbXVjaCBhY2Nlc3MgYWZ0ZXIgaW5pdGlhbGl6YXRpb24gYmVjYXVzZSBvZiB2OCB3YXkgb2YgaGFuZGxpbmcgbW9yZSB0aGFuIDEwIHByb3BlcnRpZXMuXG4gICAgLy8gTGlzdCBvZiBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG5cbiAgICB0aGlzLnByZXZWaWV3RGF0YSA9IFtdOyAvLyBNb3ZpbmcgYW55IHByb3BlcnR5IHRoYXQgZG9lc24ndCBnZXQgdG9vIG11Y2ggYWNjZXNzIGFmdGVyIGluaXRpYWxpemF0aW9uIGJlY2F1c2Ugb2Ygdjggd2F5IG9mIGhhbmRsaW5nIG1vcmUgdGhhbiAxMCBwcm9wZXJ0aWVzLlxuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQsIElTaGFwZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnRdLCBTVkdTaGFwZUVsZW1lbnQpO1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuaW5pdFNlY29uZGFyeUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmlkZW50aXR5TWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuYnVpbGRFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge307XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2VhcmNoU2hhcGVzKHRoaXMuc2hhcGVzRGF0YSwgdGhpcy5pdGVtc0RhdGEsIHRoaXMucHJldlZpZXdEYXRhLCB0aGlzLmxheWVyRWxlbWVudCwgMCwgW10sIHRydWUpO1xuICAgIHRoaXMuZmlsdGVyVW5pcXVlU2hhcGVzKCk7XG4gIH07XG4gIC8qXG4gIFRoaXMgbWV0aG9kIHNlYXJjaGVzIGZvciBtdWx0aXBsZSBzaGFwZXMgdGhhdCBhZmZlY3QgYSBzaW5nbGUgZWxlbWVudCBhbmQgb25lIG9mIHRoZW0gaXMgYW5pbWF0ZWRcbiAgKi9cblxuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuZmlsdGVyVW5pcXVlU2hhcGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIHNoYXBlO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuID0gdGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtcbiAgICB2YXIgc3R5bGU7XG4gICAgdmFyIHRlbXBTaGFwZXMgPSBbXTtcbiAgICB2YXIgYXJlQW5pbWF0ZWQgPSBmYWxzZTtcblxuICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgIHN0eWxlID0gdGhpcy5zdHlsZXNMaXN0W2pdO1xuICAgICAgYXJlQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgIHRlbXBTaGFwZXMubGVuZ3RoID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlID0gdGhpcy5zaGFwZXNbaV07XG5cbiAgICAgICAgaWYgKHNoYXBlLnN0eWxlcy5pbmRleE9mKHN0eWxlKSAhPT0gLTEpIHtcbiAgICAgICAgICB0ZW1wU2hhcGVzLnB1c2goc2hhcGUpO1xuICAgICAgICAgIGFyZUFuaW1hdGVkID0gc2hhcGUuX2lzQW5pbWF0ZWQgfHwgYXJlQW5pbWF0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRlbXBTaGFwZXMubGVuZ3RoID4gMSAmJiBhcmVBbmltYXRlZCkge1xuICAgICAgICB0aGlzLnNldFNoYXBlc0FzQW5pbWF0ZWQodGVtcFNoYXBlcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuc2V0U2hhcGVzQXNBbmltYXRlZCA9IGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gc2hhcGVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgc2hhcGVzW2ldLnNldEFzQW5pbWF0ZWQoKTtcbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgbGV2ZWwpIHtcbiAgICAvLyBUT0RPOiBwcmV2ZW50IGRyYXdpbmcgb2YgaGlkZGVuIHN0eWxlc1xuICAgIHZhciBlbGVtZW50RGF0YTtcbiAgICB2YXIgc3R5bGVPYiA9IG5ldyBTVkdTdHlsZURhdGEoZGF0YSwgbGV2ZWwpO1xuICAgIHZhciBwYXRoRWxlbWVudCA9IHN0eWxlT2IucEVsZW07XG5cbiAgICBpZiAoZGF0YS50eSA9PT0gJ3N0Jykge1xuICAgICAgZWxlbWVudERhdGEgPSBuZXcgU1ZHU3Ryb2tlU3R5bGVEYXRhKHRoaXMsIGRhdGEsIHN0eWxlT2IpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ2ZsJykge1xuICAgICAgZWxlbWVudERhdGEgPSBuZXcgU1ZHRmlsbFN0eWxlRGF0YSh0aGlzLCBkYXRhLCBzdHlsZU9iKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEudHkgPT09ICdnZicgfHwgZGF0YS50eSA9PT0gJ2dzJykge1xuICAgICAgdmFyIEdyYWRpZW50Q29uc3RydWN0b3IgPSBkYXRhLnR5ID09PSAnZ2YnID8gU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhIDogU1ZHR3JhZGllbnRTdHJva2VTdHlsZURhdGE7XG4gICAgICBlbGVtZW50RGF0YSA9IG5ldyBHcmFkaWVudENvbnN0cnVjdG9yKHRoaXMsIGRhdGEsIHN0eWxlT2IpO1xuICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZWxlbWVudERhdGEuZ2YpO1xuXG4gICAgICBpZiAoZWxlbWVudERhdGEubWFza0lkKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGVsZW1lbnREYXRhLm1zKTtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZWxlbWVudERhdGEub2YpO1xuICAgICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21hc2snLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGVsZW1lbnREYXRhLm1hc2tJZCArICcpJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnbm8nKSB7XG4gICAgICBlbGVtZW50RGF0YSA9IG5ldyBTVkdOb1N0eWxlRGF0YSh0aGlzLCBkYXRhLCBzdHlsZU9iKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS50eSA9PT0gJ3N0JyB8fCBkYXRhLnR5ID09PSAnZ3MnKSB7XG4gICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lY2FwJywgbGluZUNhcEVudW1bZGF0YS5sYyB8fCAyXSk7XG4gICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsIGxpbmVKb2luRW51bVtkYXRhLmxqIHx8IDJdKTtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JywgJzAnKTtcblxuICAgICAgaWYgKGRhdGEubGogPT09IDEpIHtcbiAgICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2UtbWl0ZXJsaW1pdCcsIGRhdGEubWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLnIgPT09IDIpIHtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnZmlsbC1ydWxlJywgJ2V2ZW5vZGQnKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sbikge1xuICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGRhdGEubG4pO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmNsKSB7XG4gICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgZGF0YS5jbCk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuYm0pIHtcbiAgICAgIHBhdGhFbGVtZW50LnN0eWxlWydtaXgtYmxlbmQtbW9kZSddID0gZ2V0QmxlbmRNb2RlKGRhdGEuYm0pO1xuICAgIH1cblxuICAgIHRoaXMuc3R5bGVzTGlzdC5wdXNoKHN0eWxlT2IpO1xuICAgIHRoaXMuYWRkVG9BbmltYXRlZENvbnRlbnRzKGRhdGEsIGVsZW1lbnREYXRhKTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVHcm91cEVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBlbGVtZW50RGF0YSA9IG5ldyBTaGFwZUdyb3VwRGF0YSgpO1xuXG4gICAgaWYgKGRhdGEubG4pIHtcbiAgICAgIGVsZW1lbnREYXRhLmdyLnNldEF0dHJpYnV0ZSgnaWQnLCBkYXRhLmxuKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5jbCkge1xuICAgICAgZWxlbWVudERhdGEuZ3Iuc2V0QXR0cmlidXRlKCdjbGFzcycsIGRhdGEuY2wpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmJtKSB7XG4gICAgICBlbGVtZW50RGF0YS5nci5zdHlsZVsnbWl4LWJsZW5kLW1vZGUnXSA9IGdldEJsZW5kTW9kZShkYXRhLmJtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVUcmFuc2Zvcm1FbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRhaW5lcikge1xuICAgIHZhciB0cmFuc2Zvcm1Qcm9wZXJ0eSA9IFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eSh0aGlzLCBkYXRhLCB0aGlzKTtcbiAgICB2YXIgZWxlbWVudERhdGEgPSBuZXcgU1ZHVHJhbnNmb3JtRGF0YSh0cmFuc2Zvcm1Qcm9wZXJ0eSwgdHJhbnNmb3JtUHJvcGVydHkubywgY29udGFpbmVyKTtcbiAgICB0aGlzLmFkZFRvQW5pbWF0ZWRDb250ZW50cyhkYXRhLCBlbGVtZW50RGF0YSk7XG4gICAgcmV0dXJuIGVsZW1lbnREYXRhO1xuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU2hhcGVFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEsIG93blRyYW5zZm9ybWVycywgbGV2ZWwpIHtcbiAgICB2YXIgdHkgPSA0O1xuXG4gICAgaWYgKGRhdGEudHkgPT09ICdyYycpIHtcbiAgICAgIHR5ID0gNTtcbiAgICB9IGVsc2UgaWYgKGRhdGEudHkgPT09ICdlbCcpIHtcbiAgICAgIHR5ID0gNjtcbiAgICB9IGVsc2UgaWYgKGRhdGEudHkgPT09ICdzcicpIHtcbiAgICAgIHR5ID0gNztcbiAgICB9XG5cbiAgICB2YXIgc2hhcGVQcm9wZXJ0eSA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLCBkYXRhLCB0eSwgdGhpcyk7XG4gICAgdmFyIGVsZW1lbnREYXRhID0gbmV3IFNWR1NoYXBlRGF0YShvd25UcmFuc2Zvcm1lcnMsIGxldmVsLCBzaGFwZVByb3BlcnR5KTtcbiAgICB0aGlzLnNoYXBlcy5wdXNoKGVsZW1lbnREYXRhKTtcbiAgICB0aGlzLmFkZFNoYXBlVG9Nb2RpZmllcnMoZWxlbWVudERhdGEpO1xuICAgIHRoaXMuYWRkVG9BbmltYXRlZENvbnRlbnRzKGRhdGEsIGVsZW1lbnREYXRhKTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5hZGRUb0FuaW1hdGVkQ29udGVudHMgPSBmdW5jdGlvbiAoZGF0YSwgZWxlbWVudCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGhpcy5hbmltYXRlZENvbnRlbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAodGhpcy5hbmltYXRlZENvbnRlbnRzW2ldLmVsZW1lbnQgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5hbmltYXRlZENvbnRlbnRzLnB1c2goe1xuICAgICAgZm46IFNWR0VsZW1lbnRzUmVuZGVyZXIuY3JlYXRlUmVuZGVyRnVuY3Rpb24oZGF0YSksXG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuc2V0RWxlbWVudFN0eWxlcyA9IGZ1bmN0aW9uIChlbGVtZW50RGF0YSkge1xuICAgIHZhciBhcnIgPSBlbGVtZW50RGF0YS5zdHlsZXM7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgaWYgKCF0aGlzLnN0eWxlc0xpc3Rbal0uY2xvc2VkKSB7XG4gICAgICAgIGFyci5wdXNoKHRoaXMuc3R5bGVzTGlzdFtqXSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUucmVsb2FkU2hhcGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuaXRlbXNEYXRhLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5wcmV2Vmlld0RhdGFbaV0gPSB0aGlzLml0ZW1zRGF0YVtpXTtcbiAgICB9XG5cbiAgICB0aGlzLnNlYXJjaFNoYXBlcyh0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0aGlzLnByZXZWaWV3RGF0YSwgdGhpcy5sYXllckVsZW1lbnQsIDAsIFtdLCB0cnVlKTtcbiAgICB0aGlzLmZpbHRlclVuaXF1ZVNoYXBlcygpO1xuICAgIGxlbiA9IHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLmdldFZhbHVlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJNb2RpZmllcnMoKTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLnNlYXJjaFNoYXBlcyA9IGZ1bmN0aW9uIChhcnIsIGl0ZW1zRGF0YSwgcHJldlZpZXdEYXRhLCBjb250YWluZXIsIGxldmVsLCB0cmFuc2Zvcm1lcnMsIHJlbmRlcikge1xuICAgIHZhciBvd25UcmFuc2Zvcm1lcnMgPSBbXS5jb25jYXQodHJhbnNmb3JtZXJzKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIG93blN0eWxlcyA9IFtdO1xuICAgIHZhciBvd25Nb2RpZmllcnMgPSBbXTtcbiAgICB2YXIgY3VycmVudFRyYW5zZm9ybTtcbiAgICB2YXIgbW9kaWZpZXI7XG4gICAgdmFyIHByb2Nlc3NlZFBvcztcblxuICAgIGZvciAoaSA9IGxlbjsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIHByb2Nlc3NlZFBvcyA9IHRoaXMuc2VhcmNoUHJvY2Vzc2VkRWxlbWVudChhcnJbaV0pO1xuXG4gICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICBhcnJbaV0uX3JlbmRlciA9IHJlbmRlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1zRGF0YVtpXSA9IHByZXZWaWV3RGF0YVtwcm9jZXNzZWRQb3MgLSAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFycltpXS50eSA9PT0gJ2ZsJyB8fCBhcnJbaV0udHkgPT09ICdzdCcgfHwgYXJyW2ldLnR5ID09PSAnZ2YnIHx8IGFycltpXS50eSA9PT0gJ2dzJyB8fCBhcnJbaV0udHkgPT09ICdubycpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZVN0eWxlRWxlbWVudChhcnJbaV0sIGxldmVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0uc3R5bGUuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJyW2ldLl9yZW5kZXIpIHtcbiAgICAgICAgICBpZiAoaXRlbXNEYXRhW2ldLnN0eWxlLnBFbGVtLnBhcmVudE5vZGUgIT09IGNvbnRhaW5lcikge1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGl0ZW1zRGF0YVtpXS5zdHlsZS5wRWxlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3duU3R5bGVzLnB1c2goaXRlbXNEYXRhW2ldLnN0eWxlKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gdGhpcy5jcmVhdGVHcm91cEVsZW1lbnQoYXJyW2ldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBqTGVuID0gaXRlbXNEYXRhW2ldLml0Lmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGl0ZW1zRGF0YVtpXS5wcmV2Vmlld0RhdGFbal0gPSBpdGVtc0RhdGFbaV0uaXRbal07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZWFyY2hTaGFwZXMoYXJyW2ldLml0LCBpdGVtc0RhdGFbaV0uaXQsIGl0ZW1zRGF0YVtpXS5wcmV2Vmlld0RhdGEsIGl0ZW1zRGF0YVtpXS5nciwgbGV2ZWwgKyAxLCBvd25UcmFuc2Zvcm1lcnMsIHJlbmRlcik7XG5cbiAgICAgICAgaWYgKGFycltpXS5fcmVuZGVyKSB7XG4gICAgICAgICAgaWYgKGl0ZW1zRGF0YVtpXS5nci5wYXJlbnROb2RlICE9PSBjb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpdGVtc0RhdGFbaV0uZ3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICd0cicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZVRyYW5zZm9ybUVsZW1lbnQoYXJyW2ldLCBjb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFRyYW5zZm9ybSA9IGl0ZW1zRGF0YVtpXS50cmFuc2Zvcm07XG4gICAgICAgIG93blRyYW5zZm9ybWVycy5wdXNoKGN1cnJlbnRUcmFuc2Zvcm0pO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdzaCcgfHwgYXJyW2ldLnR5ID09PSAncmMnIHx8IGFycltpXS50eSA9PT0gJ2VsJyB8fCBhcnJbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZVNoYXBlRWxlbWVudChhcnJbaV0sIG93blRyYW5zZm9ybWVycywgbGV2ZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRFbGVtZW50U3R5bGVzKGl0ZW1zRGF0YVtpXSk7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3RtJyB8fCBhcnJbaV0udHkgPT09ICdyZCcgfHwgYXJyW2ldLnR5ID09PSAnbXMnIHx8IGFycltpXS50eSA9PT0gJ3BiJyB8fCBhcnJbaV0udHkgPT09ICd6eicgfHwgYXJyW2ldLnR5ID09PSAnb3AnKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBTaGFwZU1vZGlmaWVycy5nZXRNb2RpZmllcihhcnJbaV0udHkpO1xuICAgICAgICAgIG1vZGlmaWVyLmluaXQodGhpcywgYXJyW2ldKTtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSBtb2RpZmllcjtcbiAgICAgICAgICB0aGlzLnNoYXBlTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGlmaWVyID0gaXRlbXNEYXRhW2ldO1xuICAgICAgICAgIG1vZGlmaWVyLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb3duTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdycCcpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBtb2RpZmllciA9IFNoYXBlTW9kaWZpZXJzLmdldE1vZGlmaWVyKGFycltpXS50eSk7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gbW9kaWZpZXI7XG4gICAgICAgICAgbW9kaWZpZXIuaW5pdCh0aGlzLCBhcnIsIGksIGl0ZW1zRGF0YSk7XG4gICAgICAgICAgdGhpcy5zaGFwZU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgICAgICByZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2RpZmllciA9IGl0ZW1zRGF0YVtpXTtcbiAgICAgICAgICBtb2RpZmllci5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgb3duTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFkZFByb2Nlc3NlZEVsZW1lbnQoYXJyW2ldLCBpICsgMSk7XG4gICAgfVxuXG4gICAgbGVuID0gb3duU3R5bGVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgb3duU3R5bGVzW2ldLmNsb3NlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgbGVuID0gb3duTW9kaWZpZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgb3duTW9kaWZpZXJzW2ldLmNsb3NlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVuZGVyTW9kaWZpZXJzKCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc3R5bGVzTGlzdC5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuc3R5bGVzTGlzdFtpXS5yZXNldCgpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyU2hhcGUoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuc3R5bGVzTGlzdFtpXS5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgICBpZiAodGhpcy5zdHlsZXNMaXN0W2ldLm1zRWxlbSkge1xuICAgICAgICAgIHRoaXMuc3R5bGVzTGlzdFtpXS5tc0VsZW0uc2V0QXR0cmlidXRlKCdkJywgdGhpcy5zdHlsZXNMaXN0W2ldLmQpOyAvLyBBZGRpbmcgTTAgMCBmaXhlcyBzYW1lIG1hc2sgYnVnIG9uIGFsbCBicm93c2Vyc1xuXG4gICAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLmQgPSAnTTAgMCcgKyB0aGlzLnN0eWxlc0xpc3RbaV0uZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3R5bGVzTGlzdFtpXS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLnN0eWxlc0xpc3RbaV0uZCB8fCAnTTAgMCcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclNoYXBlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmFuaW1hdGVkQ29udGVudHMubGVuZ3RoO1xuICAgIHZhciBhbmltYXRlZENvbnRlbnQ7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGFuaW1hdGVkQ29udGVudCA9IHRoaXMuYW5pbWF0ZWRDb250ZW50c1tpXTtcblxuICAgICAgaWYgKCh0aGlzLl9pc0ZpcnN0RnJhbWUgfHwgYW5pbWF0ZWRDb250ZW50LmVsZW1lbnQuX2lzQW5pbWF0ZWQpICYmIGFuaW1hdGVkQ29udGVudC5kYXRhICE9PSB0cnVlKSB7XG4gICAgICAgIGFuaW1hdGVkQ29udGVudC5mbihhbmltYXRlZENvbnRlbnQuZGF0YSwgYW5pbWF0ZWRDb250ZW50LmVsZW1lbnQsIHRoaXMuX2lzRmlyc3RGcmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmRlc3Ryb3lCYXNlRWxlbWVudCgpO1xuICAgIHRoaXMuc2hhcGVzRGF0YSA9IG51bGw7XG4gICAgdGhpcy5pdGVtc0RhdGEgPSBudWxsO1xuICB9O1xuXG4gIGZ1bmN0aW9uIExldHRlclByb3BzKG8sIHN3LCBzYywgZmMsIG0sIHApIHtcbiAgICB0aGlzLm8gPSBvO1xuICAgIHRoaXMuc3cgPSBzdztcbiAgICB0aGlzLnNjID0gc2M7XG4gICAgdGhpcy5mYyA9IGZjO1xuICAgIHRoaXMubSA9IG07XG4gICAgdGhpcy5wID0gcDtcbiAgICB0aGlzLl9tZGYgPSB7XG4gICAgICBvOiB0cnVlLFxuICAgICAgc3c6ICEhc3csXG4gICAgICBzYzogISFzYyxcbiAgICAgIGZjOiAhIWZjLFxuICAgICAgbTogdHJ1ZSxcbiAgICAgIHA6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgTGV0dGVyUHJvcHMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChvLCBzdywgc2MsIGZjLCBtLCBwKSB7XG4gICAgdGhpcy5fbWRmLm8gPSBmYWxzZTtcbiAgICB0aGlzLl9tZGYuc3cgPSBmYWxzZTtcbiAgICB0aGlzLl9tZGYuc2MgPSBmYWxzZTtcbiAgICB0aGlzLl9tZGYuZmMgPSBmYWxzZTtcbiAgICB0aGlzLl9tZGYubSA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5wID0gZmFsc2U7XG4gICAgdmFyIHVwZGF0ZWQgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLm8gIT09IG8pIHtcbiAgICAgIHRoaXMubyA9IG87XG4gICAgICB0aGlzLl9tZGYubyA9IHRydWU7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdyAhPT0gc3cpIHtcbiAgICAgIHRoaXMuc3cgPSBzdztcbiAgICAgIHRoaXMuX21kZi5zdyA9IHRydWU7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zYyAhPT0gc2MpIHtcbiAgICAgIHRoaXMuc2MgPSBzYztcbiAgICAgIHRoaXMuX21kZi5zYyA9IHRydWU7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mYyAhPT0gZmMpIHtcbiAgICAgIHRoaXMuZmMgPSBmYztcbiAgICAgIHRoaXMuX21kZi5mYyA9IHRydWU7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tICE9PSBtKSB7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5fbWRmLm0gPSB0cnVlO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHAubGVuZ3RoICYmICh0aGlzLnBbMF0gIT09IHBbMF0gfHwgdGhpcy5wWzFdICE9PSBwWzFdIHx8IHRoaXMucFs0XSAhPT0gcFs0XSB8fCB0aGlzLnBbNV0gIT09IHBbNV0gfHwgdGhpcy5wWzEyXSAhPT0gcFsxMl0gfHwgdGhpcy5wWzEzXSAhPT0gcFsxM10pKSB7XG4gICAgICB0aGlzLnAgPSBwO1xuICAgICAgdGhpcy5fbWRmLnAgPSB0cnVlO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZWQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gVGV4dFByb3BlcnR5KGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLl9mcmFtZUlkID0gaW5pdGlhbERlZmF1bHRGcmFtZTtcbiAgICB0aGlzLnB2ID0gJyc7XG4gICAgdGhpcy52ID0gJyc7XG4gICAgdGhpcy5rZiA9IGZhbHNlO1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG5cbiAgICBpZiAoZGF0YS5kICYmIGRhdGEuZC5zaWQpIHtcbiAgICAgIGRhdGEuZCA9IGVsZW0uZ2xvYmFsRGF0YS5zbG90TWFuYWdlci5nZXRQcm9wKGRhdGEuZCk7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuY29tcCA9IHRoaXMuZWxlbS5jb21wO1xuICAgIHRoaXMua2V5c0luZGV4ID0gMDtcbiAgICB0aGlzLmNhblJlc2l6ZSA9IGZhbHNlO1xuICAgIHRoaXMubWluaW11bUZvbnRTaXplID0gMTtcbiAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtdO1xuICAgIHRoaXMuY3VycmVudERhdGEgPSB7XG4gICAgICBhc2NlbnQ6IDAsXG4gICAgICBib3hXaWR0aDogdGhpcy5kZWZhdWx0Qm94V2lkdGgsXG4gICAgICBmOiAnJyxcbiAgICAgIGZTdHlsZTogJycsXG4gICAgICBmV2VpZ2h0OiAnJyxcbiAgICAgIGZjOiAnJyxcbiAgICAgIGo6ICcnLFxuICAgICAganVzdGlmeU9mZnNldDogJycsXG4gICAgICBsOiBbXSxcbiAgICAgIGxoOiAwLFxuICAgICAgbGluZVdpZHRoczogW10sXG4gICAgICBsczogJycsXG4gICAgICBvZjogJycsXG4gICAgICBzOiAnJyxcbiAgICAgIHNjOiAnJyxcbiAgICAgIHN3OiAwLFxuICAgICAgdDogMCxcbiAgICAgIHRyOiAwLFxuICAgICAgc3o6IDAsXG4gICAgICBwczogbnVsbCxcbiAgICAgIGZpbGxDb2xvckFuaW06IGZhbHNlLFxuICAgICAgc3Ryb2tlQ29sb3JBbmltOiBmYWxzZSxcbiAgICAgIHN0cm9rZVdpZHRoQW5pbTogZmFsc2UsXG4gICAgICB5T2Zmc2V0OiAwLFxuICAgICAgZmluYWxTaXplOiAwLFxuICAgICAgZmluYWxUZXh0OiBbXSxcbiAgICAgIGZpbmFsTGluZUhlaWdodDogMCxcbiAgICAgIF9fY29tcGxldGU6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLmNvcHlEYXRhKHRoaXMuY3VycmVudERhdGEsIHRoaXMuZGF0YS5kLmtbMF0ucyk7XG5cbiAgICBpZiAoIXRoaXMuc2VhcmNoUHJvcGVydHkoKSkge1xuICAgICAgdGhpcy5jb21wbGV0ZVRleHREYXRhKHRoaXMuY3VycmVudERhdGEpO1xuICAgIH1cbiAgfVxuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuZGVmYXVsdEJveFdpZHRoID0gWzAsIDBdO1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuY29weURhdGEgPSBmdW5jdGlvbiAob2JqLCBkYXRhKSB7XG4gICAgZm9yICh2YXIgcyBpbiBkYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIHMpKSB7XG4gICAgICAgIG9ialtzXSA9IGRhdGFbc107XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnNldEN1cnJlbnREYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIWRhdGEuX19jb21wbGV0ZSkge1xuICAgICAgdGhpcy5jb21wbGV0ZVRleHREYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudERhdGEgPSBkYXRhO1xuICAgIHRoaXMuY3VycmVudERhdGEuYm94V2lkdGggPSB0aGlzLmN1cnJlbnREYXRhLmJveFdpZHRoIHx8IHRoaXMuZGVmYXVsdEJveFdpZHRoO1xuICAgIHRoaXMuX21kZiA9IHRydWU7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZWFyY2hQcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hLZXlmcmFtZXMoKTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnNlYXJjaEtleWZyYW1lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmtmID0gdGhpcy5kYXRhLmQuay5sZW5ndGggPiAxO1xuXG4gICAgaWYgKHRoaXMua2YpIHtcbiAgICAgIHRoaXMuYWRkRWZmZWN0KHRoaXMuZ2V0S2V5ZnJhbWVWYWx1ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZjtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmFkZEVmZmVjdCA9IGZ1bmN0aW9uIChlZmZlY3RGdW5jdGlvbikge1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlLnB1c2goZWZmZWN0RnVuY3Rpb24pO1xuICAgIHRoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIChfZmluYWxWYWx1ZSkge1xuICAgIGlmICgodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkIHx8ICF0aGlzLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpICYmICFfZmluYWxWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudERhdGEudCA9IHRoaXMuZGF0YS5kLmtbdGhpcy5rZXlzSW5kZXhdLnMudDtcbiAgICB2YXIgY3VycmVudFZhbHVlID0gdGhpcy5jdXJyZW50RGF0YTtcbiAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5rZXlzSW5kZXg7XG5cbiAgICBpZiAodGhpcy5sb2NrKSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnREYXRhKHRoaXMuY3VycmVudERhdGEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubG9jayA9IHRydWU7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgICB2YXIgZmluYWxWYWx1ZSA9IF9maW5hbFZhbHVlIHx8IHRoaXMuZGF0YS5kLmtbdGhpcy5rZXlzSW5kZXhdLnM7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIC8vIENoZWNraW5nIGlmIGluZGV4IGNoYW5nZWQgdG8gcHJldmVudCBjcmVhdGluZyBhIG5ldyBvYmplY3QgZXZlcnkgdGltZSB0aGUgZXhwcmVzc2lvbiB1cGRhdGVzLlxuICAgICAgaWYgKGN1cnJlbnRJbmRleCAhPT0gdGhpcy5rZXlzSW5kZXgpIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZWZmZWN0c1NlcXVlbmNlW2ldKGZpbmFsVmFsdWUsIGZpbmFsVmFsdWUudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaW5hbFZhbHVlID0gdGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0odGhpcy5jdXJyZW50RGF0YSwgZmluYWxWYWx1ZS50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFZhbHVlICE9PSBmaW5hbFZhbHVlKSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnREYXRhKGZpbmFsVmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMudiA9IHRoaXMuY3VycmVudERhdGE7XG4gICAgdGhpcy5wdiA9IHRoaXMudjtcbiAgICB0aGlzLmxvY2sgPSBmYWxzZTtcbiAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0S2V5ZnJhbWVWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGV4dEtleXMgPSB0aGlzLmRhdGEuZC5rO1xuICAgIHZhciBmcmFtZU51bSA9IHRoaXMuZWxlbS5jb21wLnJlbmRlcmVkRnJhbWU7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0ZXh0S2V5cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8PSBsZW4gLSAxKSB7XG4gICAgICBpZiAoaSA9PT0gbGVuIC0gMSB8fCB0ZXh0S2V5c1tpICsgMV0udCA+IGZyYW1lTnVtKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMua2V5c0luZGV4ICE9PSBpKSB7XG4gICAgICB0aGlzLmtleXNJbmRleCA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGF0YS5kLmtbdGhpcy5rZXlzSW5kZXhdLnM7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5idWlsZEZpbmFsVGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgdmFyIGNoYXJhY3RlcnNBcnJheSA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGV4dC5sZW5ndGg7XG4gICAgdmFyIGNoYXJDb2RlO1xuICAgIHZhciBzZWNvbmRDaGFyQ29kZTtcbiAgICB2YXIgc2hvdWxkQ29tYmluZSA9IGZhbHNlO1xuICAgIHZhciBzaG91bGRDb21iaW5lTmV4dCA9IGZhbHNlO1xuICAgIHZhciBjdXJyZW50Q2hhcnMgPSAnJztcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBzaG91bGRDb21iaW5lID0gc2hvdWxkQ29tYmluZU5leHQ7XG4gICAgICBzaG91bGRDb21iaW5lTmV4dCA9IGZhbHNlO1xuICAgICAgY2hhckNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgICBjdXJyZW50Q2hhcnMgPSB0ZXh0LmNoYXJBdChpKTtcblxuICAgICAgaWYgKEZvbnRNYW5hZ2VyLmlzQ29tYmluZWRDaGFyYWN0ZXIoY2hhckNvZGUpKSB7XG4gICAgICAgIHNob3VsZENvbWJpbmUgPSB0cnVlOyAvLyBJdCdzIGEgcG90ZW50aWFsIHN1cnJvZ2F0ZSBwYWlyICh0aGlzIGlzIHRoZSBIaWdoIHN1cnJvZ2F0ZSlcbiAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikge1xuICAgICAgICBpZiAoRm9udE1hbmFnZXIuaXNSZWdpb25hbEZsYWcodGV4dCwgaSkpIHtcbiAgICAgICAgICBjdXJyZW50Q2hhcnMgPSB0ZXh0LnN1YnN0cihpLCAxNCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2Vjb25kQ2hhckNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQoaSArIDEpOyAvLyBJdCdzIGEgc3Vycm9nYXRlIHBhaXIgKHRoaXMgaXMgdGhlIExvdyBzdXJyb2dhdGUpXG5cbiAgICAgICAgICBpZiAoc2Vjb25kQ2hhckNvZGUgPj0gMHhEQzAwICYmIHNlY29uZENoYXJDb2RlIDw9IDB4REZGRikge1xuICAgICAgICAgICAgaWYgKEZvbnRNYW5hZ2VyLmlzTW9kaWZpZXIoY2hhckNvZGUsIHNlY29uZENoYXJDb2RlKSkge1xuICAgICAgICAgICAgICBjdXJyZW50Q2hhcnMgPSB0ZXh0LnN1YnN0cihpLCAyKTtcbiAgICAgICAgICAgICAgc2hvdWxkQ29tYmluZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEZvbnRNYW5hZ2VyLmlzRmxhZ0Vtb2ppKHRleHQuc3Vic3RyKGksIDQpKSkge1xuICAgICAgICAgICAgICBjdXJyZW50Q2hhcnMgPSB0ZXh0LnN1YnN0cihpLCA0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuc3Vic3RyKGksIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA+IDB4REJGRikge1xuICAgICAgICBzZWNvbmRDaGFyQ29kZSA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7XG5cbiAgICAgICAgaWYgKEZvbnRNYW5hZ2VyLmlzVmFyaWF0aW9uU2VsZWN0b3IoY2hhckNvZGUpKSB7XG4gICAgICAgICAgc2hvdWxkQ29tYmluZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoRm9udE1hbmFnZXIuaXNaZXJvV2lkdGhKb2luZXIoY2hhckNvZGUpKSB7XG4gICAgICAgIHNob3VsZENvbWJpbmUgPSB0cnVlO1xuICAgICAgICBzaG91bGRDb21iaW5lTmV4dCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG91bGRDb21iaW5lKSB7XG4gICAgICAgIGNoYXJhY3RlcnNBcnJheVtjaGFyYWN0ZXJzQXJyYXkubGVuZ3RoIC0gMV0gKz0gY3VycmVudENoYXJzO1xuICAgICAgICBzaG91bGRDb21iaW5lID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFyYWN0ZXJzQXJyYXkucHVzaChjdXJyZW50Q2hhcnMpO1xuICAgICAgfVxuXG4gICAgICBpICs9IGN1cnJlbnRDaGFycy5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYXJhY3RlcnNBcnJheTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmNvbXBsZXRlVGV4dERhdGEgPSBmdW5jdGlvbiAoZG9jdW1lbnREYXRhKSB7XG4gICAgZG9jdW1lbnREYXRhLl9fY29tcGxldGUgPSB0cnVlO1xuICAgIHZhciBmb250TWFuYWdlciA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyO1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgIHZhciBsZXR0ZXJzID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgbmV3TGluZUZsYWc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgdmFsO1xuICAgIHZhciBhbmNob3JHcm91cGluZyA9IGRhdGEubS5nO1xuICAgIHZhciBjdXJyZW50U2l6ZSA9IDA7XG4gICAgdmFyIGN1cnJlbnRQb3MgPSAwO1xuICAgIHZhciBjdXJyZW50TGluZSA9IDA7XG4gICAgdmFyIGxpbmVXaWR0aHMgPSBbXTtcbiAgICB2YXIgbGluZVdpZHRoID0gMDtcbiAgICB2YXIgbWF4TGluZVdpZHRoID0gMDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgZm9udERhdGEgPSBmb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKTtcbiAgICB2YXIgY2hhckRhdGE7XG4gICAgdmFyIGNMZW5ndGggPSAwO1xuICAgIHZhciBmb250UHJvcHMgPSBnZXRGb250UHJvcGVydGllcyhmb250RGF0YSk7XG4gICAgZG9jdW1lbnREYXRhLmZXZWlnaHQgPSBmb250UHJvcHMud2VpZ2h0O1xuICAgIGRvY3VtZW50RGF0YS5mU3R5bGUgPSBmb250UHJvcHMuc3R5bGU7XG4gICAgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSA9IGRvY3VtZW50RGF0YS5zO1xuICAgIGRvY3VtZW50RGF0YS5maW5hbFRleHQgPSB0aGlzLmJ1aWxkRmluYWxUZXh0KGRvY3VtZW50RGF0YS50KTtcbiAgICBsZW4gPSBkb2N1bWVudERhdGEuZmluYWxUZXh0Lmxlbmd0aDtcbiAgICBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0ID0gZG9jdW1lbnREYXRhLmxoO1xuICAgIHZhciB0cmFja2luZ09mZnNldCA9IGRvY3VtZW50RGF0YS50ciAvIDEwMDAgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgIHZhciBjaGFyQ29kZTtcblxuICAgIGlmIChkb2N1bWVudERhdGEuc3opIHtcbiAgICAgIHZhciBmbGFnID0gdHJ1ZTtcbiAgICAgIHZhciBib3hXaWR0aCA9IGRvY3VtZW50RGF0YS5zelswXTtcbiAgICAgIHZhciBib3hIZWlnaHQgPSBkb2N1bWVudERhdGEuc3pbMV07XG4gICAgICB2YXIgY3VycmVudEhlaWdodDtcbiAgICAgIHZhciBmaW5hbFRleHQ7XG5cbiAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgIGZpbmFsVGV4dCA9IHRoaXMuYnVpbGRGaW5hbFRleHQoZG9jdW1lbnREYXRhLnQpO1xuICAgICAgICBjdXJyZW50SGVpZ2h0ID0gMDtcbiAgICAgICAgbGluZVdpZHRoID0gMDtcbiAgICAgICAgbGVuID0gZmluYWxUZXh0Lmxlbmd0aDtcbiAgICAgICAgdHJhY2tpbmdPZmZzZXQgPSBkb2N1bWVudERhdGEudHIgLyAxMDAwICogZG9jdW1lbnREYXRhLmZpbmFsU2l6ZTtcbiAgICAgICAgdmFyIGxhc3RTcGFjZUluZGV4ID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgY2hhckNvZGUgPSBmaW5hbFRleHRbaV0uY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICBuZXdMaW5lRmxhZyA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGZpbmFsVGV4dFtpXSA9PT0gJyAnKSB7XG4gICAgICAgICAgICBsYXN0U3BhY2VJbmRleCA9IGk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA9PT0gMTMgfHwgY2hhckNvZGUgPT09IDMpIHtcbiAgICAgICAgICAgIGxpbmVXaWR0aCA9IDA7XG4gICAgICAgICAgICBuZXdMaW5lRmxhZyA9IHRydWU7XG4gICAgICAgICAgICBjdXJyZW50SGVpZ2h0ICs9IGRvY3VtZW50RGF0YS5maW5hbExpbmVIZWlnaHQgfHwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAqIDEuMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgICAgICAgIGNoYXJEYXRhID0gZm9udE1hbmFnZXIuZ2V0Q2hhckRhdGEoZmluYWxUZXh0W2ldLCBmb250RGF0YS5mU3R5bGUsIGZvbnREYXRhLmZGYW1pbHkpO1xuICAgICAgICAgICAgY0xlbmd0aCA9IG5ld0xpbmVGbGFnID8gMCA6IGNoYXJEYXRhLncgKiBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0Q2FudmFzSGVscGVyLmZvbnQgPSBkb2N1bWVudERhdGEucyArICdweCAnKyBmb250RGF0YS5mRmFtaWx5O1xuICAgICAgICAgICAgY0xlbmd0aCA9IGZvbnRNYW5hZ2VyLm1lYXN1cmVUZXh0KGZpbmFsVGV4dFtpXSwgZG9jdW1lbnREYXRhLmYsIGRvY3VtZW50RGF0YS5maW5hbFNpemUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsaW5lV2lkdGggKyBjTGVuZ3RoID4gYm94V2lkdGggJiYgZmluYWxUZXh0W2ldICE9PSAnICcpIHtcbiAgICAgICAgICAgIGlmIChsYXN0U3BhY2VJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgbGVuICs9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpID0gbGFzdFNwYWNlSW5kZXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgKz0gZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodCB8fCBkb2N1bWVudERhdGEuZmluYWxTaXplICogMS4yO1xuICAgICAgICAgICAgZmluYWxUZXh0LnNwbGljZShpLCBsYXN0U3BhY2VJbmRleCA9PT0gaSA/IDEgOiAwLCAnXFxyJyk7IC8vIGZpbmFsVGV4dCA9IGZpbmFsVGV4dC5zdWJzdHIoMCxpKSArIFwiXFxyXCIgKyBmaW5hbFRleHQuc3Vic3RyKGkgPT09IGxhc3RTcGFjZUluZGV4ID8gaSArIDEgOiBpKTtcblxuICAgICAgICAgICAgbGFzdFNwYWNlSW5kZXggPSAtMTtcbiAgICAgICAgICAgIGxpbmVXaWR0aCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVXaWR0aCArPSBjTGVuZ3RoO1xuICAgICAgICAgICAgbGluZVdpZHRoICs9IHRyYWNraW5nT2Zmc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRIZWlnaHQgKz0gZm9udERhdGEuYXNjZW50ICogZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMDtcblxuICAgICAgICBpZiAodGhpcy5jYW5SZXNpemUgJiYgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSA+IHRoaXMubWluaW11bUZvbnRTaXplICYmIGJveEhlaWdodCA8IGN1cnJlbnRIZWlnaHQpIHtcbiAgICAgICAgICBkb2N1bWVudERhdGEuZmluYWxTaXplIC09IDE7XG4gICAgICAgICAgZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodCA9IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKiBkb2N1bWVudERhdGEubGggLyBkb2N1bWVudERhdGEucztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb2N1bWVudERhdGEuZmluYWxUZXh0ID0gZmluYWxUZXh0O1xuICAgICAgICAgIGxlbiA9IGRvY3VtZW50RGF0YS5maW5hbFRleHQubGVuZ3RoO1xuICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxpbmVXaWR0aCA9IC10cmFja2luZ09mZnNldDtcbiAgICBjTGVuZ3RoID0gMDtcbiAgICB2YXIgdW5jb2xsYXBzZWRTcGFjZXMgPSAwO1xuICAgIHZhciBjdXJyZW50Q2hhcjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgbmV3TGluZUZsYWcgPSBmYWxzZTtcbiAgICAgIGN1cnJlbnRDaGFyID0gZG9jdW1lbnREYXRhLmZpbmFsVGV4dFtpXTtcbiAgICAgIGNoYXJDb2RlID0gY3VycmVudENoYXIuY2hhckNvZGVBdCgwKTtcblxuICAgICAgaWYgKGNoYXJDb2RlID09PSAxMyB8fCBjaGFyQ29kZSA9PT0gMykge1xuICAgICAgICB1bmNvbGxhcHNlZFNwYWNlcyA9IDA7XG4gICAgICAgIGxpbmVXaWR0aHMucHVzaChsaW5lV2lkdGgpO1xuICAgICAgICBtYXhMaW5lV2lkdGggPSBsaW5lV2lkdGggPiBtYXhMaW5lV2lkdGggPyBsaW5lV2lkdGggOiBtYXhMaW5lV2lkdGg7XG4gICAgICAgIGxpbmVXaWR0aCA9IC0yICogdHJhY2tpbmdPZmZzZXQ7XG4gICAgICAgIHZhbCA9ICcnO1xuICAgICAgICBuZXdMaW5lRmxhZyA9IHRydWU7XG4gICAgICAgIGN1cnJlbnRMaW5lICs9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBjdXJyZW50Q2hhcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvbnRNYW5hZ2VyLmNoYXJzKSB7XG4gICAgICAgIGNoYXJEYXRhID0gZm9udE1hbmFnZXIuZ2V0Q2hhckRhdGEoY3VycmVudENoYXIsIGZvbnREYXRhLmZTdHlsZSwgZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZikuZkZhbWlseSk7XG4gICAgICAgIGNMZW5ndGggPSBuZXdMaW5lRmxhZyA/IDAgOiBjaGFyRGF0YS53ICogZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHZhciBjaGFyV2lkdGggPSBmb250TWFuYWdlci5tZWFzdXJlVGV4dCh2YWwsIGRvY3VtZW50RGF0YS5mLCBkb2N1bWVudERhdGEuZmluYWxTaXplKTtcbiAgICAgICAgLy8gdENhbnZhc0hlbHBlci5mb250ID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSArICdweCAnKyBmb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5O1xuICAgICAgICBjTGVuZ3RoID0gZm9udE1hbmFnZXIubWVhc3VyZVRleHQodmFsLCBkb2N1bWVudERhdGEuZiwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4gICAgICB9IC8vXG5cblxuICAgICAgaWYgKGN1cnJlbnRDaGFyID09PSAnICcpIHtcbiAgICAgICAgdW5jb2xsYXBzZWRTcGFjZXMgKz0gY0xlbmd0aCArIHRyYWNraW5nT2Zmc2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZVdpZHRoICs9IGNMZW5ndGggKyB0cmFja2luZ09mZnNldCArIHVuY29sbGFwc2VkU3BhY2VzO1xuICAgICAgICB1bmNvbGxhcHNlZFNwYWNlcyA9IDA7XG4gICAgICB9XG5cbiAgICAgIGxldHRlcnMucHVzaCh7XG4gICAgICAgIGw6IGNMZW5ndGgsXG4gICAgICAgIGFuOiBjTGVuZ3RoLFxuICAgICAgICBhZGQ6IGN1cnJlbnRTaXplLFxuICAgICAgICBuOiBuZXdMaW5lRmxhZyxcbiAgICAgICAgYW5JbmRleGVzOiBbXSxcbiAgICAgICAgdmFsOiB2YWwsXG4gICAgICAgIGxpbmU6IGN1cnJlbnRMaW5lLFxuICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQ6IDBcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYW5jaG9yR3JvdXBpbmcgPT0gMikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICBjdXJyZW50U2l6ZSArPSBjTGVuZ3RoO1xuXG4gICAgICAgIGlmICh2YWwgPT09ICcnIHx8IHZhbCA9PT0gJyAnIHx8IGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgICBpZiAodmFsID09PSAnJyB8fCB2YWwgPT09ICcgJykge1xuICAgICAgICAgICAgY3VycmVudFNpemUgLT0gY0xlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aGlsZSAoY3VycmVudFBvcyA8PSBpKSB7XG4gICAgICAgICAgICBsZXR0ZXJzW2N1cnJlbnRQb3NdLmFuID0gY3VycmVudFNpemU7XG4gICAgICAgICAgICBsZXR0ZXJzW2N1cnJlbnRQb3NdLmluZCA9IGluZGV4O1xuICAgICAgICAgICAgbGV0dGVyc1tjdXJyZW50UG9zXS5leHRyYSA9IGNMZW5ndGg7XG4gICAgICAgICAgICBjdXJyZW50UG9zICs9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgICBjdXJyZW50U2l6ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYW5jaG9yR3JvdXBpbmcgPT0gMykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICBjdXJyZW50U2l6ZSArPSBjTGVuZ3RoO1xuXG4gICAgICAgIGlmICh2YWwgPT09ICcnIHx8IGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgICBpZiAodmFsID09PSAnJykge1xuICAgICAgICAgICAgY3VycmVudFNpemUgLT0gY0xlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aGlsZSAoY3VycmVudFBvcyA8PSBpKSB7XG4gICAgICAgICAgICBsZXR0ZXJzW2N1cnJlbnRQb3NdLmFuID0gY3VycmVudFNpemU7XG4gICAgICAgICAgICBsZXR0ZXJzW2N1cnJlbnRQb3NdLmluZCA9IGluZGV4O1xuICAgICAgICAgICAgbGV0dGVyc1tjdXJyZW50UG9zXS5leHRyYSA9IGNMZW5ndGg7XG4gICAgICAgICAgICBjdXJyZW50UG9zICs9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudFNpemUgPSAwO1xuICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldHRlcnNbaW5kZXhdLmluZCA9IGluZGV4O1xuICAgICAgICBsZXR0ZXJzW2luZGV4XS5leHRyYSA9IDA7XG4gICAgICAgIGluZGV4ICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZG9jdW1lbnREYXRhLmwgPSBsZXR0ZXJzO1xuICAgIG1heExpbmVXaWR0aCA9IGxpbmVXaWR0aCA+IG1heExpbmVXaWR0aCA/IGxpbmVXaWR0aCA6IG1heExpbmVXaWR0aDtcbiAgICBsaW5lV2lkdGhzLnB1c2gobGluZVdpZHRoKTtcblxuICAgIGlmIChkb2N1bWVudERhdGEuc3opIHtcbiAgICAgIGRvY3VtZW50RGF0YS5ib3hXaWR0aCA9IGRvY3VtZW50RGF0YS5zelswXTtcbiAgICAgIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnREYXRhLmJveFdpZHRoID0gbWF4TGluZVdpZHRoO1xuXG4gICAgICBzd2l0Y2ggKGRvY3VtZW50RGF0YS5qKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldCA9IC1kb2N1bWVudERhdGEuYm94V2lkdGg7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ID0gLWRvY3VtZW50RGF0YS5ib3hXaWR0aCAvIDI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldCA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZG9jdW1lbnREYXRhLmxpbmVXaWR0aHMgPSBsaW5lV2lkdGhzO1xuICAgIHZhciBhbmltYXRvcnMgPSBkYXRhLmE7XG4gICAgdmFyIGFuaW1hdG9yRGF0YTtcbiAgICB2YXIgbGV0dGVyRGF0YTtcbiAgICBqTGVuID0gYW5pbWF0b3JzLmxlbmd0aDtcbiAgICB2YXIgYmFzZWQ7XG4gICAgdmFyIGluZDtcbiAgICB2YXIgaW5kZXhlcyA9IFtdO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgYW5pbWF0b3JEYXRhID0gYW5pbWF0b3JzW2pdO1xuXG4gICAgICBpZiAoYW5pbWF0b3JEYXRhLmEuc2MpIHtcbiAgICAgICAgZG9jdW1lbnREYXRhLnN0cm9rZUNvbG9yQW5pbSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRvckRhdGEuYS5zdykge1xuICAgICAgICBkb2N1bWVudERhdGEuc3Ryb2tlV2lkdGhBbmltID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdG9yRGF0YS5hLmZjIHx8IGFuaW1hdG9yRGF0YS5hLmZoIHx8IGFuaW1hdG9yRGF0YS5hLmZzIHx8IGFuaW1hdG9yRGF0YS5hLmZiKSB7XG4gICAgICAgIGRvY3VtZW50RGF0YS5maWxsQ29sb3JBbmltID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5kID0gMDtcbiAgICAgIGJhc2VkID0gYW5pbWF0b3JEYXRhLnMuYjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGxldHRlckRhdGEgPSBsZXR0ZXJzW2ldO1xuICAgICAgICBsZXR0ZXJEYXRhLmFuSW5kZXhlc1tqXSA9IGluZDtcblxuICAgICAgICBpZiAoYmFzZWQgPT0gMSAmJiBsZXR0ZXJEYXRhLnZhbCAhPT0gJycgfHwgYmFzZWQgPT0gMiAmJiBsZXR0ZXJEYXRhLnZhbCAhPT0gJycgJiYgbGV0dGVyRGF0YS52YWwgIT09ICcgJyB8fCBiYXNlZCA9PSAzICYmIChsZXR0ZXJEYXRhLm4gfHwgbGV0dGVyRGF0YS52YWwgPT0gJyAnIHx8IGkgPT0gbGVuIC0gMSkgfHwgYmFzZWQgPT0gNCAmJiAobGV0dGVyRGF0YS5uIHx8IGkgPT0gbGVuIC0gMSkpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICAgIGlmIChhbmltYXRvckRhdGEucy5ybiA9PT0gMSkge1xuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGluZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5kICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGF0YS5hW2pdLnMudG90YWxDaGFycyA9IGluZDtcbiAgICAgIHZhciBjdXJyZW50SW5kID0gLTE7XG4gICAgICB2YXIgbmV3SW5kO1xuXG4gICAgICBpZiAoYW5pbWF0b3JEYXRhLnMucm4gPT09IDEpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgbGV0dGVyRGF0YSA9IGxldHRlcnNbaV07XG5cbiAgICAgICAgICBpZiAoY3VycmVudEluZCAhPSBsZXR0ZXJEYXRhLmFuSW5kZXhlc1tqXSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgICAgIGN1cnJlbnRJbmQgPSBsZXR0ZXJEYXRhLmFuSW5kZXhlc1tqXTtcbiAgICAgICAgICAgIG5ld0luZCA9IGluZGV4ZXMuc3BsaWNlKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGluZGV4ZXMubGVuZ3RoKSwgMSlbMF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGV0dGVyRGF0YS5hbkluZGV4ZXNbal0gPSBuZXdJbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBkb2N1bWVudERhdGEueU9mZnNldCA9IGRvY3VtZW50RGF0YS5maW5hbExpbmVIZWlnaHQgfHwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAqIDEuMjtcbiAgICBkb2N1bWVudERhdGEubHMgPSBkb2N1bWVudERhdGEubHMgfHwgMDtcbiAgICBkb2N1bWVudERhdGEuYXNjZW50ID0gZm9udERhdGEuYXNjZW50ICogZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMDtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnVwZGF0ZURvY3VtZW50RGF0YSA9IGZ1bmN0aW9uIChuZXdEYXRhLCBpbmRleCkge1xuICAgIGluZGV4ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMua2V5c0luZGV4IDogaW5kZXg7XG4gICAgdmFyIGREYXRhID0gdGhpcy5jb3B5RGF0YSh7fSwgdGhpcy5kYXRhLmQua1tpbmRleF0ucyk7XG4gICAgZERhdGEgPSB0aGlzLmNvcHlEYXRhKGREYXRhLCBuZXdEYXRhKTtcbiAgICB0aGlzLmRhdGEuZC5rW2luZGV4XS5zID0gZERhdGE7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZShpbmRleCk7XG4gICAgdGhpcy5zZXRDdXJyZW50RGF0YShkRGF0YSk7XG4gICAgdGhpcy5lbGVtLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnJlY2FsY3VsYXRlID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgdmFyIGREYXRhID0gdGhpcy5kYXRhLmQua1tpbmRleF0ucztcbiAgICBkRGF0YS5fX2NvbXBsZXRlID0gZmFsc2U7XG4gICAgdGhpcy5rZXlzSW5kZXggPSAwO1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdGhpcy5nZXRWYWx1ZShkRGF0YSk7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5jYW5SZXNpemVGb250ID0gZnVuY3Rpb24gKF9jYW5SZXNpemUpIHtcbiAgICB0aGlzLmNhblJlc2l6ZSA9IF9jYW5SZXNpemU7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZSh0aGlzLmtleXNJbmRleCk7XG4gICAgdGhpcy5lbGVtLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnNldE1pbmltdW1Gb250U2l6ZSA9IGZ1bmN0aW9uIChfZm9udFZhbHVlKSB7XG4gICAgdGhpcy5taW5pbXVtRm9udFNpemUgPSBNYXRoLmZsb29yKF9mb250VmFsdWUpIHx8IDE7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZSh0aGlzLmtleXNJbmRleCk7XG4gICAgdGhpcy5lbGVtLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgfTtcblxuICB2YXIgVGV4dFNlbGVjdG9yUHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXg7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluO1xuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbiAgICBmdW5jdGlvbiBUZXh0U2VsZWN0b3JQcm9wRmFjdG9yeShlbGVtLCBkYXRhKSB7XG4gICAgICB0aGlzLl9jdXJyZW50VGV4dExlbmd0aCA9IC0xO1xuICAgICAgdGhpcy5rID0gZmFsc2U7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICAgIHRoaXMuZmluYWxTID0gMDtcbiAgICAgIHRoaXMuZmluYWxFID0gMDtcbiAgICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICAgIHRoaXMucyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucyB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIDAsIHRoaXMpO1xuXG4gICAgICBpZiAoJ2UnIGluIGRhdGEpIHtcbiAgICAgICAgdGhpcy5lID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5lLCAwLCAwLCB0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZSA9IHtcbiAgICAgICAgICB2OiAxMDBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vIHx8IHtcbiAgICAgICAgazogMFxuICAgICAgfSwgMCwgMCwgdGhpcyk7XG4gICAgICB0aGlzLnhlID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS54ZSB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5uZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubmUgfHwge1xuICAgICAgICBrOiAwXG4gICAgICB9LCAwLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMuc20gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnNtIHx8IHtcbiAgICAgICAgazogMTAwXG4gICAgICB9LCAwLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMuYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYSwgMCwgMC4wMSwgdGhpcyk7XG5cbiAgICAgIGlmICghdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFRleHRTZWxlY3RvclByb3BGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgIGdldE11bHQ6IGZ1bmN0aW9uIGdldE11bHQoaW5kKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50VGV4dExlbmd0aCAhPT0gdGhpcy5lbGVtLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB4MSA9IDA7XG4gICAgICAgIHZhciB5MSA9IDA7XG4gICAgICAgIHZhciB4MiA9IDE7XG4gICAgICAgIHZhciB5MiA9IDE7XG5cbiAgICAgICAgaWYgKHRoaXMubmUudiA+IDApIHtcbiAgICAgICAgICB4MSA9IHRoaXMubmUudiAvIDEwMC4wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHkxID0gLXRoaXMubmUudiAvIDEwMC4wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMueGUudiA+IDApIHtcbiAgICAgICAgICB4MiA9IDEuMCAtIHRoaXMueGUudiAvIDEwMC4wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHkyID0gMS4wICsgdGhpcy54ZS52IC8gMTAwLjA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWFzZXIgPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyh4MSwgeTEsIHgyLCB5MikuZ2V0O1xuICAgICAgICB2YXIgbXVsdCA9IDA7XG4gICAgICAgIHZhciBzID0gdGhpcy5maW5hbFM7XG4gICAgICAgIHZhciBlID0gdGhpcy5maW5hbEU7XG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5kYXRhLnNoO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAyKSB7XG4gICAgICAgICAgaWYgKGUgPT09IHMpIHtcbiAgICAgICAgICAgIG11bHQgPSBpbmQgPj0gZSA/IDEgOiAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtdWx0ID0gbWF4KDAsIG1pbigwLjUgLyAoZSAtIHMpICsgKGluZCAtIHMpIC8gKGUgLSBzKSwgMSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHQgPSBlYXNlcihtdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAzKSB7XG4gICAgICAgICAgaWYgKGUgPT09IHMpIHtcbiAgICAgICAgICAgIG11bHQgPSBpbmQgPj0gZSA/IDAgOiAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtdWx0ID0gMSAtIG1heCgwLCBtaW4oMC41IC8gKGUgLSBzKSArIChpbmQgLSBzKSAvIChlIC0gcyksIDEpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0ID0gZWFzZXIobXVsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNCkge1xuICAgICAgICAgIGlmIChlID09PSBzKSB7XG4gICAgICAgICAgICBtdWx0ID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbXVsdCA9IG1heCgwLCBtaW4oMC41IC8gKGUgLSBzKSArIChpbmQgLSBzKSAvIChlIC0gcyksIDEpKTtcblxuICAgICAgICAgICAgaWYgKG11bHQgPCAwLjUpIHtcbiAgICAgICAgICAgICAgbXVsdCAqPSAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbXVsdCA9IDEgLSAyICogKG11bHQgLSAwLjUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHQgPSBlYXNlcihtdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA1KSB7XG4gICAgICAgICAgaWYgKGUgPT09IHMpIHtcbiAgICAgICAgICAgIG11bHQgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdG90ID0gZSAtIHM7XG4gICAgICAgICAgICAvKiBpbmQgKz0gMC41O1xuICAgICAgICAgICAgICAgICAgICAgIG11bHQgPSAtNC8odG90KnRvdCkqKGluZCppbmQpKyg0L3RvdCkqaW5kOyAqL1xuXG4gICAgICAgICAgICBpbmQgPSBtaW4obWF4KDAsIGluZCArIDAuNSAtIHMpLCBlIC0gcyk7XG4gICAgICAgICAgICB2YXIgeCA9IC10b3QgLyAyICsgaW5kO1xuICAgICAgICAgICAgdmFyIGEgPSB0b3QgLyAyO1xuICAgICAgICAgICAgbXVsdCA9IE1hdGguc3FydCgxIC0geCAqIHggLyAoYSAqIGEpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0ID0gZWFzZXIobXVsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNikge1xuICAgICAgICAgIGlmIChlID09PSBzKSB7XG4gICAgICAgICAgICBtdWx0ID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kID0gbWluKG1heCgwLCBpbmQgKyAwLjUgLSBzKSwgZSAtIHMpO1xuICAgICAgICAgICAgbXVsdCA9ICgxICsgTWF0aC5jb3MoTWF0aC5QSSArIE1hdGguUEkgKiAyICogaW5kIC8gKGUgLSBzKSkpIC8gMjsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHQgPSBlYXNlcihtdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW5kID49IGZsb29yKHMpKSB7XG4gICAgICAgICAgICBpZiAoaW5kIC0gcyA8IDApIHtcbiAgICAgICAgICAgICAgbXVsdCA9IG1heCgwLCBtaW4obWluKGUsIDEpIC0gKHMgLSBpbmQpLCAxKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtdWx0ID0gbWF4KDAsIG1pbihlIC0gaW5kLCAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IC8vIFNtb290aG5lc3MgaW1wbGVtZW50YXRpb24uXG4gICAgICAgIC8vIFRoZSBzbW9vdGhuZXNzIHJlcHJlc2VudHMgYSByZWR1Y2VkIHJhbmdlIG9mIHRoZSBvcmlnaW5hbCBbMDsgMV0gcmFuZ2UuXG4gICAgICAgIC8vIGlmIHNtb290aG5lc3MgaXMgMjUlLCB0aGUgbmV3IHJhbmdlIHdpbGwgYmUgWzAuMzc1OyAwLjYyNV1cbiAgICAgICAgLy8gU3RlcHMgYXJlOlxuICAgICAgICAvLyAtIGZpbmQgdGhlIGxvd2VyIHZhbHVlIG9mIHRoZSBuZXcgcmFuZ2UgKHRocmVzaG9sZClcbiAgICAgICAgLy8gLSBpZiBtdWx0aXBsaWVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0IHZhbHVlLCBmbG9vciBpdCB0byAwXG4gICAgICAgIC8vIC0gaWYgaXQgaXMgbGFyZ2VyLFxuICAgICAgICAvLyAgICAgLSBzdWJ0cmFjdCB0aGUgdGhyZXNob2xkXG4gICAgICAgIC8vICAgICAtIGRpdmlkZSBpdCBieSB0aGUgc21vb3RobmVzcyAodGhpcyB3aWxsIHJldHVybiB0aGUgcmFuZ2UgdG8gWzA7IDFdKVxuICAgICAgICAvLyBOb3RlOiBJZiBpdCBkb2Vzbid0IHdvcmsgb24gc29tZSBzY2VuYXJpb3MsIGNvbnNpZGVyIGFwcGx5aW5nIGl0IGJlZm9yZSB0aGUgZWFzZXIuXG5cblxuICAgICAgICBpZiAodGhpcy5zbS52ICE9PSAxMDApIHtcbiAgICAgICAgICB2YXIgc21vb3RobmVzcyA9IHRoaXMuc20udiAqIDAuMDE7XG5cbiAgICAgICAgICBpZiAoc21vb3RobmVzcyA9PT0gMCkge1xuICAgICAgICAgICAgc21vb3RobmVzcyA9IDAuMDAwMDAwMDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHRocmVzaG9sZCA9IDAuNSAtIHNtb290aG5lc3MgKiAwLjU7XG5cbiAgICAgICAgICBpZiAobXVsdCA8IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgbXVsdCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHQgPSAobXVsdCAtIHRocmVzaG9sZCkgLyBzbW9vdGhuZXNzO1xuXG4gICAgICAgICAgICBpZiAobXVsdCA+IDEpIHtcbiAgICAgICAgICAgICAgbXVsdCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG11bHQgKiB0aGlzLmEudjtcbiAgICAgIH0sXG4gICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUobmV3Q2hhcnNGbGFnKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG4gICAgICAgIHRoaXMuX21kZiA9IG5ld0NoYXJzRmxhZyB8fCB0aGlzLl9tZGY7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUZXh0TGVuZ3RoID0gdGhpcy5lbGVtLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sLmxlbmd0aCB8fCAwO1xuXG4gICAgICAgIGlmIChuZXdDaGFyc0ZsYWcgJiYgdGhpcy5kYXRhLnIgPT09IDIpIHtcbiAgICAgICAgICB0aGlzLmUudiA9IHRoaXMuX2N1cnJlbnRUZXh0TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpdmlzb3IgPSB0aGlzLmRhdGEuciA9PT0gMiA/IDEgOiAxMDAgLyB0aGlzLmRhdGEudG90YWxDaGFycztcbiAgICAgICAgdmFyIG8gPSB0aGlzLm8udiAvIGRpdmlzb3I7XG4gICAgICAgIHZhciBzID0gdGhpcy5zLnYgLyBkaXZpc29yICsgbztcbiAgICAgICAgdmFyIGUgPSB0aGlzLmUudiAvIGRpdmlzb3IgKyBvO1xuXG4gICAgICAgIGlmIChzID4gZSkge1xuICAgICAgICAgIHZhciBfcyA9IHM7XG4gICAgICAgICAgcyA9IGU7XG4gICAgICAgICAgZSA9IF9zO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maW5hbFMgPSBzO1xuICAgICAgICB0aGlzLmZpbmFsRSA9IGU7XG4gICAgICB9XG4gICAgfTtcbiAgICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFRleHRTZWxlY3RvclByb3BGYWN0b3J5KTtcblxuICAgIGZ1bmN0aW9uIGdldFRleHRTZWxlY3RvclByb3AoZWxlbSwgZGF0YSwgYXJyKSB7XG4gICAgICByZXR1cm4gbmV3IFRleHRTZWxlY3RvclByb3BGYWN0b3J5KGVsZW0sIGRhdGEsIGFycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFRleHRTZWxlY3RvclByb3A6IGdldFRleHRTZWxlY3RvclByb3BcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gVGV4dEFuaW1hdG9yRGF0YVByb3BlcnR5KGVsZW0sIGFuaW1hdG9yUHJvcHMsIGNvbnRhaW5lcikge1xuICAgIHZhciBkZWZhdWx0RGF0YSA9IHtcbiAgICAgIHByb3BUeXBlOiBmYWxzZVxuICAgIH07XG4gICAgdmFyIGdldFByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcDtcbiAgICB2YXIgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMgPSBhbmltYXRvclByb3BzLmE7XG4gICAgdGhpcy5hID0ge1xuICAgICAgcjogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuciA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuciwgMCwgZGVnVG9SYWRzLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICByeDogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucnggPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnJ4LCAwLCBkZWdUb1JhZHMsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHJ5OiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5yeSA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucnksIDAsIGRlZ1RvUmFkcywgY29udGFpbmVyKSA6IGRlZmF1bHREYXRhLFxuICAgICAgc2s6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNrID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zaywgMCwgZGVnVG9SYWRzLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBzYTogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2EgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNhLCAwLCBkZWdUb1JhZHMsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHM6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnMgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnMsIDEsIDAuMDEsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGE6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLmEgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmEsIDEsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIG86IHRleHRBbmltYXRvckFuaW1hdGFibGVzLm8gPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLm8sIDAsIDAuMDEsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHA6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnAgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnAsIDEsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHN3OiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zdyA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc3csIDAsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHNjOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zYyA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2MsIDEsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGZjOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5mYyA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmMsIDEsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGZoOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5maCA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmgsIDAsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGZzOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5mcyA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZnMsIDAsIDAuMDEsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGZiOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5mYiA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmIsIDAsIDAuMDEsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHQ6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnQgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnQsIDAsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YVxuICAgIH07XG4gICAgdGhpcy5zID0gVGV4dFNlbGVjdG9yUHJvcC5nZXRUZXh0U2VsZWN0b3JQcm9wKGVsZW0sIGFuaW1hdG9yUHJvcHMucywgY29udGFpbmVyKTtcbiAgICB0aGlzLnMudCA9IGFuaW1hdG9yUHJvcHMucy50O1xuICB9XG5cbiAgZnVuY3Rpb24gVGV4dEFuaW1hdG9yUHJvcGVydHkodGV4dERhdGEsIHJlbmRlclR5cGUsIGVsZW0pIHtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMuX2hhc01hc2tlZFBhdGggPSBmYWxzZTtcbiAgICB0aGlzLl9mcmFtZUlkID0gLTE7XG4gICAgdGhpcy5fdGV4dERhdGEgPSB0ZXh0RGF0YTtcbiAgICB0aGlzLl9yZW5kZXJUeXBlID0gcmVuZGVyVHlwZTtcbiAgICB0aGlzLl9lbGVtID0gZWxlbTtcbiAgICB0aGlzLl9hbmltYXRvcnNEYXRhID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl90ZXh0RGF0YS5hLmxlbmd0aCk7XG4gICAgdGhpcy5fcGF0aERhdGEgPSB7fTtcbiAgICB0aGlzLl9tb3JlT3B0aW9ucyA9IHtcbiAgICAgIGFsaWdubWVudDoge31cbiAgICB9O1xuICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzID0gW107XG4gICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSBmYWxzZTtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gIH1cblxuICBUZXh0QW5pbWF0b3JQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5fdGV4dERhdGEuYS5sZW5ndGg7XG4gICAgdmFyIGFuaW1hdG9yUHJvcHM7XG4gICAgdmFyIGdldFByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgYW5pbWF0b3JQcm9wcyA9IHRoaXMuX3RleHREYXRhLmFbaV07XG4gICAgICB0aGlzLl9hbmltYXRvcnNEYXRhW2ldID0gbmV3IFRleHRBbmltYXRvckRhdGFQcm9wZXJ0eSh0aGlzLl9lbGVtLCBhbmltYXRvclByb3BzLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdGV4dERhdGEucCAmJiAnbScgaW4gdGhpcy5fdGV4dERhdGEucCkge1xuICAgICAgdGhpcy5fcGF0aERhdGEgPSB7XG4gICAgICAgIGE6IGdldFByb3AodGhpcy5fZWxlbSwgdGhpcy5fdGV4dERhdGEucC5hLCAwLCAwLCB0aGlzKSxcbiAgICAgICAgZjogZ2V0UHJvcCh0aGlzLl9lbGVtLCB0aGlzLl90ZXh0RGF0YS5wLmYsIDAsIDAsIHRoaXMpLFxuICAgICAgICBsOiBnZXRQcm9wKHRoaXMuX2VsZW0sIHRoaXMuX3RleHREYXRhLnAubCwgMCwgMCwgdGhpcyksXG4gICAgICAgIHI6IGdldFByb3AodGhpcy5fZWxlbSwgdGhpcy5fdGV4dERhdGEucC5yLCAwLCAwLCB0aGlzKSxcbiAgICAgICAgcDogZ2V0UHJvcCh0aGlzLl9lbGVtLCB0aGlzLl90ZXh0RGF0YS5wLnAsIDAsIDAsIHRoaXMpLFxuICAgICAgICBtOiB0aGlzLl9lbGVtLm1hc2tNYW5hZ2VyLmdldE1hc2tQcm9wZXJ0eSh0aGlzLl90ZXh0RGF0YS5wLm0pXG4gICAgICB9O1xuICAgICAgdGhpcy5faGFzTWFza2VkUGF0aCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hhc01hc2tlZFBhdGggPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9tb3JlT3B0aW9ucy5hbGlnbm1lbnQgPSBnZXRQcm9wKHRoaXMuX2VsZW0sIHRoaXMuX3RleHREYXRhLm0uYSwgMSwgMCwgdGhpcyk7XG4gIH07XG5cbiAgVGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLmdldE1lYXN1cmVzID0gZnVuY3Rpb24gKGRvY3VtZW50RGF0YSwgbGV0dGVyc0NoYW5nZWRGbGFnKSB7XG4gICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSBsZXR0ZXJzQ2hhbmdlZEZsYWc7XG5cbiAgICBpZiAoIXRoaXMuX21kZiAmJiAhdGhpcy5faXNGaXJzdEZyYW1lICYmICFsZXR0ZXJzQ2hhbmdlZEZsYWcgJiYgKCF0aGlzLl9oYXNNYXNrZWRQYXRoIHx8ICF0aGlzLl9wYXRoRGF0YS5tLl9tZGYpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgdmFyIGFsaWdubWVudCA9IHRoaXMuX21vcmVPcHRpb25zLmFsaWdubWVudC52O1xuICAgIHZhciBhbmltYXRvcnMgPSB0aGlzLl9hbmltYXRvcnNEYXRhO1xuICAgIHZhciB0ZXh0RGF0YSA9IHRoaXMuX3RleHREYXRhO1xuICAgIHZhciBtYXRyaXhIZWxwZXIgPSB0aGlzLm1IZWxwZXI7XG4gICAgdmFyIHJlbmRlclR5cGUgPSB0aGlzLl9yZW5kZXJUeXBlO1xuICAgIHZhciByZW5kZXJlZExldHRlcnNDb3VudCA9IHRoaXMucmVuZGVyZWRMZXR0ZXJzLmxlbmd0aDtcbiAgICB2YXIgeFBvcztcbiAgICB2YXIgeVBvcztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBsZXR0ZXJzID0gZG9jdW1lbnREYXRhLmw7XG4gICAgdmFyIHBhdGhJbmZvO1xuICAgIHZhciBjdXJyZW50TGVuZ3RoO1xuICAgIHZhciBjdXJyZW50UG9pbnQ7XG4gICAgdmFyIHNlZ21lbnRMZW5ndGg7XG4gICAgdmFyIGZsYWc7XG4gICAgdmFyIHBvaW50SW5kO1xuICAgIHZhciBzZWdtZW50SW5kO1xuICAgIHZhciBwcmV2UG9pbnQ7XG4gICAgdmFyIHBvaW50cztcbiAgICB2YXIgc2VnbWVudHM7XG4gICAgdmFyIHBhcnRpYWxMZW5ndGg7XG4gICAgdmFyIHRvdGFsTGVuZ3RoO1xuICAgIHZhciBwZXJjO1xuICAgIHZhciB0YW5BbmdsZTtcbiAgICB2YXIgbWFzaztcblxuICAgIGlmICh0aGlzLl9oYXNNYXNrZWRQYXRoKSB7XG4gICAgICBtYXNrID0gdGhpcy5fcGF0aERhdGEubTtcblxuICAgICAgaWYgKCF0aGlzLl9wYXRoRGF0YS5uIHx8IHRoaXMuX3BhdGhEYXRhLl9tZGYpIHtcbiAgICAgICAgdmFyIHBhdGhzID0gbWFzay52O1xuXG4gICAgICAgIGlmICh0aGlzLl9wYXRoRGF0YS5yLnYpIHtcbiAgICAgICAgICBwYXRocyA9IHBhdGhzLnJldmVyc2UoKTtcbiAgICAgICAgfSAvLyBUT0RPOiByZWxlYXNlIGJlemllciBkYXRhIGNhY2hlZCBmcm9tIHByZXZpb3VzIHBhdGhJbmZvOiB0aGlzLl9wYXRoRGF0YS5waVxuXG5cbiAgICAgICAgcGF0aEluZm8gPSB7XG4gICAgICAgICAgdExlbmd0aDogMCxcbiAgICAgICAgICBzZWdtZW50czogW11cbiAgICAgICAgfTtcbiAgICAgICAgbGVuID0gcGF0aHMuX2xlbmd0aCAtIDE7XG4gICAgICAgIHZhciBiZXppZXJEYXRhO1xuICAgICAgICB0b3RhbExlbmd0aCA9IDA7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYmV6aWVyRGF0YSA9IGJlei5idWlsZEJlemllckRhdGEocGF0aHMudltpXSwgcGF0aHMudltpICsgMV0sIFtwYXRocy5vW2ldWzBdIC0gcGF0aHMudltpXVswXSwgcGF0aHMub1tpXVsxXSAtIHBhdGhzLnZbaV1bMV1dLCBbcGF0aHMuaVtpICsgMV1bMF0gLSBwYXRocy52W2kgKyAxXVswXSwgcGF0aHMuaVtpICsgMV1bMV0gLSBwYXRocy52W2kgKyAxXVsxXV0pO1xuICAgICAgICAgIHBhdGhJbmZvLnRMZW5ndGggKz0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO1xuICAgICAgICAgIHBhdGhJbmZvLnNlZ21lbnRzLnB1c2goYmV6aWVyRGF0YSk7XG4gICAgICAgICAgdG90YWxMZW5ndGggKz0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaSA9IGxlbjtcblxuICAgICAgICBpZiAobWFzay52LmMpIHtcbiAgICAgICAgICBiZXppZXJEYXRhID0gYmV6LmJ1aWxkQmV6aWVyRGF0YShwYXRocy52W2ldLCBwYXRocy52WzBdLCBbcGF0aHMub1tpXVswXSAtIHBhdGhzLnZbaV1bMF0sIHBhdGhzLm9baV1bMV0gLSBwYXRocy52W2ldWzFdXSwgW3BhdGhzLmlbMF1bMF0gLSBwYXRocy52WzBdWzBdLCBwYXRocy5pWzBdWzFdIC0gcGF0aHMudlswXVsxXV0pO1xuICAgICAgICAgIHBhdGhJbmZvLnRMZW5ndGggKz0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO1xuICAgICAgICAgIHBhdGhJbmZvLnNlZ21lbnRzLnB1c2goYmV6aWVyRGF0YSk7XG4gICAgICAgICAgdG90YWxMZW5ndGggKz0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGF0aERhdGEucGkgPSBwYXRoSW5mbztcbiAgICAgIH1cblxuICAgICAgcGF0aEluZm8gPSB0aGlzLl9wYXRoRGF0YS5waTtcbiAgICAgIGN1cnJlbnRMZW5ndGggPSB0aGlzLl9wYXRoRGF0YS5mLnY7XG4gICAgICBzZWdtZW50SW5kID0gMDtcbiAgICAgIHBvaW50SW5kID0gMTtcbiAgICAgIHNlZ21lbnRMZW5ndGggPSAwO1xuICAgICAgZmxhZyA9IHRydWU7XG4gICAgICBzZWdtZW50cyA9IHBhdGhJbmZvLnNlZ21lbnRzO1xuXG4gICAgICBpZiAoY3VycmVudExlbmd0aCA8IDAgJiYgbWFzay52LmMpIHtcbiAgICAgICAgaWYgKHBhdGhJbmZvLnRMZW5ndGggPCBNYXRoLmFicyhjdXJyZW50TGVuZ3RoKSkge1xuICAgICAgICAgIGN1cnJlbnRMZW5ndGggPSAtTWF0aC5hYnMoY3VycmVudExlbmd0aCkgJSBwYXRoSW5mby50TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VnbWVudEluZCA9IHNlZ21lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgICAgcG9pbnRJbmQgPSBwb2ludHMubGVuZ3RoIC0gMTtcblxuICAgICAgICB3aGlsZSAoY3VycmVudExlbmd0aCA8IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IHBvaW50c1twb2ludEluZF0ucGFydGlhbExlbmd0aDtcbiAgICAgICAgICBwb2ludEluZCAtPSAxO1xuXG4gICAgICAgICAgaWYgKHBvaW50SW5kIDwgMCkge1xuICAgICAgICAgICAgc2VnbWVudEluZCAtPSAxO1xuICAgICAgICAgICAgcG9pbnRzID0gc2VnbWVudHNbc2VnbWVudEluZF0ucG9pbnRzO1xuICAgICAgICAgICAgcG9pbnRJbmQgPSBwb2ludHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcG9pbnRzID0gc2VnbWVudHNbc2VnbWVudEluZF0ucG9pbnRzO1xuICAgICAgcHJldlBvaW50ID0gcG9pbnRzW3BvaW50SW5kIC0gMV07XG4gICAgICBjdXJyZW50UG9pbnQgPSBwb2ludHNbcG9pbnRJbmRdO1xuICAgICAgcGFydGlhbExlbmd0aCA9IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgIH1cblxuICAgIGxlbiA9IGxldHRlcnMubGVuZ3RoO1xuICAgIHhQb3MgPSAwO1xuICAgIHlQb3MgPSAwO1xuICAgIHZhciB5T2ZmID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAqIDEuMiAqIDAuNzE0O1xuICAgIHZhciBmaXJzdExpbmUgPSB0cnVlO1xuICAgIHZhciBhbmltYXRvclByb3BzO1xuICAgIHZhciBhbmltYXRvclNlbGVjdG9yO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBsZXR0ZXJWYWx1ZTtcbiAgICBqTGVuID0gYW5pbWF0b3JzLmxlbmd0aDtcbiAgICB2YXIgbXVsdDtcbiAgICB2YXIgaW5kID0gLTE7XG4gICAgdmFyIG9mZmY7XG4gICAgdmFyIHhQYXRoUG9zO1xuICAgIHZhciB5UGF0aFBvcztcbiAgICB2YXIgaW5pdFBhdGhQb3MgPSBjdXJyZW50TGVuZ3RoO1xuICAgIHZhciBpbml0U2VnbWVudEluZCA9IHNlZ21lbnRJbmQ7XG4gICAgdmFyIGluaXRQb2ludEluZCA9IHBvaW50SW5kO1xuICAgIHZhciBjdXJyZW50TGluZSA9IC0xO1xuICAgIHZhciBlbGVtT3BhY2l0eTtcbiAgICB2YXIgc2M7XG4gICAgdmFyIHN3O1xuICAgIHZhciBmYztcbiAgICB2YXIgaztcbiAgICB2YXIgbGV0dGVyU3c7XG4gICAgdmFyIGxldHRlclNjO1xuICAgIHZhciBsZXR0ZXJGYztcbiAgICB2YXIgbGV0dGVyTSA9ICcnO1xuICAgIHZhciBsZXR0ZXJQID0gdGhpcy5kZWZhdWx0UHJvcHNBcnJheTtcbiAgICB2YXIgbGV0dGVyTzsgLy9cblxuICAgIGlmIChkb2N1bWVudERhdGEuaiA9PT0gMiB8fCBkb2N1bWVudERhdGEuaiA9PT0gMSkge1xuICAgICAgdmFyIGFuaW1hdG9ySnVzdGlmeU9mZnNldCA9IDA7XG4gICAgICB2YXIgYW5pbWF0b3JGaXJzdENoYXJPZmZzZXQgPSAwO1xuICAgICAgdmFyIGp1c3RpZnlPZmZzZXRNdWx0ID0gZG9jdW1lbnREYXRhLmogPT09IDIgPyAtMC41IDogLTE7XG4gICAgICB2YXIgbGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBpc05ld0xpbmUgPSB0cnVlO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGxldHRlcnNbaV0ubikge1xuICAgICAgICAgIGlmIChhbmltYXRvckp1c3RpZnlPZmZzZXQpIHtcbiAgICAgICAgICAgIGFuaW1hdG9ySnVzdGlmeU9mZnNldCArPSBhbmltYXRvckZpcnN0Q2hhck9mZnNldDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aGlsZSAobGFzdEluZGV4IDwgaSkge1xuICAgICAgICAgICAgbGV0dGVyc1tsYXN0SW5kZXhdLmFuaW1hdG9ySnVzdGlmeU9mZnNldCA9IGFuaW1hdG9ySnVzdGlmeU9mZnNldDtcbiAgICAgICAgICAgIGxhc3RJbmRleCArPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFuaW1hdG9ySnVzdGlmeU9mZnNldCA9IDA7XG4gICAgICAgICAgaXNOZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnQucHJvcFR5cGUpIHtcbiAgICAgICAgICAgICAgaWYgKGlzTmV3TGluZSAmJiBkb2N1bWVudERhdGEuaiA9PT0gMikge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMudC52ICoganVzdGlmeU9mZnNldE11bHQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQgKz0gYW5pbWF0b3JQcm9wcy50LnYgKiBtdWx0WzBdICoganVzdGlmeU9mZnNldE11bHQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMudC52ICogbXVsdCAqIGp1c3RpZnlPZmZzZXRNdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNOZXdMaW5lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdG9ySnVzdGlmeU9mZnNldCkge1xuICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQgKz0gYW5pbWF0b3JGaXJzdENoYXJPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChsYXN0SW5kZXggPCBpKSB7XG4gICAgICAgIGxldHRlcnNbbGFzdEluZGV4XS5hbmltYXRvckp1c3RpZnlPZmZzZXQgPSBhbmltYXRvckp1c3RpZnlPZmZzZXQ7XG4gICAgICAgIGxhc3RJbmRleCArPSAxO1xuICAgICAgfVxuICAgIH0gLy9cblxuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBtYXRyaXhIZWxwZXIucmVzZXQoKTtcbiAgICAgIGVsZW1PcGFjaXR5ID0gMTtcblxuICAgICAgaWYgKGxldHRlcnNbaV0ubikge1xuICAgICAgICB4UG9zID0gMDtcbiAgICAgICAgeVBvcyArPSBkb2N1bWVudERhdGEueU9mZnNldDtcbiAgICAgICAgeVBvcyArPSBmaXJzdExpbmUgPyAxIDogMDtcbiAgICAgICAgY3VycmVudExlbmd0aCA9IGluaXRQYXRoUG9zO1xuICAgICAgICBmaXJzdExpbmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgIHNlZ21lbnRJbmQgPSBpbml0U2VnbWVudEluZDtcbiAgICAgICAgICBwb2ludEluZCA9IGluaXRQb2ludEluZDtcbiAgICAgICAgICBwb2ludHMgPSBzZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7XG4gICAgICAgICAgcHJldlBvaW50ID0gcG9pbnRzW3BvaW50SW5kIC0gMV07XG4gICAgICAgICAgY3VycmVudFBvaW50ID0gcG9pbnRzW3BvaW50SW5kXTtcbiAgICAgICAgICBwYXJ0aWFsTGVuZ3RoID0gY3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgc2VnbWVudExlbmd0aCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBsZXR0ZXJNID0gJyc7XG4gICAgICAgIGxldHRlckZjID0gJyc7XG4gICAgICAgIGxldHRlclN3ID0gJyc7XG4gICAgICAgIGxldHRlck8gPSAnJztcbiAgICAgICAgbGV0dGVyUCA9IHRoaXMuZGVmYXVsdFByb3BzQXJyYXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgIGlmIChjdXJyZW50TGluZSAhPT0gbGV0dGVyc1tpXS5saW5lKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGRvY3VtZW50RGF0YS5qKSB7XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IHRvdGFsTGVuZ3RoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGV0dGVyc1tpXS5saW5lXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSAodG90YWxMZW5ndGggLSBkb2N1bWVudERhdGEubGluZVdpZHRoc1tsZXR0ZXJzW2ldLmxpbmVdKSAvIDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudExpbmUgPSBsZXR0ZXJzW2ldLmxpbmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGluZCAhPT0gbGV0dGVyc1tpXS5pbmQpIHtcbiAgICAgICAgICAgIGlmIChsZXR0ZXJzW2luZF0pIHtcbiAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBsZXR0ZXJzW2luZF0uZXh0cmE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gbGV0dGVyc1tpXS5hbiAvIDI7XG4gICAgICAgICAgICBpbmQgPSBsZXR0ZXJzW2ldLmluZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IGFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNTtcbiAgICAgICAgICB2YXIgYW5pbWF0b3JPZmZzZXQgPSAwO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5wLnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGFuaW1hdG9yU2VsZWN0b3IgPSBhbmltYXRvcnNbal0ucztcbiAgICAgICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yT2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMucC52WzBdICogbXVsdFswXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvck9mZnNldCArPSBhbmltYXRvclByb3BzLnAudlswXSAqIG11bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuYS5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvck9mZnNldCArPSBhbmltYXRvclByb3BzLmEudlswXSAqIG11bHRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JPZmZzZXQgKz0gYW5pbWF0b3JQcm9wcy5hLnZbMF0gKiBtdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmxhZyA9IHRydWU7IC8vIEZvcmNlIGFsaWdubWVudCBvbmx5IHdvcmtzIHdpdGggYSBzaW5nbGUgbGluZSBmb3Igbm93XG5cbiAgICAgICAgICBpZiAodGhpcy5fcGF0aERhdGEuYS52KSB7XG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoID0gbGV0dGVyc1swXS5hbiAqIDAuNSArICh0b3RhbExlbmd0aCAtIHRoaXMuX3BhdGhEYXRhLmYudiAtIGxldHRlcnNbMF0uYW4gKiAwLjUgLSBsZXR0ZXJzW2xldHRlcnMubGVuZ3RoIC0gMV0uYW4gKiAwLjUpICogaW5kIC8gKGxlbiAtIDEpO1xuICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSB0aGlzLl9wYXRoRGF0YS5mLnY7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgICAgIGlmIChzZWdtZW50TGVuZ3RoICsgcGFydGlhbExlbmd0aCA+PSBjdXJyZW50TGVuZ3RoICsgYW5pbWF0b3JPZmZzZXQgfHwgIXBvaW50cykge1xuICAgICAgICAgICAgICBwZXJjID0gKGN1cnJlbnRMZW5ndGggKyBhbmltYXRvck9mZnNldCAtIHNlZ21lbnRMZW5ndGgpIC8gY3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgICAgIHhQYXRoUG9zID0gcHJldlBvaW50LnBvaW50WzBdICsgKGN1cnJlbnRQb2ludC5wb2ludFswXSAtIHByZXZQb2ludC5wb2ludFswXSkgKiBwZXJjO1xuICAgICAgICAgICAgICB5UGF0aFBvcyA9IHByZXZQb2ludC5wb2ludFsxXSArIChjdXJyZW50UG9pbnQucG9pbnRbMV0gLSBwcmV2UG9pbnQucG9pbnRbMV0pICogcGVyYztcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYWxpZ25tZW50WzBdICogbGV0dGVyc1tpXS5hbiAqIDAuMDA1LCAtKGFsaWdubWVudFsxXSAqIHlPZmYpICogMC4wMSk7XG4gICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocG9pbnRzKSB7XG4gICAgICAgICAgICAgIHNlZ21lbnRMZW5ndGggKz0gY3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgICAgIHBvaW50SW5kICs9IDE7XG5cbiAgICAgICAgICAgICAgaWYgKHBvaW50SW5kID49IHBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBwb2ludEluZCA9IDA7XG4gICAgICAgICAgICAgICAgc2VnbWVudEluZCArPSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFzZWdtZW50c1tzZWdtZW50SW5kXSkge1xuICAgICAgICAgICAgICAgICAgaWYgKG1hc2sudi5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50SW5kID0gMDtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudEluZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRMZW5ndGggLT0gY3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAocG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgcHJldlBvaW50ID0gY3VycmVudFBvaW50O1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludCA9IHBvaW50c1twb2ludEluZF07XG4gICAgICAgICAgICAgICAgcGFydGlhbExlbmd0aCA9IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2ZmZiA9IGxldHRlcnNbaV0uYW4gLyAyIC0gbGV0dGVyc1tpXS5hZGQ7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtb2ZmZiwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmZiA9IGxldHRlcnNbaV0uYW4gLyAyIC0gbGV0dGVyc1tpXS5hZGQ7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtb2ZmZiwgMCwgMCk7IC8vIEdyb3VwaW5nIGFsaWdubWVudFxuXG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYWxpZ25tZW50WzBdICogbGV0dGVyc1tpXS5hbiAqIDAuMDA1LCAtYWxpZ25tZW50WzFdICogeU9mZiAqIDAuMDEsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgIGFuaW1hdG9yUHJvcHMgPSBhbmltYXRvcnNbal0uYTtcblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnQucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yU2VsZWN0b3IgPSBhbmltYXRvcnNbal0ucztcbiAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTsgLy8gVGhpcyBjb25kaXRpb24gaXMgdG8gcHJldmVudCBhcHBseWluZyB0cmFja2luZyB0byBmaXJzdCBjaGFyYWN0ZXIgaW4gZWFjaCBsaW5lLiBNaWdodCBiZSBiZXR0ZXIgdG8gdXNlIGEgYm9vbGVhbiBcImlzTmV3TGluZVwiXG5cbiAgICAgICAgICAgIGlmICh4UG9zICE9PSAwIHx8IGRvY3VtZW50RGF0YS5qICE9PSAwKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9oYXNNYXNrZWRQYXRoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IGFuaW1hdG9yUHJvcHMudC52ICogbXVsdFswXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgeFBvcyArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeFBvcyArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnN0cm9rZVdpZHRoQW5pbSkge1xuICAgICAgICAgIHN3ID0gZG9jdW1lbnREYXRhLnN3IHx8IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnN0cm9rZUNvbG9yQW5pbSkge1xuICAgICAgICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgICAgICAgIHNjID0gW2RvY3VtZW50RGF0YS5zY1swXSwgZG9jdW1lbnREYXRhLnNjWzFdLCBkb2N1bWVudERhdGEuc2NbMl1dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzYyA9IFswLCAwLCAwXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0gJiYgZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICAgICAgZmMgPSBbZG9jdW1lbnREYXRhLmZjWzBdLCBkb2N1bWVudERhdGEuZmNbMV0sIGRvY3VtZW50RGF0YS5mY1syXV07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuYS5wcm9wVHlwZSkge1xuICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYW5pbWF0b3JQcm9wcy5hLnZbMF0gKiBtdWx0WzBdLCAtYW5pbWF0b3JQcm9wcy5hLnZbMV0gKiBtdWx0WzFdLCBhbmltYXRvclByb3BzLmEudlsyXSAqIG11bHRbMl0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYW5pbWF0b3JQcm9wcy5hLnZbMF0gKiBtdWx0LCAtYW5pbWF0b3JQcm9wcy5hLnZbMV0gKiBtdWx0LCBhbmltYXRvclByb3BzLmEudlsyXSAqIG11bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5zLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7XG5cbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIuc2NhbGUoMSArIChhbmltYXRvclByb3BzLnMudlswXSAtIDEpICogbXVsdFswXSwgMSArIChhbmltYXRvclByb3BzLnMudlsxXSAtIDEpICogbXVsdFsxXSwgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIuc2NhbGUoMSArIChhbmltYXRvclByb3BzLnMudlswXSAtIDEpICogbXVsdCwgMSArIChhbmltYXRvclByb3BzLnMudlsxXSAtIDEpICogbXVsdCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgIGFuaW1hdG9yUHJvcHMgPSBhbmltYXRvcnNbal0uYTtcbiAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuc2sucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIuc2tld0Zyb21BeGlzKC1hbmltYXRvclByb3BzLnNrLnYgKiBtdWx0WzBdLCBhbmltYXRvclByb3BzLnNhLnYgKiBtdWx0WzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5za2V3RnJvbUF4aXMoLWFuaW1hdG9yUHJvcHMuc2sudiAqIG11bHQsIGFuaW1hdG9yUHJvcHMuc2EudiAqIG11bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnIucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIucm90YXRlWigtYW5pbWF0b3JQcm9wcy5yLnYgKiBtdWx0WzJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGVaKC1hbmltYXRvclByb3BzLnIudiAqIG11bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnJ5LnByb3BUeXBlKSB7XG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZVkoYW5pbWF0b3JQcm9wcy5yeS52ICogbXVsdFsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIucm90YXRlWShhbmltYXRvclByb3BzLnJ5LnYgKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5yeC5wcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGVYKGFuaW1hdG9yUHJvcHMucngudiAqIG11bHRbMF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZVgoYW5pbWF0b3JQcm9wcy5yeC52ICogbXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuby5wcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGVsZW1PcGFjaXR5ICs9IChhbmltYXRvclByb3BzLm8udiAqIG11bHRbMF0gLSBlbGVtT3BhY2l0eSkgKiBtdWx0WzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWxlbU9wYWNpdHkgKz0gKGFuaW1hdG9yUHJvcHMuby52ICogbXVsdCAtIGVsZW1PcGFjaXR5KSAqIG11bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VXaWR0aEFuaW0gJiYgYW5pbWF0b3JQcm9wcy5zdy5wcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHN3ICs9IGFuaW1hdG9yUHJvcHMuc3cudiAqIG11bHRbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdyArPSBhbmltYXRvclByb3BzLnN3LnYgKiBtdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkb2N1bWVudERhdGEuc3Ryb2tlQ29sb3JBbmltICYmIGFuaW1hdG9yUHJvcHMuc2MucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCAzOyBrICs9IDEpIHtcbiAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2Nba10gKz0gKGFuaW1hdG9yUHJvcHMuc2MudltrXSAtIHNjW2tdKSAqIG11bHRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2Nba10gKz0gKGFuaW1hdG9yUHJvcHMuc2MudltrXSAtIHNjW2tdKSAqIG11bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0gJiYgZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5mYy5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgMzsgayArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBmY1trXSArPSAoYW5pbWF0b3JQcm9wcy5mYy52W2tdIC0gZmNba10pICogbXVsdFswXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZmNba10gKz0gKGFuaW1hdG9yUHJvcHMuZmMudltrXSAtIGZjW2tdKSAqIG11bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmZoLnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkSHVlVG9SR0IoZmMsIGFuaW1hdG9yUHJvcHMuZmgudiAqIG11bHRbMF0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkSHVlVG9SR0IoZmMsIGFuaW1hdG9yUHJvcHMuZmgudiAqIG11bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmZzLnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkU2F0dXJhdGlvblRvUkdCKGZjLCBhbmltYXRvclByb3BzLmZzLnYgKiBtdWx0WzBdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZFNhdHVyYXRpb25Ub1JHQihmYywgYW5pbWF0b3JQcm9wcy5mcy52ICogbXVsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuZmIucHJvcFR5cGUpIHtcbiAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZmMgPSBhZGRCcmlnaHRuZXNzVG9SR0IoZmMsIGFuaW1hdG9yUHJvcHMuZmIudiAqIG11bHRbMF0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkQnJpZ2h0bmVzc1RvUkdCKGZjLCBhbmltYXRvclByb3BzLmZiLnYgKiBtdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5wLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNNYXNrZWRQYXRoKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoMCwgYW5pbWF0b3JQcm9wcy5wLnZbMV0gKiBtdWx0WzBdLCAtYW5pbWF0b3JQcm9wcy5wLnZbMl0gKiBtdWx0WzFdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIGFuaW1hdG9yUHJvcHMucC52WzFdICogbXVsdCwgLWFuaW1hdG9yUHJvcHMucC52WzJdICogbXVsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShhbmltYXRvclByb3BzLnAudlswXSAqIG11bHRbMF0sIGFuaW1hdG9yUHJvcHMucC52WzFdICogbXVsdFsxXSwgLWFuaW1hdG9yUHJvcHMucC52WzJdICogbXVsdFsyXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGFuaW1hdG9yUHJvcHMucC52WzBdICogbXVsdCwgYW5pbWF0b3JQcm9wcy5wLnZbMV0gKiBtdWx0LCAtYW5pbWF0b3JQcm9wcy5wLnZbMl0gKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnN0cm9rZVdpZHRoQW5pbSkge1xuICAgICAgICAgIGxldHRlclN3ID0gc3cgPCAwID8gMCA6IHN3O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VDb2xvckFuaW0pIHtcbiAgICAgICAgICBsZXR0ZXJTYyA9ICdyZ2IoJyArIE1hdGgucm91bmQoc2NbMF0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChzY1sxXSAqIDI1NSkgKyAnLCcgKyBNYXRoLnJvdW5kKHNjWzJdICogMjU1KSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb2N1bWVudERhdGEuZmlsbENvbG9yQW5pbSAmJiBkb2N1bWVudERhdGEuZmMpIHtcbiAgICAgICAgICBsZXR0ZXJGYyA9ICdyZ2IoJyArIE1hdGgucm91bmQoZmNbMF0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChmY1sxXSAqIDI1NSkgKyAnLCcgKyBNYXRoLnJvdW5kKGZjWzJdICogMjU1KSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9oYXNNYXNrZWRQYXRoKSB7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLCAtZG9jdW1lbnREYXRhLmxzKTtcbiAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIGFsaWdubWVudFsxXSAqIHlPZmYgKiAwLjAxICsgeVBvcywgMCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fcGF0aERhdGEucC52KSB7XG4gICAgICAgICAgICB0YW5BbmdsZSA9IChjdXJyZW50UG9pbnQucG9pbnRbMV0gLSBwcmV2UG9pbnQucG9pbnRbMV0pIC8gKGN1cnJlbnRQb2ludC5wb2ludFswXSAtIHByZXZQb2ludC5wb2ludFswXSk7XG4gICAgICAgICAgICB2YXIgcm90ID0gTWF0aC5hdGFuKHRhbkFuZ2xlKSAqIDE4MCAvIE1hdGguUEk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9pbnQucG9pbnRbMF0gPCBwcmV2UG9pbnQucG9pbnRbMF0pIHtcbiAgICAgICAgICAgICAgcm90ICs9IDE4MDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZSgtcm90ICogTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSh4UGF0aFBvcywgeVBhdGhQb3MsIDApO1xuICAgICAgICAgIGN1cnJlbnRMZW5ndGggLT0gYWxpZ25tZW50WzBdICogbGV0dGVyc1tpXS5hbiAqIDAuMDA1O1xuXG4gICAgICAgICAgaWYgKGxldHRlcnNbaSArIDFdICYmIGluZCAhPT0gbGV0dGVyc1tpICsgMV0uaW5kKSB7XG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IGxldHRlcnNbaV0uYW4gLyAyO1xuICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBkb2N1bWVudERhdGEudHIgKiAwLjAwMSAqIGRvY3VtZW50RGF0YS5maW5hbFNpemU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoeFBvcywgeVBvcywgMCk7XG5cbiAgICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnBzKSB7XG4gICAgICAgICAgICAvLyBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5wc1swXSxkb2N1bWVudERhdGEucHNbMV0sMCk7XG4gICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5wc1swXSwgZG9jdW1lbnREYXRhLnBzWzFdICsgZG9jdW1lbnREYXRhLmFzY2VudCwgMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGxldHRlcnNbaV0uYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICsgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgKyAoZG9jdW1lbnREYXRhLmJveFdpZHRoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGV0dGVyc1tpXS5saW5lXSksIDAsIDApO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGxldHRlcnNbaV0uYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICsgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgKyAoZG9jdW1lbnREYXRhLmJveFdpZHRoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGV0dGVyc1tpXS5saW5lXSkgLyAyLCAwLCAwKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoMCwgLWRvY3VtZW50RGF0YS5scyk7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShvZmZmLCAwLCAwKTtcbiAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNSwgYWxpZ25tZW50WzFdICogeU9mZiAqIDAuMDEsIDApO1xuICAgICAgICAgIHhQb3MgKz0gbGV0dGVyc1tpXS5sICsgZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlclR5cGUgPT09ICdodG1sJykge1xuICAgICAgICAgIGxldHRlck0gPSBtYXRyaXhIZWxwZXIudG9DU1MoKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZW5kZXJUeXBlID09PSAnc3ZnJykge1xuICAgICAgICAgIGxldHRlck0gPSBtYXRyaXhIZWxwZXIudG8yZENTUygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldHRlclAgPSBbbWF0cml4SGVscGVyLnByb3BzWzBdLCBtYXRyaXhIZWxwZXIucHJvcHNbMV0sIG1hdHJpeEhlbHBlci5wcm9wc1syXSwgbWF0cml4SGVscGVyLnByb3BzWzNdLCBtYXRyaXhIZWxwZXIucHJvcHNbNF0sIG1hdHJpeEhlbHBlci5wcm9wc1s1XSwgbWF0cml4SGVscGVyLnByb3BzWzZdLCBtYXRyaXhIZWxwZXIucHJvcHNbN10sIG1hdHJpeEhlbHBlci5wcm9wc1s4XSwgbWF0cml4SGVscGVyLnByb3BzWzldLCBtYXRyaXhIZWxwZXIucHJvcHNbMTBdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTFdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTJdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTNdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTRdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTVdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldHRlck8gPSBlbGVtT3BhY2l0eTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyc0NvdW50IDw9IGkpIHtcbiAgICAgICAgbGV0dGVyVmFsdWUgPSBuZXcgTGV0dGVyUHJvcHMobGV0dGVyTywgbGV0dGVyU3csIGxldHRlclNjLCBsZXR0ZXJGYywgbGV0dGVyTSwgbGV0dGVyUCk7XG4gICAgICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzLnB1c2gobGV0dGVyVmFsdWUpO1xuICAgICAgICByZW5kZXJlZExldHRlcnNDb3VudCArPSAxO1xuICAgICAgICB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXR0ZXJWYWx1ZSA9IHRoaXMucmVuZGVyZWRMZXR0ZXJzW2ldO1xuICAgICAgICB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyA9IGxldHRlclZhbHVlLnVwZGF0ZShsZXR0ZXJPLCBsZXR0ZXJTdywgbGV0dGVyU2MsIGxldHRlckZjLCBsZXR0ZXJNLCBsZXR0ZXJQKSB8fCB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgVGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5fZnJhbWVJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2ZyYW1lSWQgPSB0aGlzLl9lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuICB9O1xuXG4gIFRleHRBbmltYXRvclByb3BlcnR5LnByb3RvdHlwZS5tSGVscGVyID0gbmV3IE1hdHJpeCgpO1xuICBUZXh0QW5pbWF0b3JQcm9wZXJ0eS5wcm90b3R5cGUuZGVmYXVsdFByb3BzQXJyYXkgPSBbXTtcbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBUZXh0QW5pbWF0b3JQcm9wZXJ0eSk7XG5cbiAgZnVuY3Rpb24gSVRleHRFbGVtZW50KCkge31cblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyA9IHRydWU7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnRleHRQcm9wZXJ0eSA9IG5ldyBUZXh0UHJvcGVydHkodGhpcywgZGF0YS50LCB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzKTtcbiAgICB0aGlzLnRleHRBbmltYXRvciA9IG5ldyBUZXh0QW5pbWF0b3JQcm9wZXJ0eShkYXRhLnQsIHRoaXMucmVuZGVyVHlwZSwgdGhpcyk7XG4gICAgdGhpcy5pbml0VHJhbnNmb3JtKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuaW5pdEhpZXJhcmNoeSgpO1xuICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICB0aGlzLmluaXRSZW5kZXJlckVsZW1lbnQoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCk7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpO1xuICAgIHRoaXMuY3JlYXRlQ29udGVudCgpO1xuICAgIHRoaXMuaGlkZSgpO1xuICAgIHRoaXMudGV4dEFuaW1hdG9yLnNlYXJjaFByb3BlcnRpZXModGhpcy5keW5hbWljUHJvcGVydGllcyk7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWUgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5wcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSk7XG4gICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRoaXMuaXNJblJhbmdlKTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVBhdGhTaGFwZSA9IGZ1bmN0aW9uIChtYXRyaXhIZWxwZXIsIHNoYXBlcykge1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuID0gc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgcGF0aE5vZGVzO1xuICAgIHZhciBzaGFwZVN0ciA9ICcnO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgaWYgKHNoYXBlc1tqXS50eSA9PT0gJ3NoJykge1xuICAgICAgICBwYXRoTm9kZXMgPSBzaGFwZXNbal0ua3MuaztcbiAgICAgICAgc2hhcGVTdHIgKz0gYnVpbGRTaGFwZVN0cmluZyhwYXRoTm9kZXMsIHBhdGhOb2Rlcy5pLmxlbmd0aCwgdHJ1ZSwgbWF0cml4SGVscGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2hhcGVTdHI7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS51cGRhdGVEb2N1bWVudERhdGEgPSBmdW5jdGlvbiAobmV3RGF0YSwgaW5kZXgpIHtcbiAgICB0aGlzLnRleHRQcm9wZXJ0eS51cGRhdGVEb2N1bWVudERhdGEobmV3RGF0YSwgaW5kZXgpO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUuY2FuUmVzaXplRm9udCA9IGZ1bmN0aW9uIChfY2FuUmVzaXplKSB7XG4gICAgdGhpcy50ZXh0UHJvcGVydHkuY2FuUmVzaXplRm9udChfY2FuUmVzaXplKTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLnNldE1pbmltdW1Gb250U2l6ZSA9IGZ1bmN0aW9uIChfZm9udFNpemUpIHtcbiAgICB0aGlzLnRleHRQcm9wZXJ0eS5zZXRNaW5pbXVtRm9udFNpemUoX2ZvbnRTaXplKTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeCA9IGZ1bmN0aW9uIChkb2N1bWVudERhdGEsIG1hdHJpeEhlbHBlciwgbGluZU51bWJlciwgeFBvcywgeVBvcykge1xuICAgIGlmIChkb2N1bWVudERhdGEucHMpIHtcbiAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoZG9jdW1lbnREYXRhLnBzWzBdLCBkb2N1bWVudERhdGEucHNbMV0gKyBkb2N1bWVudERhdGEuYXNjZW50LCAwKTtcbiAgICB9XG5cbiAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIC1kb2N1bWVudERhdGEubHMsIDApO1xuXG4gICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ICsgKGRvY3VtZW50RGF0YS5ib3hXaWR0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xpbmVOdW1iZXJdKSwgMCwgMCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgKyAoZG9jdW1lbnREYXRhLmJveFdpZHRoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGluZU51bWJlcl0pIC8gMiwgMCwgMCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKHhQb3MsIHlQb3MsIDApO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUuYnVpbGRDb2xvciA9IGZ1bmN0aW9uIChjb2xvckRhdGEpIHtcbiAgICByZXR1cm4gJ3JnYignICsgTWF0aC5yb3VuZChjb2xvckRhdGFbMF0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChjb2xvckRhdGFbMV0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChjb2xvckRhdGFbMl0gKiAyNTUpICsgJyknO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUuZW1wdHlQcm9wID0gbmV3IExldHRlclByb3BzKCk7XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge307XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS52YWxpZGF0ZVRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudGV4dFByb3BlcnR5Ll9tZGYgfHwgdGhpcy50ZXh0UHJvcGVydHkuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgdGhpcy5idWlsZE5ld1RleHQoKTtcbiAgICAgIHRoaXMudGV4dFByb3BlcnR5Ll9pc0ZpcnN0RnJhbWUgPSBmYWxzZTtcbiAgICAgIHRoaXMudGV4dFByb3BlcnR5Ll9tZGYgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGVtcHR5U2hhcGVEYXRhID0ge1xuICAgIHNoYXBlczogW11cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdUZXh0TG90dGllRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy50ZXh0U3BhbnMgPSBbXTtcbiAgICB0aGlzLnJlbmRlclR5cGUgPSAnc3ZnJztcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnQsIElUZXh0RWxlbWVudF0sIFNWR1RleHRMb3R0aWVFbGVtZW50KTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5kYXRhLnNpbmdsZVNoYXBlICYmICF0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgIHRoaXMudGV4dENvbnRhaW5lciA9IGNyZWF0ZU5TKCd0ZXh0Jyk7XG4gICAgfVxuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5idWlsZFRleHRDb250ZW50cyA9IGZ1bmN0aW9uICh0ZXh0QXJyYXkpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRleHRBcnJheS5sZW5ndGg7XG4gICAgdmFyIHRleHRDb250ZW50cyA9IFtdO1xuICAgIHZhciBjdXJyZW50VGV4dENvbnRlbnQgPSAnJztcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAodGV4dEFycmF5W2ldID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKDEzKSB8fCB0ZXh0QXJyYXlbaV0gPT09IFN0cmluZy5mcm9tQ2hhckNvZGUoMykpIHtcbiAgICAgICAgdGV4dENvbnRlbnRzLnB1c2goY3VycmVudFRleHRDb250ZW50KTtcbiAgICAgICAgY3VycmVudFRleHRDb250ZW50ID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50VGV4dENvbnRlbnQgKz0gdGV4dEFycmF5W2ldO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgdGV4dENvbnRlbnRzLnB1c2goY3VycmVudFRleHRDb250ZW50KTtcbiAgICByZXR1cm4gdGV4dENvbnRlbnRzO1xuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5idWlsZFNoYXBlRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCBzY2FsZSkge1xuICAgIC8vIGRhdGEgc2hvdWxkIHByb2JhYmx5IGJlIGNsb25lZCB0byBhcHBseSBzY2FsZSBzZXBhcmF0ZWx5IHRvIGVhY2ggaW5zdGFuY2Ugb2YgYSB0ZXh0IG9uIGRpZmZlcmVudCBsYXllcnNcbiAgICAvLyBidXQgc2luY2UgdGV4dCBpbnRlcm5hbCBjb250ZW50IGdldHMgb25seSByZW5kZXJlZCBvbmNlIGFuZCB0aGVuIGl0J3MgbmV2ZXIgcmVyZW5kZXJlZCxcbiAgICAvLyBpdCdzIHByb2JhYmx5IHNhZmUgbm90IHRvIGNsb25lIGRhdGEgYW5kIHJldXNlIGFsd2F5cyB0aGUgc2FtZSBpbnN0YW5jZSBldmVuIGlmIHRoZSBvYmplY3QgaXMgbXV0YXRlZC5cbiAgICAvLyBBdm9pZGluZyBjbG9uaW5nIGlzIHByZWZlcnJlZCBzaW5jZSBjbG9uaW5nIGVhY2ggY2hhcmFjdGVyIHNoYXBlIGRhdGEgaXMgZXhwZW5zaXZlXG4gICAgaWYgKGRhdGEuc2hhcGVzICYmIGRhdGEuc2hhcGVzLmxlbmd0aCkge1xuICAgICAgdmFyIHNoYXBlID0gZGF0YS5zaGFwZXNbMF07XG5cbiAgICAgIGlmIChzaGFwZS5pdCkge1xuICAgICAgICB2YXIgc2hhcGVJdGVtID0gc2hhcGUuaXRbc2hhcGUuaXQubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHNoYXBlSXRlbS5zKSB7XG4gICAgICAgICAgc2hhcGVJdGVtLnMua1swXSA9IHNjYWxlO1xuICAgICAgICAgIHNoYXBlSXRlbS5zLmtbMV0gPSBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5idWlsZE5ld1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgZG9jdW1lbnREYXRhID0gdGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGE7XG4gICAgdGhpcy5yZW5kZXJlZExldHRlcnMgPSBjcmVhdGVTaXplZEFycmF5KGRvY3VtZW50RGF0YSA/IGRvY3VtZW50RGF0YS5sLmxlbmd0aCA6IDApO1xuXG4gICAgaWYgKGRvY3VtZW50RGF0YS5mYykge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5idWlsZENvbG9yKGRvY3VtZW50RGF0YS5mYykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAncmdiYSgwLDAsMCwwKScpO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgdGhpcy5idWlsZENvbG9yKGRvY3VtZW50RGF0YS5zYykpO1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCBkb2N1bWVudERhdGEuc3cpO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4gICAgdmFyIGZvbnREYXRhID0gdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpO1xuXG4gICAgaWYgKGZvbnREYXRhLmZDbGFzcykge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGZvbnREYXRhLmZDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCBmb250RGF0YS5mRmFtaWx5KTtcbiAgICAgIHZhciBmV2VpZ2h0ID0gZG9jdW1lbnREYXRhLmZXZWlnaHQ7XG4gICAgICB2YXIgZlN0eWxlID0gZG9jdW1lbnREYXRhLmZTdHlsZTtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9udC1zdHlsZScsIGZTdHlsZSk7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0JywgZldlaWdodCk7XG4gICAgfVxuXG4gICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgZG9jdW1lbnREYXRhLnQpO1xuICAgIHZhciBsZXR0ZXJzID0gZG9jdW1lbnREYXRhLmwgfHwgW107XG4gICAgdmFyIHVzZXNHbHlwaHMgPSAhIXRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5jaGFycztcbiAgICBsZW4gPSBsZXR0ZXJzLmxlbmd0aDtcbiAgICB2YXIgdFNwYW47XG4gICAgdmFyIG1hdHJpeEhlbHBlciA9IHRoaXMubUhlbHBlcjtcbiAgICB2YXIgc2hhcGVTdHIgPSAnJztcbiAgICB2YXIgc2luZ2xlU2hhcGUgPSB0aGlzLmRhdGEuc2luZ2xlU2hhcGU7XG4gICAgdmFyIHhQb3MgPSAwO1xuICAgIHZhciB5UG9zID0gMDtcbiAgICB2YXIgZmlyc3RMaW5lID0gdHJ1ZTtcbiAgICB2YXIgdHJhY2tpbmdPZmZzZXQgPSBkb2N1bWVudERhdGEudHIgKiAwLjAwMSAqIGRvY3VtZW50RGF0YS5maW5hbFNpemU7XG5cbiAgICBpZiAoc2luZ2xlU2hhcGUgJiYgIXVzZXNHbHlwaHMgJiYgIWRvY3VtZW50RGF0YS5zeikge1xuICAgICAgdmFyIHRFbGVtZW50ID0gdGhpcy50ZXh0Q29udGFpbmVyO1xuICAgICAgdmFyIGp1c3RpZnkgPSAnc3RhcnQnO1xuXG4gICAgICBzd2l0Y2ggKGRvY3VtZW50RGF0YS5qKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBqdXN0aWZ5ID0gJ2VuZCc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGp1c3RpZnkgPSAnbWlkZGxlJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGp1c3RpZnkgPSAnc3RhcnQnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJywganVzdGlmeSk7XG4gICAgICB0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2xldHRlci1zcGFjaW5nJywgdHJhY2tpbmdPZmZzZXQpO1xuICAgICAgdmFyIHRleHRDb250ZW50ID0gdGhpcy5idWlsZFRleHRDb250ZW50cyhkb2N1bWVudERhdGEuZmluYWxUZXh0KTtcbiAgICAgIGxlbiA9IHRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgIHlQb3MgPSBkb2N1bWVudERhdGEucHMgPyBkb2N1bWVudERhdGEucHNbMV0gKyBkb2N1bWVudERhdGEuYXNjZW50IDogMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRTcGFuID0gdGhpcy50ZXh0U3BhbnNbaV0uc3BhbiB8fCBjcmVhdGVOUygndHNwYW4nKTtcbiAgICAgICAgdFNwYW4udGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudFtpXTtcbiAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCd4JywgMCk7XG4gICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgneScsIHlQb3MpO1xuICAgICAgICB0U3Bhbi5zdHlsZS5kaXNwbGF5ID0gJ2luaGVyaXQnO1xuICAgICAgICB0RWxlbWVudC5hcHBlbmRDaGlsZCh0U3Bhbik7XG5cbiAgICAgICAgaWYgKCF0aGlzLnRleHRTcGFuc1tpXSkge1xuICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldID0ge1xuICAgICAgICAgICAgc3BhbjogbnVsbCxcbiAgICAgICAgICAgIGdseXBoOiBudWxsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gPSB0U3BhbjtcbiAgICAgICAgeVBvcyArPSBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZCh0RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjYWNoZWRTcGFuc0xlbmd0aCA9IHRoaXMudGV4dFNwYW5zLmxlbmd0aDtcbiAgICAgIHZhciBjaGFyRGF0YTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmICghdGhpcy50ZXh0U3BhbnNbaV0pIHtcbiAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXSA9IHtcbiAgICAgICAgICAgIHNwYW46IG51bGwsXG4gICAgICAgICAgICBjaGlsZFNwYW46IG51bGwsXG4gICAgICAgICAgICBnbHlwaDogbnVsbFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXVzZXNHbHlwaHMgfHwgIXNpbmdsZVNoYXBlIHx8IGkgPT09IDApIHtcbiAgICAgICAgICB0U3BhbiA9IGNhY2hlZFNwYW5zTGVuZ3RoID4gaSA/IHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gOiBjcmVhdGVOUyh1c2VzR2x5cGhzID8gJ2cnIDogJ3RleHQnKTtcblxuICAgICAgICAgIGlmIChjYWNoZWRTcGFuc0xlbmd0aCA8PSBpKSB7XG4gICAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lY2FwJywgJ2J1dHQnKTtcbiAgICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVqb2luJywgJ3JvdW5kJyk7XG4gICAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1taXRlcmxpbWl0JywgJzQnKTtcbiAgICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gPSB0U3BhbjtcblxuICAgICAgICAgICAgaWYgKHVzZXNHbHlwaHMpIHtcbiAgICAgICAgICAgICAgdmFyIGNoaWxkU3BhbiA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgICAgICAgIHRTcGFuLmFwcGVuZENoaWxkKGNoaWxkU3Bhbik7XG4gICAgICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLmNoaWxkU3BhbiA9IGNoaWxkU3BhbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uc3BhbiA9IHRTcGFuO1xuICAgICAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodFNwYW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRTcGFuLnN0eWxlLmRpc3BsYXkgPSAnaW5oZXJpdCc7XG4gICAgICAgIH1cblxuICAgICAgICBtYXRyaXhIZWxwZXIucmVzZXQoKTtcblxuICAgICAgICBpZiAoc2luZ2xlU2hhcGUpIHtcbiAgICAgICAgICBpZiAobGV0dGVyc1tpXS5uKSB7XG4gICAgICAgICAgICB4UG9zID0gLXRyYWNraW5nT2Zmc2V0O1xuICAgICAgICAgICAgeVBvcyArPSBkb2N1bWVudERhdGEueU9mZnNldDtcbiAgICAgICAgICAgIHlQb3MgKz0gZmlyc3RMaW5lID8gMSA6IDA7XG4gICAgICAgICAgICBmaXJzdExpbmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeChkb2N1bWVudERhdGEsIG1hdHJpeEhlbHBlciwgbGV0dGVyc1tpXS5saW5lLCB4UG9zLCB5UG9zKTtcbiAgICAgICAgICB4UG9zICs9IGxldHRlcnNbaV0ubCB8fCAwOyAvLyB4UG9zICs9IGxldHRlcnNbaV0udmFsID09PSAnICcgPyAwIDogdHJhY2tpbmdPZmZzZXQ7XG5cbiAgICAgICAgICB4UG9zICs9IHRyYWNraW5nT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXNHbHlwaHMpIHtcbiAgICAgICAgICBjaGFyRGF0YSA9IHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRDaGFyRGF0YShkb2N1bWVudERhdGEuZmluYWxUZXh0W2ldLCBmb250RGF0YS5mU3R5bGUsIHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5KTtcbiAgICAgICAgICB2YXIgZ2x5cGhFbGVtZW50OyAvLyB0ID09PSAxIG1lYW5zIHRoZSBjaGFyYWN0ZXIgaGFzIGJlZW4gcmVwbGFjZWQgd2l0aCBhbiBhbmltYXRlZCBzaGFwZWRcblxuICAgICAgICAgIGlmIChjaGFyRGF0YS50ID09PSAxKSB7XG4gICAgICAgICAgICBnbHlwaEVsZW1lbnQgPSBuZXcgU1ZHQ29tcEVsZW1lbnQoY2hhckRhdGEuZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBlbXB0eVNoYXBlRGF0YTtcblxuICAgICAgICAgICAgaWYgKGNoYXJEYXRhLmRhdGEgJiYgY2hhckRhdGEuZGF0YS5zaGFwZXMpIHtcbiAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuYnVpbGRTaGFwZURhdGEoY2hhckRhdGEuZGF0YSwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdseXBoRWxlbWVudCA9IG5ldyBTVkdTaGFwZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy50ZXh0U3BhbnNbaV0uZ2x5cGgpIHtcbiAgICAgICAgICAgIHZhciBnbHlwaCA9IHRoaXMudGV4dFNwYW5zW2ldLmdseXBoO1xuICAgICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uY2hpbGRTcGFuLnJlbW92ZUNoaWxkKGdseXBoLmxheWVyRWxlbWVudCk7XG4gICAgICAgICAgICBnbHlwaC5kZXN0cm95KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uZ2x5cGggPSBnbHlwaEVsZW1lbnQ7XG4gICAgICAgICAgZ2x5cGhFbGVtZW50Ll9kZWJ1ZyA9IHRydWU7XG4gICAgICAgICAgZ2x5cGhFbGVtZW50LnByZXBhcmVGcmFtZSgwKTtcbiAgICAgICAgICBnbHlwaEVsZW1lbnQucmVuZGVyRnJhbWUoKTtcbiAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5jaGlsZFNwYW4uYXBwZW5kQ2hpbGQoZ2x5cGhFbGVtZW50LmxheWVyRWxlbWVudCk7IC8vIHdoZW4gdXNpbmcgYW5pbWF0ZWQgc2hhcGVzLCB0aGUgbGF5ZXIgd2lsbCBiZSBzY2FsZWQgaW5zdGVhZCBvZiByZXBsYWNpbmcgdGhlIGludGVybmFsIHNjYWxlXG4gICAgICAgICAgLy8gdGhpcyBtaWdodCBoYXZlIGlzc3VlcyB3aXRoIHN0cm9rZXMgYW5kIG1pZ2h0IG5lZWQgYSBkaWZmZXJlbnQgc29sdXRpb25cblxuICAgICAgICAgIGlmIChjaGFyRGF0YS50ID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5jaGlsZFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAnc2NhbGUoJyArIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDAgKyAnLCcgKyBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwICsgJyknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNpbmdsZVNoYXBlKSB7XG4gICAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIG1hdHJpeEhlbHBlci5wcm9wc1sxMl0gKyAnLCcgKyBtYXRyaXhIZWxwZXIucHJvcHNbMTNdICsgJyknKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0U3Bhbi50ZXh0Q29udGVudCA9IGxldHRlcnNbaV0udmFsO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnLCAneG1sOnNwYWNlJywgJ3ByZXNlcnZlJyk7XG4gICAgICAgIH0gLy9cblxuICAgICAgfVxuXG4gICAgICBpZiAoc2luZ2xlU2hhcGUgJiYgdFNwYW4pIHtcbiAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdkJywgc2hhcGVTdHIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdoaWxlIChpIDwgdGhpcy50ZXh0U3BhbnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnRleHRTcGFuc1tpXS5zcGFuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5fc2l6ZUNoYW5nZWQgPSB0cnVlO1xuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5zb3VyY2VSZWN0QXRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJlcGFyZUZyYW1lKHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lIC0gdGhpcy5kYXRhLnN0KTtcbiAgICB0aGlzLnJlbmRlcklubmVyQ29udGVudCgpO1xuXG4gICAgaWYgKHRoaXMuX3NpemVDaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9zaXplQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdmFyIHRleHRCb3ggPSB0aGlzLmxheWVyRWxlbWVudC5nZXRCQm94KCk7XG4gICAgICB0aGlzLmJib3ggPSB7XG4gICAgICAgIHRvcDogdGV4dEJveC55LFxuICAgICAgICBsZWZ0OiB0ZXh0Qm94LngsXG4gICAgICAgIHdpZHRoOiB0ZXh0Qm94LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRleHRCb3guaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmJib3g7XG4gIH07XG5cbiAgU1ZHVGV4dExvdHRpZUVsZW1lbnQucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnRleHRTcGFucy5sZW5ndGg7XG4gICAgdmFyIGdseXBoRWxlbWVudDtcbiAgICB0aGlzLnJlbmRlcmVkRnJhbWUgPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZ2x5cGhFbGVtZW50ID0gdGhpcy50ZXh0U3BhbnNbaV0uZ2x5cGg7XG5cbiAgICAgIGlmIChnbHlwaEVsZW1lbnQpIHtcbiAgICAgICAgZ2x5cGhFbGVtZW50LnByZXBhcmVGcmFtZSh0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAtIHRoaXMuZGF0YS5zdCk7XG5cbiAgICAgICAgaWYgKGdseXBoRWxlbWVudC5fbWRmKSB7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudmFsaWRhdGVUZXh0KCk7XG5cbiAgICBpZiAoIXRoaXMuZGF0YS5zaW5nbGVTaGFwZSB8fCB0aGlzLl9tZGYpIHtcbiAgICAgIHRoaXMudGV4dEFuaW1hdG9yLmdldE1lYXN1cmVzKHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLCB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyk7XG5cbiAgICAgIGlmICh0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyB8fCB0aGlzLnRleHRBbmltYXRvci5sZXR0ZXJzQ2hhbmdlZEZsYWcpIHtcbiAgICAgICAgdGhpcy5fc2l6ZUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbjtcbiAgICAgICAgdmFyIHJlbmRlcmVkTGV0dGVycyA9IHRoaXMudGV4dEFuaW1hdG9yLnJlbmRlcmVkTGV0dGVycztcbiAgICAgICAgdmFyIGxldHRlcnMgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO1xuICAgICAgICBsZW4gPSBsZXR0ZXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlbmRlcmVkTGV0dGVyO1xuICAgICAgICB2YXIgdGV4dFNwYW47XG4gICAgICAgIHZhciBnbHlwaEVsZW1lbnQ7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKCFsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTGV0dGVyID0gcmVuZGVyZWRMZXR0ZXJzW2ldO1xuICAgICAgICAgICAgdGV4dFNwYW4gPSB0aGlzLnRleHRTcGFuc1tpXS5zcGFuO1xuICAgICAgICAgICAgZ2x5cGhFbGVtZW50ID0gdGhpcy50ZXh0U3BhbnNbaV0uZ2x5cGg7XG5cbiAgICAgICAgICAgIGlmIChnbHlwaEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgZ2x5cGhFbGVtZW50LnJlbmRlckZyYW1lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLm0pIHtcbiAgICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCByZW5kZXJlZExldHRlci5tKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLl9tZGYubykge1xuICAgICAgICAgICAgICB0ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCByZW5kZXJlZExldHRlci5vKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLl9tZGYuc3cpIHtcbiAgICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCByZW5kZXJlZExldHRlci5zdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLnNjKSB7XG4gICAgICAgICAgICAgIHRleHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgcmVuZGVyZWRMZXR0ZXIuc2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuX21kZi5mYykge1xuICAgICAgICAgICAgICB0ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCByZW5kZXJlZExldHRlci5mYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIElTb2xpZEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0lJbWFnZUVsZW1lbnRdLCBJU29saWRFbGVtZW50KTtcblxuICBJU29saWRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0ID0gY3JlYXRlTlMoJ3JlY3QnKTsgLy8vIC9yZWN0LnN0eWxlLndpZHRoID0gdGhpcy5kYXRhLnN3O1xuICAgIC8vLyAvcmVjdC5zdHlsZS5oZWlnaHQgPSB0aGlzLmRhdGEuc2g7XG4gICAgLy8vIC9yZWN0LnN0eWxlLmZpbGwgPSB0aGlzLmRhdGEuc2M7XG5cbiAgICByZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmRhdGEuc3cpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmRhdGEuc2gpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5kYXRhLnNjKTtcbiAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChyZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBOdWxsRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRGcmFtZSgpO1xuICAgIHRoaXMuaW5pdFRyYW5zZm9ybShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRIaWVyYXJjaHkoKTtcbiAgfVxuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWUgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRydWUpO1xuICB9O1xuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5zb3VyY2VSZWN0QXRUaW1lID0gZnVuY3Rpb24gKCkge307XG5cbiAgTnVsbEVsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnRdLCBOdWxsRWxlbWVudCk7XG5cbiAgZnVuY3Rpb24gU1ZHUmVuZGVyZXJCYXNlKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VSZW5kZXJlcl0sIFNWR1JlbmRlcmVyQmFzZSk7XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVOdWxsID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IE51bGxFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTaGFwZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTVkdTaGFwZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVRleHQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgU1ZHVGV4dExvdHRpZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZUltYWdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IElJbWFnZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVNvbGlkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IElTb2xpZEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNvbmZpZ0FuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltRGF0YSkge1xuICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyk7XG4gICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgneG1sbnM6eGxpbmsnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycpO1xuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLnZpZXdCb3hTaXplKSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgdGhpcy5yZW5kZXJDb25maWcudmlld0JveFNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAnICsgYW5pbURhdGEudyArICcgJyArIGFuaW1EYXRhLmgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5yZW5kZXJDb25maWcudmlld0JveE9ubHkpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYW5pbURhdGEudyk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBhbmltRGF0YS5oKTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc3R5bGUuY29udGVudFZpc2liaWxpdHkgPSB0aGlzLnJlbmRlckNvbmZpZy5jb250ZW50VmlzaWJpbGl0eTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcud2lkdGgpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5yZW5kZXJDb25maWcud2lkdGgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5oZWlnaHQpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMucmVuZGVyQ29uZmlnLmhlaWdodCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5pZCkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLnJlbmRlckNvbmZpZy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmZvY3VzYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCB0aGlzLnJlbmRlckNvbmZpZy5mb2N1c2FibGUpO1xuICAgIH1cblxuICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCB0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvKTsgLy8gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgLy8gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUubW96VHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtJ10gPSBcIjBweCAwcHggMHB4XCI7XG5cbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnN2Z0VsZW1lbnQpOyAvLyBNYXNrIGFuaW1hdGlvblxuXG4gICAgdmFyIGRlZnMgPSB0aGlzLmdsb2JhbERhdGEuZGVmcztcbiAgICB0aGlzLnNldHVwR2xvYmFsRGF0YShhbmltRGF0YSwgZGVmcyk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2dyZXNzaXZlTG9hZCA9IHRoaXMucmVuZGVyQ29uZmlnLnByb2dyZXNzaXZlTG9hZDtcbiAgICB0aGlzLmRhdGEgPSBhbmltRGF0YTtcbiAgICB2YXIgbWFza0VsZW1lbnQgPSBjcmVhdGVOUygnY2xpcFBhdGgnKTtcbiAgICB2YXIgcmVjdCA9IGNyZWF0ZU5TKCdyZWN0Jyk7XG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYW5pbURhdGEudyk7XG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGFuaW1EYXRhLmgpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCd4JywgMCk7XG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCAwKTtcbiAgICB2YXIgbWFza0lkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgbWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIG1hc2tJZCk7XG4gICAgbWFza0VsZW1lbnQuYXBwZW5kQ2hpbGQocmVjdCk7XG4gICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGlwLXBhdGgnLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIG1hc2tJZCArICcpJyk7XG4gICAgZGVmcy5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7XG4gICAgdGhpcy5sYXllcnMgPSBhbmltRGF0YS5sYXllcnM7XG4gICAgdGhpcy5lbGVtZW50cyA9IGNyZWF0ZVNpemVkQXJyYXkoYW5pbURhdGEubGF5ZXJzLmxlbmd0aCk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuaW5uZXJUZXh0ID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5sYXllckVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzID0gbnVsbDtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMgPyB0aGlzLmxheWVycy5sZW5ndGggOiAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBudWxsO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUudXBkYXRlQ29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuZmluZEluZGV4QnlJbmQgPSBmdW5jdGlvbiAoaW5kKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmxheWVyc1tpXS5pbmQgPT09IGluZCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5idWlsZEl0ZW0gPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gdGhpcy5lbGVtZW50cztcblxuICAgIGlmIChlbGVtZW50c1twb3NdIHx8IHRoaXMubGF5ZXJzW3Bvc10udHkgPT09IDk5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWxlbWVudHNbcG9zXSA9IHRydWU7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmNyZWF0ZUl0ZW0odGhpcy5sYXllcnNbcG9zXSk7XG4gICAgZWxlbWVudHNbcG9zXSA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoZ2V0RXhwcmVzc2lvbnNQbHVnaW4oKSkge1xuICAgICAgaWYgKHRoaXMubGF5ZXJzW3Bvc10udHkgPT09IDApIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UucmVnaXN0ZXJDb21wb3NpdGlvbihlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5pbml0RXhwcmVzc2lvbnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLmFwcGVuZEVsZW1lbnRJblBvcyhlbGVtZW50LCBwb3MpO1xuXG4gICAgaWYgKHRoaXMubGF5ZXJzW3Bvc10udHQpIHtcbiAgICAgIHZhciBlbGVtZW50SW5kZXggPSAndHAnIGluIHRoaXMubGF5ZXJzW3Bvc10gPyB0aGlzLmZpbmRJbmRleEJ5SW5kKHRoaXMubGF5ZXJzW3Bvc10udHApIDogcG9zIC0gMTtcblxuICAgICAgaWYgKGVsZW1lbnRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuZWxlbWVudHNbZWxlbWVudEluZGV4XSB8fCB0aGlzLmVsZW1lbnRzW2VsZW1lbnRJbmRleF0gPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5idWlsZEl0ZW0oZWxlbWVudEluZGV4KTtcbiAgICAgICAgdGhpcy5hZGRQZW5kaW5nRWxlbWVudChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXR0ZUVsZW1lbnQgPSBlbGVtZW50c1tlbGVtZW50SW5kZXhdO1xuICAgICAgICB2YXIgbWF0dGVNYXNrID0gbWF0dGVFbGVtZW50LmdldE1hdHRlKHRoaXMubGF5ZXJzW3Bvc10udHQpO1xuICAgICAgICBlbGVtZW50LnNldE1hdHRlKG1hdHRlTWFzayk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY2hlY2tQZW5kaW5nRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2hpbGUgKHRoaXMucGVuZGluZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBlbmRpbmdFbGVtZW50cy5wb3AoKTtcbiAgICAgIGVsZW1lbnQuY2hlY2tQYXJlbnRpbmcoKTtcblxuICAgICAgaWYgKGVsZW1lbnQuZGF0YS50dCkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudEluZGV4ID0gJ3RwJyBpbiBlbGVtZW50LmRhdGEgPyB0aGlzLmZpbmRJbmRleEJ5SW5kKGVsZW1lbnQuZGF0YS50cCkgOiBpIC0gMTtcbiAgICAgICAgICAgIHZhciBtYXR0ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW2VsZW1lbnRJbmRleF07XG4gICAgICAgICAgICB2YXIgbWF0dGVNYXNrID0gbWF0dGVFbGVtZW50LmdldE1hdHRlKHRoaXMubGF5ZXJzW2ldLnR0KTtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0TWF0dGUobWF0dGVNYXNrKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVkRnJhbWUgPT09IG51bSB8fCB0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChudW0gPT09IG51bGwpIHtcbiAgICAgIG51bSA9IHRoaXMucmVuZGVyZWRGcmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gbnVtO1xuICAgIH0gLy8gY29uc29sZS5sb2coJy0tLS0tLS0nKTtcbiAgICAvLyBjb25zb2xlLmxvZygnRlJBTUUgJyxudW0pO1xuXG5cbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVOdW0gPSBudW07XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZyYW1lSWQgKz0gMTtcbiAgICB0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5jdXJyZW50RnJhbWUgPSBudW07XG4gICAgdGhpcy5nbG9iYWxEYXRhLl9tZGYgPSBmYWxzZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgaWYgKCF0aGlzLmNvbXBsZXRlTGF5ZXJzKSB7XG4gICAgICB0aGlzLmNoZWNrTGF5ZXJzKG51bSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5wcmVwYXJlRnJhbWUobnVtIC0gdGhpcy5sYXllcnNbaV0uc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmdsb2JhbERhdGEuX21kZikge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLnJlbmRlckZyYW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5hcHBlbmRFbGVtZW50SW5Qb3MgPSBmdW5jdGlvbiAoZWxlbWVudCwgcG9zKSB7XG4gICAgdmFyIG5ld0VsZW1lbnQgPSBlbGVtZW50LmdldEJhc2VFbGVtZW50KCk7XG5cbiAgICBpZiAoIW5ld0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIG5leHRFbGVtZW50O1xuXG4gICAgd2hpbGUgKGkgPCBwb3MpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldICYmIHRoaXMuZWxlbWVudHNbaV0gIT09IHRydWUgJiYgdGhpcy5lbGVtZW50c1tpXS5nZXRCYXNlRWxlbWVudCgpKSB7XG4gICAgICAgIG5leHRFbGVtZW50ID0gdGhpcy5lbGVtZW50c1tpXS5nZXRCYXNlRWxlbWVudCgpO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgaWYgKG5leHRFbGVtZW50KSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5pbnNlcnRCZWZvcmUobmV3RWxlbWVudCwgbmV4dEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTtcbiAgICB9XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9O1xuXG4gIGZ1bmN0aW9uIElDb21wRWxlbWVudCgpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRE9NRWxlbWVudF0sIElDb21wRWxlbWVudCk7XG5cbiAgSUNvbXBFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRUcmFuc2Zvcm0oZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0UmVuZGVyYWJsZSgpO1xuICAgIHRoaXMuaW5pdEhpZXJhcmNoeSgpO1xuICAgIHRoaXMuaW5pdFJlbmRlcmVyRWxlbWVudCgpO1xuICAgIHRoaXMuY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKTtcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCk7XG5cbiAgICBpZiAodGhpcy5kYXRhLnh0IHx8ICFnbG9iYWxEYXRhLnByb2dyZXNzaXZlTG9hZCkge1xuICAgICAgdGhpcy5idWlsZEFsbEl0ZW1zKCk7XG4gICAgfVxuXG4gICAgdGhpcy5oaWRlKCk7XG4gIH07XG4gIC8qIElDb21wRWxlbWVudC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCl7XG4gICAgICBpZighdGhpcy5oaWRkZW4pe1xuICAgICAgICAgIHRoaXMuaGlkZUVsZW1lbnQoKTtcbiAgICAgICAgICB2YXIgaSxsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICBmb3IoIGkgPSAwOyBpIDwgbGVuOyBpKz0xICl7XG4gICAgICAgICAgICAgIGlmKHRoaXMuZWxlbWVudHNbaV0pe1xuICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5oaWRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gIH07ICovXG5cblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKTtcbiAgICB0aGlzLnByZXBhcmVQcm9wZXJ0aWVzKG51bSwgdGhpcy5pc0luUmFuZ2UpO1xuXG4gICAgaWYgKCF0aGlzLmlzSW5SYW5nZSAmJiAhdGhpcy5kYXRhLnh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRtLl9wbGFjZWhvbGRlcikge1xuICAgICAgdmFyIHRpbWVSZW1hcHBlZCA9IHRoaXMudG0udjtcblxuICAgICAgaWYgKHRpbWVSZW1hcHBlZCA9PT0gdGhpcy5kYXRhLm9wKSB7XG4gICAgICAgIHRpbWVSZW1hcHBlZCA9IHRoaXMuZGF0YS5vcCAtIDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IHRpbWVSZW1hcHBlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gbnVtIC8gdGhpcy5kYXRhLnNyO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGlmICghdGhpcy5jb21wbGV0ZUxheWVycykge1xuICAgICAgdGhpcy5jaGVja0xheWVycyh0aGlzLnJlbmRlcmVkRnJhbWUpO1xuICAgIH0gLy8gVGhpcyBpdGVyYXRpb24gbmVlZHMgdG8gYmUgYmFja3dhcmRzIGJlY2F1c2Ugb2YgaG93IGV4cHJlc3Npb25zIGNvbm5lY3QgYmV0d2VlbiBlYWNoIG90aGVyXG5cblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucHJlcGFyZUZyYW1lKHRoaXMucmVuZGVyZWRGcmFtZSAtIHRoaXMubGF5ZXJzW2ldLnN0KTtcblxuICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tpXS5fbWRmKSB7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucmVuZGVyRnJhbWUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSUNvbXBFbGVtZW50LnByb3RvdHlwZS5zZXRFbGVtZW50cyA9IGZ1bmN0aW9uIChlbGVtcykge1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtcztcbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzO1xuICB9O1xuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveUVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZXN0cm95RWxlbWVudHMoKTtcbiAgICB0aGlzLmRlc3Ryb3lCYXNlRWxlbWVudCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR0NvbXBFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmxheWVycyA9IGRhdGEubGF5ZXJzO1xuICAgIHRoaXMuc3VwcG9ydHMzZCA9IHRydWU7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IGZhbHNlO1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IHRoaXMubGF5ZXJzID8gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLmxheWVycy5sZW5ndGgpIDogW107XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnRtID0gZGF0YS50bSA/IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEudG0sIDAsIGdsb2JhbERhdGEuZnJhbWVSYXRlLCB0aGlzKSA6IHtcbiAgICAgIF9wbGFjZWhvbGRlcjogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1NWR1JlbmRlcmVyQmFzZSwgSUNvbXBFbGVtZW50LCBTVkdCYXNlRWxlbWVudF0sIFNWR0NvbXBFbGVtZW50KTtcblxuICBTVkdDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTVkdDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1JlbmRlcmVyKGFuaW1hdGlvbkl0ZW0sIGNvbmZpZykge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IGFuaW1hdGlvbkl0ZW07XG4gICAgdGhpcy5sYXllcnMgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IC0xO1xuICAgIHRoaXMuc3ZnRWxlbWVudCA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICB2YXIgYXJpYUxhYmVsID0gJyc7XG5cbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy50aXRsZSkge1xuICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGNyZWF0ZU5TKCd0aXRsZScpO1xuICAgICAgdmFyIHRpdGxlSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIHRpdGxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGl0bGVJZCk7XG4gICAgICB0aXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBjb25maWcudGl0bGU7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuYXBwZW5kQ2hpbGQodGl0bGVFbGVtZW50KTtcbiAgICAgIGFyaWFMYWJlbCArPSB0aXRsZUlkO1xuICAgIH1cblxuICAgIGlmIChjb25maWcgJiYgY29uZmlnLmRlc2NyaXB0aW9uKSB7XG4gICAgICB2YXIgZGVzY0VsZW1lbnQgPSBjcmVhdGVOUygnZGVzYycpO1xuICAgICAgdmFyIGRlc2NJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgZGVzY0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGRlc2NJZCk7XG4gICAgICBkZXNjRWxlbWVudC50ZXh0Q29udGVudCA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChkZXNjRWxlbWVudCk7XG4gICAgICBhcmlhTGFiZWwgKz0gJyAnICsgZGVzY0lkO1xuICAgIH1cblxuICAgIGlmIChhcmlhTGFiZWwpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsIGFyaWFMYWJlbCk7XG4gICAgfVxuXG4gICAgdmFyIGRlZnMgPSBjcmVhdGVOUygnZGVmcycpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChkZWZzKTtcbiAgICB2YXIgbWFza0VsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7XG4gICAgdGhpcy5sYXllckVsZW1lbnQgPSBtYXNrRWxlbWVudDtcbiAgICB0aGlzLnJlbmRlckNvbmZpZyA9IHtcbiAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcucHJlc2VydmVBc3BlY3RSYXRpbyB8fCAneE1pZFlNaWQgbWVldCcsXG4gICAgICBpbWFnZVByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBzbGljZScsXG4gICAgICBjb250ZW50VmlzaWJpbGl0eTogY29uZmlnICYmIGNvbmZpZy5jb250ZW50VmlzaWJpbGl0eSB8fCAndmlzaWJsZScsXG4gICAgICBwcm9ncmVzc2l2ZUxvYWQ6IGNvbmZpZyAmJiBjb25maWcucHJvZ3Jlc3NpdmVMb2FkIHx8IGZhbHNlLFxuICAgICAgaGlkZU9uVHJhbnNwYXJlbnQ6ICEoY29uZmlnICYmIGNvbmZpZy5oaWRlT25UcmFuc3BhcmVudCA9PT0gZmFsc2UpLFxuICAgICAgdmlld0JveE9ubHk6IGNvbmZpZyAmJiBjb25maWcudmlld0JveE9ubHkgfHwgZmFsc2UsXG4gICAgICB2aWV3Qm94U2l6ZTogY29uZmlnICYmIGNvbmZpZy52aWV3Qm94U2l6ZSB8fCBmYWxzZSxcbiAgICAgIGNsYXNzTmFtZTogY29uZmlnICYmIGNvbmZpZy5jbGFzc05hbWUgfHwgJycsXG4gICAgICBpZDogY29uZmlnICYmIGNvbmZpZy5pZCB8fCAnJyxcbiAgICAgIGZvY3VzYWJsZTogY29uZmlnICYmIGNvbmZpZy5mb2N1c2FibGUsXG4gICAgICBmaWx0ZXJTaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUud2lkdGggfHwgJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS5oZWlnaHQgfHwgJzEwMCUnLFxuICAgICAgICB4OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueCB8fCAnMCUnLFxuICAgICAgICB5OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueSB8fCAnMCUnXG4gICAgICB9LFxuICAgICAgd2lkdGg6IGNvbmZpZyAmJiBjb25maWcud2lkdGgsXG4gICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuaGVpZ2h0LFxuICAgICAgcnVuRXhwcmVzc2lvbnM6ICFjb25maWcgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zXG4gICAgfTtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSB7XG4gICAgICBfbWRmOiBmYWxzZSxcbiAgICAgIGZyYW1lTnVtOiAtMSxcbiAgICAgIGRlZnM6IGRlZnMsXG4gICAgICByZW5kZXJDb25maWc6IHRoaXMucmVuZGVyQ29uZmlnXG4gICAgfTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ3N2Zyc7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1NWR1JlbmRlcmVyQmFzZV0sIFNWR1JlbmRlcmVyKTtcblxuICBTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTVkdDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNoYXBlVHJhbnNmb3JtTWFuYWdlcigpIHtcbiAgICB0aGlzLnNlcXVlbmNlcyA9IHt9O1xuICAgIHRoaXMuc2VxdWVuY2VMaXN0ID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1fa2V5X2NvdW50ID0gMDtcbiAgfVxuXG4gIFNoYXBlVHJhbnNmb3JtTWFuYWdlci5wcm90b3R5cGUgPSB7XG4gICAgYWRkVHJhbnNmb3JtU2VxdWVuY2U6IGZ1bmN0aW9uIGFkZFRyYW5zZm9ybVNlcXVlbmNlKHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgdmFyIGtleSA9ICdfJztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGtleSArPSB0cmFuc2Zvcm1zW2ldLnRyYW5zZm9ybS5rZXkgKyAnXyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXF1ZW5jZSA9IHRoaXMuc2VxdWVuY2VzW2tleV07XG5cbiAgICAgIGlmICghc2VxdWVuY2UpIHtcbiAgICAgICAgc2VxdWVuY2UgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtczogW10uY29uY2F0KHRyYW5zZm9ybXMpLFxuICAgICAgICAgIGZpbmFsVHJhbnNmb3JtOiBuZXcgTWF0cml4KCksXG4gICAgICAgICAgX21kZjogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXF1ZW5jZXNba2V5XSA9IHNlcXVlbmNlO1xuICAgICAgICB0aGlzLnNlcXVlbmNlTGlzdC5wdXNoKHNlcXVlbmNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlcXVlbmNlO1xuICAgIH0sXG4gICAgcHJvY2Vzc1NlcXVlbmNlOiBmdW5jdGlvbiBwcm9jZXNzU2VxdWVuY2Uoc2VxdWVuY2UsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHNlcXVlbmNlLnRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgdmFyIF9tZGYgPSBpc0ZpcnN0RnJhbWU7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuICYmICFpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgaWYgKHNlcXVlbmNlLnRyYW5zZm9ybXNbaV0udHJhbnNmb3JtLm1Qcm9wcy5fbWRmKSB7XG4gICAgICAgICAgX21kZiA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChfbWRmKSB7XG4gICAgICAgIHNlcXVlbmNlLmZpbmFsVHJhbnNmb3JtLnJlc2V0KCk7XG5cbiAgICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBzZXF1ZW5jZS5maW5hbFRyYW5zZm9ybS5tdWx0aXBseShzZXF1ZW5jZS50cmFuc2Zvcm1zW2ldLnRyYW5zZm9ybS5tUHJvcHMudik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VxdWVuY2UuX21kZiA9IF9tZGY7XG4gICAgfSxcbiAgICBwcm9jZXNzU2VxdWVuY2VzOiBmdW5jdGlvbiBwcm9jZXNzU2VxdWVuY2VzKGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5zZXF1ZW5jZUxpc3QubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzU2VxdWVuY2UodGhpcy5zZXF1ZW5jZUxpc3RbaV0sIGlzRmlyc3RGcmFtZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXROZXdLZXk6IGZ1bmN0aW9uIGdldE5ld0tleSgpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtX2tleV9jb3VudCArPSAxO1xuICAgICAgcmV0dXJuICdfJyArIHRoaXMudHJhbnNmb3JtX2tleV9jb3VudDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGx1bWFMb2FkZXIgPSBmdW5jdGlvbiBsdW1hTG9hZGVyKCkge1xuICAgIHZhciBpZCA9ICdfX2xvdHRpZV9lbGVtZW50X2x1bWFfYnVmZmVyJztcbiAgICB2YXIgbHVtYUJ1ZmZlciA9IG51bGw7XG4gICAgdmFyIGx1bWFCdWZmZXJDdHggPSBudWxsO1xuICAgIHZhciBzdmcgPSBudWxsOyAvLyBUaGlzIGFsdGVybmF0ZSBzb2x1dGlvbiBoYXMgYSBzbGlnaHQgZGVsYXkgYmVmb3JlIHRoZSBmaWx0ZXIgaXMgYXBwbGllZCwgcmVzdWx0aW5nIGluIGEgZmxpY2tlciBvbiB0aGUgZmlyc3QgZnJhbWUuXG4gICAgLy8gS2VlcGluZyB0aGlzIGhlcmUgZm9yIHJlZmVyZW5jZSwgYW5kIGluIHRoZSBmdXR1cmUsIGlmIG9mZnNjcmVlbiBjYW52YXMgc3VwcG9ydHMgdXJsIGZpbHRlcnMsIHRoaXMgY2FuIGJlIHVzZWQuXG4gICAgLy8gRm9yIG5vdywgbmVpdGhlciBvZiB0aGVtIHdvcmsgZm9yIG9mZnNjcmVlbiBjYW52YXMsIHNvIGNhbnZhcyB3b3JrZXJzIGNhbid0IHN1cHBvcnQgdGhlIGx1bWEgdHJhY2sgbWF0dGUgbWFzay5cbiAgICAvLyBOYW1pbmcgaXQgc29sdXRpb24gMiB0byBtYXJrIHRoZSBleHRyYSBjb21tZW50IGxpbmVzLlxuXG4gICAgLypcbiAgICB2YXIgc3ZnU3RyaW5nID0gW1xuICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPicsXG4gICAgICAnPGZpbHRlciBpZD1cIicgKyBpZCArICdcIj4nLFxuICAgICAgJzxmZUNvbG9yTWF0cml4IHR5cGU9XCJtYXRyaXhcIiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnM9XCJzUkdCXCIgdmFsdWVzPVwiJyxcbiAgICAgICcwLjMsIDAuMywgMC4zLCAwLCAwLCAnLFxuICAgICAgJzAuMywgMC4zLCAwLjMsIDAsIDAsICcsXG4gICAgICAnMC4zLCAwLjMsIDAuMywgMCwgMCwgJyxcbiAgICAgICcwLjMsIDAuMywgMC4zLCAwLCAwJyxcbiAgICAgICdcIi8+JyxcbiAgICAgICc8L2ZpbHRlcj4nLFxuICAgICAgJzwvc3ZnPicsXG4gICAgXS5qb2luKCcnKTtcbiAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtzdmdTdHJpbmddLCB7IHR5cGU6ICdpbWFnZS9zdmcreG1sJyB9KTtcbiAgICB2YXIgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlTHVtYVN2Z0ZpbHRlcigpIHtcbiAgICAgIHZhciBfc3ZnID0gY3JlYXRlTlMoJ3N2ZycpO1xuXG4gICAgICB2YXIgZmlsID0gY3JlYXRlTlMoJ2ZpbHRlcicpO1xuICAgICAgdmFyIG1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgICBmaWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgIG1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgICBtYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgICAgbWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAnKTtcbiAgICAgIGZpbC5hcHBlbmRDaGlsZChtYXRyaXgpO1xuXG4gICAgICBfc3ZnLmFwcGVuZENoaWxkKGZpbCk7XG5cbiAgICAgIF9zdmcuc2V0QXR0cmlidXRlKCdpZCcsIGlkICsgJ19zdmcnKTtcblxuICAgICAgaWYgKGZlYXR1cmVTdXBwb3J0LnN2Z0x1bWFIaWRkZW4pIHtcbiAgICAgICAgX3N2Zy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3N2ZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTHVtYSgpIHtcbiAgICAgIGlmICghbHVtYUJ1ZmZlcikge1xuICAgICAgICBzdmcgPSBjcmVhdGVMdW1hU3ZnRmlsdGVyKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgICAgICAgbHVtYUJ1ZmZlciA9IGNyZWF0ZVRhZygnY2FudmFzJyk7XG4gICAgICAgIGx1bWFCdWZmZXJDdHggPSBsdW1hQnVmZmVyLmdldENvbnRleHQoJzJkJyk7IC8vIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gYHVybCgnJHt1cmx9I19fbG90dGllX2VsZW1lbnRfbHVtYV9idWZmZXInKWA7IC8vIHBhcnQgb2Ygc29sdXRpb24gMlxuXG4gICAgICAgIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gJ3VybCgjJyArIGlkICsgJyknO1xuICAgICAgICBsdW1hQnVmZmVyQ3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICAgICAgbHVtYUJ1ZmZlckN0eC5maWxsUmVjdCgwLCAwLCAxLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMdW1hKGNhbnZhcykge1xuICAgICAgaWYgKCFsdW1hQnVmZmVyKSB7XG4gICAgICAgIGxvYWRMdW1hKCk7XG4gICAgICB9XG5cbiAgICAgIGx1bWFCdWZmZXIud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICBsdW1hQnVmZmVyLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7IC8vIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gYHVybCgnJHt1cmx9I19fbG90dGllX2VsZW1lbnRfbHVtYV9idWZmZXInKWA7IC8vIHBhcnQgb2Ygc29sdXRpb24gMlxuXG4gICAgICBsdW1hQnVmZmVyQ3R4LmZpbHRlciA9ICd1cmwoIycgKyBpZCArICcpJztcbiAgICAgIHJldHVybiBsdW1hQnVmZmVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsb2FkOiBsb2FkTHVtYSxcbiAgICAgIGdldDogZ2V0THVtYVxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoZmVhdHVyZVN1cHBvcnQub2Zmc2NyZWVuQ2FudmFzKSB7XG4gICAgICByZXR1cm4gbmV3IE9mZnNjcmVlbkNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICB2YXIgY2FudmFzID0gY3JlYXRlVGFnKCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHJldHVybiBjYW52YXM7XG4gIH1cblxuICB2YXIgYXNzZXRMb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRMdW1hQ2FudmFzOiBsdW1hTG9hZGVyLmxvYWQsXG4gICAgICBnZXRMdW1hQ2FudmFzOiBsdW1hTG9hZGVyLmdldCxcbiAgICAgIGNyZWF0ZUNhbnZhczogY3JlYXRlQ2FudmFzXG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciByZWdpc3RlcmVkRWZmZWN0cyA9IHt9O1xuXG4gIGZ1bmN0aW9uIENWRWZmZWN0cyhlbGVtKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGVsZW0uZGF0YS5lZiA/IGVsZW0uZGF0YS5lZi5sZW5ndGggOiAwO1xuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIHZhciBmaWx0ZXJNYW5hZ2VyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBmaWx0ZXJNYW5hZ2VyID0gbnVsbDtcbiAgICAgIHZhciB0eXBlID0gZWxlbS5kYXRhLmVmW2ldLnR5O1xuXG4gICAgICBpZiAocmVnaXN0ZXJlZEVmZmVjdHNbdHlwZV0pIHtcbiAgICAgICAgdmFyIEVmZmVjdCA9IHJlZ2lzdGVyZWRFZmZlY3RzW3R5cGVdLmVmZmVjdDtcbiAgICAgICAgZmlsdGVyTWFuYWdlciA9IG5ldyBFZmZlY3QoZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50c1tpXSwgZWxlbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWx0ZXJNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycy5wdXNoKGZpbHRlck1hbmFnZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICBlbGVtLmFkZFJlbmRlcmFibGVDb21wb25lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgQ1ZFZmZlY3RzLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZmlsdGVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuZmlsdGVyc1tpXS5yZW5kZXJGcmFtZShfaXNGaXJzdEZyYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZFZmZlY3RzLnByb3RvdHlwZS5nZXRFZmZlY3RzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5maWx0ZXJzLmxlbmd0aDtcbiAgICB2YXIgZWZmZWN0cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJzW2ldLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgZWZmZWN0cy5wdXNoKHRoaXMuZmlsdGVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVmZmVjdHM7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoaWQsIGVmZmVjdCkge1xuICAgIHJlZ2lzdGVyZWRFZmZlY3RzW2lkXSA9IHtcbiAgICAgIGVmZmVjdDogZWZmZWN0XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENWTWFza0VsZW1lbnQoZGF0YSwgZWxlbWVudCkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm1hc2tzUHJvcGVydGllcyA9IHRoaXMuZGF0YS5tYXNrc1Byb3BlcnRpZXMgfHwgW107XG4gICAgdGhpcy52aWV3RGF0YSA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgIHZhciBoYXNNYXNrcyA9IGZhbHNlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0ubW9kZSAhPT0gJ24nKSB7XG4gICAgICAgIGhhc01hc2tzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy52aWV3RGF0YVtpXSA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLmVsZW1lbnQsIHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLCAzKTtcbiAgICB9XG5cbiAgICB0aGlzLmhhc01hc2tzID0gaGFzTWFza3M7XG5cbiAgICBpZiAoaGFzTWFza3MpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIENWTWFza0VsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5oYXNNYXNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLmVsZW1lbnQuZmluYWxUcmFuc2Zvcm0ubWF0O1xuICAgIHZhciBjdHggPSB0aGlzLmVsZW1lbnQuY2FudmFzQ29udGV4dDtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgIHZhciBwdDtcbiAgICB2YXIgcHRzO1xuICAgIHZhciBkYXRhO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLm1vZGUgIT09ICduJykge1xuICAgICAgICBpZiAodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0uaW52KSB7XG4gICAgICAgICAgY3R4Lm1vdmVUbygwLCAwKTtcbiAgICAgICAgICBjdHgubGluZVRvKHRoaXMuZWxlbWVudC5nbG9iYWxEYXRhLmNvbXBTaXplLncsIDApO1xuICAgICAgICAgIGN0eC5saW5lVG8odGhpcy5lbGVtZW50Lmdsb2JhbERhdGEuY29tcFNpemUudywgdGhpcy5lbGVtZW50Lmdsb2JhbERhdGEuY29tcFNpemUuaCk7XG4gICAgICAgICAgY3R4LmxpbmVUbygwLCB0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oKTtcbiAgICAgICAgICBjdHgubGluZVRvKDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YSA9IHRoaXMudmlld0RhdGFbaV0udjtcbiAgICAgICAgcHQgPSB0cmFuc2Zvcm0uYXBwbHlUb1BvaW50QXJyYXkoZGF0YS52WzBdWzBdLCBkYXRhLnZbMF1bMV0sIDApO1xuICAgICAgICBjdHgubW92ZVRvKHB0WzBdLCBwdFsxXSk7XG4gICAgICAgIHZhciBqO1xuICAgICAgICB2YXIgakxlbiA9IGRhdGEuX2xlbmd0aDtcblxuICAgICAgICBmb3IgKGogPSAxOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgcHRzID0gdHJhbnNmb3JtLmFwcGx5VG9UcmlwbGVQb2ludHMoZGF0YS5vW2ogLSAxXSwgZGF0YS5pW2pdLCBkYXRhLnZbal0pO1xuICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHB0c1swXSwgcHRzWzFdLCBwdHNbMl0sIHB0c1szXSwgcHRzWzRdLCBwdHNbNV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHRzID0gdHJhbnNmb3JtLmFwcGx5VG9UcmlwbGVQb2ludHMoZGF0YS5vW2ogLSAxXSwgZGF0YS5pWzBdLCBkYXRhLnZbMF0pO1xuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhwdHNbMF0sIHB0c1sxXSwgcHRzWzJdLCBwdHNbM10sIHB0c1s0XSwgcHRzWzVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5yZW5kZXJlci5zYXZlKHRydWUpO1xuICAgIGN0eC5jbGlwKCk7XG4gIH07XG5cbiAgQ1ZNYXNrRWxlbWVudC5wcm90b3R5cGUuZ2V0TWFza1Byb3BlcnR5ID0gTWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tQcm9wZXJ0eTtcblxuICBDVk1hc2tFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZCYXNlRWxlbWVudCgpIHt9XG5cbiAgdmFyIG9wZXJhdGlvbnNNYXAgPSB7XG4gICAgMTogJ3NvdXJjZS1pbicsXG4gICAgMjogJ3NvdXJjZS1vdXQnLFxuICAgIDM6ICdzb3VyY2UtaW4nLFxuICAgIDQ6ICdzb3VyY2Utb3V0J1xuICB9O1xuICBDVkJhc2VFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBjcmVhdGVFbGVtZW50czogZnVuY3Rpb24gY3JlYXRlRWxlbWVudHMoKSB7fSxcbiAgICBpbml0UmVuZGVyZXJFbGVtZW50OiBmdW5jdGlvbiBpbml0UmVuZGVyZXJFbGVtZW50KCkge30sXG4gICAgY3JlYXRlQ29udGFpbmVyRWxlbWVudHM6IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCkge1xuICAgICAgLy8gSWYgdGhlIGxheWVyIGlzIG1hc2tlZCB3ZSB3aWxsIHVzZSB0d28gYnVmZmVycyB0byBzdG9yZSBlYWNoIGRpZmZlcmVudCBzdGF0ZXMgb2YgdGhlIGRyYXdpbmdcbiAgICAgIC8vIFRoaXMgc29sdXRpb24gaXMgbm90IGlkZWFsIGZvciBzZXZlcmFsIHJlYXNvbi4gQnV0IHVuZm9ydHVuYXRlbHksIGJlY2F1c2Ugb2YgdGhlIHJlY3Vyc2l2ZVxuICAgICAgLy8gbmF0dXJlIG9mIHRoZSByZW5kZXIgdHJlZSwgaXQncyB0aGUgb25seSBzaW1wbGUgd2F5IHRvIG1ha2Ugc3VyZSBvbmUgaW5uZXIgbWFzayBkb2Vzbid0IG92ZXJyaWRlIGFuIG91dGVyIG1hc2suXG4gICAgICAvLyBUT0RPOiB0cnkgdG8gcmVkdWNlIHRoZSBzaXplIG9mIHRoZXNlIGJ1ZmZlcnMgdG8gdGhlIHNpemUgb2YgdGhlIGNvbXBvc2l0aW9uIGNvbnRhbmluZyB0aGUgbGF5ZXJcbiAgICAgIC8vIEl0IG1pZ2h0IGJlIGNoYWxsZW5naW5nIGJlY2F1c2UgdGhlIGxheWVyIG1vc3QgbGlrZWx5IGlzIHRyYW5zZm9ybWVkIGluIHNvbWUgd2F5XG4gICAgICBpZiAodGhpcy5kYXRhLnR0ID49IDEpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgIHZhciBjYW52YXNDb250ZXh0ID0gdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQ7XG4gICAgICAgIHZhciBidWZmZXJDYW52YXMgPSBhc3NldExvYWRlci5jcmVhdGVDYW52YXMoY2FudmFzQ29udGV4dC5jYW52YXMud2lkdGgsIGNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlckNhbnZhcyk7XG4gICAgICAgIHZhciBidWZmZXJDYW52YXMyID0gYXNzZXRMb2FkZXIuY3JlYXRlQ2FudmFzKGNhbnZhc0NvbnRleHQuY2FudmFzLndpZHRoLCBjYW52YXNDb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChidWZmZXJDYW52YXMyKTtcblxuICAgICAgICBpZiAodGhpcy5kYXRhLnR0ID49IDMgJiYgIWRvY3VtZW50Ll9pc1Byb3h5KSB7XG4gICAgICAgICAgYXNzZXRMb2FkZXIubG9hZEx1bWFDYW52YXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQgPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzID0gdGhpcy5nbG9iYWxEYXRhLnRyYW5zZm9ybUNhbnZhcztcbiAgICAgIHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyID0gbmV3IENWRWZmZWN0cyh0aGlzKTtcbiAgICAgIHRoaXMuc2VhcmNoRWZmZWN0VHJhbnNmb3JtcygpO1xuICAgIH0sXG4gICAgY3JlYXRlQ29udGVudDogZnVuY3Rpb24gY3JlYXRlQ29udGVudCgpIHt9LFxuICAgIHNldEJsZW5kTW9kZTogZnVuY3Rpb24gc2V0QmxlbmRNb2RlKCkge1xuICAgICAgdmFyIGdsb2JhbERhdGEgPSB0aGlzLmdsb2JhbERhdGE7XG5cbiAgICAgIGlmIChnbG9iYWxEYXRhLmJsZW5kTW9kZSAhPT0gdGhpcy5kYXRhLmJtKSB7XG4gICAgICAgIGdsb2JhbERhdGEuYmxlbmRNb2RlID0gdGhpcy5kYXRhLmJtO1xuICAgICAgICB2YXIgYmxlbmRNb2RlVmFsdWUgPSBnZXRCbGVuZE1vZGUodGhpcy5kYXRhLmJtKTtcbiAgICAgICAgZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGJsZW5kTW9kZVZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHM6IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCkge1xuICAgICAgdGhpcy5tYXNrTWFuYWdlciA9IG5ldyBDVk1hc2tFbGVtZW50KHRoaXMuZGF0YSwgdGhpcyk7XG4gICAgICB0aGlzLnRyYW5zZm9ybUVmZmVjdHMgPSB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlci5nZXRFZmZlY3RzKGVmZmVjdFR5cGVzLlRSQU5TRk9STV9FRkZFQ1QpO1xuICAgIH0sXG4gICAgaGlkZUVsZW1lbnQ6IGZ1bmN0aW9uIGhpZGVFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLmhpZGRlbiAmJiAoIXRoaXMuaXNJblJhbmdlIHx8IHRoaXMuaXNUcmFuc3BhcmVudCkpIHtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0VsZW1lbnQ6IGZ1bmN0aW9uIHNob3dFbGVtZW50KCkge1xuICAgICAgaWYgKHRoaXMuaXNJblJhbmdlICYmICF0aGlzLmlzVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXNrTWFuYWdlci5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsZWFyQ2FudmFzOiBmdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXNDb250ZXh0KSB7XG4gICAgICBjYW52YXNDb250ZXh0LmNsZWFyUmVjdCh0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudHksIHRoaXMudHJhbnNmb3JtQ2FudmFzLncgKiB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeCwgdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5KTtcbiAgICB9LFxuICAgIHByZXBhcmVMYXllcjogZnVuY3Rpb24gcHJlcGFyZUxheWVyKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS50dCA+PSAxKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnNbMF07XG4gICAgICAgIHZhciBidWZmZXJDdHggPSBidWZmZXIuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdGhpcy5jbGVhckNhbnZhcyhidWZmZXJDdHgpOyAvLyBvbiB0aGUgZmlyc3QgYnVmZmVyIHdlIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBnbG9iYWwgZHJhd2luZ1xuXG4gICAgICAgIGJ1ZmZlckN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcywgMCwgMCk7IC8vIFRoZSBuZXh0IGZvdXIgbGluZXMgYXJlIHRvIGNsZWFyIHRoZSBjYW52YXNcbiAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlcmUgaXMgYSB3YXkgdG8gY2xlYXIgdGhlIGNhbnZhcyB3aXRob3V0IHJlc2V0dGluZyB0aGUgdHJhbnNmb3JtXG5cbiAgICAgICAgdGhpcy5jdXJyZW50VHJhbnNmb3JtID0gdGhpcy5jYW52YXNDb250ZXh0LmdldFRyYW5zZm9ybSgpO1xuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKHRoaXMuY2FudmFzQ29udGV4dCk7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5zZXRUcmFuc2Zvcm0odGhpcy5jdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4aXRMYXllcjogZnVuY3Rpb24gZXhpdExheWVyKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS50dCA+PSAxKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnNbMV07IC8vIE9uIHRoZSBzZWNvbmQgYnVmZmVyIHdlIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBnbG9iYWwgZHJhd2luZ1xuICAgICAgICAvLyB0aGF0IG9ubHkgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhpcyBsYXllclxuICAgICAgICAvLyAoaWYgaXQgaXMgYSBjb21wb3NpdGlvbiwgaXQgYWxzbyBpbmNsdWRlcyB0aGUgbmVzdGVkIGxheWVycylcblxuICAgICAgICB2YXIgYnVmZmVyQ3R4ID0gYnVmZmVyLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHRoaXMuY2xlYXJDYW52YXMoYnVmZmVyQ3R4KTtcbiAgICAgICAgYnVmZmVyQ3R4LmRyYXdJbWFnZSh0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLCAwLCAwKTsgLy8gV2UgY2xlYXIgdGhlIGNhbnZhcyBhZ2FpblxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICAgIHRoaXMuY2xlYXJDYW52YXModGhpcy5jYW52YXNDb250ZXh0KTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0pOyAvLyBXZSBkcmF3IHRoZSBtYXNrXG5cbiAgICAgICAgdmFyIG1hc2sgPSB0aGlzLmNvbXAuZ2V0RWxlbWVudEJ5SWQoJ3RwJyBpbiB0aGlzLmRhdGEgPyB0aGlzLmRhdGEudHAgOiB0aGlzLmRhdGEuaW5kIC0gMSk7XG4gICAgICAgIG1hc2sucmVuZGVyRnJhbWUodHJ1ZSk7IC8vIFdlIGRyYXcgdGhlIHNlY29uZCBidWZmZXIgKHRoYXQgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhpcyBsYXllcilcblxuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApOyAvLyBJZiB0aGUgbWFzayBpcyBhIEx1bWEgbWF0dGUsIHdlIG5lZWQgdG8gZG8gdHdvIGV4dHJhIHBhaW50aW5nIG9wZXJhdGlvbnNcbiAgICAgICAgLy8gdGhlIF9pc1Byb3h5IGNoZWNrIGlzIHRvIGF2b2lkIGRyYXdpbmcgYSBmYWtlIGNhbnZhcyBpbiB3b3JrZXJzIHRoYXQgd2lsbCB0aHJvdyBhbiBlcnJvclxuXG4gICAgICAgIGlmICh0aGlzLmRhdGEudHQgPj0gMyAmJiAhZG9jdW1lbnQuX2lzUHJveHkpIHtcbiAgICAgICAgICAvLyBXZSBjb3B5IHRoZSBwYWludGVkIG1hc2sgdG8gYSBidWZmZXIgdGhhdCBoYXMgYSBjb2xvciBtYXRyaXggZmlsdGVyIGFwcGxpZWQgdG8gaXRcbiAgICAgICAgICAvLyB0aGF0IGFwcGxpZXMgdGhlIHJnYiB2YWx1ZXMgdG8gdGhlIGFscGhhIGNoYW5uZWxcbiAgICAgICAgICB2YXIgbHVtYUJ1ZmZlciA9IGFzc2V0TG9hZGVyLmdldEx1bWFDYW52YXModGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcyk7XG4gICAgICAgICAgdmFyIGx1bWFCdWZmZXJDdHggPSBsdW1hQnVmZmVyLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgbHVtYUJ1ZmZlckN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcywgMCwgMCk7XG4gICAgICAgICAgdGhpcy5jbGVhckNhbnZhcyh0aGlzLmNhbnZhc0NvbnRleHQpOyAvLyB3ZSByZXBhaW50IHRoZSBjb250ZXh0IHdpdGggdGhlIG1hc2sgYXBwbGllZCB0byBpdFxuXG4gICAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmRyYXdJbWFnZShsdW1hQnVmZmVyLCAwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBvcGVyYXRpb25zTWFwW3RoaXMuZGF0YS50dF07XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UoYnVmZmVyLCAwLCAwKTsgLy8gV2UgZmluYWxseSBkcmF3IHRoZSBmaXJzdCBidWZmZXIgKHRoYXQgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhlIGdsb2JhbCBkcmF3aW5nKVxuICAgICAgICAvLyBXZSB1c2UgZGVzdGluYXRpb24tb3ZlciB0byBkcmF3IHRoZSBnbG9iYWwgZHJhd2luZyBiZWxvdyB0aGUgY3VycmVudCBsYXllclxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24tb3Zlcic7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UodGhpcy5idWZmZXJzWzBdLCAwLCAwKTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0pOyAvLyBXZSByZXNldCB0aGUgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIHRvIHNvdXJjZS1vdmVyLCB0aGUgc3RhbmRhcmQgdHlwZSBvZiBvcGVyYXRpb25cblxuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlckZyYW1lOiBmdW5jdGlvbiByZW5kZXJGcmFtZShmb3JjZVJlbmRlcikge1xuICAgICAgaWYgKHRoaXMuaGlkZGVuIHx8IHRoaXMuZGF0YS5oZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEudGQgPT09IDEgJiYgIWZvcmNlUmVuZGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRoaXMucmVuZGVyUmVuZGVyYWJsZSgpO1xuICAgICAgdGhpcy5yZW5kZXJMb2NhbFRyYW5zZm9ybSgpO1xuICAgICAgdGhpcy5zZXRCbGVuZE1vZGUoKTtcbiAgICAgIHZhciBmb3JjZVJlYWxTdGFjayA9IHRoaXMuZGF0YS50eSA9PT0gMDtcbiAgICAgIHRoaXMucHJlcGFyZUxheWVyKCk7XG4gICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuc2F2ZShmb3JjZVJlYWxTdGFjayk7XG4gICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4VHJhbnNmb3JtKHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxNYXQucHJvcHMpO1xuICAgICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLmN0eE9wYWNpdHkodGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE9wYWNpdHkpO1xuICAgICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKGZvcmNlUmVhbFN0YWNrKTtcbiAgICAgIHRoaXMuZXhpdExheWVyKCk7XG5cbiAgICAgIGlmICh0aGlzLm1hc2tNYW5hZ2VyLmhhc01hc2tzKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IG51bGw7XG4gICAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgICAgdGhpcy5nbG9iYWxEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgbUhlbHBlcjogbmV3IE1hdHJpeCgpXG4gIH07XG4gIENWQmFzZUVsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBDVkJhc2VFbGVtZW50LnByb3RvdHlwZS5oaWRlRWxlbWVudDtcbiAgQ1ZCYXNlRWxlbWVudC5wcm90b3R5cGUuc2hvdyA9IENWQmFzZUVsZW1lbnQucHJvdG90eXBlLnNob3dFbGVtZW50O1xuXG4gIGZ1bmN0aW9uIENWU2hhcGVEYXRhKGVsZW1lbnQsIGRhdGEsIHN0eWxlcywgdHJhbnNmb3Jtc01hbmFnZXIpIHtcbiAgICB0aGlzLnN0eWxlZFNoYXBlcyA9IFtdO1xuICAgIHRoaXMudHIgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIHR5ID0gNDtcblxuICAgIGlmIChkYXRhLnR5ID09PSAncmMnKSB7XG4gICAgICB0eSA9IDU7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnZWwnKSB7XG4gICAgICB0eSA9IDY7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnc3InKSB7XG4gICAgICB0eSA9IDc7XG4gICAgfVxuXG4gICAgdGhpcy5zaCA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcChlbGVtZW50LCBkYXRhLCB0eSwgZWxlbWVudCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG4gICAgdmFyIHN0eWxlZFNoYXBlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoIXN0eWxlc1tpXS5jbG9zZWQpIHtcbiAgICAgICAgc3R5bGVkU2hhcGUgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtczogdHJhbnNmb3Jtc01hbmFnZXIuYWRkVHJhbnNmb3JtU2VxdWVuY2Uoc3R5bGVzW2ldLnRyYW5zZm9ybXMpLFxuICAgICAgICAgIHRyTm9kZXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3R5bGVkU2hhcGVzLnB1c2goc3R5bGVkU2hhcGUpO1xuICAgICAgICBzdHlsZXNbaV0uZWxlbWVudHMucHVzaChzdHlsZWRTaGFwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQ1ZTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQgPSBTVkdTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQ7XG5cbiAgZnVuY3Rpb24gQ1ZTaGFwZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuc2hhcGVzID0gW107XG4gICAgdGhpcy5zaGFwZXNEYXRhID0gZGF0YS5zaGFwZXM7XG4gICAgdGhpcy5zdHlsZXNMaXN0ID0gW107XG4gICAgdGhpcy5pdGVtc0RhdGEgPSBbXTtcbiAgICB0aGlzLnByZXZWaWV3RGF0YSA9IFtdO1xuICAgIHRoaXMuc2hhcGVNb2RpZmllcnMgPSBbXTtcbiAgICB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1zTWFuYWdlciA9IG5ldyBTaGFwZVRyYW5zZm9ybU1hbmFnZXIoKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCwgSVNoYXBlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudF0sIENWU2hhcGVFbGVtZW50KTtcbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gUmVuZGVyYWJsZURPTUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50O1xuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUudHJhbnNmb3JtSGVscGVyID0ge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgX29wTWRmOiBmYWxzZVxuICB9O1xuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZGFzaFJlc2V0dGVyID0gW107XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRydWUsIFtdKTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU3R5bGVFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEsIHRyYW5zZm9ybXMpIHtcbiAgICB2YXIgc3R5bGVFbGVtID0ge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHR5cGU6IGRhdGEudHksXG4gICAgICBwcmVUcmFuc2Zvcm1zOiB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLmFkZFRyYW5zZm9ybVNlcXVlbmNlKHRyYW5zZm9ybXMpLFxuICAgICAgdHJhbnNmb3JtczogW10sXG4gICAgICBlbGVtZW50czogW10sXG4gICAgICBjbG9zZWQ6IGRhdGEuaGQgPT09IHRydWVcbiAgICB9O1xuICAgIHZhciBlbGVtZW50RGF0YSA9IHt9O1xuXG4gICAgaWYgKGRhdGEudHkgPT09ICdmbCcgfHwgZGF0YS50eSA9PT0gJ3N0Jykge1xuICAgICAgZWxlbWVudERhdGEuYyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuYywgMSwgMjU1LCB0aGlzKTtcblxuICAgICAgaWYgKCFlbGVtZW50RGF0YS5jLmspIHtcbiAgICAgICAgc3R5bGVFbGVtLmNvID0gJ3JnYignICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMF0pICsgJywnICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMV0pICsgJywnICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMl0pICsgJyknO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ2dmJyB8fCBkYXRhLnR5ID09PSAnZ3MnKSB7XG4gICAgICBlbGVtZW50RGF0YS5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5zLCAxLCBudWxsLCB0aGlzKTtcbiAgICAgIGVsZW1lbnREYXRhLmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLmUsIDEsIG51bGwsIHRoaXMpO1xuICAgICAgZWxlbWVudERhdGEuaCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuaCB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIDAuMDEsIHRoaXMpO1xuICAgICAgZWxlbWVudERhdGEuYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuYSB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICBlbGVtZW50RGF0YS5nID0gbmV3IEdyYWRpZW50UHJvcGVydHkodGhpcywgZGF0YS5nLCB0aGlzKTtcbiAgICB9XG5cbiAgICBlbGVtZW50RGF0YS5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5vLCAwLCAwLjAxLCB0aGlzKTtcblxuICAgIGlmIChkYXRhLnR5ID09PSAnc3QnIHx8IGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgIHN0eWxlRWxlbS5sYyA9IGxpbmVDYXBFbnVtW2RhdGEubGMgfHwgMl07XG4gICAgICBzdHlsZUVsZW0ubGogPSBsaW5lSm9pbkVudW1bZGF0YS5saiB8fCAyXTtcblxuICAgICAgaWYgKGRhdGEubGogPT0gMSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICBzdHlsZUVsZW0ubWwgPSBkYXRhLm1sO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50RGF0YS53ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS53LCAwLCBudWxsLCB0aGlzKTtcblxuICAgICAgaWYgKCFlbGVtZW50RGF0YS53LmspIHtcbiAgICAgICAgc3R5bGVFbGVtLndpID0gZWxlbWVudERhdGEudy52O1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5kKSB7XG4gICAgICAgIHZhciBkID0gbmV3IERhc2hQcm9wZXJ0eSh0aGlzLCBkYXRhLmQsICdjYW52YXMnLCB0aGlzKTtcbiAgICAgICAgZWxlbWVudERhdGEuZCA9IGQ7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50RGF0YS5kLmspIHtcbiAgICAgICAgICBzdHlsZUVsZW0uZGEgPSBlbGVtZW50RGF0YS5kLmRhc2hBcnJheTtcbiAgICAgICAgICBzdHlsZUVsZW1bXCJkb1wiXSA9IGVsZW1lbnREYXRhLmQuZGFzaG9mZnNldFswXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW0uciA9IGRhdGEuciA9PT0gMiA/ICdldmVub2RkJyA6ICdub256ZXJvJztcbiAgICB9XG5cbiAgICB0aGlzLnN0eWxlc0xpc3QucHVzaChzdHlsZUVsZW0pO1xuICAgIGVsZW1lbnREYXRhLnN0eWxlID0gc3R5bGVFbGVtO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlR3JvdXBFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50RGF0YSA9IHtcbiAgICAgIGl0OiBbXSxcbiAgICAgIHByZXZWaWV3RGF0YTogW11cbiAgICB9O1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlVHJhbnNmb3JtRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0ge1xuICAgICAgdHJhbnNmb3JtOiB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIF9vcE1kZjogZmFsc2UsXG4gICAgICAgIGtleTogdGhpcy50cmFuc2Zvcm1zTWFuYWdlci5nZXROZXdLZXkoKSxcbiAgICAgICAgb3A6IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEubywgMCwgMC4wMSwgdGhpcyksXG4gICAgICAgIG1Qcm9wczogVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KHRoaXMsIGRhdGEsIHRoaXMpXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNoYXBlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0gbmV3IENWU2hhcGVEYXRhKHRoaXMsIGRhdGEsIHRoaXMuc3R5bGVzTGlzdCwgdGhpcy50cmFuc2Zvcm1zTWFuYWdlcik7XG4gICAgdGhpcy5zaGFwZXMucHVzaChlbGVtZW50RGF0YSk7XG4gICAgdGhpcy5hZGRTaGFwZVRvTW9kaWZpZXJzKGVsZW1lbnREYXRhKTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbG9hZFNoYXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLml0ZW1zRGF0YS5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMucHJldlZpZXdEYXRhW2ldID0gdGhpcy5pdGVtc0RhdGFbaV07XG4gICAgfVxuXG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRydWUsIFtdKTtcbiAgICBsZW4gPSB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyTW9kaWZpZXJzKCk7XG4gICAgdGhpcy50cmFuc2Zvcm1zTWFuYWdlci5wcm9jZXNzU2VxdWVuY2VzKHRoaXMuX2lzRmlyc3RGcmFtZSk7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmFkZFRyYW5zZm9ybVRvU3R5bGVMaXN0ID0gZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzTGlzdFtpXS5jbG9zZWQpIHtcbiAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLnRyYW5zZm9ybXMucHVzaCh0cmFuc2Zvcm0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlVHJhbnNmb3JtRnJvbVN0eWxlTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKCF0aGlzLnN0eWxlc0xpc3RbaV0uY2xvc2VkKSB7XG4gICAgICAgIHRoaXMuc3R5bGVzTGlzdFtpXS50cmFuc2Zvcm1zLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2xvc2VTdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGVzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHN0eWxlc1tpXS5jbG9zZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuc2VhcmNoU2hhcGVzID0gZnVuY3Rpb24gKGFyciwgaXRlbXNEYXRhLCBwcmV2Vmlld0RhdGEsIHNob3VsZFJlbmRlciwgdHJhbnNmb3Jtcykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgb3duU3R5bGVzID0gW107XG4gICAgdmFyIG93bk1vZGlmaWVycyA9IFtdO1xuICAgIHZhciBwcm9jZXNzZWRQb3M7XG4gICAgdmFyIG1vZGlmaWVyO1xuICAgIHZhciBjdXJyZW50VHJhbnNmb3JtO1xuICAgIHZhciBvd25UcmFuc2Zvcm1zID0gW10uY29uY2F0KHRyYW5zZm9ybXMpO1xuXG4gICAgZm9yIChpID0gbGVuOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgcHJvY2Vzc2VkUG9zID0gdGhpcy5zZWFyY2hQcm9jZXNzZWRFbGVtZW50KGFycltpXSk7XG5cbiAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgIGFycltpXS5fc2hvdWxkUmVuZGVyID0gc2hvdWxkUmVuZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbXNEYXRhW2ldID0gcHJldlZpZXdEYXRhW3Byb2Nlc3NlZFBvcyAtIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyW2ldLnR5ID09PSAnZmwnIHx8IGFycltpXS50eSA9PT0gJ3N0JyB8fCBhcnJbaV0udHkgPT09ICdnZicgfHwgYXJyW2ldLnR5ID09PSAnZ3MnKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gdGhpcy5jcmVhdGVTdHlsZUVsZW1lbnQoYXJyW2ldLCBvd25UcmFuc2Zvcm1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0uc3R5bGUuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvd25TdHlsZXMucHVzaChpdGVtc0RhdGFbaV0uc3R5bGUpO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZUdyb3VwRWxlbWVudChhcnJbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGpMZW4gPSBpdGVtc0RhdGFbaV0uaXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YVtqXSA9IGl0ZW1zRGF0YVtpXS5pdFtqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlYXJjaFNoYXBlcyhhcnJbaV0uaXQsIGl0ZW1zRGF0YVtpXS5pdCwgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YSwgc2hvdWxkUmVuZGVyLCBvd25UcmFuc2Zvcm1zKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAndHInKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgY3VycmVudFRyYW5zZm9ybSA9IHRoaXMuY3JlYXRlVHJhbnNmb3JtRWxlbWVudChhcnJbaV0pO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgIH1cblxuICAgICAgICBvd25UcmFuc2Zvcm1zLnB1c2goaXRlbXNEYXRhW2ldKTtcbiAgICAgICAgdGhpcy5hZGRUcmFuc2Zvcm1Ub1N0eWxlTGlzdChpdGVtc0RhdGFbaV0pO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdzaCcgfHwgYXJyW2ldLnR5ID09PSAncmMnIHx8IGFycltpXS50eSA9PT0gJ2VsJyB8fCBhcnJbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZVNoYXBlRWxlbWVudChhcnJbaV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3RtJyB8fCBhcnJbaV0udHkgPT09ICdyZCcgfHwgYXJyW2ldLnR5ID09PSAncGInIHx8IGFycltpXS50eSA9PT0gJ3p6JyB8fCBhcnJbaV0udHkgPT09ICdvcCcpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBtb2RpZmllciA9IFNoYXBlTW9kaWZpZXJzLmdldE1vZGlmaWVyKGFycltpXS50eSk7XG4gICAgICAgICAgbW9kaWZpZXIuaW5pdCh0aGlzLCBhcnJbaV0pO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IG1vZGlmaWVyO1xuICAgICAgICAgIHRoaXMuc2hhcGVNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBpdGVtc0RhdGFbaV07XG4gICAgICAgICAgbW9kaWZpZXIuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3JwJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIG1vZGlmaWVyID0gU2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSBtb2RpZmllcjtcbiAgICAgICAgICBtb2RpZmllci5pbml0KHRoaXMsIGFyciwgaSwgaXRlbXNEYXRhKTtcbiAgICAgICAgICB0aGlzLnNoYXBlTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICAgIHNob3VsZFJlbmRlciA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGlmaWVyID0gaXRlbXNEYXRhW2ldO1xuICAgICAgICAgIG1vZGlmaWVyLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkUHJvY2Vzc2VkRWxlbWVudChhcnJbaV0sIGkgKyAxKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZVRyYW5zZm9ybUZyb21TdHlsZUxpc3QoKTtcbiAgICB0aGlzLmNsb3NlU3R5bGVzKG93blN0eWxlcyk7XG4gICAgbGVuID0gb3duTW9kaWZpZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgb3duTW9kaWZpZXJzW2ldLmNsb3NlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50cmFuc2Zvcm1IZWxwZXIub3BhY2l0eSA9IDE7XG4gICAgdGhpcy50cmFuc2Zvcm1IZWxwZXIuX29wTWRmID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJNb2RpZmllcnMoKTtcbiAgICB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLnByb2Nlc3NTZXF1ZW5jZXModGhpcy5faXNGaXJzdEZyYW1lKTtcbiAgICB0aGlzLnJlbmRlclNoYXBlKHRoaXMudHJhbnNmb3JtSGVscGVyLCB0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0cnVlKTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyU2hhcGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiAocGFyZW50VHJhbnNmb3JtLCBncm91cFRyYW5zZm9ybSkge1xuICAgIGlmIChwYXJlbnRUcmFuc2Zvcm0uX29wTWRmIHx8IGdyb3VwVHJhbnNmb3JtLm9wLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBncm91cFRyYW5zZm9ybS5vcGFjaXR5ID0gcGFyZW50VHJhbnNmb3JtLm9wYWNpdHk7XG4gICAgICBncm91cFRyYW5zZm9ybS5vcGFjaXR5ICo9IGdyb3VwVHJhbnNmb3JtLm9wLnY7XG4gICAgICBncm91cFRyYW5zZm9ybS5fb3BNZGYgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZHJhd0xheWVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBrO1xuICAgIHZhciBrTGVuO1xuICAgIHZhciBlbGVtcztcbiAgICB2YXIgbm9kZXM7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyO1xuICAgIHZhciBjdHggPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICB2YXIgdHlwZTtcbiAgICB2YXIgY3VycmVudFN0eWxlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBjdXJyZW50U3R5bGUgPSB0aGlzLnN0eWxlc0xpc3RbaV07XG4gICAgICB0eXBlID0gY3VycmVudFN0eWxlLnR5cGU7IC8vIFNraXBwaW5nIHN0eWxlIHdoZW5cbiAgICAgIC8vIFN0cm9rZSB3aWR0aCBlcXVhbHMgMFxuICAgICAgLy8gc3R5bGUgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCAoZXh0cmEgdW51c2VkIHJlcGVhdGVycylcbiAgICAgIC8vIGN1cnJlbnQgb3BhY2l0eSBlcXVhbHMgMFxuICAgICAgLy8gZ2xvYmFsIG9wYWNpdHkgZXF1YWxzIDBcblxuICAgICAgaWYgKCEoKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykgJiYgY3VycmVudFN0eWxlLndpID09PSAwIHx8ICFjdXJyZW50U3R5bGUuZGF0YS5fc2hvdWxkUmVuZGVyIHx8IGN1cnJlbnRTdHlsZS5jb09wID09PSAwIHx8IHRoaXMuZ2xvYmFsRGF0YS5jdXJyZW50R2xvYmFsQWxwaGEgPT09IDApKSB7XG4gICAgICAgIHJlbmRlcmVyLnNhdmUoKTtcbiAgICAgICAgZWxlbXMgPSBjdXJyZW50U3R5bGUuZWxlbWVudHM7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykge1xuICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZVN0eWxlKHR5cGUgPT09ICdzdCcgPyBjdXJyZW50U3R5bGUuY28gOiBjdXJyZW50U3R5bGUuZ3JkKTsgLy8gY3R4LnN0cm9rZVN0eWxlID0gdHlwZSA9PT0gJ3N0JyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQ7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhMaW5lV2lkdGgoY3VycmVudFN0eWxlLndpKTsgLy8gY3R4LmxpbmVXaWR0aCA9IGN1cnJlbnRTdHlsZS53aTtcblxuICAgICAgICAgIHJlbmRlcmVyLmN0eExpbmVDYXAoY3VycmVudFN0eWxlLmxjKTsgLy8gY3R4LmxpbmVDYXAgPSBjdXJyZW50U3R5bGUubGM7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhMaW5lSm9pbihjdXJyZW50U3R5bGUubGopOyAvLyBjdHgubGluZUpvaW4gPSBjdXJyZW50U3R5bGUubGo7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhNaXRlckxpbWl0KGN1cnJlbnRTdHlsZS5tbCB8fCAwKTsgLy8gY3R4Lm1pdGVyTGltaXQgPSBjdXJyZW50U3R5bGUubWwgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW5kZXJlci5jdHhGaWxsU3R5bGUodHlwZSA9PT0gJ2ZsJyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQpOyAvLyBjdHguZmlsbFN0eWxlID0gdHlwZSA9PT0gJ2ZsJyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQ7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5jdHhPcGFjaXR5KGN1cnJlbnRTdHlsZS5jb09wKTtcblxuICAgICAgICBpZiAodHlwZSAhPT0gJ3N0JyAmJiB0eXBlICE9PSAnZ3MnKSB7XG4gICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyZXIuY3R4VHJhbnNmb3JtKGN1cnJlbnRTdHlsZS5wcmVUcmFuc2Zvcm1zLmZpbmFsVHJhbnNmb3JtLnByb3BzKTtcbiAgICAgICAgakxlbiA9IGVsZW1zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFN0eWxlLmRhKSB7XG4gICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChjdXJyZW50U3R5bGUuZGEpO1xuICAgICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBjdXJyZW50U3R5bGVbXCJkb1wiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlcyA9IGVsZW1zW2pdLnRyTm9kZXM7XG4gICAgICAgICAga0xlbiA9IG5vZGVzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1trXS50ID09PSAnbScpIHtcbiAgICAgICAgICAgICAgY3R4Lm1vdmVUbyhub2Rlc1trXS5wWzBdLCBub2Rlc1trXS5wWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZXNba10udCA9PT0gJ2MnKSB7XG4gICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKG5vZGVzW2tdLnB0c1swXSwgbm9kZXNba10ucHRzWzFdLCBub2Rlc1trXS5wdHNbMl0sIG5vZGVzW2tdLnB0c1szXSwgbm9kZXNba10ucHRzWzRdLCBub2Rlc1trXS5wdHNbNV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlID09PSAnc3QnIHx8IHR5cGUgPT09ICdncycpIHtcbiAgICAgICAgICAgIC8vIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZSgpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFN0eWxlLmRhKSB7XG4gICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaCh0aGlzLmRhc2hSZXNldHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgIT09ICdzdCcgJiYgdHlwZSAhPT0gJ2dzJykge1xuICAgICAgICAgIC8vIGN0eC5maWxsKGN1cnJlbnRTdHlsZS5yKTtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbChjdXJyZW50U3R5bGUucik7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTaGFwZSA9IGZ1bmN0aW9uIChwYXJlbnRUcmFuc2Zvcm0sIGl0ZW1zLCBkYXRhLCBpc01haW4pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgZ3JvdXBUcmFuc2Zvcm07XG4gICAgZ3JvdXBUcmFuc2Zvcm0gPSBwYXJlbnRUcmFuc2Zvcm07XG5cbiAgICBmb3IgKGkgPSBsZW47IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAoaXRlbXNbaV0udHkgPT09ICd0cicpIHtcbiAgICAgICAgZ3JvdXBUcmFuc2Zvcm0gPSBkYXRhW2ldLnRyYW5zZm9ybTtcbiAgICAgICAgdGhpcy5yZW5kZXJTaGFwZVRyYW5zZm9ybShwYXJlbnRUcmFuc2Zvcm0sIGdyb3VwVHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdzaCcgfHwgaXRlbXNbaV0udHkgPT09ICdlbCcgfHwgaXRlbXNbaV0udHkgPT09ICdyYycgfHwgaXRlbXNbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJQYXRoKGl0ZW1zW2ldLCBkYXRhW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdmbCcpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJGaWxsKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnc3QnKSB7XG4gICAgICAgIHRoaXMucmVuZGVyU3Ryb2tlKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnZ2YnIHx8IGl0ZW1zW2ldLnR5ID09PSAnZ3MnKSB7XG4gICAgICAgIHRoaXMucmVuZGVyR3JhZGllbnRGaWxsKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgIHRoaXMucmVuZGVyU2hhcGUoZ3JvdXBUcmFuc2Zvcm0sIGl0ZW1zW2ldLml0LCBkYXRhW2ldLml0KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICd0bScpIHsvL1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc01haW4pIHtcbiAgICAgIHRoaXMuZHJhd0xheWVyKCk7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTdHlsZWRTaGFwZSA9IGZ1bmN0aW9uIChzdHlsZWRTaGFwZSwgc2hhcGUpIHtcbiAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lIHx8IHNoYXBlLl9tZGYgfHwgc3R5bGVkU2hhcGUudHJhbnNmb3Jtcy5fbWRmKSB7XG4gICAgICB2YXIgc2hhcGVOb2RlcyA9IHN0eWxlZFNoYXBlLnRyTm9kZXM7XG4gICAgICB2YXIgcGF0aHMgPSBzaGFwZS5wYXRocztcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGpMZW4gPSBwYXRocy5fbGVuZ3RoO1xuICAgICAgc2hhcGVOb2Rlcy5sZW5ndGggPSAwO1xuICAgICAgdmFyIGdyb3VwVHJhbnNmb3JtTWF0ID0gc3R5bGVkU2hhcGUudHJhbnNmb3Jtcy5maW5hbFRyYW5zZm9ybTtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICB2YXIgcGF0aE5vZGVzID0gcGF0aHMuc2hhcGVzW2pdO1xuXG4gICAgICAgIGlmIChwYXRoTm9kZXMgJiYgcGF0aE5vZGVzLnYpIHtcbiAgICAgICAgICBsZW4gPSBwYXRoTm9kZXMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGkgPT09IDEpIHtcbiAgICAgICAgICAgICAgc2hhcGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0OiAnbScsXG4gICAgICAgICAgICAgICAgcDogZ3JvdXBUcmFuc2Zvcm1NYXQuYXBwbHlUb1BvaW50QXJyYXkocGF0aE5vZGVzLnZbMF1bMF0sIHBhdGhOb2Rlcy52WzBdWzFdLCAwKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hhcGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgdDogJ2MnLFxuICAgICAgICAgICAgICBwdHM6IGdyb3VwVHJhbnNmb3JtTWF0LmFwcGx5VG9UcmlwbGVQb2ludHMocGF0aE5vZGVzLm9baSAtIDFdLCBwYXRoTm9kZXMuaVtpXSwgcGF0aE5vZGVzLnZbaV0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgICBzaGFwZU5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICB0OiAnbScsXG4gICAgICAgICAgICAgIHA6IGdyb3VwVHJhbnNmb3JtTWF0LmFwcGx5VG9Qb2ludEFycmF5KHBhdGhOb2Rlcy52WzBdWzBdLCBwYXRoTm9kZXMudlswXVsxXSwgMClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwYXRoTm9kZXMuYyAmJiBsZW4pIHtcbiAgICAgICAgICAgIHNoYXBlTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgIHQ6ICdjJyxcbiAgICAgICAgICAgICAgcHRzOiBncm91cFRyYW5zZm9ybU1hdC5hcHBseVRvVHJpcGxlUG9pbnRzKHBhdGhOb2Rlcy5vW2kgLSAxXSwgcGF0aE5vZGVzLmlbMF0sIHBhdGhOb2Rlcy52WzBdKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzaGFwZU5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICB0OiAneidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHlsZWRTaGFwZS50ck5vZGVzID0gc2hhcGVOb2RlcztcbiAgICB9XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclBhdGggPSBmdW5jdGlvbiAocGF0aERhdGEsIGl0ZW1EYXRhKSB7XG4gICAgaWYgKHBhdGhEYXRhLmhkICE9PSB0cnVlICYmIHBhdGhEYXRhLl9zaG91bGRSZW5kZXIpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGl0ZW1EYXRhLnN0eWxlZFNoYXBlcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnJlbmRlclN0eWxlZFNoYXBlKGl0ZW1EYXRhLnN0eWxlZFNoYXBlc1tpXSwgaXRlbURhdGEuc2gpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRmlsbCA9IGZ1bmN0aW9uIChzdHlsZURhdGEsIGl0ZW1EYXRhLCBncm91cFRyYW5zZm9ybSkge1xuICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcblxuICAgIGlmIChpdGVtRGF0YS5jLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBzdHlsZUVsZW0uY28gPSAncmdiKCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlswXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsxXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkgKyAnKSc7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBncm91cFRyYW5zZm9ybS5fb3BNZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBzdHlsZUVsZW0uY29PcCA9IGl0ZW1EYXRhLm8udiAqIGdyb3VwVHJhbnNmb3JtLm9wYWNpdHk7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJHcmFkaWVudEZpbGwgPSBmdW5jdGlvbiAoc3R5bGVEYXRhLCBpdGVtRGF0YSwgZ3JvdXBUcmFuc2Zvcm0pIHtcbiAgICB2YXIgc3R5bGVFbGVtID0gaXRlbURhdGEuc3R5bGU7XG4gICAgdmFyIGdyZDtcblxuICAgIGlmICghc3R5bGVFbGVtLmdyZCB8fCBpdGVtRGF0YS5nLl9tZGYgfHwgaXRlbURhdGEucy5fbWRmIHx8IGl0ZW1EYXRhLmUuX21kZiB8fCBzdHlsZURhdGEudCAhPT0gMSAmJiAoaXRlbURhdGEuaC5fbWRmIHx8IGl0ZW1EYXRhLmEuX21kZikpIHtcbiAgICAgIHZhciBjdHggPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICAgIHZhciBwdDEgPSBpdGVtRGF0YS5zLnY7XG4gICAgICB2YXIgcHQyID0gaXRlbURhdGEuZS52O1xuXG4gICAgICBpZiAoc3R5bGVEYXRhLnQgPT09IDEpIHtcbiAgICAgICAgZ3JkID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KHB0MVswXSwgcHQxWzFdLCBwdDJbMF0sIHB0MlsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmFkID0gTWF0aC5zcXJ0KE1hdGgucG93KHB0MVswXSAtIHB0MlswXSwgMikgKyBNYXRoLnBvdyhwdDFbMV0gLSBwdDJbMV0sIDIpKTtcbiAgICAgICAgdmFyIGFuZyA9IE1hdGguYXRhbjIocHQyWzFdIC0gcHQxWzFdLCBwdDJbMF0gLSBwdDFbMF0pO1xuICAgICAgICB2YXIgcGVyY2VudCA9IGl0ZW1EYXRhLmgudjtcblxuICAgICAgICBpZiAocGVyY2VudCA+PSAxKSB7XG4gICAgICAgICAgcGVyY2VudCA9IDAuOTk7XG4gICAgICAgIH0gZWxzZSBpZiAocGVyY2VudCA8PSAtMSkge1xuICAgICAgICAgIHBlcmNlbnQgPSAtMC45OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaXN0ID0gcmFkICogcGVyY2VudDtcbiAgICAgICAgdmFyIHggPSBNYXRoLmNvcyhhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVswXTtcbiAgICAgICAgdmFyIHkgPSBNYXRoLnNpbihhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVsxXTtcbiAgICAgICAgZ3JkID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHgsIHksIDAsIHB0MVswXSwgcHQxWzFdLCByYWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzdHlsZURhdGEuZy5wO1xuICAgICAgdmFyIGNWYWx1ZXMgPSBpdGVtRGF0YS5nLmM7XG4gICAgICB2YXIgb3BhY2l0eSA9IDE7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXRlbURhdGEuZy5faGFzT3BhY2l0eSAmJiBpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgIG9wYWNpdHkgPSBpdGVtRGF0YS5nLm9baSAqIDIgKyAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyZC5hZGRDb2xvclN0b3AoY1ZhbHVlc1tpICogNF0gLyAxMDAsICdyZ2JhKCcgKyBjVmFsdWVzW2kgKiA0ICsgMV0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgMl0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgM10gKyAnLCcgKyBvcGFjaXR5ICsgJyknKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVFbGVtLmdyZCA9IGdyZDtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW0uY29PcCA9IGl0ZW1EYXRhLm8udiAqIGdyb3VwVHJhbnNmb3JtLm9wYWNpdHk7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclN0cm9rZSA9IGZ1bmN0aW9uIChzdHlsZURhdGEsIGl0ZW1EYXRhLCBncm91cFRyYW5zZm9ybSkge1xuICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcbiAgICB2YXIgZCA9IGl0ZW1EYXRhLmQ7XG5cbiAgICBpZiAoZCAmJiAoZC5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgIHN0eWxlRWxlbS5kYSA9IGQuZGFzaEFycmF5O1xuICAgICAgc3R5bGVFbGVtW1wiZG9cIl0gPSBkLmRhc2hvZmZzZXRbMF07XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1EYXRhLmMuX21kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHN0eWxlRWxlbS5jbyA9ICdyZ2IoJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzBdKSArICcsJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzFdKSArICcsJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzJdKSArICcpJztcbiAgICB9XG5cbiAgICBpZiAoaXRlbURhdGEuby5fbWRmIHx8IGdyb3VwVHJhbnNmb3JtLl9vcE1kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHN0eWxlRWxlbS5jb09wID0gaXRlbURhdGEuby52ICogZ3JvdXBUcmFuc2Zvcm0ub3BhY2l0eTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbURhdGEudy5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgc3R5bGVFbGVtLndpID0gaXRlbURhdGEudy52O1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNoYXBlc0RhdGEgPSBudWxsO1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IG51bGw7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoID0gMDtcbiAgICB0aGlzLml0ZW1zRGF0YS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIGZ1bmN0aW9uIENWVGV4dEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMudGV4dFNwYW5zID0gW107XG4gICAgdGhpcy55T2Zmc2V0ID0gMDtcbiAgICB0aGlzLmZpbGxDb2xvckFuaW0gPSBmYWxzZTtcbiAgICB0aGlzLnN0cm9rZUNvbG9yQW5pbSA9IGZhbHNlO1xuICAgIHRoaXMuc3Ryb2tlV2lkdGhBbmltID0gZmFsc2U7XG4gICAgdGhpcy5zdHJva2UgPSBmYWxzZTtcbiAgICB0aGlzLmZpbGwgPSBmYWxzZTtcbiAgICB0aGlzLmp1c3RpZnlPZmZzZXQgPSAwO1xuICAgIHRoaXMuY3VycmVudFJlbmRlciA9IG51bGw7XG4gICAgdGhpcy5yZW5kZXJUeXBlID0gJ2NhbnZhcyc7XG4gICAgdGhpcy52YWx1ZXMgPSB7XG4gICAgICBmaWxsOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICBzdHJva2U6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgIHNXaWR0aDogMCxcbiAgICAgIGZWYWx1ZTogJydcbiAgICB9O1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50LCBJVGV4dEVsZW1lbnRdLCBDVlRleHRFbGVtZW50KTtcbiAgQ1ZUZXh0RWxlbWVudC5wcm90b3R5cGUudEhlbHBlciA9IGNyZWF0ZVRhZygnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcblxuICBDVlRleHRFbGVtZW50LnByb3RvdHlwZS5idWlsZE5ld1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvY3VtZW50RGF0YSA9IHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhO1xuICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzID0gY3JlYXRlU2l6ZWRBcnJheShkb2N1bWVudERhdGEubCA/IGRvY3VtZW50RGF0YS5sLmxlbmd0aCA6IDApO1xuICAgIHZhciBoYXNGaWxsID0gZmFsc2U7XG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICBoYXNGaWxsID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsdWVzLmZpbGwgPSB0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLmZjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZXMuZmlsbCA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICB9XG5cbiAgICB0aGlzLmZpbGwgPSBoYXNGaWxsO1xuICAgIHZhciBoYXNTdHJva2UgPSBmYWxzZTtcblxuICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgIGhhc1N0cm9rZSA9IHRydWU7XG4gICAgICB0aGlzLnZhbHVlcy5zdHJva2UgPSB0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLnNjKTtcbiAgICAgIHRoaXMudmFsdWVzLnNXaWR0aCA9IGRvY3VtZW50RGF0YS5zdztcbiAgICB9XG5cbiAgICB2YXIgZm9udERhdGEgPSB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZik7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgbGV0dGVycyA9IGRvY3VtZW50RGF0YS5sO1xuICAgIHZhciBtYXRyaXhIZWxwZXIgPSB0aGlzLm1IZWxwZXI7XG4gICAgdGhpcy5zdHJva2UgPSBoYXNTdHJva2U7XG4gICAgdGhpcy52YWx1ZXMuZlZhbHVlID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSArICdweCAnICsgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHk7XG4gICAgbGVuID0gZG9jdW1lbnREYXRhLmZpbmFsVGV4dC5sZW5ndGg7IC8vIHRoaXMudEhlbHBlci5mb250ID0gdGhpcy52YWx1ZXMuZlZhbHVlO1xuXG4gICAgdmFyIGNoYXJEYXRhO1xuICAgIHZhciBzaGFwZURhdGE7XG4gICAgdmFyIGs7XG4gICAgdmFyIGtMZW47XG4gICAgdmFyIHNoYXBlcztcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgcGF0aE5vZGVzO1xuICAgIHZhciBjb21tYW5kcztcbiAgICB2YXIgcGF0aEFycjtcbiAgICB2YXIgc2luZ2xlU2hhcGUgPSB0aGlzLmRhdGEuc2luZ2xlU2hhcGU7XG4gICAgdmFyIHRyYWNraW5nT2Zmc2V0ID0gZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgIHZhciB4UG9zID0gMDtcbiAgICB2YXIgeVBvcyA9IDA7XG4gICAgdmFyIGZpcnN0TGluZSA9IHRydWU7XG4gICAgdmFyIGNudCA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGNoYXJEYXRhID0gdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGRvY3VtZW50RGF0YS5maW5hbFRleHRbaV0sIGZvbnREYXRhLmZTdHlsZSwgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHkpO1xuICAgICAgc2hhcGVEYXRhID0gY2hhckRhdGEgJiYgY2hhckRhdGEuZGF0YSB8fCB7fTtcbiAgICAgIG1hdHJpeEhlbHBlci5yZXNldCgpO1xuXG4gICAgICBpZiAoc2luZ2xlU2hhcGUgJiYgbGV0dGVyc1tpXS5uKSB7XG4gICAgICAgIHhQb3MgPSAtdHJhY2tpbmdPZmZzZXQ7XG4gICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLnlPZmZzZXQ7XG4gICAgICAgIHlQb3MgKz0gZmlyc3RMaW5lID8gMSA6IDA7XG4gICAgICAgIGZpcnN0TGluZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBzaGFwZXMgPSBzaGFwZURhdGEuc2hhcGVzID8gc2hhcGVEYXRhLnNoYXBlc1swXS5pdCA6IFtdO1xuICAgICAgakxlbiA9IHNoYXBlcy5sZW5ndGg7XG4gICAgICBtYXRyaXhIZWxwZXIuc2NhbGUoZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCk7XG5cbiAgICAgIGlmIChzaW5nbGVTaGFwZSkge1xuICAgICAgICB0aGlzLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeChkb2N1bWVudERhdGEsIG1hdHJpeEhlbHBlciwgbGV0dGVyc1tpXS5saW5lLCB4UG9zLCB5UG9zKTtcbiAgICAgIH1cblxuICAgICAgY29tbWFuZHMgPSBjcmVhdGVTaXplZEFycmF5KGpMZW4gLSAxKTtcbiAgICAgIHZhciBjb21tYW5kc0NvdW50ZXIgPSAwO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgIGlmIChzaGFwZXNbal0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgICBrTGVuID0gc2hhcGVzW2pdLmtzLmsuaS5sZW5ndGg7XG4gICAgICAgICAgcGF0aE5vZGVzID0gc2hhcGVzW2pdLmtzLms7XG4gICAgICAgICAgcGF0aEFyciA9IFtdO1xuXG4gICAgICAgICAgZm9yIChrID0gMTsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGsgPT09IDEpIHtcbiAgICAgICAgICAgICAgcGF0aEFyci5wdXNoKG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMudlswXVswXSwgcGF0aE5vZGVzLnZbMF1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLnZbMF1bMF0sIHBhdGhOb2Rlcy52WzBdWzFdLCAwKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhdGhBcnIucHVzaChtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLm9bayAtIDFdWzBdLCBwYXRoTm9kZXMub1trIC0gMV1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLm9bayAtIDFdWzBdLCBwYXRoTm9kZXMub1trIC0gMV1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLmlba11bMF0sIHBhdGhOb2Rlcy5pW2tdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9ZKHBhdGhOb2Rlcy5pW2tdWzBdLCBwYXRoTm9kZXMuaVtrXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMudltrXVswXSwgcGF0aE5vZGVzLnZba11bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLnZba11bMF0sIHBhdGhOb2Rlcy52W2tdWzFdLCAwKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aEFyci5wdXNoKG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMub1trIC0gMV1bMF0sIHBhdGhOb2Rlcy5vW2sgLSAxXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMub1trIC0gMV1bMF0sIHBhdGhOb2Rlcy5vW2sgLSAxXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMuaVswXVswXSwgcGF0aE5vZGVzLmlbMF1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLmlbMF1bMF0sIHBhdGhOb2Rlcy5pWzBdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy52WzBdWzBdLCBwYXRoTm9kZXMudlswXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMudlswXVswXSwgcGF0aE5vZGVzLnZbMF1bMV0sIDApKTtcbiAgICAgICAgICBjb21tYW5kc1tjb21tYW5kc0NvdW50ZXJdID0gcGF0aEFycjtcbiAgICAgICAgICBjb21tYW5kc0NvdW50ZXIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2luZ2xlU2hhcGUpIHtcbiAgICAgICAgeFBvcyArPSBsZXR0ZXJzW2ldLmw7XG4gICAgICAgIHhQb3MgKz0gdHJhY2tpbmdPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRleHRTcGFuc1tjbnRdKSB7XG4gICAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0uZWxlbSA9IGNvbW1hbmRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50ZXh0U3BhbnNbY250XSA9IHtcbiAgICAgICAgICBlbGVtOiBjb21tYW5kc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjbnQgKz0gMTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZUZXh0RWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudmFsaWRhdGVUZXh0KCk7XG4gICAgdmFyIGN0eCA9IHRoaXMuY2FudmFzQ29udGV4dDtcbiAgICBjdHguZm9udCA9IHRoaXMudmFsdWVzLmZWYWx1ZTtcbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4TGluZUNhcCgnYnV0dCcpOyAvLyBjdHgubGluZUNhcCA9ICdidXR0JztcblxuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhMaW5lSm9pbignbWl0ZXInKTsgLy8gY3R4LmxpbmVKb2luID0gJ21pdGVyJztcblxuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhNaXRlckxpbWl0KDQpOyAvLyBjdHgubWl0ZXJMaW1pdCA9IDQ7XG5cbiAgICBpZiAoIXRoaXMuZGF0YS5zaW5nbGVTaGFwZSkge1xuICAgICAgdGhpcy50ZXh0QW5pbWF0b3IuZ2V0TWVhc3VyZXModGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEsIHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnKTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBrO1xuICAgIHZhciBrTGVuO1xuICAgIHZhciByZW5kZXJlZExldHRlcnMgPSB0aGlzLnRleHRBbmltYXRvci5yZW5kZXJlZExldHRlcnM7XG4gICAgdmFyIGxldHRlcnMgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO1xuICAgIGxlbiA9IGxldHRlcnMubGVuZ3RoO1xuICAgIHZhciByZW5kZXJlZExldHRlcjtcbiAgICB2YXIgbGFzdEZpbGwgPSBudWxsO1xuICAgIHZhciBsYXN0U3Ryb2tlID0gbnVsbDtcbiAgICB2YXIgbGFzdFN0cm9rZVcgPSBudWxsO1xuICAgIHZhciBjb21tYW5kcztcbiAgICB2YXIgcGF0aEFycjtcbiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICghbGV0dGVyc1tpXS5uKSB7XG4gICAgICAgIHJlbmRlcmVkTGV0dGVyID0gcmVuZGVyZWRMZXR0ZXJzW2ldO1xuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlcikge1xuICAgICAgICAgIHJlbmRlcmVyLnNhdmUoKTtcbiAgICAgICAgICByZW5kZXJlci5jdHhUcmFuc2Zvcm0ocmVuZGVyZWRMZXR0ZXIucCk7XG4gICAgICAgICAgcmVuZGVyZXIuY3R4T3BhY2l0eShyZW5kZXJlZExldHRlci5vKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbGwpIHtcbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuZmMpIHtcbiAgICAgICAgICAgIGlmIChsYXN0RmlsbCAhPT0gcmVuZGVyZWRMZXR0ZXIuZmMpIHtcbiAgICAgICAgICAgICAgcmVuZGVyZXIuY3R4RmlsbFN0eWxlKHJlbmRlcmVkTGV0dGVyLmZjKTtcbiAgICAgICAgICAgICAgbGFzdEZpbGwgPSByZW5kZXJlZExldHRlci5mYzsgLy8gY3R4LmZpbGxTdHlsZSA9IHJlbmRlcmVkTGV0dGVyLmZjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobGFzdEZpbGwgIT09IHRoaXMudmFsdWVzLmZpbGwpIHtcbiAgICAgICAgICAgIGxhc3RGaWxsID0gdGhpcy52YWx1ZXMuZmlsbDtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN0eEZpbGxTdHlsZSh0aGlzLnZhbHVlcy5maWxsKTsgLy8gY3R4LmZpbGxTdHlsZSA9IHRoaXMudmFsdWVzLmZpbGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tbWFuZHMgPSB0aGlzLnRleHRTcGFuc1tpXS5lbGVtO1xuICAgICAgICAgIGpMZW4gPSBjb21tYW5kcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBwYXRoQXJyID0gY29tbWFuZHNbal07XG4gICAgICAgICAgICBrTGVuID0gcGF0aEFyci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5tb3ZlVG8ocGF0aEFyclswXSwgcGF0aEFyclsxXSk7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDI7IGsgPCBrTGVuOyBrICs9IDYpIHtcbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmV6aWVyQ3VydmVUbyhwYXRoQXJyW2tdLCBwYXRoQXJyW2sgKyAxXSwgcGF0aEFycltrICsgMl0sIHBhdGhBcnJbayArIDNdLCBwYXRoQXJyW2sgKyA0XSwgcGF0aEFycltrICsgNV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIHJlbmRlcmVyLmN0eEZpbGwoKTsgLy8gdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuZmlsbCgpO1xuICAgICAgICAgIC8vLyBjdHguZmlsbFRleHQodGhpcy50ZXh0U3BhbnNbaV0udmFsLDAsMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdHJva2UpIHtcbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuc3cpIHtcbiAgICAgICAgICAgIGlmIChsYXN0U3Ryb2tlVyAhPT0gcmVuZGVyZWRMZXR0ZXIuc3cpIHtcbiAgICAgICAgICAgICAgbGFzdFN0cm9rZVcgPSByZW5kZXJlZExldHRlci5zdztcbiAgICAgICAgICAgICAgcmVuZGVyZXIuY3R4TGluZVdpZHRoKHJlbmRlcmVkTGV0dGVyLnN3KTsgLy8gY3R4LmxpbmVXaWR0aCA9IHJlbmRlcmVkTGV0dGVyLnN3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobGFzdFN0cm9rZVcgIT09IHRoaXMudmFsdWVzLnNXaWR0aCkge1xuICAgICAgICAgICAgbGFzdFN0cm9rZVcgPSB0aGlzLnZhbHVlcy5zV2lkdGg7XG4gICAgICAgICAgICByZW5kZXJlci5jdHhMaW5lV2lkdGgodGhpcy52YWx1ZXMuc1dpZHRoKTsgLy8gY3R4LmxpbmVXaWR0aCA9IHRoaXMudmFsdWVzLnNXaWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuc2MpIHtcbiAgICAgICAgICAgIGlmIChsYXN0U3Ryb2tlICE9PSByZW5kZXJlZExldHRlci5zYykge1xuICAgICAgICAgICAgICBsYXN0U3Ryb2tlID0gcmVuZGVyZWRMZXR0ZXIuc2M7XG4gICAgICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZVN0eWxlKHJlbmRlcmVkTGV0dGVyLnNjKTsgLy8gY3R4LnN0cm9rZVN0eWxlID0gcmVuZGVyZWRMZXR0ZXIuc2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXN0U3Ryb2tlICE9PSB0aGlzLnZhbHVlcy5zdHJva2UpIHtcbiAgICAgICAgICAgIGxhc3RTdHJva2UgPSB0aGlzLnZhbHVlcy5zdHJva2U7XG4gICAgICAgICAgICByZW5kZXJlci5jdHhTdHJva2VTdHlsZSh0aGlzLnZhbHVlcy5zdHJva2UpOyAvLyBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnZhbHVlcy5zdHJva2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tbWFuZHMgPSB0aGlzLnRleHRTcGFuc1tpXS5lbGVtO1xuICAgICAgICAgIGpMZW4gPSBjb21tYW5kcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBwYXRoQXJyID0gY29tbWFuZHNbal07XG4gICAgICAgICAgICBrTGVuID0gcGF0aEFyci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5tb3ZlVG8ocGF0aEFyclswXSwgcGF0aEFyclsxXSk7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDI7IGsgPCBrTGVuOyBrICs9IDYpIHtcbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmV6aWVyQ3VydmVUbyhwYXRoQXJyW2tdLCBwYXRoQXJyW2sgKyAxXSwgcGF0aEFycltrICsgMl0sIHBhdGhBcnJbayArIDNdLCBwYXRoQXJyW2sgKyA0XSwgcGF0aEFycltrICsgNV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZSgpOyAvLyB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAvLy8gY3R4LnN0cm9rZVRleHQobGV0dGVyc1tpXS52YWwsMCwwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlcikge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZJbWFnZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG4gICAgdGhpcy5pbWcgPSBnbG9iYWxEYXRhLmltYWdlTG9hZGVyLmdldEFzc2V0KHRoaXMuYXNzZXREYXRhKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudF0sIENWSW1hZ2VFbGVtZW50KTtcbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudDtcbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IElJbWFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZTtcblxuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pbWcud2lkdGggJiYgKHRoaXMuYXNzZXREYXRhLncgIT09IHRoaXMuaW1nLndpZHRoIHx8IHRoaXMuYXNzZXREYXRhLmggIT09IHRoaXMuaW1nLmhlaWdodCkpIHtcbiAgICAgIHZhciBjYW52YXMgPSBjcmVhdGVUYWcoJ2NhbnZhcycpO1xuICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5hc3NldERhdGEudztcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLmFzc2V0RGF0YS5oO1xuICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgdmFyIGltZ1cgPSB0aGlzLmltZy53aWR0aDtcbiAgICAgIHZhciBpbWdIID0gdGhpcy5pbWcuaGVpZ2h0O1xuICAgICAgdmFyIGltZ1JlbCA9IGltZ1cgLyBpbWdIO1xuICAgICAgdmFyIGNhbnZhc1JlbCA9IHRoaXMuYXNzZXREYXRhLncgLyB0aGlzLmFzc2V0RGF0YS5oO1xuICAgICAgdmFyIHdpZHRoQ3JvcDtcbiAgICAgIHZhciBoZWlnaHRDcm9wO1xuICAgICAgdmFyIHBhciA9IHRoaXMuYXNzZXREYXRhLnByIHx8IHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvO1xuXG4gICAgICBpZiAoaW1nUmVsID4gY2FudmFzUmVsICYmIHBhciA9PT0gJ3hNaWRZTWlkIHNsaWNlJyB8fCBpbWdSZWwgPCBjYW52YXNSZWwgJiYgcGFyICE9PSAneE1pZFlNaWQgc2xpY2UnKSB7XG4gICAgICAgIGhlaWdodENyb3AgPSBpbWdIO1xuICAgICAgICB3aWR0aENyb3AgPSBoZWlnaHRDcm9wICogY2FudmFzUmVsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2lkdGhDcm9wID0gaW1nVztcbiAgICAgICAgaGVpZ2h0Q3JvcCA9IHdpZHRoQ3JvcCAvIGNhbnZhc1JlbDtcbiAgICAgIH1cblxuICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltZywgKGltZ1cgLSB3aWR0aENyb3ApIC8gMiwgKGltZ0ggLSBoZWlnaHRDcm9wKSAvIDIsIHdpZHRoQ3JvcCwgaGVpZ2h0Q3JvcCwgMCwgMCwgdGhpcy5hc3NldERhdGEudywgdGhpcy5hc3NldERhdGEuaCk7XG4gICAgICB0aGlzLmltZyA9IGNhbnZhcztcbiAgICB9XG4gIH07XG5cbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZHJhd0ltYWdlKHRoaXMuaW1nLCAwLCAwKTtcbiAgfTtcblxuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmltZyA9IG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZTb2xpZEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50XSwgQ1ZTb2xpZEVsZW1lbnQpO1xuICBDVlNvbGlkRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQgPSBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50O1xuICBDVlNvbGlkRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gSUltYWdlRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lO1xuXG4gIENWU29saWRFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gdmFyIGN0eCA9IHRoaXMuY2FudmFzQ29udGV4dDtcbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbFN0eWxlKHRoaXMuZGF0YS5zYyk7IC8vIGN0eC5maWxsU3R5bGUgPSB0aGlzLmRhdGEuc2M7XG5cbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbFJlY3QoMCwgMCwgdGhpcy5kYXRhLnN3LCB0aGlzLmRhdGEuc2gpOyAvLyBjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5kYXRhLnN3LCB0aGlzLmRhdGEuc2gpO1xuICAgIC8vXG4gIH07XG5cbiAgZnVuY3Rpb24gQ2FudmFzUmVuZGVyZXJCYXNlKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VSZW5kZXJlcl0sIENhbnZhc1JlbmRlcmVyQmFzZSk7XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTaGFwZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVlNoYXBlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlVGV4dCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVlRleHRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVJbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVkltYWdlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlU29saWQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQ1ZTb2xpZEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZU51bGwgPSBTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlTnVsbDtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eFRyYW5zZm9ybSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wc1swXSA9PT0gMSAmJiBwcm9wc1sxXSA9PT0gMCAmJiBwcm9wc1s0XSA9PT0gMCAmJiBwcm9wc1s1XSA9PT0gMSAmJiBwcm9wc1sxMl0gPT09IDAgJiYgcHJvcHNbMTNdID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnRyYW5zZm9ybShwcm9wc1swXSwgcHJvcHNbMV0sIHByb3BzWzRdLCBwcm9wc1s1XSwgcHJvcHNbMTJdLCBwcm9wc1sxM10pO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4T3BhY2l0eSA9IGZ1bmN0aW9uIChvcCkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxBbHBoYSAqPSBvcCA8IDAgPyAwIDogb3A7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhGaWxsU3R5bGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbFN0eWxlID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhTdHJva2VTdHlsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5zdHJva2VTdHlsZSA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TGluZVdpZHRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmxpbmVXaWR0aCA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TGluZUNhcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5saW5lQ2FwID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhMaW5lSm9pbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5saW5lSm9pbiA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TWl0ZXJMaW1pdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5taXRlckxpbWl0ID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhGaWxsID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbChydWxlKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eEZpbGxSZWN0ID0gZnVuY3Rpb24gKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhTdHJva2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnN0cm9rZSgpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHREYXRhLnJlc2V0KCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5zYXZlKCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKGFjdGlvbkZsYWcpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQucmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChhY3Rpb25GbGFnKSB7XG4gICAgICB0aGlzLmdsb2JhbERhdGEuYmxlbmRNb2RlID0gJ3NvdXJjZS1vdmVyJztcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHREYXRhLnJlc3RvcmUoYWN0aW9uRmxhZyk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIgPSBjcmVhdGVUYWcoJ2NhbnZhcycpO1xuICAgICAgdmFyIGNvbnRhaW5lclN0eWxlID0gdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zdHlsZTtcbiAgICAgIGNvbnRhaW5lclN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgY29udGFpbmVyU3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgdmFyIG9yaWdpbiA9ICcwcHggMHB4IDBweCc7XG4gICAgICBjb250YWluZXJTdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZS5tb3pUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0nXSA9IG9yaWdpbjtcbiAgICAgIGNvbnRhaW5lclN0eWxlLmNvbnRlbnRWaXNpYmlsaXR5ID0gdGhpcy5yZW5kZXJDb25maWcuY29udGVudFZpc2liaWxpdHk7XG4gICAgICB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyKTtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuaWQpIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5yZW5kZXJDb25maWcuaWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQgPSB0aGlzLnJlbmRlckNvbmZpZy5jb250ZXh0O1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dERhdGEuc2V0Q29udGV4dCh0aGlzLmNhbnZhc0NvbnRleHQpO1xuICAgIHRoaXMuZGF0YSA9IGFuaW1EYXRhO1xuICAgIHRoaXMubGF5ZXJzID0gYW5pbURhdGEubGF5ZXJzO1xuICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzID0ge1xuICAgICAgdzogYW5pbURhdGEudyxcbiAgICAgIGg6IGFuaW1EYXRhLmgsXG4gICAgICBzeDogMCxcbiAgICAgIHN5OiAwLFxuICAgICAgdHg6IDAsXG4gICAgICB0eTogMFxuICAgIH07XG4gICAgdGhpcy5zZXR1cEdsb2JhbERhdGEoYW5pbURhdGEsIGRvY3VtZW50LmJvZHkpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0ID0gdGhpcy5jYW52YXNDb250ZXh0O1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlciA9IHRoaXM7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmlzRGFzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2dyZXNzaXZlTG9hZCA9IHRoaXMucmVuZGVyQ29uZmlnLnByb2dyZXNzaXZlTG9hZDtcbiAgICB0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzID0gdGhpcy50cmFuc2Zvcm1DYW52YXM7XG4gICAgdGhpcy5lbGVtZW50cyA9IGNyZWF0ZVNpemVkQXJyYXkoYW5pbURhdGEubGF5ZXJzLmxlbmd0aCk7XG4gICAgdGhpcy51cGRhdGVDb250YWluZXJTaXplKCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS51cGRhdGVDb250YWluZXJTaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdmFyIGVsZW1lbnRXaWR0aDtcbiAgICB2YXIgZWxlbWVudEhlaWdodDtcblxuICAgIGlmICh3aWR0aCkge1xuICAgICAgZWxlbWVudFdpZHRoID0gd2lkdGg7XG4gICAgICBlbGVtZW50SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy53aWR0aCA9IGVsZW1lbnRXaWR0aDtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMuaGVpZ2h0ID0gZWxlbWVudEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyICYmIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIpIHtcbiAgICAgICAgZWxlbWVudFdpZHRoID0gdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgIGVsZW1lbnRIZWlnaHQgPSB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50V2lkdGggPSB0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLndpZHRoO1xuICAgICAgICBlbGVtZW50SGVpZ2h0ID0gdGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy5oZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMud2lkdGggPSBlbGVtZW50V2lkdGggKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCA9IGVsZW1lbnRIZWlnaHQgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRSZWw7XG4gICAgdmFyIGFuaW1hdGlvblJlbDtcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvLmluZGV4T2YoJ21lZXQnKSAhPT0gLTEgfHwgdGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpby5pbmRleE9mKCdzbGljZScpICE9PSAtMSkge1xuICAgICAgdmFyIHBhciA9IHRoaXMucmVuZGVyQ29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW8uc3BsaXQoJyAnKTtcbiAgICAgIHZhciBmaWxsVHlwZSA9IHBhclsxXSB8fCAnbWVldCc7XG4gICAgICB2YXIgcG9zID0gcGFyWzBdIHx8ICd4TWlkWU1pZCc7XG4gICAgICB2YXIgeFBvcyA9IHBvcy5zdWJzdHIoMCwgNCk7XG4gICAgICB2YXIgeVBvcyA9IHBvcy5zdWJzdHIoNCk7XG4gICAgICBlbGVtZW50UmVsID0gZWxlbWVudFdpZHRoIC8gZWxlbWVudEhlaWdodDtcbiAgICAgIGFuaW1hdGlvblJlbCA9IHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oO1xuXG4gICAgICBpZiAoYW5pbWF0aW9uUmVsID4gZWxlbWVudFJlbCAmJiBmaWxsVHlwZSA9PT0gJ21lZXQnIHx8IGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdzbGljZScpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3ggPSBlbGVtZW50V2lkdGggLyAodGhpcy50cmFuc2Zvcm1DYW52YXMudyAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5ID0gZWxlbWVudFdpZHRoIC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3ggPSBlbGVtZW50SGVpZ2h0IC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLmggLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeSA9IGVsZW1lbnRIZWlnaHQgLyAodGhpcy50cmFuc2Zvcm1DYW52YXMuaCAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh4UG9zID09PSAneE1pZCcgJiYgKGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPiBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IChlbGVtZW50V2lkdGggLSB0aGlzLnRyYW5zZm9ybUNhbnZhcy53ICogKGVsZW1lbnRIZWlnaHQgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKSkgLyAyICogdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgfSBlbHNlIGlmICh4UG9zID09PSAneE1heCcgJiYgKGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPiBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IChlbGVtZW50V2lkdGggLSB0aGlzLnRyYW5zZm9ybUNhbnZhcy53ICogKGVsZW1lbnRIZWlnaHQgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKSkgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmICh5UG9zID09PSAnWU1pZCcgJiYgKGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPCBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IChlbGVtZW50SGVpZ2h0IC0gdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIChlbGVtZW50V2lkdGggLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy53KSkgLyAyICogdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgfSBlbHNlIGlmICh5UG9zID09PSAnWU1heCcgJiYgKGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPCBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IChlbGVtZW50SGVpZ2h0IC0gdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIChlbGVtZW50V2lkdGggLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy53KSkgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvID09PSAnbm9uZScpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN4ID0gZWxlbWVudFdpZHRoIC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3kgPSBlbGVtZW50SGVpZ2h0IC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLmggLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHggPSAwO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHkgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeCA9IHRoaXMucmVuZGVyQ29uZmlnLmRwcjtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5ID0gdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHggPSAwO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHkgPSAwO1xuICAgIH1cblxuICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnByb3BzID0gW3RoaXMudHJhbnNmb3JtQ2FudmFzLnN4LCAwLCAwLCAwLCAwLCB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeSwgMCwgMCwgMCwgMCwgMSwgMCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudHgsIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR5LCAwLCAxXTtcbiAgICAvKiB2YXIgaSwgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XG4gICAgICBmb3IoaT0wO2k8bGVuO2krPTEpe1xuICAgICAgICAgIGlmKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXS5kYXRhLnR5ID09PSAwKXtcbiAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5yZXNpemUodGhpcy5nbG9iYWxEYXRhLnRyYW5zZm9ybUNhbnZhcyk7XG4gICAgICAgICAgfVxuICAgICAgfSAqL1xuXG4gICAgdGhpcy5jdHhUcmFuc2Zvcm0odGhpcy50cmFuc2Zvcm1DYW52YXMucHJvcHMpO1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5iZWdpblBhdGgoKTtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQucmVjdCgwLCAwLCB0aGlzLnRyYW5zZm9ybUNhbnZhcy53LCB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKTtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmNsaXAoKTtcbiAgICB0aGlzLnJlbmRlckZyYW1lKHRoaXMucmVuZGVyZWRGcmFtZSwgdHJ1ZSk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcyAmJiB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuaW5uZXJUZXh0ID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzID8gdGhpcy5sYXllcnMubGVuZ3RoIDogMDtcblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyID0gbnVsbDtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChudW0sIGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZWRGcmFtZSA9PT0gbnVtICYmIHRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzID09PSB0cnVlICYmICFmb3JjZVJlbmRlciB8fCB0aGlzLmRlc3Ryb3llZCB8fCBudW0gPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gbnVtO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZU51bSA9IG51bSAtIHRoaXMuYW5pbWF0aW9uSXRlbS5faXNGaXJzdEZyYW1lO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZUlkICs9IDE7XG4gICAgdGhpcy5nbG9iYWxEYXRhLl9tZGYgPSAhdGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMgfHwgZm9yY2VSZW5kZXI7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UuY3VycmVudEZyYW1lID0gbnVtOyAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0nKTtcbiAgICAvLyBjb25zb2xlLmxvZygnTkVXOiAnLG51bSk7XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgaWYgKCF0aGlzLmNvbXBsZXRlTGF5ZXJzKSB7XG4gICAgICB0aGlzLmNoZWNrTGF5ZXJzKG51bSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5wcmVwYXJlRnJhbWUobnVtIC0gdGhpcy5sYXllcnNbaV0uc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmdsb2JhbERhdGEuX21kZikge1xuICAgICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudywgdGhpcy50cmFuc2Zvcm1DYW52YXMuaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcGxldGVMYXllcnMgfHwgdGhpcy5lbGVtZW50c1tpXSkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucmVuZGVyRnJhbWUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMgIT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuYnVpbGRJdGVtID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBpZiAoZWxlbWVudHNbcG9zXSB8fCB0aGlzLmxheWVyc1twb3NdLnR5ID09PSA5OSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gdGhpcy5jcmVhdGVJdGVtKHRoaXMubGF5ZXJzW3Bvc10sIHRoaXMsIHRoaXMuZ2xvYmFsRGF0YSk7XG4gICAgZWxlbWVudHNbcG9zXSA9IGVsZW1lbnQ7XG4gICAgZWxlbWVudC5pbml0RXhwcmVzc2lvbnMoKTtcbiAgICAvKiBpZih0aGlzLmxheWVyc1twb3NdLnR5ID09PSAwKXtcbiAgICAgICAgICBlbGVtZW50LnJlc2l6ZSh0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzKTtcbiAgICAgIH0gKi9cbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmNoZWNrUGVuZGluZ0VsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHdoaWxlICh0aGlzLnBlbmRpbmdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5wZW5kaW5nRWxlbWVudHMucG9wKCk7XG4gICAgICBlbGVtZW50LmNoZWNrUGFyZW50aW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ2FudmFzQ29udGV4dCgpIHtcbiAgICB0aGlzLm9wYWNpdHkgPSAtMTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCAxNik7XG4gICAgdGhpcy5maWxsU3R5bGUgPSAnJztcbiAgICB0aGlzLnN0cm9rZVN0eWxlID0gJyc7XG4gICAgdGhpcy5saW5lV2lkdGggPSAnJztcbiAgICB0aGlzLmxpbmVDYXAgPSAnJztcbiAgICB0aGlzLmxpbmVKb2luID0gJyc7XG4gICAgdGhpcy5taXRlckxpbWl0ID0gJyc7XG4gICAgdGhpcy5pZCA9IE1hdGgucmFuZG9tKCk7XG4gIH1cblxuICBmdW5jdGlvbiBDVkNvbnRleHREYXRhKCkge1xuICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB0aGlzLmNBcnJQb3MgPSAwO1xuICAgIHRoaXMuY1RyID0gbmV3IE1hdHJpeCgpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSAxNTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdmFyIGNhbnZhc0NvbnRleHQgPSBuZXcgQ2FudmFzQ29udGV4dCgpO1xuICAgICAgdGhpcy5zdGFja1tpXSA9IGNhbnZhc0NvbnRleHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fbGVuZ3RoID0gbGVuO1xuICAgIHRoaXMubmF0aXZlQ29udGV4dCA9IG51bGw7XG4gICAgdGhpcy50cmFuc2Zvcm1NYXQgPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5jdXJyZW50T3BhY2l0eSA9IDE7IC8vXG5cbiAgICB0aGlzLmN1cnJlbnRGaWxsU3R5bGUgPSAnJztcbiAgICB0aGlzLmFwcGxpZWRGaWxsU3R5bGUgPSAnJzsgLy9cblxuICAgIHRoaXMuY3VycmVudFN0cm9rZVN0eWxlID0gJyc7XG4gICAgdGhpcy5hcHBsaWVkU3Ryb2tlU3R5bGUgPSAnJzsgLy9cblxuICAgIHRoaXMuY3VycmVudExpbmVXaWR0aCA9ICcnO1xuICAgIHRoaXMuYXBwbGllZExpbmVXaWR0aCA9ICcnOyAvL1xuXG4gICAgdGhpcy5jdXJyZW50TGluZUNhcCA9ICcnO1xuICAgIHRoaXMuYXBwbGllZExpbmVDYXAgPSAnJzsgLy9cblxuICAgIHRoaXMuY3VycmVudExpbmVKb2luID0gJyc7XG4gICAgdGhpcy5hcHBsaWVkTGluZUpvaW4gPSAnJzsgLy9cblxuICAgIHRoaXMuYXBwbGllZE1pdGVyTGltaXQgPSAnJztcbiAgICB0aGlzLmN1cnJlbnRNaXRlckxpbWl0ID0gJyc7XG4gIH1cblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5kdXBsaWNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5ld0xlbmd0aCA9IHRoaXMuX2xlbmd0aCAqIDI7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgZm9yIChpID0gdGhpcy5fbGVuZ3RoOyBpIDwgbmV3TGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuc3RhY2tbaV0gPSBuZXcgQ2FudmFzQ29udGV4dCgpO1xuICAgIH1cblxuICAgIHRoaXMuX2xlbmd0aCA9IG5ld0xlbmd0aDtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNBcnJQb3MgPSAwO1xuICAgIHRoaXMuY1RyLnJlc2V0KCk7XG4gICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLm9wYWNpdHkgPSAxO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiAoZm9yY2VSZXN0b3JlKSB7XG4gICAgdGhpcy5jQXJyUG9zIC09IDE7XG4gICAgdmFyIGN1cnJlbnRDb250ZXh0ID0gdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdO1xuICAgIHZhciB0cmFuc2Zvcm0gPSBjdXJyZW50Q29udGV4dC50cmFuc2Zvcm07XG4gICAgdmFyIGk7XG4gICAgdmFyIGFyciA9IHRoaXMuY1RyLnByb3BzO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgIGFycltpXSA9IHRyYW5zZm9ybVtpXTtcbiAgICB9XG5cbiAgICBpZiAoZm9yY2VSZXN0b3JlKSB7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgdmFyIHByZXZTdGFjayA9IHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zICsgMV07XG4gICAgICB0aGlzLmFwcGxpZWRGaWxsU3R5bGUgPSBwcmV2U3RhY2suZmlsbFN0eWxlO1xuICAgICAgdGhpcy5hcHBsaWVkU3Ryb2tlU3R5bGUgPSBwcmV2U3RhY2suc3Ryb2tlU3R5bGU7XG4gICAgICB0aGlzLmFwcGxpZWRMaW5lV2lkdGggPSBwcmV2U3RhY2subGluZVdpZHRoO1xuICAgICAgdGhpcy5hcHBsaWVkTGluZUNhcCA9IHByZXZTdGFjay5saW5lQ2FwO1xuICAgICAgdGhpcy5hcHBsaWVkTGluZUpvaW4gPSBwcmV2U3RhY2subGluZUpvaW47XG4gICAgICB0aGlzLmFwcGxpZWRNaXRlckxpbWl0ID0gcHJldlN0YWNrLm1pdGVyTGltaXQ7XG4gICAgfVxuXG4gICAgdGhpcy5uYXRpdmVDb250ZXh0LnNldFRyYW5zZm9ybSh0cmFuc2Zvcm1bMF0sIHRyYW5zZm9ybVsxXSwgdHJhbnNmb3JtWzRdLCB0cmFuc2Zvcm1bNV0sIHRyYW5zZm9ybVsxMl0sIHRyYW5zZm9ybVsxM10pO1xuXG4gICAgaWYgKGZvcmNlUmVzdG9yZSB8fCBjdXJyZW50Q29udGV4dC5vcGFjaXR5ICE9PSAtMSAmJiB0aGlzLmN1cnJlbnRPcGFjaXR5ICE9PSBjdXJyZW50Q29udGV4dC5vcGFjaXR5KSB7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQuZ2xvYmFsQWxwaGEgPSBjdXJyZW50Q29udGV4dC5vcGFjaXR5O1xuICAgICAgdGhpcy5jdXJyZW50T3BhY2l0eSA9IGN1cnJlbnRDb250ZXh0Lm9wYWNpdHk7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50RmlsbFN0eWxlID0gY3VycmVudENvbnRleHQuZmlsbFN0eWxlO1xuICAgIHRoaXMuY3VycmVudFN0cm9rZVN0eWxlID0gY3VycmVudENvbnRleHQuc3Ryb2tlU3R5bGU7XG4gICAgdGhpcy5jdXJyZW50TGluZVdpZHRoID0gY3VycmVudENvbnRleHQubGluZVdpZHRoO1xuICAgIHRoaXMuY3VycmVudExpbmVDYXAgPSBjdXJyZW50Q29udGV4dC5saW5lQ2FwO1xuICAgIHRoaXMuY3VycmVudExpbmVKb2luID0gY3VycmVudENvbnRleHQubGluZUpvaW47XG4gICAgdGhpcy5jdXJyZW50TWl0ZXJMaW1pdCA9IGN1cnJlbnRDb250ZXh0Lm1pdGVyTGltaXQ7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChzYXZlT25OYXRpdmVGbGFnKSB7XG4gICAgaWYgKHNhdmVPbk5hdGl2ZUZsYWcpIHtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5zYXZlKCk7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gdGhpcy5jVHIucHJvcHM7XG5cbiAgICBpZiAodGhpcy5fbGVuZ3RoIDw9IHRoaXMuY0FyclBvcykge1xuICAgICAgdGhpcy5kdXBsaWNhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFN0YWNrID0gdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdO1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgIGN1cnJlbnRTdGFjay50cmFuc2Zvcm1baV0gPSBwcm9wc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmNBcnJQb3MgKz0gMTtcbiAgICB2YXIgbmV3U3RhY2sgPSB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc107XG4gICAgbmV3U3RhY2sub3BhY2l0eSA9IGN1cnJlbnRTdGFjay5vcGFjaXR5O1xuICAgIG5ld1N0YWNrLmZpbGxTdHlsZSA9IGN1cnJlbnRTdGFjay5maWxsU3R5bGU7XG4gICAgbmV3U3RhY2suc3Ryb2tlU3R5bGUgPSBjdXJyZW50U3RhY2suc3Ryb2tlU3R5bGU7XG4gICAgbmV3U3RhY2subGluZVdpZHRoID0gY3VycmVudFN0YWNrLmxpbmVXaWR0aDtcbiAgICBuZXdTdGFjay5saW5lQ2FwID0gY3VycmVudFN0YWNrLmxpbmVDYXA7XG4gICAgbmV3U3RhY2subGluZUpvaW4gPSBjdXJyZW50U3RhY2subGluZUpvaW47XG4gICAgbmV3U3RhY2subWl0ZXJMaW1pdCA9IGN1cnJlbnRTdGFjay5taXRlckxpbWl0O1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnNldE9wYWNpdHkgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ub3BhY2l0eSA9IHZhbHVlO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnNldENvbnRleHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQgPSB2YWx1ZTtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5maWxsU3R5bGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLmZpbGxTdHlsZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudEZpbGxTdHlsZSA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLmZpbGxTdHlsZSA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5zdHJva2VTdHlsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10uc3Ryb2tlU3R5bGUgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRTdHJva2VTdHlsZSA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLnN0cm9rZVN0eWxlID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmxpbmVXaWR0aCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubGluZVdpZHRoICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5jdXJyZW50TGluZVdpZHRoID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubGluZVdpZHRoID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmxpbmVDYXAgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLmxpbmVDYXAgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRMaW5lQ2FwID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubGluZUNhcCA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5saW5lSm9pbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubGluZUpvaW4gIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRMaW5lSm9pbiA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLmxpbmVKb2luID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLm1pdGVyTGltaXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLm1pdGVyTGltaXQgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRNaXRlckxpbWl0ID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubWl0ZXJMaW1pdCA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB0aGlzLnRyYW5zZm9ybU1hdC5jbG9uZUZyb21Qcm9wcyhwcm9wcyk7IC8vIFRha2luZyB0aGUgbGFzdCB0cmFuc2Zvcm0gdmFsdWUgZnJvbSB0aGUgc3RvcmVkIHN0YWNrIG9mIHRyYW5zZm9ybXNcblxuICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gdGhpcy5jVHI7IC8vIEFwcGx5aW5nIHRoZSBsYXN0IHRyYW5zZm9ybSB2YWx1ZSBhZnRlciB0aGUgbmV3IHRyYW5zZm9ybSB0byByZXNwZWN0IHRoZSBvcmRlciBvZiB0cmFuc2Zvcm1hdGlvbnNcblxuICAgIHRoaXMudHJhbnNmb3JtTWF0Lm11bHRpcGx5KGN1cnJlbnRUcmFuc2Zvcm0pOyAvLyBTdG9yaW5nIHRoZSBuZXcgdHJhbnNmb3JtZWQgdmFsdWUgaW4gdGhlIHN0b3JlZCB0cmFuc2Zvcm1cblxuICAgIGN1cnJlbnRUcmFuc2Zvcm0uY2xvbmVGcm9tUHJvcHModGhpcy50cmFuc2Zvcm1NYXQucHJvcHMpO1xuICAgIHZhciB0clByb3BzID0gY3VycmVudFRyYW5zZm9ybS5wcm9wczsgLy8gQXBwbHlpbmcgdGhlIG5ldyB0cmFuc2Zvcm0gdG8gdGhlIGNhbnZhc1xuXG4gICAgdGhpcy5uYXRpdmVDb250ZXh0LnNldFRyYW5zZm9ybSh0clByb3BzWzBdLCB0clByb3BzWzFdLCB0clByb3BzWzRdLCB0clByb3BzWzVdLCB0clByb3BzWzEyXSwgdHJQcm9wc1sxM10pO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLm9wYWNpdHkgPSBmdW5jdGlvbiAob3ApIHtcbiAgICB2YXIgY3VycmVudE9wYWNpdHkgPSB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ub3BhY2l0eTtcbiAgICBjdXJyZW50T3BhY2l0eSAqPSBvcCA8IDAgPyAwIDogb3A7XG5cbiAgICBpZiAodGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLm9wYWNpdHkgIT09IGN1cnJlbnRPcGFjaXR5KSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50T3BhY2l0eSAhPT0gb3ApIHtcbiAgICAgICAgdGhpcy5uYXRpdmVDb250ZXh0Lmdsb2JhbEFscGhhID0gb3A7XG4gICAgICAgIHRoaXMuY3VycmVudE9wYWNpdHkgPSBvcDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLm9wYWNpdHkgPSBjdXJyZW50T3BhY2l0eTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIChydWxlKSB7XG4gICAgaWYgKHRoaXMuYXBwbGllZEZpbGxTdHlsZSAhPT0gdGhpcy5jdXJyZW50RmlsbFN0eWxlKSB7XG4gICAgICB0aGlzLmFwcGxpZWRGaWxsU3R5bGUgPSB0aGlzLmN1cnJlbnRGaWxsU3R5bGU7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5hcHBsaWVkRmlsbFN0eWxlO1xuICAgIH1cblxuICAgIHRoaXMubmF0aXZlQ29udGV4dC5maWxsKHJ1bGUpO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmZpbGxSZWN0ID0gZnVuY3Rpb24gKHgsIHksIHcsIGgpIHtcbiAgICBpZiAodGhpcy5hcHBsaWVkRmlsbFN0eWxlICE9PSB0aGlzLmN1cnJlbnRGaWxsU3R5bGUpIHtcbiAgICAgIHRoaXMuYXBwbGllZEZpbGxTdHlsZSA9IHRoaXMuY3VycmVudEZpbGxTdHlsZTtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmFwcGxpZWRGaWxsU3R5bGU7XG4gICAgfVxuXG4gICAgdGhpcy5uYXRpdmVDb250ZXh0LmZpbGxSZWN0KHgsIHksIHcsIGgpO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnN0cm9rZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5hcHBsaWVkU3Ryb2tlU3R5bGUgIT09IHRoaXMuY3VycmVudFN0cm9rZVN0eWxlKSB7XG4gICAgICB0aGlzLmFwcGxpZWRTdHJva2VTdHlsZSA9IHRoaXMuY3VycmVudFN0cm9rZVN0eWxlO1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5hcHBsaWVkU3Ryb2tlU3R5bGU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXBwbGllZExpbmVXaWR0aCAhPT0gdGhpcy5jdXJyZW50TGluZVdpZHRoKSB7XG4gICAgICB0aGlzLmFwcGxpZWRMaW5lV2lkdGggPSB0aGlzLmN1cnJlbnRMaW5lV2lkdGg7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQubGluZVdpZHRoID0gdGhpcy5hcHBsaWVkTGluZVdpZHRoO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcGxpZWRMaW5lQ2FwICE9PSB0aGlzLmN1cnJlbnRMaW5lQ2FwKSB7XG4gICAgICB0aGlzLmFwcGxpZWRMaW5lQ2FwID0gdGhpcy5jdXJyZW50TGluZUNhcDtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5saW5lQ2FwID0gdGhpcy5hcHBsaWVkTGluZUNhcDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcHBsaWVkTGluZUpvaW4gIT09IHRoaXMuY3VycmVudExpbmVKb2luKSB7XG4gICAgICB0aGlzLmFwcGxpZWRMaW5lSm9pbiA9IHRoaXMuY3VycmVudExpbmVKb2luO1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LmxpbmVKb2luID0gdGhpcy5hcHBsaWVkTGluZUpvaW47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXBwbGllZE1pdGVyTGltaXQgIT09IHRoaXMuY3VycmVudE1pdGVyTGltaXQpIHtcbiAgICAgIHRoaXMuYXBwbGllZE1pdGVyTGltaXQgPSB0aGlzLmN1cnJlbnRNaXRlckxpbWl0O1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0Lm1pdGVyTGltaXQgPSB0aGlzLmFwcGxpZWRNaXRlckxpbWl0O1xuICAgIH1cblxuICAgIHRoaXMubmF0aXZlQ29udGV4dC5zdHJva2UoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBDVkNvbXBFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gZmFsc2U7XG4gICAgdGhpcy5sYXllcnMgPSBkYXRhLmxheWVycztcbiAgICB0aGlzLnBlbmRpbmdFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZWxlbWVudHMgPSBjcmVhdGVTaXplZEFycmF5KHRoaXMubGF5ZXJzLmxlbmd0aCk7XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnRtID0gZGF0YS50bSA/IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEudG0sIDAsIGdsb2JhbERhdGEuZnJhbWVSYXRlLCB0aGlzKSA6IHtcbiAgICAgIF9wbGFjZWhvbGRlcjogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0NhbnZhc1JlbmRlcmVyQmFzZSwgSUNvbXBFbGVtZW50LCBDVkJhc2VFbGVtZW50XSwgQ1ZDb21wRWxlbWVudCk7XG5cbiAgQ1ZDb21wRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdHggPSB0aGlzLmNhbnZhc0NvbnRleHQ7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5tb3ZlVG8oMCwgMCk7XG4gICAgY3R4LmxpbmVUbyh0aGlzLmRhdGEudywgMCk7XG4gICAgY3R4LmxpbmVUbyh0aGlzLmRhdGEudywgdGhpcy5kYXRhLmgpO1xuICAgIGN0eC5saW5lVG8oMCwgdGhpcy5kYXRhLmgpO1xuICAgIGN0eC5saW5lVG8oMCwgMCk7XG4gICAgY3R4LmNsaXAoKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5yZW5kZXJGcmFtZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVkNvbXBFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sYXllcnMgPSBudWxsO1xuICAgIHRoaXMuZWxlbWVudHMgPSBudWxsO1xuICB9O1xuXG4gIENWQ29tcEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbXAgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQ1ZDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIENhbnZhc1JlbmRlcmVyKGFuaW1hdGlvbkl0ZW0sIGNvbmZpZykge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IGFuaW1hdGlvbkl0ZW07XG4gICAgdGhpcy5yZW5kZXJDb25maWcgPSB7XG4gICAgICBjbGVhckNhbnZhczogY29uZmlnICYmIGNvbmZpZy5jbGVhckNhbnZhcyAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmNsZWFyQ2FudmFzIDogdHJ1ZSxcbiAgICAgIGNvbnRleHQ6IGNvbmZpZyAmJiBjb25maWcuY29udGV4dCB8fCBudWxsLFxuICAgICAgcHJvZ3Jlc3NpdmVMb2FkOiBjb25maWcgJiYgY29uZmlnLnByb2dyZXNzaXZlTG9hZCB8fCBmYWxzZSxcbiAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcucHJlc2VydmVBc3BlY3RSYXRpbyB8fCAneE1pZFlNaWQgbWVldCcsXG4gICAgICBpbWFnZVByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBzbGljZScsXG4gICAgICBjb250ZW50VmlzaWJpbGl0eTogY29uZmlnICYmIGNvbmZpZy5jb250ZW50VmlzaWJpbGl0eSB8fCAndmlzaWJsZScsXG4gICAgICBjbGFzc05hbWU6IGNvbmZpZyAmJiBjb25maWcuY2xhc3NOYW1lIHx8ICcnLFxuICAgICAgaWQ6IGNvbmZpZyAmJiBjb25maWcuaWQgfHwgJycsXG4gICAgICBydW5FeHByZXNzaW9uczogIWNvbmZpZyB8fCBjb25maWcucnVuRXhwcmVzc2lvbnMgPT09IHVuZGVmaW5lZCB8fCBjb25maWcucnVuRXhwcmVzc2lvbnNcbiAgICB9O1xuICAgIHRoaXMucmVuZGVyQ29uZmlnLmRwciA9IGNvbmZpZyAmJiBjb25maWcuZHByIHx8IDE7XG5cbiAgICBpZiAodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyQ29uZmlnLmRwciA9IGNvbmZpZyAmJiBjb25maWcuZHByIHx8IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gLTE7XG4gICAgdGhpcy5nbG9iYWxEYXRhID0ge1xuICAgICAgZnJhbWVOdW06IC0xLFxuICAgICAgX21kZjogZmFsc2UsXG4gICAgICByZW5kZXJDb25maWc6IHRoaXMucmVuZGVyQ29uZmlnLFxuICAgICAgY3VycmVudEdsb2JhbEFscGhhOiAtMVxuICAgIH07XG4gICAgdGhpcy5jb250ZXh0RGF0YSA9IG5ldyBDVkNvbnRleHREYXRhKCk7XG4gICAgdGhpcy5lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1NYXQgPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ2NhbnZhcyc7XG5cbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMpIHtcbiAgICAgIHRoaXMuY3R4VHJhbnNmb3JtID0gdGhpcy5jb250ZXh0RGF0YS50cmFuc2Zvcm0uYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4T3BhY2l0eSA9IHRoaXMuY29udGV4dERhdGEub3BhY2l0eS5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhGaWxsU3R5bGUgPSB0aGlzLmNvbnRleHREYXRhLmZpbGxTdHlsZS5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhTdHJva2VTdHlsZSA9IHRoaXMuY29udGV4dERhdGEuc3Ryb2tlU3R5bGUuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4TGluZVdpZHRoID0gdGhpcy5jb250ZXh0RGF0YS5saW5lV2lkdGguYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4TGluZUNhcCA9IHRoaXMuY29udGV4dERhdGEubGluZUNhcC5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhMaW5lSm9pbiA9IHRoaXMuY29udGV4dERhdGEubGluZUpvaW4uYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4TWl0ZXJMaW1pdCA9IHRoaXMuY29udGV4dERhdGEubWl0ZXJMaW1pdC5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhGaWxsID0gdGhpcy5jb250ZXh0RGF0YS5maWxsLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eEZpbGxSZWN0ID0gdGhpcy5jb250ZXh0RGF0YS5maWxsUmVjdC5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhTdHJva2UgPSB0aGlzLmNvbnRleHREYXRhLnN0cm9rZS5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5zYXZlID0gdGhpcy5jb250ZXh0RGF0YS5zYXZlLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgfVxuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtDYW52YXNSZW5kZXJlckJhc2VdLCBDYW52YXNSZW5kZXJlcik7XG5cbiAgQ2FudmFzUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUNvbXAgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQ1ZDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEhCYXNlRWxlbWVudCgpIHt9XG5cbiAgSEJhc2VFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBjaGVja0JsZW5kTW9kZTogZnVuY3Rpb24gY2hlY2tCbGVuZE1vZGUoKSB7fSxcbiAgICBpbml0UmVuZGVyZXJFbGVtZW50OiBmdW5jdGlvbiBpbml0UmVuZGVyZXJFbGVtZW50KCkge1xuICAgICAgdGhpcy5iYXNlRWxlbWVudCA9IGNyZWF0ZVRhZyh0aGlzLmRhdGEudGcgfHwgJ2RpdicpO1xuXG4gICAgICBpZiAodGhpcy5kYXRhLmhhc01hc2spIHtcbiAgICAgICAgdGhpcy5zdmdFbGVtZW50ID0gY3JlYXRlTlMoJ3N2ZycpO1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudCA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgIHRoaXMubWFza2VkRWxlbWVudCA9IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgICAgICB0aGlzLnN2Z0VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5sYXllckVsZW1lbnQpO1xuICAgICAgICB0aGlzLmJhc2VFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuc3ZnRWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudCA9IHRoaXMuYmFzZUVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlRGl2KHRoaXMuYmFzZUVsZW1lbnQpO1xuICAgIH0sXG4gICAgY3JlYXRlQ29udGFpbmVyRWxlbWVudHM6IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCkge1xuICAgICAgdGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIgPSBuZXcgQ1ZFZmZlY3RzKHRoaXMpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQgPSB0aGlzLmJhc2VFbGVtZW50O1xuICAgICAgdGhpcy5tYXNrZWRFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEubG4pIHtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMuZGF0YS5sbik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuY2wpIHtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRoaXMuZGF0YS5jbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuYm0gIT09IDApIHtcbiAgICAgICAgdGhpcy5zZXRCbGVuZE1vZGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlckVsZW1lbnQ6IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoKSB7XG4gICAgICB2YXIgdHJhbnNmb3JtZWRFbGVtZW50U3R5bGUgPSB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA/IHRoaXMudHJhbnNmb3JtZWRFbGVtZW50LnN0eWxlIDoge307XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYpIHtcbiAgICAgICAgdmFyIG1hdHJpeFZhbHVlID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tYXQudG9DU1MoKTtcbiAgICAgICAgdHJhbnNmb3JtZWRFbGVtZW50U3R5bGUudHJhbnNmb3JtID0gbWF0cml4VmFsdWU7XG4gICAgICAgIHRyYW5zZm9ybWVkRWxlbWVudFN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IG1hdHJpeFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYpIHtcbiAgICAgICAgdHJhbnNmb3JtZWRFbGVtZW50U3R5bGUub3BhY2l0eSA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Auby52O1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyRnJhbWU6IGZ1bmN0aW9uIHJlbmRlckZyYW1lKCkge1xuICAgICAgLy8gSWYgaXQgaXMgZXhwb3J0ZWQgYXMgaGlkZGVuIChkYXRhLmhkID09PSB0cnVlKSBubyBuZWVkIHRvIHJlbmRlclxuICAgICAgLy8gSWYgaXQgaXMgbm90IHZpc2libGUgbm8gbmVlZCB0byByZW5kZXJcbiAgICAgIGlmICh0aGlzLmRhdGEuaGQgfHwgdGhpcy5oaWRkZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgdGhpcy5yZW5kZXJSZW5kZXJhYmxlKCk7XG4gICAgICB0aGlzLnJlbmRlckVsZW1lbnQoKTtcbiAgICAgIHRoaXMucmVuZGVySW5uZXJDb250ZW50KCk7XG5cbiAgICAgIGlmICh0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5tYXR0ZUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5tYXR0ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tYXNrTWFuYWdlcikge1xuICAgICAgICB0aGlzLm1hc2tNYW5hZ2VyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5tYXNrTWFuYWdlciA9IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50czogZnVuY3Rpb24gY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKSB7XG4gICAgICB0aGlzLm1hc2tNYW5hZ2VyID0gbmV3IE1hc2tFbGVtZW50KHRoaXMuZGF0YSwgdGhpcywgdGhpcy5nbG9iYWxEYXRhKTtcbiAgICB9LFxuICAgIGFkZEVmZmVjdHM6IGZ1bmN0aW9uIGFkZEVmZmVjdHMoKSB7fSxcbiAgICBzZXRNYXR0ZTogZnVuY3Rpb24gc2V0TWF0dGUoKSB7fVxuICB9O1xuICBIQmFzZUVsZW1lbnQucHJvdG90eXBlLmdldEJhc2VFbGVtZW50ID0gU1ZHQmFzZUVsZW1lbnQucHJvdG90eXBlLmdldEJhc2VFbGVtZW50O1xuICBIQmFzZUVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3lCYXNlRWxlbWVudCA9IEhCYXNlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveTtcbiAgSEJhc2VFbGVtZW50LnByb3RvdHlwZS5idWlsZEVsZW1lbnRQYXJlbnRpbmcgPSBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkRWxlbWVudFBhcmVudGluZztcblxuICBmdW5jdGlvbiBIU29saWRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSEJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVET01FbGVtZW50XSwgSFNvbGlkRWxlbWVudCk7XG5cbiAgSFNvbGlkRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjdDtcblxuICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgcmVjdCA9IGNyZWF0ZU5TKCdyZWN0Jyk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmRhdGEuc3cpO1xuICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuZGF0YS5zaCk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsIHRoaXMuZGF0YS5zYyk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuZGF0YS5zdyk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmRhdGEuc2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICAgIHJlY3Quc3R5bGUud2lkdGggPSB0aGlzLmRhdGEuc3cgKyAncHgnO1xuICAgICAgcmVjdC5zdHlsZS5oZWlnaHQgPSB0aGlzLmRhdGEuc2ggKyAncHgnO1xuICAgICAgcmVjdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmRhdGEuc2M7XG4gICAgfVxuXG4gICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQocmVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSFNoYXBlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgLy8gTGlzdCBvZiBkcmF3YWJsZSBlbGVtZW50c1xuICAgIHRoaXMuc2hhcGVzID0gW107IC8vIEZ1bGwgc2hhcGUgZGF0YVxuXG4gICAgdGhpcy5zaGFwZXNEYXRhID0gZGF0YS5zaGFwZXM7IC8vIExpc3Qgb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHNoYXBlc1xuXG4gICAgdGhpcy5zdHlsZXNMaXN0ID0gW107IC8vIExpc3Qgb2YgbW9kaWZpZXJzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHNoYXBlc1xuXG4gICAgdGhpcy5zaGFwZU1vZGlmaWVycyA9IFtdOyAvLyBMaXN0IG9mIGl0ZW1zIGluIHNoYXBlIHRyZWVcblxuICAgIHRoaXMuaXRlbXNEYXRhID0gW107IC8vIExpc3Qgb2YgaXRlbXMgaW4gcHJldmlvdXMgc2hhcGUgdHJlZVxuXG4gICAgdGhpcy5wcm9jZXNzZWRFbGVtZW50cyA9IFtdOyAvLyBMaXN0IG9mIGFuaW1hdGVkIGNvbXBvbmVudHNcblxuICAgIHRoaXMuYW5pbWF0ZWRDb250ZW50cyA9IFtdO1xuICAgIHRoaXMuc2hhcGVzQ29udGFpbmVyID0gY3JlYXRlTlMoJ2cnKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApOyAvLyBNb3ZpbmcgYW55IHByb3BlcnR5IHRoYXQgZG9lc24ndCBnZXQgdG9vIG11Y2ggYWNjZXNzIGFmdGVyIGluaXRpYWxpemF0aW9uIGJlY2F1c2Ugb2Ygdjggd2F5IG9mIGhhbmRsaW5nIG1vcmUgdGhhbiAxMCBwcm9wZXJ0aWVzLlxuICAgIC8vIExpc3Qgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZFxuXG4gICAgdGhpcy5wcmV2Vmlld0RhdGEgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRCQm94ID0ge1xuICAgICAgeDogOTk5OTk5LFxuICAgICAgeTogLTk5OTk5OSxcbiAgICAgIGg6IDAsXG4gICAgICB3OiAwXG4gICAgfTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIEhTb2xpZEVsZW1lbnQsIFNWR1NoYXBlRWxlbWVudCwgSEJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50XSwgSFNoYXBlRWxlbWVudCk7XG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLl9yZW5kZXJTaGFwZUZyYW1lID0gSFNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbnQ7XG4gICAgdGhpcy5iYXNlRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IDA7XG5cbiAgICBpZiAodGhpcy5kYXRhLmhhc01hc2spIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuc2hhcGVzQ29udGFpbmVyKTtcbiAgICAgIGNvbnQgPSB0aGlzLnN2Z0VsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnQgPSBjcmVhdGVOUygnc3ZnJyk7XG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuY29tcC5kYXRhID8gdGhpcy5jb21wLmRhdGEgOiB0aGlzLmdsb2JhbERhdGEuY29tcFNpemU7XG4gICAgICBjb250LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBzaXplLncpO1xuICAgICAgY29udC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHNpemUuaCk7XG4gICAgICBjb250LmFwcGVuZENoaWxkKHRoaXMuc2hhcGVzQ29udGFpbmVyKTtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKGNvbnQpO1xuICAgIH1cblxuICAgIHRoaXMuc2VhcmNoU2hhcGVzKHRoaXMuc2hhcGVzRGF0YSwgdGhpcy5pdGVtc0RhdGEsIHRoaXMucHJldlZpZXdEYXRhLCB0aGlzLnNoYXBlc0NvbnRhaW5lciwgMCwgW10sIHRydWUpO1xuICAgIHRoaXMuZmlsdGVyVW5pcXVlU2hhcGVzKCk7XG4gICAgdGhpcy5zaGFwZUNvbnQgPSBjb250O1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmdldFRyYW5zZm9ybWVkUG9pbnQgPSBmdW5jdGlvbiAodHJhbnNmb3JtZXJzLCBwb2ludCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0cmFuc2Zvcm1lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBwb2ludCA9IHRyYW5zZm9ybWVyc1tpXS5tUHJvcHMudi5hcHBseVRvUG9pbnRBcnJheShwb2ludFswXSwgcG9pbnRbMV0sIDApO1xuICAgIH1cblxuICAgIHJldHVybiBwb2ludDtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jYWxjdWxhdGVTaGFwZUJvdW5kaW5nQm94ID0gZnVuY3Rpb24gKGl0ZW0sIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIHNoYXBlID0gaXRlbS5zaC52O1xuICAgIHZhciB0cmFuc2Zvcm1lcnMgPSBpdGVtLnRyYW5zZm9ybWVycztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gc2hhcGUuX2xlbmd0aDtcbiAgICB2YXIgdlBvaW50O1xuICAgIHZhciBvUG9pbnQ7XG4gICAgdmFyIG5leHRJUG9pbnQ7XG4gICAgdmFyIG5leHRWUG9pbnQ7XG5cbiAgICBpZiAobGVuIDw9IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuIC0gMTsgaSArPSAxKSB7XG4gICAgICB2UG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS52W2ldKTtcbiAgICAgIG9Qb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLm9baV0pO1xuICAgICAgbmV4dElQb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLmlbaSArIDFdKTtcbiAgICAgIG5leHRWUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS52W2kgKyAxXSk7XG4gICAgICB0aGlzLmNoZWNrQm91bmRzKHZQb2ludCwgb1BvaW50LCBuZXh0SVBvaW50LCBuZXh0VlBvaW50LCBib3VuZGluZ0JveCk7XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlLmMpIHtcbiAgICAgIHZQb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLnZbaV0pO1xuICAgICAgb1BvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUub1tpXSk7XG4gICAgICBuZXh0SVBvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUuaVswXSk7XG4gICAgICBuZXh0VlBvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUudlswXSk7XG4gICAgICB0aGlzLmNoZWNrQm91bmRzKHZQb2ludCwgb1BvaW50LCBuZXh0SVBvaW50LCBuZXh0VlBvaW50LCBib3VuZGluZ0JveCk7XG4gICAgfVxuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNoZWNrQm91bmRzID0gZnVuY3Rpb24gKHZQb2ludCwgb1BvaW50LCBuZXh0SVBvaW50LCBuZXh0VlBvaW50LCBib3VuZGluZ0JveCkge1xuICAgIHRoaXMuZ2V0Qm91bmRzT2ZDdXJ2ZSh2UG9pbnQsIG9Qb2ludCwgbmV4dElQb2ludCwgbmV4dFZQb2ludCk7XG4gICAgdmFyIGJvdW5kcyA9IHRoaXMuc2hhcGVCb3VuZGluZ0JveDtcbiAgICBib3VuZGluZ0JveC54ID0gYm1NaW4oYm91bmRzLmxlZnQsIGJvdW5kaW5nQm94LngpO1xuICAgIGJvdW5kaW5nQm94LnhNYXggPSBibU1heChib3VuZHMucmlnaHQsIGJvdW5kaW5nQm94LnhNYXgpO1xuICAgIGJvdW5kaW5nQm94LnkgPSBibU1pbihib3VuZHMudG9wLCBib3VuZGluZ0JveC55KTtcbiAgICBib3VuZGluZ0JveC55TWF4ID0gYm1NYXgoYm91bmRzLmJvdHRvbSwgYm91bmRpbmdCb3gueU1heCk7XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuc2hhcGVCb3VuZGluZ0JveCA9IHtcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDBcbiAgfTtcbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUudGVtcEJvdW5kaW5nQm94ID0ge1xuICAgIHg6IDAsXG4gICAgeE1heDogMCxcbiAgICB5OiAwLFxuICAgIHlNYXg6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuZ2V0Qm91bmRzT2ZDdXJ2ZSA9IGZ1bmN0aW9uIChwMCwgcDEsIHAyLCBwMykge1xuICAgIHZhciBib3VuZHMgPSBbW3AwWzBdLCBwM1swXV0sIFtwMFsxXSwgcDNbMV1dXTtcblxuICAgIGZvciAodmFyIGEsIGIsIGMsIHQsIGIyYWMsIHQxLCB0MiwgaSA9IDA7IGkgPCAyOyArK2kpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGx1c3BsdXNcbiAgICAgIGIgPSA2ICogcDBbaV0gLSAxMiAqIHAxW2ldICsgNiAqIHAyW2ldO1xuICAgICAgYSA9IC0zICogcDBbaV0gKyA5ICogcDFbaV0gLSA5ICogcDJbaV0gKyAzICogcDNbaV07XG4gICAgICBjID0gMyAqIHAxW2ldIC0gMyAqIHAwW2ldO1xuICAgICAgYiB8PSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcblxuICAgICAgYSB8PSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcblxuICAgICAgYyB8PSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcblxuICAgICAgaWYgKGEgPT09IDAgJiYgYiA9PT0gMCkgey8vXG4gICAgICB9IGVsc2UgaWYgKGEgPT09IDApIHtcbiAgICAgICAgdCA9IC1jIC8gYjtcblxuICAgICAgICBpZiAodCA+IDAgJiYgdCA8IDEpIHtcbiAgICAgICAgICBib3VuZHNbaV0ucHVzaCh0aGlzLmNhbGN1bGF0ZUYodCwgcDAsIHAxLCBwMiwgcDMsIGkpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYjJhYyA9IGIgKiBiIC0gNCAqIGMgKiBhO1xuXG4gICAgICAgIGlmIChiMmFjID49IDApIHtcbiAgICAgICAgICB0MSA9ICgtYiArIGJtU3FydChiMmFjKSkgLyAoMiAqIGEpO1xuICAgICAgICAgIGlmICh0MSA+IDAgJiYgdDEgPCAxKSBib3VuZHNbaV0ucHVzaCh0aGlzLmNhbGN1bGF0ZUYodDEsIHAwLCBwMSwgcDIsIHAzLCBpKSk7XG4gICAgICAgICAgdDIgPSAoLWIgLSBibVNxcnQoYjJhYykpIC8gKDIgKiBhKTtcbiAgICAgICAgICBpZiAodDIgPiAwICYmIHQyIDwgMSkgYm91bmRzW2ldLnB1c2godGhpcy5jYWxjdWxhdGVGKHQyLCBwMCwgcDEsIHAyLCBwMywgaSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zaGFwZUJvdW5kaW5nQm94LmxlZnQgPSBibU1pbi5hcHBseShudWxsLCBib3VuZHNbMF0pO1xuICAgIHRoaXMuc2hhcGVCb3VuZGluZ0JveC50b3AgPSBibU1pbi5hcHBseShudWxsLCBib3VuZHNbMV0pO1xuICAgIHRoaXMuc2hhcGVCb3VuZGluZ0JveC5yaWdodCA9IGJtTWF4LmFwcGx5KG51bGwsIGJvdW5kc1swXSk7XG4gICAgdGhpcy5zaGFwZUJvdW5kaW5nQm94LmJvdHRvbSA9IGJtTWF4LmFwcGx5KG51bGwsIGJvdW5kc1sxXSk7XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2FsY3VsYXRlRiA9IGZ1bmN0aW9uICh0LCBwMCwgcDEsIHAyLCBwMywgaSkge1xuICAgIHJldHVybiBibVBvdygxIC0gdCwgMykgKiBwMFtpXSArIDMgKiBibVBvdygxIC0gdCwgMikgKiB0ICogcDFbaV0gKyAzICogKDEgLSB0KSAqIGJtUG93KHQsIDIpICogcDJbaV0gKyBibVBvdyh0LCAzKSAqIHAzW2ldO1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNhbGN1bGF0ZUJvdW5kaW5nQm94ID0gZnVuY3Rpb24gKGl0ZW1zRGF0YSwgYm91bmRpbmdCb3gpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gaXRlbXNEYXRhLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKGl0ZW1zRGF0YVtpXSAmJiBpdGVtc0RhdGFbaV0uc2gpIHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVTaGFwZUJvdW5kaW5nQm94KGl0ZW1zRGF0YVtpXSwgYm91bmRpbmdCb3gpO1xuICAgICAgfSBlbHNlIGlmIChpdGVtc0RhdGFbaV0gJiYgaXRlbXNEYXRhW2ldLml0KSB7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlQm91bmRpbmdCb3goaXRlbXNEYXRhW2ldLml0LCBib3VuZGluZ0JveCk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zRGF0YVtpXSAmJiBpdGVtc0RhdGFbaV0uc3R5bGUgJiYgaXRlbXNEYXRhW2ldLncpIHtcbiAgICAgICAgdGhpcy5leHBhbmRTdHJva2VCb3VuZGluZ0JveChpdGVtc0RhdGFbaV0udywgYm91bmRpbmdCb3gpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5leHBhbmRTdHJva2VCb3VuZGluZ0JveCA9IGZ1bmN0aW9uICh3aWR0aFByb3BlcnR5LCBib3VuZGluZ0JveCkge1xuICAgIHZhciB3aWR0aCA9IDA7XG5cbiAgICBpZiAod2lkdGhQcm9wZXJ0eS5rZXlmcmFtZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2lkdGhQcm9wZXJ0eS5rZXlmcmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGtmdyA9IHdpZHRoUHJvcGVydHkua2V5ZnJhbWVzW2ldLnM7XG5cbiAgICAgICAgaWYgKGtmdyA+IHdpZHRoKSB7XG4gICAgICAgICAgd2lkdGggPSBrZnc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgd2lkdGggKj0gd2lkdGhQcm9wZXJ0eS5tdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICB3aWR0aCA9IHdpZHRoUHJvcGVydHkudiAqIHdpZHRoUHJvcGVydHkubXVsdDtcbiAgICB9XG5cbiAgICBib3VuZGluZ0JveC54IC09IHdpZHRoO1xuICAgIGJvdW5kaW5nQm94LnhNYXggKz0gd2lkdGg7XG4gICAgYm91bmRpbmdCb3gueSAtPSB3aWR0aDtcbiAgICBib3VuZGluZ0JveC55TWF4ICs9IHdpZHRoO1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmN1cnJlbnRCb3hDb250YWlucyA9IGZ1bmN0aW9uIChib3gpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QkJveC54IDw9IGJveC54ICYmIHRoaXMuY3VycmVudEJCb3gueSA8PSBib3gueSAmJiB0aGlzLmN1cnJlbnRCQm94LndpZHRoICsgdGhpcy5jdXJyZW50QkJveC54ID49IGJveC54ICsgYm94LndpZHRoICYmIHRoaXMuY3VycmVudEJCb3guaGVpZ2h0ICsgdGhpcy5jdXJyZW50QkJveC55ID49IGJveC55ICsgYm94LmhlaWdodDtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcmVuZGVyU2hhcGVGcmFtZSgpO1xuXG4gICAgaWYgKCF0aGlzLmhpZGRlbiAmJiAodGhpcy5faXNGaXJzdEZyYW1lIHx8IHRoaXMuX21kZikpIHtcbiAgICAgIHZhciB0ZW1wQm91bmRpbmdCb3ggPSB0aGlzLnRlbXBCb3VuZGluZ0JveDtcbiAgICAgIHZhciBtYXggPSA5OTk5OTk7XG4gICAgICB0ZW1wQm91bmRpbmdCb3gueCA9IG1heDtcbiAgICAgIHRlbXBCb3VuZGluZ0JveC54TWF4ID0gLW1heDtcbiAgICAgIHRlbXBCb3VuZGluZ0JveC55ID0gbWF4O1xuICAgICAgdGVtcEJvdW5kaW5nQm94LnlNYXggPSAtbWF4O1xuICAgICAgdGhpcy5jYWxjdWxhdGVCb3VuZGluZ0JveCh0aGlzLml0ZW1zRGF0YSwgdGVtcEJvdW5kaW5nQm94KTtcbiAgICAgIHRlbXBCb3VuZGluZ0JveC53aWR0aCA9IHRlbXBCb3VuZGluZ0JveC54TWF4IDwgdGVtcEJvdW5kaW5nQm94LnggPyAwIDogdGVtcEJvdW5kaW5nQm94LnhNYXggLSB0ZW1wQm91bmRpbmdCb3gueDtcbiAgICAgIHRlbXBCb3VuZGluZ0JveC5oZWlnaHQgPSB0ZW1wQm91bmRpbmdCb3gueU1heCA8IHRlbXBCb3VuZGluZ0JveC55ID8gMCA6IHRlbXBCb3VuZGluZ0JveC55TWF4IC0gdGVtcEJvdW5kaW5nQm94Lnk7IC8vIHZhciB0ZW1wQm91bmRpbmdCb3ggPSB0aGlzLnNoYXBlQ29udC5nZXRCQm94KCk7XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRCb3hDb250YWlucyh0ZW1wQm91bmRpbmdCb3gpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJCb3gudyAhPT0gdGVtcEJvdW5kaW5nQm94LndpZHRoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gudyA9IHRlbXBCb3VuZGluZ0JveC53aWR0aDtcbiAgICAgICAgdGhpcy5zaGFwZUNvbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRlbXBCb3VuZGluZ0JveC53aWR0aCk7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jdXJyZW50QkJveC5oICE9PSB0ZW1wQm91bmRpbmdCb3guaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3guaCA9IHRlbXBCb3VuZGluZ0JveC5oZWlnaHQ7XG4gICAgICAgIHRoaXMuc2hhcGVDb250LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGVtcEJvdW5kaW5nQm94LmhlaWdodCk7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlZCB8fCB0aGlzLmN1cnJlbnRCQm94LnggIT09IHRlbXBCb3VuZGluZ0JveC54IHx8IHRoaXMuY3VycmVudEJCb3gueSAhPT0gdGVtcEJvdW5kaW5nQm94LnkpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC53ID0gdGVtcEJvdW5kaW5nQm94LndpZHRoO1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LmggPSB0ZW1wQm91bmRpbmdCb3guaGVpZ2h0O1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LnggPSB0ZW1wQm91bmRpbmdCb3gueDtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC55ID0gdGVtcEJvdW5kaW5nQm94Lnk7XG4gICAgICAgIHRoaXMuc2hhcGVDb250LnNldEF0dHJpYnV0ZSgndmlld0JveCcsIHRoaXMuY3VycmVudEJCb3gueCArICcgJyArIHRoaXMuY3VycmVudEJCb3gueSArICcgJyArIHRoaXMuY3VycmVudEJCb3gudyArICcgJyArIHRoaXMuY3VycmVudEJCb3guaCk7XG4gICAgICAgIHZhciBzaGFwZVN0eWxlID0gdGhpcy5zaGFwZUNvbnQuc3R5bGU7XG4gICAgICAgIHZhciBzaGFwZVRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIHRoaXMuY3VycmVudEJCb3gueCArICdweCwnICsgdGhpcy5jdXJyZW50QkJveC55ICsgJ3B4KSc7XG4gICAgICAgIHNoYXBlU3R5bGUudHJhbnNmb3JtID0gc2hhcGVUcmFuc2Zvcm07XG4gICAgICAgIHNoYXBlU3R5bGUud2Via2l0VHJhbnNmb3JtID0gc2hhcGVUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEhUZXh0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy50ZXh0U3BhbnMgPSBbXTtcbiAgICB0aGlzLnRleHRQYXRocyA9IFtdO1xuICAgIHRoaXMuY3VycmVudEJCb3ggPSB7XG4gICAgICB4OiA5OTk5OTksXG4gICAgICB5OiAtOTk5OTk5LFxuICAgICAgaDogMCxcbiAgICAgIHc6IDBcbiAgICB9O1xuICAgIHRoaXMucmVuZGVyVHlwZSA9ICdzdmcnO1xuICAgIHRoaXMuaXNNYXNrZWQgPSBmYWxzZTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSEJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVET01FbGVtZW50LCBJVGV4dEVsZW1lbnRdLCBIVGV4dEVsZW1lbnQpO1xuXG4gIEhUZXh0RWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzTWFza2VkID0gdGhpcy5jaGVja01hc2tzKCk7XG5cbiAgICBpZiAodGhpcy5pc01hc2tlZCkge1xuICAgICAgdGhpcy5yZW5kZXJUeXBlID0gJ3N2Zyc7XG4gICAgICB0aGlzLmNvbXBXID0gdGhpcy5jb21wLmRhdGEudztcbiAgICAgIHRoaXMuY29tcEggPSB0aGlzLmNvbXAuZGF0YS5oO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmNvbXBXKTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuY29tcEgpO1xuICAgICAgdmFyIGcgPSBjcmVhdGVOUygnZycpO1xuICAgICAgdGhpcy5tYXNrZWRFbGVtZW50LmFwcGVuZENoaWxkKGcpO1xuICAgICAgdGhpcy5pbm5lckVsZW0gPSBnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlclR5cGUgPSAnaHRtbCc7XG4gICAgICB0aGlzLmlubmVyRWxlbSA9IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tQYXJlbnRpbmcoKTtcbiAgfTtcblxuICBIVGV4dEVsZW1lbnQucHJvdG90eXBlLmJ1aWxkTmV3VGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZG9jdW1lbnREYXRhID0gdGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGE7XG4gICAgdGhpcy5yZW5kZXJlZExldHRlcnMgPSBjcmVhdGVTaXplZEFycmF5KGRvY3VtZW50RGF0YS5sID8gZG9jdW1lbnREYXRhLmwubGVuZ3RoIDogMCk7XG4gICAgdmFyIGlubmVyRWxlbVN0eWxlID0gdGhpcy5pbm5lckVsZW0uc3R5bGU7XG4gICAgdmFyIHRleHRDb2xvciA9IGRvY3VtZW50RGF0YS5mYyA/IHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuZmMpIDogJ3JnYmEoMCwwLDAsMCknO1xuICAgIGlubmVyRWxlbVN0eWxlLmZpbGwgPSB0ZXh0Q29sb3I7XG4gICAgaW5uZXJFbGVtU3R5bGUuY29sb3IgPSB0ZXh0Q29sb3I7XG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLnNjKSB7XG4gICAgICBpbm5lckVsZW1TdHlsZS5zdHJva2UgPSB0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLnNjKTtcbiAgICAgIGlubmVyRWxlbVN0eWxlLnN0cm9rZVdpZHRoID0gZG9jdW1lbnREYXRhLnN3ICsgJ3B4JztcbiAgICB9XG5cbiAgICB2YXIgZm9udERhdGEgPSB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZik7XG5cbiAgICBpZiAoIXRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5jaGFycykge1xuICAgICAgaW5uZXJFbGVtU3R5bGUuZm9udFNpemUgPSBkb2N1bWVudERhdGEuZmluYWxTaXplICsgJ3B4JztcbiAgICAgIGlubmVyRWxlbVN0eWxlLmxpbmVIZWlnaHQgPSBkb2N1bWVudERhdGEuZmluYWxTaXplICsgJ3B4JztcblxuICAgICAgaWYgKGZvbnREYXRhLmZDbGFzcykge1xuICAgICAgICB0aGlzLmlubmVyRWxlbS5jbGFzc05hbWUgPSBmb250RGF0YS5mQ2xhc3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbm5lckVsZW1TdHlsZS5mb250RmFtaWx5ID0gZm9udERhdGEuZkZhbWlseTtcbiAgICAgICAgdmFyIGZXZWlnaHQgPSBkb2N1bWVudERhdGEuZldlaWdodDtcbiAgICAgICAgdmFyIGZTdHlsZSA9IGRvY3VtZW50RGF0YS5mU3R5bGU7XG4gICAgICAgIGlubmVyRWxlbVN0eWxlLmZvbnRTdHlsZSA9IGZTdHlsZTtcbiAgICAgICAgaW5uZXJFbGVtU3R5bGUuZm9udFdlaWdodCA9IGZXZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgbGV0dGVycyA9IGRvY3VtZW50RGF0YS5sO1xuICAgIGxlbiA9IGxldHRlcnMubGVuZ3RoO1xuICAgIHZhciB0U3BhbjtcbiAgICB2YXIgdFBhcmVudDtcbiAgICB2YXIgdENvbnQ7XG4gICAgdmFyIG1hdHJpeEhlbHBlciA9IHRoaXMubUhlbHBlcjtcbiAgICB2YXIgc2hhcGVzO1xuICAgIHZhciBzaGFwZVN0ciA9ICcnO1xuICAgIHZhciBjbnQgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmNoYXJzKSB7XG4gICAgICAgIGlmICghdGhpcy50ZXh0UGF0aHNbY250XSkge1xuICAgICAgICAgIHRTcGFuID0gY3JlYXRlTlMoJ3BhdGgnKTtcbiAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lY2FwJywgbGluZUNhcEVudW1bMV0pO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVqb2luJywgbGluZUpvaW5FbnVtWzJdKTtcbiAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1taXRlcmxpbWl0JywgJzQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0U3BhbiA9IHRoaXMudGV4dFBhdGhzW2NudF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuaXNNYXNrZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy50ZXh0U3BhbnNbY250XSkge1xuICAgICAgICAgICAgdFBhcmVudCA9IHRoaXMudGV4dFNwYW5zW2NudF07XG4gICAgICAgICAgICB0Q29udCA9IHRQYXJlbnQuY2hpbGRyZW5bMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRQYXJlbnQgPSBjcmVhdGVUYWcoJ2RpdicpO1xuICAgICAgICAgICAgdFBhcmVudC5zdHlsZS5saW5lSGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIHRDb250ID0gY3JlYXRlTlMoJ3N2ZycpO1xuICAgICAgICAgICAgdENvbnQuYXBwZW5kQ2hpbGQodFNwYW4pO1xuICAgICAgICAgICAgc3R5bGVEaXYodFBhcmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzTWFza2VkKSB7XG4gICAgICAgIGlmICh0aGlzLnRleHRTcGFuc1tjbnRdKSB7XG4gICAgICAgICAgdFBhcmVudCA9IHRoaXMudGV4dFNwYW5zW2NudF07XG4gICAgICAgICAgdFNwYW4gPSB0aGlzLnRleHRQYXRoc1tjbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRQYXJlbnQgPSBjcmVhdGVUYWcoJ3NwYW4nKTtcbiAgICAgICAgICBzdHlsZURpdih0UGFyZW50KTtcbiAgICAgICAgICB0U3BhbiA9IGNyZWF0ZVRhZygnc3BhbicpO1xuICAgICAgICAgIHN0eWxlRGl2KHRTcGFuKTtcbiAgICAgICAgICB0UGFyZW50LmFwcGVuZENoaWxkKHRTcGFuKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdFNwYW4gPSB0aGlzLnRleHRQYXRoc1tjbnRdID8gdGhpcy50ZXh0UGF0aHNbY250XSA6IGNyZWF0ZU5TKCd0ZXh0Jyk7XG4gICAgICB9IC8vIHRTcGFuLnNldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuXG4gICAgICBpZiAodGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmNoYXJzKSB7XG4gICAgICAgIHZhciBjaGFyRGF0YSA9IHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRDaGFyRGF0YShkb2N1bWVudERhdGEuZmluYWxUZXh0W2ldLCBmb250RGF0YS5mU3R5bGUsIHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5KTtcbiAgICAgICAgdmFyIHNoYXBlRGF0YTtcblxuICAgICAgICBpZiAoY2hhckRhdGEpIHtcbiAgICAgICAgICBzaGFwZURhdGEgPSBjaGFyRGF0YS5kYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoYXBlRGF0YSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBtYXRyaXhIZWxwZXIucmVzZXQoKTtcblxuICAgICAgICBpZiAoc2hhcGVEYXRhICYmIHNoYXBlRGF0YS5zaGFwZXMgJiYgc2hhcGVEYXRhLnNoYXBlcy5sZW5ndGgpIHtcbiAgICAgICAgICBzaGFwZXMgPSBzaGFwZURhdGEuc2hhcGVzWzBdLml0O1xuICAgICAgICAgIG1hdHJpeEhlbHBlci5zY2FsZShkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwLCBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwKTtcbiAgICAgICAgICBzaGFwZVN0ciA9IHRoaXMuY3JlYXRlUGF0aFNoYXBlKG1hdHJpeEhlbHBlciwgc2hhcGVzKTtcbiAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ2QnLCBzaGFwZVN0cik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuaXNNYXNrZWQpIHtcbiAgICAgICAgICB0aGlzLmlubmVyRWxlbS5hcHBlbmRDaGlsZCh0UGFyZW50KTtcblxuICAgICAgICAgIGlmIChzaGFwZURhdGEgJiYgc2hhcGVEYXRhLnNoYXBlcykge1xuICAgICAgICAgICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBpcyBuZWVkZWQgdG8gZ2V0IGV4YWN0IG1lYXN1cmUgb2Ygc2hhcGVcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodENvbnQpO1xuICAgICAgICAgICAgdmFyIGJvdW5kaW5nQm94ID0gdENvbnQuZ2V0QkJveCgpO1xuICAgICAgICAgICAgdENvbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGJvdW5kaW5nQm94LndpZHRoICsgMik7XG4gICAgICAgICAgICB0Q29udC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGJvdW5kaW5nQm94LmhlaWdodCArIDIpO1xuICAgICAgICAgICAgdENvbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgYm91bmRpbmdCb3gueCAtIDEgKyAnICcgKyAoYm91bmRpbmdCb3gueSAtIDEpICsgJyAnICsgKGJvdW5kaW5nQm94LndpZHRoICsgMikgKyAnICcgKyAoYm91bmRpbmdCb3guaGVpZ2h0ICsgMikpO1xuICAgICAgICAgICAgdmFyIHRDb250U3R5bGUgPSB0Q29udC5zdHlsZTtcbiAgICAgICAgICAgIHZhciB0Q29udFRyYW5zbGF0aW9uID0gJ3RyYW5zbGF0ZSgnICsgKGJvdW5kaW5nQm94LnggLSAxKSArICdweCwnICsgKGJvdW5kaW5nQm94LnkgLSAxKSArICdweCknO1xuICAgICAgICAgICAgdENvbnRTdHlsZS50cmFuc2Zvcm0gPSB0Q29udFRyYW5zbGF0aW9uO1xuICAgICAgICAgICAgdENvbnRTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0Q29udFRyYW5zbGF0aW9uO1xuICAgICAgICAgICAgbGV0dGVyc1tpXS55T2Zmc2V0ID0gYm91bmRpbmdCb3gueSAtIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRDb250LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAxKTtcbiAgICAgICAgICAgIHRDb250LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdFBhcmVudC5hcHBlbmRDaGlsZCh0Q29udCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbm5lckVsZW0uYXBwZW5kQ2hpbGQodFNwYW4pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0U3Bhbi50ZXh0Q29udGVudCA9IGxldHRlcnNbaV0udmFsO1xuICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJywgJ3htbDpzcGFjZScsICdwcmVzZXJ2ZScpO1xuXG4gICAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICAgIHRoaXMuaW5uZXJFbGVtLmFwcGVuZENoaWxkKHRQYXJlbnQpOyAvL1xuXG4gICAgICAgICAgdmFyIHRTdHlsZSA9IHRTcGFuLnN0eWxlO1xuICAgICAgICAgIHZhciB0U3BhblRyYW5zbGF0aW9uID0gJ3RyYW5zbGF0ZTNkKDAsJyArIC1kb2N1bWVudERhdGEuZmluYWxTaXplIC8gMS4yICsgJ3B4LDApJztcbiAgICAgICAgICB0U3R5bGUudHJhbnNmb3JtID0gdFNwYW5UcmFuc2xhdGlvbjtcbiAgICAgICAgICB0U3R5bGUud2Via2l0VHJhbnNmb3JtID0gdFNwYW5UcmFuc2xhdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlubmVyRWxlbS5hcHBlbmRDaGlsZCh0U3Bhbik7XG4gICAgICAgIH1cbiAgICAgIH0gLy9cblxuXG4gICAgICBpZiAoIXRoaXMuaXNNYXNrZWQpIHtcbiAgICAgICAgdGhpcy50ZXh0U3BhbnNbY250XSA9IHRQYXJlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRleHRTcGFuc1tjbnRdID0gdFNwYW47XG4gICAgICB9XG5cbiAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB0aGlzLnRleHRQYXRoc1tjbnRdID0gdFNwYW47XG4gICAgICBjbnQgKz0gMTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY250IDwgdGhpcy50ZXh0U3BhbnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnRleHRTcGFuc1tjbnRdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBjbnQgKz0gMTtcbiAgICB9XG4gIH07XG5cbiAgSFRleHRFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy52YWxpZGF0ZVRleHQoKTtcbiAgICB2YXIgc3ZnU3R5bGU7XG5cbiAgICBpZiAodGhpcy5kYXRhLnNpbmdsZVNoYXBlKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzRmlyc3RGcmFtZSAmJiAhdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc01hc2tlZCAmJiB0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYpIHtcbiAgICAgICAgLy8gVG9kbyBCZW5jaG1hcmsgaWYgdXNpbmcgdGhpcyBpcyBiZXR0ZXIgdGhhbiBnZXRCQm94XG4gICAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCAtdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5wLnZbMF0gKyAnICcgKyAtdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5wLnZbMV0gKyAnICcgKyB0aGlzLmNvbXBXICsgJyAnICsgdGhpcy5jb21wSCk7XG4gICAgICAgIHN2Z1N0eWxlID0gdGhpcy5zdmdFbGVtZW50LnN0eWxlO1xuICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSAndHJhbnNsYXRlKCcgKyAtdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5wLnZbMF0gKyAncHgsJyArIC10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlsxXSArICdweCknO1xuICAgICAgICBzdmdTdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2xhdGlvbjtcbiAgICAgICAgc3ZnU3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNsYXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0QW5pbWF0b3IuZ2V0TWVhc3VyZXModGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEsIHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnKTtcblxuICAgIGlmICghdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgJiYgIXRoaXMudGV4dEFuaW1hdG9yLmxldHRlcnNDaGFuZ2VkRmxhZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgcmVuZGVyZWRMZXR0ZXJzID0gdGhpcy50ZXh0QW5pbWF0b3IucmVuZGVyZWRMZXR0ZXJzO1xuICAgIHZhciBsZXR0ZXJzID0gdGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEubDtcbiAgICBsZW4gPSBsZXR0ZXJzLmxlbmd0aDtcbiAgICB2YXIgcmVuZGVyZWRMZXR0ZXI7XG4gICAgdmFyIHRleHRTcGFuO1xuICAgIHZhciB0ZXh0UGF0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKGxldHRlcnNbaV0ubikge1xuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dFNwYW4gPSB0aGlzLnRleHRTcGFuc1tpXTtcbiAgICAgICAgdGV4dFBhdGggPSB0aGlzLnRleHRQYXRoc1tpXTtcbiAgICAgICAgcmVuZGVyZWRMZXR0ZXIgPSByZW5kZXJlZExldHRlcnNbY291bnRdO1xuICAgICAgICBjb3VudCArPSAxO1xuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLm0pIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNNYXNrZWQpIHtcbiAgICAgICAgICAgIHRleHRTcGFuLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHJlbmRlcmVkTGV0dGVyLm07XG4gICAgICAgICAgICB0ZXh0U3Bhbi5zdHlsZS50cmFuc2Zvcm0gPSByZW5kZXJlZExldHRlci5tO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIHJlbmRlcmVkTGV0dGVyLm0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLy8gL3RleHRTcGFuLnNldEF0dHJpYnV0ZSgnb3BhY2l0eScscmVuZGVyZWRMZXR0ZXIubyk7XG5cblxuICAgICAgICB0ZXh0U3Bhbi5zdHlsZS5vcGFjaXR5ID0gcmVuZGVyZWRMZXR0ZXIubztcblxuICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuc3cgJiYgcmVuZGVyZWRMZXR0ZXIuX21kZi5zdykge1xuICAgICAgICAgIHRleHRQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgcmVuZGVyZWRMZXR0ZXIuc3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLnNjICYmIHJlbmRlcmVkTGV0dGVyLl9tZGYuc2MpIHtcbiAgICAgICAgICB0ZXh0UGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHJlbmRlcmVkTGV0dGVyLnNjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlci5mYyAmJiByZW5kZXJlZExldHRlci5fbWRmLmZjKSB7XG4gICAgICAgICAgdGV4dFBhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgcmVuZGVyZWRMZXR0ZXIuZmMpO1xuICAgICAgICAgIHRleHRQYXRoLnN0eWxlLmNvbG9yID0gcmVuZGVyZWRMZXR0ZXIuZmM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5pbm5lckVsZW0uZ2V0QkJveCAmJiAhdGhpcy5oaWRkZW4gJiYgKHRoaXMuX2lzRmlyc3RGcmFtZSB8fCB0aGlzLl9tZGYpKSB7XG4gICAgICB2YXIgYm91bmRpbmdCb3ggPSB0aGlzLmlubmVyRWxlbS5nZXRCQm94KCk7XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRCQm94LncgIT09IGJvdW5kaW5nQm94LndpZHRoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gudyA9IGJvdW5kaW5nQm94LndpZHRoO1xuICAgICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGJvdW5kaW5nQm94LndpZHRoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJCb3guaCAhPT0gYm91bmRpbmdCb3guaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3guaCA9IGJvdW5kaW5nQm94LmhlaWdodDtcbiAgICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgYm91bmRpbmdCb3guaGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1hcmdpbiA9IDE7XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRCQm94LncgIT09IGJvdW5kaW5nQm94LndpZHRoICsgbWFyZ2luICogMiB8fCB0aGlzLmN1cnJlbnRCQm94LmggIT09IGJvdW5kaW5nQm94LmhlaWdodCArIG1hcmdpbiAqIDIgfHwgdGhpcy5jdXJyZW50QkJveC54ICE9PSBib3VuZGluZ0JveC54IC0gbWFyZ2luIHx8IHRoaXMuY3VycmVudEJCb3gueSAhPT0gYm91bmRpbmdCb3gueSAtIG1hcmdpbikge1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LncgPSBib3VuZGluZ0JveC53aWR0aCArIG1hcmdpbiAqIDI7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3guaCA9IGJvdW5kaW5nQm94LmhlaWdodCArIG1hcmdpbiAqIDI7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gueCA9IGJvdW5kaW5nQm94LnggLSBtYXJnaW47XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gueSA9IGJvdW5kaW5nQm94LnkgLSBtYXJnaW47XG4gICAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCB0aGlzLmN1cnJlbnRCQm94LnggKyAnICcgKyB0aGlzLmN1cnJlbnRCQm94LnkgKyAnICcgKyB0aGlzLmN1cnJlbnRCQm94LncgKyAnICcgKyB0aGlzLmN1cnJlbnRCQm94LmgpO1xuICAgICAgICBzdmdTdHlsZSA9IHRoaXMuc3ZnRWxlbWVudC5zdHlsZTtcbiAgICAgICAgdmFyIHN2Z1RyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIHRoaXMuY3VycmVudEJCb3gueCArICdweCwnICsgdGhpcy5jdXJyZW50QkJveC55ICsgJ3B4KSc7XG4gICAgICAgIHN2Z1N0eWxlLnRyYW5zZm9ybSA9IHN2Z1RyYW5zZm9ybTtcbiAgICAgICAgc3ZnU3R5bGUud2Via2l0VHJhbnNmb3JtID0gc3ZnVHJhbnNmb3JtO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBIQ2FtZXJhRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRIaWVyYXJjaHkoKTtcbiAgICB2YXIgZ2V0UHJvcCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wO1xuICAgIHRoaXMucGUgPSBnZXRQcm9wKHRoaXMsIGRhdGEucGUsIDAsIDAsIHRoaXMpO1xuXG4gICAgaWYgKGRhdGEua3MucC5zKSB7XG4gICAgICB0aGlzLnB4ID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnAueCwgMSwgMCwgdGhpcyk7XG4gICAgICB0aGlzLnB5ID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnAueSwgMSwgMCwgdGhpcyk7XG4gICAgICB0aGlzLnB6ID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnAueiwgMSwgMCwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucCA9IGdldFByb3AodGhpcywgZGF0YS5rcy5wLCAxLCAwLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5rcy5hKSB7XG4gICAgICB0aGlzLmEgPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MuYSwgMSwgMCwgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEua3Mub3Iuay5sZW5ndGggJiYgZGF0YS5rcy5vci5rWzBdLnRvKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBkYXRhLmtzLm9yLmsubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgZGF0YS5rcy5vci5rW2ldLnRvID0gbnVsbDtcbiAgICAgICAgZGF0YS5rcy5vci5rW2ldLnRpID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm9yID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLm9yLCAxLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgIHRoaXMub3Iuc2ggPSB0cnVlO1xuICAgIHRoaXMucnggPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucngsIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgdGhpcy5yeSA9IGdldFByb3AodGhpcywgZGF0YS5rcy5yeSwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICB0aGlzLnJ6ID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnJ6LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgIHRoaXMubWF0ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMuX3ByZXZNYXQgPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTsgLy8gVE9ETzogZmluZCBhIGJldHRlciB3YXkgdG8gbWFrZSB0aGUgSENhbWVyYSBlbGVtZW50IHRvIGJlIGNvbXBhdGlibGUgd2l0aCB0aGUgTGF5ZXJJbnRlcmZhY2UgYW5kIFRyYW5zZm9ybUludGVyZmFjZS5cblxuICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0gPSB7XG4gICAgICBtUHJvcDogdGhpc1xuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBGcmFtZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnRdLCBIQ2FtZXJhRWxlbWVudCk7XG5cbiAgSENhbWVyYUVsZW1lbnQucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmNvbXAudGhyZWVERWxlbWVudHMubGVuZ3RoO1xuICAgIHZhciBjb21wO1xuICAgIHZhciBwZXJzcGVjdGl2ZVN0eWxlO1xuICAgIHZhciBjb250YWluZXJTdHlsZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgLy8gW3BlcnNwZWN0aXZlRWxlbSxjb250YWluZXJdXG4gICAgICBjb21wID0gdGhpcy5jb21wLnRocmVlREVsZW1lbnRzW2ldO1xuXG4gICAgICBpZiAoY29tcC50eXBlID09PSAnM2QnKSB7XG4gICAgICAgIHBlcnNwZWN0aXZlU3R5bGUgPSBjb21wLnBlcnNwZWN0aXZlRWxlbS5zdHlsZTtcbiAgICAgICAgY29udGFpbmVyU3R5bGUgPSBjb21wLmNvbnRhaW5lci5zdHlsZTtcbiAgICAgICAgdmFyIHBlcnNwZWN0aXZlID0gdGhpcy5wZS52ICsgJ3B4JztcbiAgICAgICAgdmFyIG9yaWdpbiA9ICcwcHggMHB4IDBweCc7XG4gICAgICAgIHZhciBtYXRyaXggPSAnbWF0cml4M2QoMSwwLDAsMCwwLDEsMCwwLDAsMCwxLDAsMCwwLDAsMSknO1xuICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlLnBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmU7XG4gICAgICAgIHBlcnNwZWN0aXZlU3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZTtcbiAgICAgICAgY29udGFpbmVyU3R5bGUudHJhbnNmb3JtT3JpZ2luID0gb3JpZ2luO1xuICAgICAgICBjb250YWluZXJTdHlsZS5tb3pUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICAgIGNvbnRhaW5lclN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgcGVyc3BlY3RpdmVTdHlsZS50cmFuc2Zvcm0gPSBtYXRyaXg7XG4gICAgICAgIHBlcnNwZWN0aXZlU3R5bGUud2Via2l0VHJhbnNmb3JtID0gbWF0cml4O1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX21kZiA9IHRoaXMuX2lzRmlyc3RGcmFtZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuXG4gICAgaWYgKHRoaXMuaGllcmFyY2h5KSB7XG4gICAgICBsZW4gPSB0aGlzLmhpZXJhcmNoeS5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBfbWRmID0gdGhpcy5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3AuX21kZiB8fCBfbWRmO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfbWRmIHx8IHRoaXMucGUuX21kZiB8fCB0aGlzLnAgJiYgdGhpcy5wLl9tZGYgfHwgdGhpcy5weCAmJiAodGhpcy5weC5fbWRmIHx8IHRoaXMucHkuX21kZiB8fCB0aGlzLnB6Ll9tZGYpIHx8IHRoaXMucnguX21kZiB8fCB0aGlzLnJ5Ll9tZGYgfHwgdGhpcy5yei5fbWRmIHx8IHRoaXMub3IuX21kZiB8fCB0aGlzLmEgJiYgdGhpcy5hLl9tZGYpIHtcbiAgICAgIHRoaXMubWF0LnJlc2V0KCk7XG5cbiAgICAgIGlmICh0aGlzLmhpZXJhcmNoeSkge1xuICAgICAgICBsZW4gPSB0aGlzLmhpZXJhcmNoeS5sZW5ndGggLSAxO1xuXG4gICAgICAgIGZvciAoaSA9IGxlbjsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICB2YXIgbVRyYW5zZiA9IHRoaXMuaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wO1xuICAgICAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZSgtbVRyYW5zZi5wLnZbMF0sIC1tVHJhbnNmLnAudlsxXSwgbVRyYW5zZi5wLnZbMl0pO1xuICAgICAgICAgIHRoaXMubWF0LnJvdGF0ZVgoLW1UcmFuc2Yub3IudlswXSkucm90YXRlWSgtbVRyYW5zZi5vci52WzFdKS5yb3RhdGVaKG1UcmFuc2Yub3IudlsyXSk7XG4gICAgICAgICAgdGhpcy5tYXQucm90YXRlWCgtbVRyYW5zZi5yeC52KS5yb3RhdGVZKC1tVHJhbnNmLnJ5LnYpLnJvdGF0ZVoobVRyYW5zZi5yei52KTtcbiAgICAgICAgICB0aGlzLm1hdC5zY2FsZSgxIC8gbVRyYW5zZi5zLnZbMF0sIDEgLyBtVHJhbnNmLnMudlsxXSwgMSAvIG1UcmFuc2Yucy52WzJdKTtcbiAgICAgICAgICB0aGlzLm1hdC50cmFuc2xhdGUobVRyYW5zZi5hLnZbMF0sIG1UcmFuc2YuYS52WzFdLCBtVHJhbnNmLmEudlsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucCkge1xuICAgICAgICB0aGlzLm1hdC50cmFuc2xhdGUoLXRoaXMucC52WzBdLCAtdGhpcy5wLnZbMV0sIHRoaXMucC52WzJdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZSgtdGhpcy5weC52LCAtdGhpcy5weS52LCB0aGlzLnB6LnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hKSB7XG4gICAgICAgIHZhciBkaWZmVmVjdG9yO1xuXG4gICAgICAgIGlmICh0aGlzLnApIHtcbiAgICAgICAgICBkaWZmVmVjdG9yID0gW3RoaXMucC52WzBdIC0gdGhpcy5hLnZbMF0sIHRoaXMucC52WzFdIC0gdGhpcy5hLnZbMV0sIHRoaXMucC52WzJdIC0gdGhpcy5hLnZbMl1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpZmZWZWN0b3IgPSBbdGhpcy5weC52IC0gdGhpcy5hLnZbMF0sIHRoaXMucHkudiAtIHRoaXMuYS52WzFdLCB0aGlzLnB6LnYgLSB0aGlzLmEudlsyXV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWFnID0gTWF0aC5zcXJ0KE1hdGgucG93KGRpZmZWZWN0b3JbMF0sIDIpICsgTWF0aC5wb3coZGlmZlZlY3RvclsxXSwgMikgKyBNYXRoLnBvdyhkaWZmVmVjdG9yWzJdLCAyKSk7IC8vIHZhciBsb29rRGlyID0gZ2V0Tm9ybWFsaXplZFBvaW50KGdldERpZmZWZWN0b3IodGhpcy5hLnYsdGhpcy5wLnYpKTtcblxuICAgICAgICB2YXIgbG9va0RpciA9IFtkaWZmVmVjdG9yWzBdIC8gbWFnLCBkaWZmVmVjdG9yWzFdIC8gbWFnLCBkaWZmVmVjdG9yWzJdIC8gbWFnXTtcbiAgICAgICAgdmFyIGxvb2tMZW5ndGhPblhaID0gTWF0aC5zcXJ0KGxvb2tEaXJbMl0gKiBsb29rRGlyWzJdICsgbG9va0RpclswXSAqIGxvb2tEaXJbMF0pO1xuICAgICAgICB2YXIgbVJvdGF0aW9uWCA9IE1hdGguYXRhbjIobG9va0RpclsxXSwgbG9va0xlbmd0aE9uWFopO1xuICAgICAgICB2YXIgbVJvdGF0aW9uWSA9IE1hdGguYXRhbjIobG9va0RpclswXSwgLWxvb2tEaXJbMl0pO1xuICAgICAgICB0aGlzLm1hdC5yb3RhdGVZKG1Sb3RhdGlvblkpLnJvdGF0ZVgoLW1Sb3RhdGlvblgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1hdC5yb3RhdGVYKC10aGlzLnJ4LnYpLnJvdGF0ZVkoLXRoaXMucnkudikucm90YXRlWih0aGlzLnJ6LnYpO1xuICAgICAgdGhpcy5tYXQucm90YXRlWCgtdGhpcy5vci52WzBdKS5yb3RhdGVZKC10aGlzLm9yLnZbMV0pLnJvdGF0ZVoodGhpcy5vci52WzJdKTtcbiAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZSh0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudyAvIDIsIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oIC8gMiwgMCk7XG4gICAgICB0aGlzLm1hdC50cmFuc2xhdGUoMCwgMCwgdGhpcy5wZS52KTtcbiAgICAgIHZhciBoYXNNYXRyaXhDaGFuZ2VkID0gIXRoaXMuX3ByZXZNYXQuZXF1YWxzKHRoaXMubWF0KTtcblxuICAgICAgaWYgKChoYXNNYXRyaXhDaGFuZ2VkIHx8IHRoaXMucGUuX21kZikgJiYgdGhpcy5jb21wLnRocmVlREVsZW1lbnRzKSB7XG4gICAgICAgIGxlbiA9IHRoaXMuY29tcC50aHJlZURFbGVtZW50cy5sZW5ndGg7XG4gICAgICAgIHZhciBjb21wO1xuICAgICAgICB2YXIgcGVyc3BlY3RpdmVTdHlsZTtcbiAgICAgICAgdmFyIGNvbnRhaW5lclN0eWxlO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGNvbXAgPSB0aGlzLmNvbXAudGhyZWVERWxlbWVudHNbaV07XG5cbiAgICAgICAgICBpZiAoY29tcC50eXBlID09PSAnM2QnKSB7XG4gICAgICAgICAgICBpZiAoaGFzTWF0cml4Q2hhbmdlZCkge1xuICAgICAgICAgICAgICB2YXIgbWF0VmFsdWUgPSB0aGlzLm1hdC50b0NTUygpO1xuICAgICAgICAgICAgICBjb250YWluZXJTdHlsZSA9IGNvbXAuY29udGFpbmVyLnN0eWxlO1xuICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS50cmFuc2Zvcm0gPSBtYXRWYWx1ZTtcbiAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUud2Via2l0VHJhbnNmb3JtID0gbWF0VmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBlLl9tZGYpIHtcbiAgICAgICAgICAgICAgcGVyc3BlY3RpdmVTdHlsZSA9IGNvbXAucGVyc3BlY3RpdmVFbGVtLnN0eWxlO1xuICAgICAgICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlLnBlcnNwZWN0aXZlID0gdGhpcy5wZS52ICsgJ3B4JztcbiAgICAgICAgICAgICAgcGVyc3BlY3RpdmVTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9IHRoaXMucGUudiArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXQuY2xvbmUodGhpcy5fcHJldk1hdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gIH07XG5cbiAgSENhbWVyYUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICB0aGlzLnByZXBhcmVQcm9wZXJ0aWVzKG51bSwgdHJ1ZSk7XG4gIH07XG5cbiAgSENhbWVyYUVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gSEltYWdlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5hc3NldERhdGEgPSBnbG9iYWxEYXRhLmdldEFzc2V0RGF0YShkYXRhLnJlZklkKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSEJhc2VFbGVtZW50LCBIU29saWRFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50XSwgSEltYWdlRWxlbWVudCk7XG5cbiAgSEltYWdlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXNzZXRQYXRoID0gdGhpcy5nbG9iYWxEYXRhLmdldEFzc2V0c1BhdGgodGhpcy5hc3NldERhdGEpO1xuICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgdGhpcy5pbWFnZUVsZW0gPSBjcmVhdGVOUygnaW1hZ2UnKTtcbiAgICAgIHRoaXMuaW1hZ2VFbGVtLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmFzc2V0RGF0YS53ICsgJ3B4Jyk7XG4gICAgICB0aGlzLmltYWdlRWxlbS5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuYXNzZXREYXRhLmggKyAncHgnKTtcbiAgICAgIHRoaXMuaW1hZ2VFbGVtLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgJ2hyZWYnLCBhc3NldFBhdGgpO1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5pbWFnZUVsZW0pO1xuICAgICAgdGhpcy5iYXNlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5hc3NldERhdGEudyk7XG4gICAgICB0aGlzLmJhc2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5hc3NldERhdGEuaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKGltZyk7XG4gICAgfVxuXG4gICAgaW1nLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG4gICAgaW1nLnNyYyA9IGFzc2V0UGF0aDtcblxuICAgIGlmICh0aGlzLmRhdGEubG4pIHtcbiAgICAgIHRoaXMuYmFzZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMuZGF0YS5sbik7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEh5YnJpZFJlbmRlcmVyQmFzZShhbmltYXRpb25JdGVtLCBjb25maWcpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBhbmltYXRpb25JdGVtO1xuICAgIHRoaXMubGF5ZXJzID0gbnVsbDtcbiAgICB0aGlzLnJlbmRlcmVkRnJhbWUgPSAtMTtcbiAgICB0aGlzLnJlbmRlckNvbmZpZyA9IHtcbiAgICAgIGNsYXNzTmFtZTogY29uZmlnICYmIGNvbmZpZy5jbGFzc05hbWUgfHwgJycsXG4gICAgICBpbWFnZVByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBzbGljZScsXG4gICAgICBoaWRlT25UcmFuc3BhcmVudDogIShjb25maWcgJiYgY29uZmlnLmhpZGVPblRyYW5zcGFyZW50ID09PSBmYWxzZSksXG4gICAgICBmaWx0ZXJTaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUud2lkdGggfHwgJzQwMCUnLFxuICAgICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS5oZWlnaHQgfHwgJzQwMCUnLFxuICAgICAgICB4OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueCB8fCAnLTEwMCUnLFxuICAgICAgICB5OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueSB8fCAnLTEwMCUnXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSB7XG4gICAgICBfbWRmOiBmYWxzZSxcbiAgICAgIGZyYW1lTnVtOiAtMSxcbiAgICAgIHJlbmRlckNvbmZpZzogdGhpcy5yZW5kZXJDb25maWdcbiAgICB9O1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMudGhyZWVERWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2FtZXJhID0gbnVsbDtcbiAgICB0aGlzLnN1cHBvcnRzM2QgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ2h0bWwnO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlUmVuZGVyZXJdLCBIeWJyaWRSZW5kZXJlckJhc2UpO1xuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmJ1aWxkSXRlbSA9IFNWR1JlbmRlcmVyLnByb3RvdHlwZS5idWlsZEl0ZW07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jaGVja1BlbmRpbmdFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB3aGlsZSAodGhpcy5wZW5kaW5nRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMucGVuZGluZ0VsZW1lbnRzLnBvcCgpO1xuICAgICAgZWxlbWVudC5jaGVja1BhcmVudGluZygpO1xuICAgIH1cbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmFwcGVuZEVsZW1lbnRJblBvcyA9IGZ1bmN0aW9uIChlbGVtZW50LCBwb3MpIHtcbiAgICB2YXIgbmV3RE9NRWxlbWVudCA9IGVsZW1lbnQuZ2V0QmFzZUVsZW1lbnQoKTtcblxuICAgIGlmICghbmV3RE9NRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXllciA9IHRoaXMubGF5ZXJzW3Bvc107XG5cbiAgICBpZiAoIWxheWVyLmRkZCB8fCAhdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICBpZiAodGhpcy50aHJlZURFbGVtZW50cykge1xuICAgICAgICB0aGlzLmFkZFRvM2RDb250YWluZXIobmV3RE9NRWxlbWVudCwgcG9zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIG5leHRET01FbGVtZW50O1xuICAgICAgICB2YXIgbmV4dExheWVyO1xuICAgICAgICB2YXIgdG1wRE9NRWxlbWVudDtcblxuICAgICAgICB3aGlsZSAoaSA8IHBvcykge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldICYmIHRoaXMuZWxlbWVudHNbaV0gIT09IHRydWUgJiYgdGhpcy5lbGVtZW50c1tpXS5nZXRCYXNlRWxlbWVudCkge1xuICAgICAgICAgICAgbmV4dExheWVyID0gdGhpcy5lbGVtZW50c1tpXTtcbiAgICAgICAgICAgIHRtcERPTUVsZW1lbnQgPSB0aGlzLmxheWVyc1tpXS5kZGQgPyB0aGlzLmdldFRocmVlRENvbnRhaW5lckJ5UG9zKGkpIDogbmV4dExheWVyLmdldEJhc2VFbGVtZW50KCk7XG4gICAgICAgICAgICBuZXh0RE9NRWxlbWVudCA9IHRtcERPTUVsZW1lbnQgfHwgbmV4dERPTUVsZW1lbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRET01FbGVtZW50KSB7XG4gICAgICAgICAgaWYgKCFsYXllci5kZGQgfHwgIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5ld0RPTUVsZW1lbnQsIG5leHRET01FbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWxheWVyLmRkZCB8fCAhdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RE9NRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRUbzNkQ29udGFpbmVyKG5ld0RPTUVsZW1lbnQsIHBvcyk7XG4gICAgfVxuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlU2hhcGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IFNWR1NoYXBlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgSFNoYXBlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlVGV4dCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHVGV4dExvdHRpZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEhUZXh0RWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlQ2FtZXJhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBIQ2FtZXJhRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzLmNhbWVyYTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZUltYWdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgcmV0dXJuIG5ldyBJSW1hZ2VFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBISW1hZ2VFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTb2xpZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIHJldHVybiBuZXcgSVNvbGlkRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgSFNvbGlkRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlTnVsbCA9IFNWR1JlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVOdWxsO1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuZ2V0VGhyZWVEQ29udGFpbmVyQnlQb3MgPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLnRocmVlREVsZW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAodGhpcy50aHJlZURFbGVtZW50c1tpXS5zdGFydFBvcyA8PSBwb3MgJiYgdGhpcy50aHJlZURFbGVtZW50c1tpXS5lbmRQb3MgPj0gcG9zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocmVlREVsZW1lbnRzW2ldLnBlcnNwZWN0aXZlRWxlbTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlVGhyZWVEQ29udGFpbmVyID0gZnVuY3Rpb24gKHBvcywgdHlwZSkge1xuICAgIHZhciBwZXJzcGVjdGl2ZUVsZW0gPSBjcmVhdGVUYWcoJ2RpdicpO1xuICAgIHZhciBzdHlsZTtcbiAgICB2YXIgY29udGFpbmVyU3R5bGU7XG4gICAgc3R5bGVEaXYocGVyc3BlY3RpdmVFbGVtKTtcbiAgICB2YXIgY29udGFpbmVyID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICBzdHlsZURpdihjb250YWluZXIpO1xuXG4gICAgaWYgKHR5cGUgPT09ICczZCcpIHtcbiAgICAgIHN0eWxlID0gcGVyc3BlY3RpdmVFbGVtLnN0eWxlO1xuICAgICAgc3R5bGUud2lkdGggPSB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudyArICdweCc7XG4gICAgICBzdHlsZS5oZWlnaHQgPSB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaCArICdweCc7XG4gICAgICB2YXIgY2VudGVyID0gJzUwJSA1MCUnO1xuICAgICAgc3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luID0gY2VudGVyO1xuICAgICAgc3R5bGUubW96VHJhbnNmb3JtT3JpZ2luID0gY2VudGVyO1xuICAgICAgc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gY2VudGVyO1xuICAgICAgY29udGFpbmVyU3R5bGUgPSBjb250YWluZXIuc3R5bGU7XG4gICAgICB2YXIgbWF0cml4ID0gJ21hdHJpeDNkKDEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsMCwwLDEpJztcbiAgICAgIGNvbnRhaW5lclN0eWxlLnRyYW5zZm9ybSA9IG1hdHJpeDtcbiAgICAgIGNvbnRhaW5lclN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IG1hdHJpeDtcbiAgICB9XG5cbiAgICBwZXJzcGVjdGl2ZUVsZW0uYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsgLy8gdGhpcy5yZXNpemVyRWxlbS5hcHBlbmRDaGlsZChwZXJzcGVjdGl2ZUVsZW0pO1xuXG4gICAgdmFyIHRocmVlRENvbnRhaW5lckRhdGEgPSB7XG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIHBlcnNwZWN0aXZlRWxlbTogcGVyc3BlY3RpdmVFbGVtLFxuICAgICAgc3RhcnRQb3M6IHBvcyxcbiAgICAgIGVuZFBvczogcG9zLFxuICAgICAgdHlwZTogdHlwZVxuICAgIH07XG4gICAgdGhpcy50aHJlZURFbGVtZW50cy5wdXNoKHRocmVlRENvbnRhaW5lckRhdGEpO1xuICAgIHJldHVybiB0aHJlZURDb250YWluZXJEYXRhO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuYnVpbGQzZENvbnRhaW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcbiAgICB2YXIgbGFzdFRocmVlRENvbnRhaW5lckRhdGE7XG4gICAgdmFyIGN1cnJlbnRDb250YWluZXIgPSAnJztcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMubGF5ZXJzW2ldLmRkZCAmJiB0aGlzLmxheWVyc1tpXS50eSAhPT0gMykge1xuICAgICAgICBpZiAoY3VycmVudENvbnRhaW5lciAhPT0gJzNkJykge1xuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIgPSAnM2QnO1xuICAgICAgICAgIGxhc3RUaHJlZURDb250YWluZXJEYXRhID0gdGhpcy5jcmVhdGVUaHJlZURDb250YWluZXIoaSwgJzNkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0VGhyZWVEQ29udGFpbmVyRGF0YS5lbmRQb3MgPSBNYXRoLm1heChsYXN0VGhyZWVEQ29udGFpbmVyRGF0YS5lbmRQb3MsIGkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDb250YWluZXIgIT09ICcyZCcpIHtcbiAgICAgICAgICBjdXJyZW50Q29udGFpbmVyID0gJzJkJztcbiAgICAgICAgICBsYXN0VGhyZWVEQ29udGFpbmVyRGF0YSA9IHRoaXMuY3JlYXRlVGhyZWVEQ29udGFpbmVyKGksICcyZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFRocmVlRENvbnRhaW5lckRhdGEuZW5kUG9zID0gTWF0aC5tYXgobGFzdFRocmVlRENvbnRhaW5lckRhdGEuZW5kUG9zLCBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZW4gPSB0aGlzLnRocmVlREVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICB0aGlzLnJlc2l6ZXJFbGVtLmFwcGVuZENoaWxkKHRoaXMudGhyZWVERWxlbWVudHNbaV0ucGVyc3BlY3RpdmVFbGVtKTtcbiAgICB9XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5hZGRUbzNkQ29udGFpbmVyID0gZnVuY3Rpb24gKGVsZW0sIHBvcykge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGhpcy50aHJlZURFbGVtZW50cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKHBvcyA8PSB0aGlzLnRocmVlREVsZW1lbnRzW2ldLmVuZFBvcykge1xuICAgICAgICB2YXIgaiA9IHRoaXMudGhyZWVERWxlbWVudHNbaV0uc3RhcnRQb3M7XG4gICAgICAgIHZhciBuZXh0RWxlbWVudDtcblxuICAgICAgICB3aGlsZSAoaiA8IHBvcykge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2pdICYmIHRoaXMuZWxlbWVudHNbal0uZ2V0QmFzZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIG5leHRFbGVtZW50ID0gdGhpcy5lbGVtZW50c1tqXS5nZXRCYXNlRWxlbWVudCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0RWxlbWVudCkge1xuICAgICAgICAgIHRoaXMudGhyZWVERWxlbWVudHNbaV0uY29udGFpbmVyLmluc2VydEJlZm9yZShlbGVtLCBuZXh0RWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJlZURFbGVtZW50c1tpXS5jb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNvbmZpZ0FuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltRGF0YSkge1xuICAgIHZhciByZXNpemVyRWxlbSA9IGNyZWF0ZVRhZygnZGl2Jyk7XG4gICAgdmFyIHdyYXBwZXIgPSB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcjtcbiAgICB2YXIgc3R5bGUgPSByZXNpemVyRWxlbS5zdHlsZTtcbiAgICBzdHlsZS53aWR0aCA9IGFuaW1EYXRhLncgKyAncHgnO1xuICAgIHN0eWxlLmhlaWdodCA9IGFuaW1EYXRhLmggKyAncHgnO1xuICAgIHRoaXMucmVzaXplckVsZW0gPSByZXNpemVyRWxlbTtcbiAgICBzdHlsZURpdihyZXNpemVyRWxlbSk7XG4gICAgc3R5bGUudHJhbnNmb3JtU3R5bGUgPSAnZmxhdCc7XG4gICAgc3R5bGUubW96VHJhbnNmb3JtU3R5bGUgPSAnZmxhdCc7XG4gICAgc3R5bGUud2Via2l0VHJhbnNmb3JtU3R5bGUgPSAnZmxhdCc7XG5cbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuY2xhc3NOYW1lKSB7XG4gICAgICByZXNpemVyRWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdGhpcy5yZW5kZXJDb25maWcuY2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHJlc2l6ZXJFbGVtKTtcbiAgICBzdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIHZhciBzdmcgPSBjcmVhdGVOUygnc3ZnJyk7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMScpO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICcxJyk7XG4gICAgc3R5bGVEaXYoc3ZnKTtcbiAgICB0aGlzLnJlc2l6ZXJFbGVtLmFwcGVuZENoaWxkKHN2Zyk7XG4gICAgdmFyIGRlZnMgPSBjcmVhdGVOUygnZGVmcycpO1xuICAgIHN2Zy5hcHBlbmRDaGlsZChkZWZzKTtcbiAgICB0aGlzLmRhdGEgPSBhbmltRGF0YTsgLy8gTWFzayBhbmltYXRpb25cblxuICAgIHRoaXMuc2V0dXBHbG9iYWxEYXRhKGFuaW1EYXRhLCBzdmcpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzID0gZGVmcztcbiAgICB0aGlzLmxheWVycyA9IGFuaW1EYXRhLmxheWVycztcbiAgICB0aGlzLmxheWVyRWxlbWVudCA9IHRoaXMucmVzaXplckVsZW07XG4gICAgdGhpcy5idWlsZDNkQ29udGFpbmVycygpO1xuICAgIHRoaXMudXBkYXRlQ29udGFpbmVyU2l6ZSgpO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLmlubmVyVGV4dCA9ICcnO1xuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIgPSBudWxsO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzID0gbnVsbDtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMgPyB0aGlzLmxheWVycy5sZW5ndGggOiAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBudWxsO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUudXBkYXRlQ29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxlbWVudFdpZHRoID0gdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIub2Zmc2V0V2lkdGg7XG4gICAgdmFyIGVsZW1lbnRIZWlnaHQgPSB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRIZWlnaHQ7XG4gICAgdmFyIGVsZW1lbnRSZWwgPSBlbGVtZW50V2lkdGggLyBlbGVtZW50SGVpZ2h0O1xuICAgIHZhciBhbmltYXRpb25SZWwgPSB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudyAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO1xuICAgIHZhciBzeDtcbiAgICB2YXIgc3k7XG4gICAgdmFyIHR4O1xuICAgIHZhciB0eTtcblxuICAgIGlmIChhbmltYXRpb25SZWwgPiBlbGVtZW50UmVsKSB7XG4gICAgICBzeCA9IGVsZW1lbnRXaWR0aCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgICAgc3kgPSBlbGVtZW50V2lkdGggLyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudztcbiAgICAgIHR4ID0gMDtcbiAgICAgIHR5ID0gKGVsZW1lbnRIZWlnaHQgLSB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaCAqIChlbGVtZW50V2lkdGggLyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudykpIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ggPSBlbGVtZW50SGVpZ2h0IC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmg7XG4gICAgICBzeSA9IGVsZW1lbnRIZWlnaHQgLyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDtcbiAgICAgIHR4ID0gKGVsZW1lbnRXaWR0aCAtIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53ICogKGVsZW1lbnRIZWlnaHQgLyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaCkpIC8gMjtcbiAgICAgIHR5ID0gMDtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGUgPSB0aGlzLnJlc2l6ZXJFbGVtLnN0eWxlO1xuICAgIHN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdtYXRyaXgzZCgnICsgc3ggKyAnLDAsMCwwLDAsJyArIHN5ICsgJywwLDAsMCwwLDEsMCwnICsgdHggKyAnLCcgKyB0eSArICcsMCwxKSc7XG4gICAgc3R5bGUudHJhbnNmb3JtID0gc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBTVkdSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyRnJhbWU7XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVzaXplckVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZXNpemVyRWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmluaXRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJ1aWxkQWxsSXRlbXMoKTtcblxuICAgIGlmICh0aGlzLmNhbWVyYSkge1xuICAgICAgdGhpcy5jYW1lcmEuc2V0dXAoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNXaWR0aCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgICAgdmFyIGNIZWlnaHQgPSB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMudGhyZWVERWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHN0eWxlID0gdGhpcy50aHJlZURFbGVtZW50c1tpXS5wZXJzcGVjdGl2ZUVsZW0uc3R5bGU7XG4gICAgICAgIHN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID0gTWF0aC5zcXJ0KE1hdGgucG93KGNXaWR0aCwgMikgKyBNYXRoLnBvdyhjSGVpZ2h0LCAyKSkgKyAncHgnO1xuICAgICAgICBzdHlsZS5wZXJzcGVjdGl2ZSA9IHN0eWxlLndlYmtpdFBlcnNwZWN0aXZlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLnNlYXJjaEV4dHJhQ29tcG9zaXRpb25zID0gZnVuY3Rpb24gKGFzc2V0cykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBhc3NldHMubGVuZ3RoO1xuICAgIHZhciBmbG9hdGluZ0NvbnRhaW5lciA9IGNyZWF0ZVRhZygnZGl2Jyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmIChhc3NldHNbaV0ueHQpIHtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLmNyZWF0ZUNvbXAoYXNzZXRzW2ldLCBmbG9hdGluZ0NvbnRhaW5lciwgdGhpcy5nbG9iYWxEYXRhLmNvbXAsIG51bGwpO1xuICAgICAgICBjb21wLmluaXRFeHByZXNzaW9ucygpO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5yZWdpc3RlckNvbXBvc2l0aW9uKGNvbXApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBIQ29tcEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMubGF5ZXJzID0gZGF0YS5sYXllcnM7XG4gICAgdGhpcy5zdXBwb3J0czNkID0gIWRhdGEuaGFzTWFzaztcbiAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gZmFsc2U7XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5sYXllcnMgPyBjcmVhdGVTaXplZEFycmF5KHRoaXMubGF5ZXJzLmxlbmd0aCkgOiBbXTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMudG0gPSBkYXRhLnRtID8gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS50bSwgMCwgZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIHRoaXMpIDoge1xuICAgICAgX3BsYWNlaG9sZGVyOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbSHlicmlkUmVuZGVyZXJCYXNlLCBJQ29tcEVsZW1lbnQsIEhCYXNlRWxlbWVudF0sIEhDb21wRWxlbWVudCk7XG4gIEhDb21wRWxlbWVudC5wcm90b3R5cGUuX2NyZWF0ZUJhc2VDb250YWluZXJFbGVtZW50cyA9IEhDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGFpbmVyRWxlbWVudHM7XG5cbiAgSENvbXBFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250YWluZXJFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9jcmVhdGVCYXNlQ29udGFpbmVyRWxlbWVudHMoKTsgLy8gZGl2RWxlbWVudC5zdHlsZS5jbGlwID0gJ3JlY3QoMHB4LCAnK3RoaXMuZGF0YS53KydweCwgJyt0aGlzLmRhdGEuaCsncHgsIDBweCknO1xuXG5cbiAgICBpZiAodGhpcy5kYXRhLmhhc01hc2spIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5kYXRhLncpO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5kYXRhLmgpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQgPSB0aGlzLmJhc2VFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgIH1cbiAgfTtcblxuICBIQ29tcEVsZW1lbnQucHJvdG90eXBlLmFkZFRvM2RDb250YWluZXIgPSBmdW5jdGlvbiAoZWxlbSwgcG9zKSB7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBuZXh0RWxlbWVudDtcblxuICAgIHdoaWxlIChqIDwgcG9zKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tqXSAmJiB0aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KSB7XG4gICAgICAgIG5leHRFbGVtZW50ID0gdGhpcy5lbGVtZW50c1tqXS5nZXRCYXNlRWxlbWVudCgpO1xuICAgICAgfVxuXG4gICAgICBqICs9IDE7XG4gICAgfVxuXG4gICAgaWYgKG5leHRFbGVtZW50KSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5pbnNlcnRCZWZvcmUoZWxlbSwgbmV4dEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICB9XG4gIH07XG5cbiAgSENvbXBFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb21wID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgcmV0dXJuIG5ldyBTVkdDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgSENvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSHlicmlkUmVuZGVyZXIoYW5pbWF0aW9uSXRlbSwgY29uZmlnKSB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gYW5pbWF0aW9uSXRlbTtcbiAgICB0aGlzLmxheWVycyA9IG51bGw7XG4gICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gLTE7XG4gICAgdGhpcy5yZW5kZXJDb25maWcgPSB7XG4gICAgICBjbGFzc05hbWU6IGNvbmZpZyAmJiBjb25maWcuY2xhc3NOYW1lIHx8ICcnLFxuICAgICAgaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvOiBjb25maWcgJiYgY29uZmlnLmltYWdlUHJlc2VydmVBc3BlY3RSYXRpbyB8fCAneE1pZFlNaWQgc2xpY2UnLFxuICAgICAgaGlkZU9uVHJhbnNwYXJlbnQ6ICEoY29uZmlnICYmIGNvbmZpZy5oaWRlT25UcmFuc3BhcmVudCA9PT0gZmFsc2UpLFxuICAgICAgZmlsdGVyU2l6ZToge1xuICAgICAgICB3aWR0aDogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLndpZHRoIHx8ICc0MDAlJyxcbiAgICAgICAgaGVpZ2h0OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUuaGVpZ2h0IHx8ICc0MDAlJyxcbiAgICAgICAgeDogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLnggfHwgJy0xMDAlJyxcbiAgICAgICAgeTogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLnkgfHwgJy0xMDAlJ1xuICAgICAgfSxcbiAgICAgIHJ1bkV4cHJlc3Npb25zOiAhY29uZmlnIHx8IGNvbmZpZy5ydW5FeHByZXNzaW9ucyA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5ydW5FeHByZXNzaW9uc1xuICAgIH07XG4gICAgdGhpcy5nbG9iYWxEYXRhID0ge1xuICAgICAgX21kZjogZmFsc2UsXG4gICAgICBmcmFtZU51bTogLTEsXG4gICAgICByZW5kZXJDb25maWc6IHRoaXMucmVuZGVyQ29uZmlnXG4gICAgfTtcbiAgICB0aGlzLnBlbmRpbmdFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLnRocmVlREVsZW1lbnRzID0gW107XG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNhbWVyYSA9IG51bGw7XG4gICAgdGhpcy5zdXBwb3J0czNkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcmVyVHlwZSA9ICdodG1sJztcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbSHlicmlkUmVuZGVyZXJCYXNlXSwgSHlicmlkUmVuZGVyZXIpO1xuXG4gIEh5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVDb21wID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgcmV0dXJuIG5ldyBTVkdDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgSENvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgdmFyIENvbXBFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY29tcCkge1xuICAgICAgZnVuY3Rpb24gX3RoaXNMYXllckZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gY29tcC5sYXllcnMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKGNvbXAubGF5ZXJzW2ldLm5tID09PSBuYW1lIHx8IGNvbXAubGF5ZXJzW2ldLmluZCA9PT0gbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXAuZWxlbWVudHNbaV0ubGF5ZXJJbnRlcmZhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiB7YWN0aXZlOmZhbHNlfTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzTGF5ZXJGdW5jdGlvbiwgJ19uYW1lJywge1xuICAgICAgICB2YWx1ZTogY29tcC5kYXRhLm5tXG4gICAgICB9KTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5sYXllciA9IF90aGlzTGF5ZXJGdW5jdGlvbjtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5waXhlbEFzcGVjdCA9IDE7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uaGVpZ2h0ID0gY29tcC5kYXRhLmggfHwgY29tcC5nbG9iYWxEYXRhLmNvbXBTaXplLmg7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ud2lkdGggPSBjb21wLmRhdGEudyB8fCBjb21wLmdsb2JhbERhdGEuY29tcFNpemUudztcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5waXhlbEFzcGVjdCA9IDE7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZnJhbWVEdXJhdGlvbiA9IDEgLyBjb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmRpc3BsYXlTdGFydFRpbWUgPSAwO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLm51bUxheWVycyA9IGNvbXAubGF5ZXJzLmxlbmd0aDtcbiAgICAgIHJldHVybiBfdGhpc0xheWVyRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF90eXBlb2YkMihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQyID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDIob2JqKTsgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlICovXG5cbiAgLypcbiAgIENvcHlyaWdodCAyMDE0IERhdmlkIEJhdS5cblxuICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4gICBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAgIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICAgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICAgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gICBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAgIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gICBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4gICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuICAgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbiAgIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4gICBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuICAgKi9cbiAgZnVuY3Rpb24gc2VlZFJhbmRvbShwb29sLCBtYXRoKSB7XG4gICAgLy9cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvbnN0YW50cyBhcmUgcmVsYXRlZCB0byBJRUVFIDc1NCBsaW1pdHMuXG4gICAgLy9cbiAgICB2YXIgZ2xvYmFsID0gdGhpcyxcbiAgICAgICAgd2lkdGggPSAyNTYsXG4gICAgICAgIC8vIGVhY2ggUkM0IG91dHB1dCBpcyAwIDw9IHggPCAyNTZcbiAgICBjaHVua3MgPSA2LFxuICAgICAgICAvLyBhdCBsZWFzdCBzaXggUkM0IG91dHB1dHMgZm9yIGVhY2ggZG91YmxlXG4gICAgZGlnaXRzID0gNTIsXG4gICAgICAgIC8vIHRoZXJlIGFyZSA1MiBzaWduaWZpY2FudCBkaWdpdHMgaW4gYSBkb3VibGVcbiAgICBybmduYW1lID0gJ3JhbmRvbScsXG4gICAgICAgIC8vIHJuZ25hbWU6IG5hbWUgZm9yIE1hdGgucmFuZG9tIGFuZCBNYXRoLnNlZWRyYW5kb21cbiAgICBzdGFydGRlbm9tID0gbWF0aC5wb3cod2lkdGgsIGNodW5rcyksXG4gICAgICAgIHNpZ25pZmljYW5jZSA9IG1hdGgucG93KDIsIGRpZ2l0cyksXG4gICAgICAgIG92ZXJmbG93ID0gc2lnbmlmaWNhbmNlICogMixcbiAgICAgICAgbWFzayA9IHdpZHRoIC0gMSxcbiAgICAgICAgbm9kZWNyeXB0bzsgLy8gbm9kZS5qcyBjcnlwdG8gbW9kdWxlLCBpbml0aWFsaXplZCBhdCB0aGUgYm90dG9tLlxuICAgIC8vXG4gICAgLy8gc2VlZHJhbmRvbSgpXG4gICAgLy8gVGhpcyBpcyB0aGUgc2VlZHJhbmRvbSBmdW5jdGlvbiBkZXNjcmliZWQgYWJvdmUuXG4gICAgLy9cblxuICAgIGZ1bmN0aW9uIHNlZWRyYW5kb20oc2VlZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBrZXkgPSBbXTtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID09PSB0cnVlID8ge1xuICAgICAgICBlbnRyb3B5OiB0cnVlXG4gICAgICB9IDogb3B0aW9ucyB8fCB7fTsgLy8gRmxhdHRlbiB0aGUgc2VlZCBzdHJpbmcgb3IgYnVpbGQgb25lIGZyb20gbG9jYWwgZW50cm9weSBpZiBuZWVkZWQuXG5cbiAgICAgIHZhciBzaG9ydHNlZWQgPSBtaXhrZXkoZmxhdHRlbihvcHRpb25zLmVudHJvcHkgPyBbc2VlZCwgdG9zdHJpbmcocG9vbCldIDogc2VlZCA9PT0gbnVsbCA/IGF1dG9zZWVkKCkgOiBzZWVkLCAzKSwga2V5KTsgLy8gVXNlIHRoZSBzZWVkIHRvIGluaXRpYWxpemUgYW4gQVJDNCBnZW5lcmF0b3IuXG5cbiAgICAgIHZhciBhcmM0ID0gbmV3IEFSQzQoa2V5KTsgLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgcmFuZG9tIGRvdWJsZSBpbiBbMCwgMSkgdGhhdCBjb250YWluc1xuICAgICAgLy8gcmFuZG9tbmVzcyBpbiBldmVyeSBiaXQgb2YgdGhlIG1hbnRpc3NhIG9mIHRoZSBJRUVFIDc1NCB2YWx1ZS5cblxuICAgICAgdmFyIHBybmcgPSBmdW5jdGlvbiBwcm5nKCkge1xuICAgICAgICB2YXIgbiA9IGFyYzQuZyhjaHVua3MpLFxuICAgICAgICAgICAgLy8gU3RhcnQgd2l0aCBhIG51bWVyYXRvciBuIDwgMiBeIDQ4XG4gICAgICAgIGQgPSBzdGFydGRlbm9tLFxuICAgICAgICAgICAgLy8gICBhbmQgZGVub21pbmF0b3IgZCA9IDIgXiA0OC5cbiAgICAgICAgeCA9IDA7IC8vICAgYW5kIG5vICdleHRyYSBsYXN0IGJ5dGUnLlxuXG4gICAgICAgIHdoaWxlIChuIDwgc2lnbmlmaWNhbmNlKSB7XG4gICAgICAgICAgLy8gRmlsbCB1cCBhbGwgc2lnbmlmaWNhbnQgZGlnaXRzIGJ5XG4gICAgICAgICAgbiA9IChuICsgeCkgKiB3aWR0aDsgLy8gICBzaGlmdGluZyBudW1lcmF0b3IgYW5kXG5cbiAgICAgICAgICBkICo9IHdpZHRoOyAvLyAgIGRlbm9taW5hdG9yIGFuZCBnZW5lcmF0aW5nIGFcblxuICAgICAgICAgIHggPSBhcmM0LmcoMSk7IC8vICAgbmV3IGxlYXN0LXNpZ25pZmljYW50LWJ5dGUuXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobiA+PSBvdmVyZmxvdykge1xuICAgICAgICAgIC8vIFRvIGF2b2lkIHJvdW5kaW5nIHVwLCBiZWZvcmUgYWRkaW5nXG4gICAgICAgICAgbiAvPSAyOyAvLyAgIGxhc3QgYnl0ZSwgc2hpZnQgZXZlcnl0aGluZ1xuXG4gICAgICAgICAgZCAvPSAyOyAvLyAgIHJpZ2h0IHVzaW5nIGludGVnZXIgbWF0aCB1bnRpbFxuXG4gICAgICAgICAgeCA+Pj49IDE7IC8vICAgd2UgaGF2ZSBleGFjdGx5IHRoZSBkZXNpcmVkIGJpdHMuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG4gKyB4KSAvIGQ7IC8vIEZvcm0gdGhlIG51bWJlciB3aXRoaW4gWzAsIDEpLlxuICAgICAgfTtcblxuICAgICAgcHJuZy5pbnQzMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyYzQuZyg0KSB8IDA7XG4gICAgICB9O1xuXG4gICAgICBwcm5nLnF1aWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJjNC5nKDQpIC8gMHgxMDAwMDAwMDA7XG4gICAgICB9O1xuXG4gICAgICBwcm5nW1wiZG91YmxlXCJdID0gcHJuZzsgLy8gTWl4IHRoZSByYW5kb21uZXNzIGludG8gYWNjdW11bGF0ZWQgZW50cm9weS5cblxuICAgICAgbWl4a2V5KHRvc3RyaW5nKGFyYzQuUyksIHBvb2wpOyAvLyBDYWxsaW5nIGNvbnZlbnRpb246IHdoYXQgdG8gcmV0dXJuIGFzIGEgZnVuY3Rpb24gb2YgcHJuZywgc2VlZCwgaXNfbWF0aC5cblxuICAgICAgcmV0dXJuIChvcHRpb25zLnBhc3MgfHwgY2FsbGJhY2sgfHwgZnVuY3Rpb24gKHBybmcsIHNlZWQsIGlzX21hdGhfY2FsbCwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgLy8gTG9hZCB0aGUgYXJjNCBzdGF0ZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBpZiBpdCBoYXMgYW4gUyBhcnJheS5cbiAgICAgICAgICBpZiAoc3RhdGUuUykge1xuICAgICAgICAgICAgY29weShzdGF0ZSwgYXJjNCk7XG4gICAgICAgICAgfSAvLyBPbmx5IHByb3ZpZGUgdGhlIC5zdGF0ZSBtZXRob2QgaWYgcmVxdWVzdGVkIHZpYSBvcHRpb25zLnN0YXRlLlxuXG5cbiAgICAgICAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvcHkoYXJjNCwge30pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gLy8gSWYgY2FsbGVkIGFzIGEgbWV0aG9kIG9mIE1hdGggKE1hdGguc2VlZHJhbmRvbSgpKSwgbXV0YXRlXG4gICAgICAgIC8vIE1hdGgucmFuZG9tIGJlY2F1c2UgdGhhdCBpcyBob3cgc2VlZHJhbmRvbS5qcyBoYXMgd29ya2VkIHNpbmNlIHYxLjAuXG5cblxuICAgICAgICBpZiAoaXNfbWF0aF9jYWxsKSB7XG4gICAgICAgICAgbWF0aFtybmduYW1lXSA9IHBybmc7XG4gICAgICAgICAgcmV0dXJuIHNlZWQ7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBpdCBpcyBhIG5ld2VyIGNhbGxpbmcgY29udmVudGlvbiwgc28gcmV0dXJuIHRoZVxuICAgICAgICAvLyBwcm5nIGRpcmVjdGx5LlxuICAgICAgICBlbHNlIHJldHVybiBwcm5nO1xuICAgICAgfSkocHJuZywgc2hvcnRzZWVkLCAnZ2xvYmFsJyBpbiBvcHRpb25zID8gb3B0aW9ucy5nbG9iYWwgOiB0aGlzID09IG1hdGgsIG9wdGlvbnMuc3RhdGUpO1xuICAgIH1cblxuICAgIG1hdGhbJ3NlZWQnICsgcm5nbmFtZV0gPSBzZWVkcmFuZG9tOyAvL1xuICAgIC8vIEFSQzRcbiAgICAvL1xuICAgIC8vIEFuIEFSQzQgaW1wbGVtZW50YXRpb24uICBUaGUgY29uc3RydWN0b3IgdGFrZXMgYSBrZXkgaW4gdGhlIGZvcm0gb2ZcbiAgICAvLyBhbiBhcnJheSBvZiBhdCBtb3N0ICh3aWR0aCkgaW50ZWdlcnMgdGhhdCBzaG91bGQgYmUgMCA8PSB4IDwgKHdpZHRoKS5cbiAgICAvL1xuICAgIC8vIFRoZSBnKGNvdW50KSBtZXRob2QgcmV0dXJucyBhIHBzZXVkb3JhbmRvbSBpbnRlZ2VyIHRoYXQgY29uY2F0ZW5hdGVzXG4gICAgLy8gdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGZyb20gQVJDNC4gIEl0cyByZXR1cm4gdmFsdWUgaXMgYSBudW1iZXIgeFxuICAgIC8vIHRoYXQgaXMgaW4gdGhlIHJhbmdlIDAgPD0geCA8ICh3aWR0aCBeIGNvdW50KS5cbiAgICAvL1xuXG4gICAgZnVuY3Rpb24gQVJDNChrZXkpIHtcbiAgICAgIHZhciB0LFxuICAgICAgICAgIGtleWxlbiA9IGtleS5sZW5ndGgsXG4gICAgICAgICAgbWUgPSB0aGlzLFxuICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgIGogPSBtZS5pID0gbWUuaiA9IDAsXG4gICAgICAgICAgcyA9IG1lLlMgPSBbXTsgLy8gVGhlIGVtcHR5IGtleSBbXSBpcyB0cmVhdGVkIGFzIFswXS5cblxuICAgICAgaWYgKCFrZXlsZW4pIHtcbiAgICAgICAga2V5ID0gW2tleWxlbisrXTtcbiAgICAgIH0gLy8gU2V0IHVwIFMgdXNpbmcgdGhlIHN0YW5kYXJkIGtleSBzY2hlZHVsaW5nIGFsZ29yaXRobS5cblxuXG4gICAgICB3aGlsZSAoaSA8IHdpZHRoKSB7XG4gICAgICAgIHNbaV0gPSBpKys7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XG4gICAgICAgIHNbaV0gPSBzW2ogPSBtYXNrICYgaiArIGtleVtpICUga2V5bGVuXSArICh0ID0gc1tpXSldO1xuICAgICAgICBzW2pdID0gdDtcbiAgICAgIH0gLy8gVGhlIFwiZ1wiIG1ldGhvZCByZXR1cm5zIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBhcyBvbmUgbnVtYmVyLlxuXG5cbiAgICAgIG1lLmcgPSBmdW5jdGlvbiAoY291bnQpIHtcbiAgICAgICAgLy8gVXNpbmcgaW5zdGFuY2UgbWVtYmVycyBpbnN0ZWFkIG9mIGNsb3N1cmUgc3RhdGUgbmVhcmx5IGRvdWJsZXMgc3BlZWQuXG4gICAgICAgIHZhciB0LFxuICAgICAgICAgICAgciA9IDAsXG4gICAgICAgICAgICBpID0gbWUuaSxcbiAgICAgICAgICAgIGogPSBtZS5qLFxuICAgICAgICAgICAgcyA9IG1lLlM7XG5cbiAgICAgICAgd2hpbGUgKGNvdW50LS0pIHtcbiAgICAgICAgICB0ID0gc1tpID0gbWFzayAmIGkgKyAxXTtcbiAgICAgICAgICByID0gciAqIHdpZHRoICsgc1ttYXNrICYgKHNbaV0gPSBzW2ogPSBtYXNrICYgaiArIHRdKSArIChzW2pdID0gdCldO1xuICAgICAgICB9XG5cbiAgICAgICAgbWUuaSA9IGk7XG4gICAgICAgIG1lLmogPSBqO1xuICAgICAgICByZXR1cm4gcjsgLy8gRm9yIHJvYnVzdCB1bnByZWRpY3RhYmlsaXR5LCB0aGUgZnVuY3Rpb24gY2FsbCBiZWxvdyBhdXRvbWF0aWNhbGx5XG4gICAgICAgIC8vIGRpc2NhcmRzIGFuIGluaXRpYWwgYmF0Y2ggb2YgdmFsdWVzLiAgVGhpcyBpcyBjYWxsZWQgUkM0LWRyb3BbMjU2XS5cbiAgICAgICAgLy8gU2VlIGh0dHA6Ly9nb29nbGUuY29tL3NlYXJjaD9xPXJzYStmbHVocmVyK3Jlc3BvbnNlJmJ0bklcbiAgICAgIH07XG4gICAgfSAvL1xuICAgIC8vIGNvcHkoKVxuICAgIC8vIENvcGllcyBpbnRlcm5hbCBzdGF0ZSBvZiBBUkM0IHRvIG9yIGZyb20gYSBwbGFpbiBvYmplY3QuXG4gICAgLy9cblxuXG4gICAgZnVuY3Rpb24gY29weShmLCB0KSB7XG4gICAgICB0LmkgPSBmLmk7XG4gICAgICB0LmogPSBmLmo7XG4gICAgICB0LlMgPSBmLlMuc2xpY2UoKTtcbiAgICAgIHJldHVybiB0O1xuICAgIH0gLy9cbiAgICAvLyBmbGF0dGVuKClcbiAgICAvLyBDb252ZXJ0cyBhbiBvYmplY3QgdHJlZSB0byBuZXN0ZWQgYXJyYXlzIG9mIHN0cmluZ3MuXG4gICAgLy9cblxuXG4gICAgZnVuY3Rpb24gZmxhdHRlbihvYmosIGRlcHRoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdHlwID0gX3R5cGVvZiQyKG9iaiksXG4gICAgICAgICAgcHJvcDtcblxuICAgICAgaWYgKGRlcHRoICYmIHR5cCA9PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZsYXR0ZW4ob2JqW3Byb3BdLCBkZXB0aCAtIDEpKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCc7XG4gICAgfSAvL1xuICAgIC8vIG1peGtleSgpXG4gICAgLy8gTWl4ZXMgYSBzdHJpbmcgc2VlZCBpbnRvIGEga2V5IHRoYXQgaXMgYW4gYXJyYXkgb2YgaW50ZWdlcnMsIGFuZFxuICAgIC8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuICAgIC8vXG5cblxuICAgIGZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgICAgIHZhciBzdHJpbmdzZWVkID0gc2VlZCArICcnLFxuICAgICAgICAgIHNtZWFyLFxuICAgICAgICAgIGogPSAwO1xuXG4gICAgICB3aGlsZSAoaiA8IHN0cmluZ3NlZWQubGVuZ3RoKSB7XG4gICAgICAgIGtleVttYXNrICYgal0gPSBtYXNrICYgKHNtZWFyIF49IGtleVttYXNrICYgal0gKiAxOSkgKyBzdHJpbmdzZWVkLmNoYXJDb2RlQXQoaisrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRvc3RyaW5nKGtleSk7XG4gICAgfSAvL1xuICAgIC8vIGF1dG9zZWVkKClcbiAgICAvLyBSZXR1cm5zIGFuIG9iamVjdCBmb3IgYXV0b3NlZWRpbmcsIHVzaW5nIHdpbmRvdy5jcnlwdG8gYW5kIE5vZGUgY3J5cHRvXG4gICAgLy8gbW9kdWxlIGlmIGF2YWlsYWJsZS5cbiAgICAvL1xuXG5cbiAgICBmdW5jdGlvbiBhdXRvc2VlZCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChub2RlY3J5cHRvKSB7XG4gICAgICAgICAgcmV0dXJuIHRvc3RyaW5nKG5vZGVjcnlwdG8ucmFuZG9tQnl0ZXMod2lkdGgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXQgPSBuZXcgVWludDhBcnJheSh3aWR0aCk7XG4gICAgICAgIChnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG91dCk7XG4gICAgICAgIHJldHVybiB0b3N0cmluZyhvdXQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2YXIgYnJvd3NlciA9IGdsb2JhbC5uYXZpZ2F0b3IsXG4gICAgICAgICAgICBwbHVnaW5zID0gYnJvd3NlciAmJiBicm93c2VyLnBsdWdpbnM7XG4gICAgICAgIHJldHVybiBbK25ldyBEYXRlKCksIGdsb2JhbCwgcGx1Z2lucywgZ2xvYmFsLnNjcmVlbiwgdG9zdHJpbmcocG9vbCldO1xuICAgICAgfVxuICAgIH0gLy9cbiAgICAvLyB0b3N0cmluZygpXG4gICAgLy8gQ29udmVydHMgYW4gYXJyYXkgb2YgY2hhcmNvZGVzIHRvIGEgc3RyaW5nXG4gICAgLy9cblxuXG4gICAgZnVuY3Rpb24gdG9zdHJpbmcoYSkge1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoMCwgYSk7XG4gICAgfSAvL1xuICAgIC8vIFdoZW4gc2VlZHJhbmRvbS5qcyBpcyBsb2FkZWQsIHdlIGltbWVkaWF0ZWx5IG1peCBhIGZldyBiaXRzXG4gICAgLy8gZnJvbSB0aGUgYnVpbHQtaW4gUk5HIGludG8gdGhlIGVudHJvcHkgcG9vbC4gIEJlY2F1c2Ugd2UgZG9cbiAgICAvLyBub3Qgd2FudCB0byBpbnRlcmZlcmUgd2l0aCBkZXRlcm1pbmlzdGljIFBSTkcgc3RhdGUgbGF0ZXIsXG4gICAgLy8gc2VlZHJhbmRvbSB3aWxsIG5vdCBjYWxsIG1hdGgucmFuZG9tIG9uIGl0cyBvd24gYWdhaW4gYWZ0ZXJcbiAgICAvLyBpbml0aWFsaXphdGlvbi5cbiAgICAvL1xuXG5cbiAgICBtaXhrZXkobWF0aC5yYW5kb20oKSwgcG9vbCk7IC8vXG4gICAgLy8gTm9kZWpzIGFuZCBBTUQgc3VwcG9ydDogZXhwb3J0IHRoZSBpbXBsZW1lbnRhdGlvbiBhcyBhIG1vZHVsZSB1c2luZ1xuICAgIC8vIGVpdGhlciBjb252ZW50aW9uLlxuICAgIC8vXG4gICAgLy8gRW5kIGFub255bW91cyBzY29wZSwgYW5kIHBhc3MgaW5pdGlhbCB2YWx1ZXMuXG4gIH1cblxuICA7XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSQyKEJNTWF0aCkge1xuICAgIHNlZWRSYW5kb20oW10sIEJNTWF0aCk7XG4gIH1cblxuICB2YXIgcHJvcFR5cGVzID0ge1xuICAgIFNIQVBFOiAnc2hhcGUnXG4gIH07XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQxKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDEgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQxID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkMShvYmopOyB9XG5cbiAgdmFyIEV4cHJlc3Npb25NYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBvYiA9IHt9O1xuICAgIHZhciBNYXRoID0gQk1NYXRoO1xuICAgIHZhciB3aW5kb3cgPSBudWxsO1xuICAgIHZhciBkb2N1bWVudCA9IG51bGw7XG4gICAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gbnVsbDtcbiAgICB2YXIgZmV0Y2ggPSBudWxsO1xuICAgIHZhciBmcmFtZXMgPSBudWxsO1xuICAgIHZhciBfbG90dGllR2xvYmFsID0ge307XG4gICAgaW5pdGlhbGl6ZSQyKEJNTWF0aCk7XG5cbiAgICBmdW5jdGlvbiByZXNldEZyYW1lKCkge1xuICAgICAgX2xvdHRpZUdsb2JhbCA9IHt9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uICRibV9pc0luc3RhbmNlT2ZBcnJheShhcnIpIHtcbiAgICAgIHJldHVybiBhcnIuY29uc3RydWN0b3IgPT09IEFycmF5IHx8IGFyci5jb25zdHJ1Y3RvciA9PT0gRmxvYXQzMkFycmF5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtZXJhYmxlKHRPZlYsIHYpIHtcbiAgICAgIHJldHVybiB0T2ZWID09PSAnbnVtYmVyJyB8fCB2IGluc3RhbmNlb2YgTnVtYmVyIHx8IHRPZlYgPT09ICdib29sZWFuJyB8fCB0T2ZWID09PSAnc3RyaW5nJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkYm1fbmVnKGEpIHtcbiAgICAgIHZhciB0T2ZBID0gX3R5cGVvZiQxKGEpO1xuXG4gICAgICBpZiAodE9mQSA9PT0gJ251bWJlcicgfHwgYSBpbnN0YW5jZW9mIE51bWJlciB8fCB0T2ZBID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIC1hO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGJtX2lzSW5zdGFuY2VPZkFycmF5KGEpKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuQSA9IGEubGVuZ3RoO1xuICAgICAgICB2YXIgcmV0QXJyID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbkE7IGkgKz0gMSkge1xuICAgICAgICAgIHJldEFycltpXSA9IC1hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgIH1cblxuICAgICAgaWYgKGEucHJvcFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGEudjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC1hO1xuICAgIH1cblxuICAgIHZhciBlYXNlSW5CZXogPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZygwLjMzMywgMCwgMC44MzMsIDAuODMzLCAnZWFzZUluJykuZ2V0O1xuICAgIHZhciBlYXNlT3V0QmV6ID0gQmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcoMC4xNjcsIDAuMTY3LCAwLjY2NywgMSwgJ2Vhc2VPdXQnKS5nZXQ7XG4gICAgdmFyIGVhc2VJbk91dEJleiA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKDAuMzMsIDAsIDAuNjY3LCAxLCAnZWFzZUluT3V0JykuZ2V0O1xuXG4gICAgZnVuY3Rpb24gc3VtKGEsIGIpIHtcbiAgICAgIHZhciB0T2ZBID0gX3R5cGVvZiQxKGEpO1xuXG4gICAgICB2YXIgdE9mQiA9IF90eXBlb2YkMShiKTtcblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpIHx8IHRPZkEgPT09ICdzdHJpbmcnIHx8IHRPZkIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhICsgYjtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBhID0gYS5zbGljZSgwKTtcbiAgICAgICAgYVswXSArPSBiO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmICRibV9pc0luc3RhbmNlT2ZBcnJheShiKSkge1xuICAgICAgICBiID0gYi5zbGljZSgwKTtcbiAgICAgICAgYlswXSA9IGEgKyBiWzBdO1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuQSA9IGEubGVuZ3RoO1xuICAgICAgICB2YXIgbGVuQiA9IGIubGVuZ3RoO1xuICAgICAgICB2YXIgcmV0QXJyID0gW107XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW5BIHx8IGkgPCBsZW5CKSB7XG4gICAgICAgICAgaWYgKCh0eXBlb2YgYVtpXSA9PT0gJ251bWJlcicgfHwgYVtpXSBpbnN0YW5jZW9mIE51bWJlcikgJiYgKHR5cGVvZiBiW2ldID09PSAnbnVtYmVyJyB8fCBiW2ldIGluc3RhbmNlb2YgTnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0QXJyW2ldID0gYVtpXSArIGJbaV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldEFycltpXSA9IGJbaV0gPT09IHVuZGVmaW5lZCA/IGFbaV0gOiBhW2ldIHx8IGJbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGFkZCA9IHN1bTtcblxuICAgIGZ1bmN0aW9uIHN1YihhLCBiKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgdmFyIHRPZkIgPSBfdHlwZW9mJDEoYik7XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBpZiAodE9mQSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBhID0gcGFyc2VJbnQoYSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRPZkIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYiA9IHBhcnNlSW50KGIsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBhID0gYS5zbGljZSgwKTtcbiAgICAgICAgYVswXSAtPSBiO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmICRibV9pc0luc3RhbmNlT2ZBcnJheShiKSkge1xuICAgICAgICBiID0gYi5zbGljZSgwKTtcbiAgICAgICAgYlswXSA9IGEgLSBiWzBdO1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuQSA9IGEubGVuZ3RoO1xuICAgICAgICB2YXIgbGVuQiA9IGIubGVuZ3RoO1xuICAgICAgICB2YXIgcmV0QXJyID0gW107XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW5BIHx8IGkgPCBsZW5CKSB7XG4gICAgICAgICAgaWYgKCh0eXBlb2YgYVtpXSA9PT0gJ251bWJlcicgfHwgYVtpXSBpbnN0YW5jZW9mIE51bWJlcikgJiYgKHR5cGVvZiBiW2ldID09PSAnbnVtYmVyJyB8fCBiW2ldIGluc3RhbmNlb2YgTnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0QXJyW2ldID0gYVtpXSAtIGJbaV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldEFycltpXSA9IGJbaV0gPT09IHVuZGVmaW5lZCA/IGFbaV0gOiBhW2ldIHx8IGJbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbXVsKGEsIGIpIHtcbiAgICAgIHZhciB0T2ZBID0gX3R5cGVvZiQxKGEpO1xuXG4gICAgICB2YXIgdE9mQiA9IF90eXBlb2YkMShiKTtcblxuICAgICAgdmFyIGFycjtcblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpKSB7XG4gICAgICAgIHJldHVybiBhICogYjtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuO1xuXG4gICAgICBpZiAoJGJtX2lzSW5zdGFuY2VPZkFycmF5KGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpKSB7XG4gICAgICAgIGxlbiA9IGEubGVuZ3RoO1xuICAgICAgICBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBhW2ldICogYjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgbGVuID0gYi5sZW5ndGg7XG4gICAgICAgIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGFycltpXSA9IGEgKiBiW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGl2KGEsIGIpIHtcbiAgICAgIHZhciB0T2ZBID0gX3R5cGVvZiQxKGEpO1xuXG4gICAgICB2YXIgdE9mQiA9IF90eXBlb2YkMShiKTtcblxuICAgICAgdmFyIGFycjtcblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpKSB7XG4gICAgICAgIHJldHVybiBhIC8gYjtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuO1xuXG4gICAgICBpZiAoJGJtX2lzSW5zdGFuY2VPZkFycmF5KGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpKSB7XG4gICAgICAgIGxlbiA9IGEubGVuZ3RoO1xuICAgICAgICBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBhW2ldIC8gYjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgbGVuID0gYi5sZW5ndGg7XG4gICAgICAgIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGFycltpXSA9IGEgLyBiW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kKGEsIGIpIHtcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYSA9IHBhcnNlSW50KGEsIDEwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnc3RyaW5nJykge1xuICAgICAgICBiID0gcGFyc2VJbnQoYiwgMTApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYSAlIGI7XG4gICAgfVxuXG4gICAgdmFyICRibV9zdW0gPSBzdW07XG4gICAgdmFyICRibV9zdWIgPSBzdWI7XG4gICAgdmFyICRibV9tdWwgPSBtdWw7XG4gICAgdmFyICRibV9kaXYgPSBkaXY7XG4gICAgdmFyICRibV9tb2QgPSBtb2Q7XG5cbiAgICBmdW5jdGlvbiBjbGFtcChudW0sIG1pbiwgbWF4KSB7XG4gICAgICBpZiAobWluID4gbWF4KSB7XG4gICAgICAgIHZhciBtbSA9IG1heDtcbiAgICAgICAgbWF4ID0gbWluO1xuICAgICAgICBtaW4gPSBtbTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG51bSwgbWluKSwgbWF4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByYWRpYW5zVG9EZWdyZWVzKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbCAvIGRlZ1RvUmFkcztcbiAgICB9XG5cbiAgICB2YXIgcmFkaWFuc190b19kZWdyZWVzID0gcmFkaWFuc1RvRGVncmVlcztcblxuICAgIGZ1bmN0aW9uIGRlZ3JlZXNUb1JhZGlhbnModmFsKSB7XG4gICAgICByZXR1cm4gdmFsICogZGVnVG9SYWRzO1xuICAgIH1cblxuICAgIHZhciBkZWdyZWVzX3RvX3JhZGlhbnMgPSByYWRpYW5zVG9EZWdyZWVzO1xuICAgIHZhciBoZWxwZXJMZW5ndGhBcnJheSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcblxuICAgIGZ1bmN0aW9uIGxlbmd0aChhcnIxLCBhcnIyKSB7XG4gICAgICBpZiAodHlwZW9mIGFycjEgPT09ICdudW1iZXInIHx8IGFycjEgaW5zdGFuY2VvZiBOdW1iZXIpIHtcbiAgICAgICAgYXJyMiA9IGFycjIgfHwgMDtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGFycjEgLSBhcnIyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhcnIyKSB7XG4gICAgICAgIGFycjIgPSBoZWxwZXJMZW5ndGhBcnJheTtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyMS5sZW5ndGgsIGFycjIubGVuZ3RoKTtcbiAgICAgIHZhciBhZGRlZExlbmd0aCA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhZGRlZExlbmd0aCArPSBNYXRoLnBvdyhhcnIyW2ldIC0gYXJyMVtpXSwgMik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNYXRoLnNxcnQoYWRkZWRMZW5ndGgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2ZWMpIHtcbiAgICAgIHJldHVybiBkaXYodmVjLCBsZW5ndGgodmVjKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmdiVG9Ic2wodmFsKSB7XG4gICAgICB2YXIgciA9IHZhbFswXTtcbiAgICAgIHZhciBnID0gdmFsWzFdO1xuICAgICAgdmFyIGIgPSB2YWxbMl07XG4gICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICB2YXIgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgICB2YXIgaDtcbiAgICAgIHZhciBzO1xuICAgICAgdmFyIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuXG4gICAgICAgIHMgPSAwOyAvLyBhY2hyb21hdGljXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuXG4gICAgICAgIHN3aXRjaCAobWF4KSB7XG4gICAgICAgICAgY2FzZSByOlxuICAgICAgICAgICAgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICBoID0gKGIgLSByKSAvIGQgKyAyO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIGI6XG4gICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBoIC89IDY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbaCwgcywgbCwgdmFsWzNdXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICAgIGlmICh0IDwgMCkgdCArPSAxO1xuICAgICAgaWYgKHQgPiAxKSB0IC09IDE7XG4gICAgICBpZiAodCA8IDEgLyA2KSByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICAgIGlmICh0IDwgMSAvIDIpIHJldHVybiBxO1xuICAgICAgaWYgKHQgPCAyIC8gMykgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHNsVG9SZ2IodmFsKSB7XG4gICAgICB2YXIgaCA9IHZhbFswXTtcbiAgICAgIHZhciBzID0gdmFsWzFdO1xuICAgICAgdmFyIGwgPSB2YWxbMl07XG4gICAgICB2YXIgcjtcbiAgICAgIHZhciBnO1xuICAgICAgdmFyIGI7XG5cbiAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgIHIgPSBsOyAvLyBhY2hyb21hdGljXG5cbiAgICAgICAgYiA9IGw7IC8vIGFjaHJvbWF0aWNcblxuICAgICAgICBnID0gbDsgLy8gYWNocm9tYXRpY1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICB2YXIgcCA9IDIgKiBsIC0gcTtcbiAgICAgICAgciA9IGh1ZTJyZ2IocCwgcSwgaCArIDEgLyAzKTtcbiAgICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxIC8gMyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbciwgZywgYiwgdmFsWzNdXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lYXIodCwgdE1pbiwgdE1heCwgdmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgIGlmICh2YWx1ZTEgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZTIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZTEgPSB0TWluO1xuICAgICAgICB2YWx1ZTIgPSB0TWF4O1xuICAgICAgICB0TWluID0gMDtcbiAgICAgICAgdE1heCA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0TWF4IDwgdE1pbikge1xuICAgICAgICB2YXIgX3RNaW4gPSB0TWF4O1xuICAgICAgICB0TWF4ID0gdE1pbjtcbiAgICAgICAgdE1pbiA9IF90TWluO1xuICAgICAgfVxuXG4gICAgICBpZiAodCA8PSB0TWluKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ID49IHRNYXgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlMjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBlcmMgPSB0TWF4ID09PSB0TWluID8gMCA6ICh0IC0gdE1pbikgLyAodE1heCAtIHRNaW4pO1xuXG4gICAgICBpZiAoIXZhbHVlMS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlMSArICh2YWx1ZTIgLSB2YWx1ZTEpICogcGVyYztcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdmFsdWUxLmxlbmd0aDtcbiAgICAgIHZhciBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGFycltpXSA9IHZhbHVlMVtpXSArICh2YWx1ZTJbaV0gLSB2YWx1ZTFbaV0pICogcGVyYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByYW5kb20obWluLCBtYXgpIHtcbiAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBtaW4gPSAwO1xuICAgICAgICAgIG1heCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF4ID0gbWluO1xuICAgICAgICAgIG1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF4Lmxlbmd0aCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IG1heC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFtaW4pIHtcbiAgICAgICAgICBtaW4gPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICAgICAgdmFyIHJuZCA9IEJNTWF0aC5yYW5kb20oKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBtaW5baV0gKyBybmQgKiAobWF4W2ldIC0gbWluW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgcm5kbSA9IEJNTWF0aC5yYW5kb20oKTtcbiAgICAgIHJldHVybiBtaW4gKyBybmRtICogKG1heCAtIG1pbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUGF0aChwb2ludHMsIGluVGFuZ2VudHMsIG91dFRhbmdlbnRzLCBjbG9zZWQpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgICB2YXIgcGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICBwYXRoLnNldFBhdGhEYXRhKCEhY2xvc2VkLCBsZW4pO1xuICAgICAgdmFyIGFyclBsYWNlaG9sZGVyID0gWzAsIDBdO1xuICAgICAgdmFyIGluVmVydGV4UG9pbnQ7XG4gICAgICB2YXIgb3V0VmVydGV4UG9pbnQ7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpblZlcnRleFBvaW50ID0gaW5UYW5nZW50cyAmJiBpblRhbmdlbnRzW2ldID8gaW5UYW5nZW50c1tpXSA6IGFyclBsYWNlaG9sZGVyO1xuICAgICAgICBvdXRWZXJ0ZXhQb2ludCA9IG91dFRhbmdlbnRzICYmIG91dFRhbmdlbnRzW2ldID8gb3V0VGFuZ2VudHNbaV0gOiBhcnJQbGFjZWhvbGRlcjtcbiAgICAgICAgcGF0aC5zZXRUcmlwbGVBdChwb2ludHNbaV1bMF0sIHBvaW50c1tpXVsxXSwgb3V0VmVydGV4UG9pbnRbMF0gKyBwb2ludHNbaV1bMF0sIG91dFZlcnRleFBvaW50WzFdICsgcG9pbnRzW2ldWzFdLCBpblZlcnRleFBvaW50WzBdICsgcG9pbnRzW2ldWzBdLCBpblZlcnRleFBvaW50WzFdICsgcG9pbnRzW2ldWzFdLCBpLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhdGVFeHByZXNzaW9uKGVsZW0sIGRhdGEsIHByb3BlcnR5KSB7XG4gICAgICAvLyBCYWlsIG91dCBpZiB3ZSBkb24ndCB3YW50IGV4cHJlc3Npb25zXG4gICAgICBmdW5jdGlvbiBub09wKF92YWx1ZSkge1xuICAgICAgICByZXR1cm4gX3ZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWVsZW0uZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcucnVuRXhwcmVzc2lvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5vT3A7XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWwgPSBkYXRhLng7XG4gICAgICB2YXIgbmVlZHNWZWxvY2l0eSA9IC92ZWxvY2l0eSg/IVtcXHdcXGRdKS8udGVzdCh2YWwpO1xuXG4gICAgICB2YXIgX25lZWRzUmFuZG9tID0gdmFsLmluZGV4T2YoJ3JhbmRvbScpICE9PSAtMTtcblxuICAgICAgdmFyIGVsZW1UeXBlID0gZWxlbS5kYXRhLnR5O1xuICAgICAgdmFyIHRyYW5zZm9ybTtcbiAgICAgIHZhciAkYm1fdHJhbnNmb3JtO1xuICAgICAgdmFyIGNvbnRlbnQ7XG4gICAgICB2YXIgZWZmZWN0O1xuICAgICAgdmFyIHRoaXNQcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgICAgdGhpc1Byb3BlcnR5LnZhbHVlQXRUaW1lID0gdGhpc1Byb3BlcnR5LmdldFZhbHVlQXRUaW1lO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXNQcm9wZXJ0eSwgJ3ZhbHVlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1Byb3BlcnR5LnY7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZWxlbS5jb21wLmZyYW1lRHVyYXRpb24gPSAxIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgZWxlbS5jb21wLmRpc3BsYXlTdGFydFRpbWUgPSAwO1xuICAgICAgdmFyIGluUG9pbnQgPSBlbGVtLmRhdGEuaXAgLyBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICB2YXIgb3V0UG9pbnQgPSBlbGVtLmRhdGEub3AgLyBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICB2YXIgd2lkdGggPSBlbGVtLmRhdGEuc3cgPyBlbGVtLmRhdGEuc3cgOiAwO1xuICAgICAgdmFyIGhlaWdodCA9IGVsZW0uZGF0YS5zaCA/IGVsZW0uZGF0YS5zaCA6IDA7XG4gICAgICB2YXIgbmFtZSA9IGVsZW0uZGF0YS5ubTtcbiAgICAgIHZhciBsb29wSW47XG4gICAgICB2YXIgbG9vcF9pbjtcbiAgICAgIHZhciBsb29wT3V0O1xuICAgICAgdmFyIGxvb3Bfb3V0O1xuICAgICAgdmFyIHNtb290aDtcbiAgICAgIHZhciB0b1dvcmxkO1xuICAgICAgdmFyIGZyb21Xb3JsZDtcbiAgICAgIHZhciBmcm9tQ29tcDtcbiAgICAgIHZhciB0b0NvbXA7XG4gICAgICB2YXIgZnJvbUNvbXBUb1N1cmZhY2U7XG4gICAgICB2YXIgcG9zaXRpb247XG4gICAgICB2YXIgcm90YXRpb247XG4gICAgICB2YXIgYW5jaG9yUG9pbnQ7XG4gICAgICB2YXIgc2NhbGU7XG4gICAgICB2YXIgdGhpc0xheWVyO1xuICAgICAgdmFyIHRoaXNDb21wO1xuICAgICAgdmFyIG1hc2s7XG4gICAgICB2YXIgdmFsdWVBdFRpbWU7XG4gICAgICB2YXIgdmVsb2NpdHlBdFRpbWU7XG4gICAgICB2YXIgc2NvcGVkX2JtX3J0OyAvLyB2YWwgPSB2YWwucmVwbGFjZSgvKFxcXFw/XCJ8JykoKGh0dHApKHMpPyg6XFwvKSk/XFwvLio/KFxcXFw/XCJ8JykvZywgXCJcXFwiXFxcIlwiKTsgLy8gZGV0ZXIgcG90ZW50aWFsIG5ldHdvcmsgY2FsbHNcblxuICAgICAgLy8gdmFyIGV4cHJlc3Npb25fZnVuY3Rpb24gPSBldmFsKCdbZnVuY3Rpb24gX2V4cHJlc3Npb25fZnVuY3Rpb24oKXsnICsgdmFsICsgJztzY29wZWRfYm1fcnQ9JGJtX3J0fV0nKVswXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG4gICAgICB2YXIgZXhwcmVzc2lvbl9mdW5jdGlvbiA9IG5ldyBGdW5jdGlvbignc2NvcGVkX2JtX3J0JywgdmFsICsgJzsgcmV0dXJuICRibV9ydDsnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cbiAgICAgIHZhciBudW1LZXlzID0gcHJvcGVydHkua2YgPyBkYXRhLmsubGVuZ3RoIDogMDtcbiAgICAgIHZhciBhY3RpdmUgPSAhdGhpcy5kYXRhIHx8IHRoaXMuZGF0YS5oZCAhPT0gdHJ1ZTtcblxuICAgICAgdmFyIHdpZ2dsZSA9IGZ1bmN0aW9uIHdpZ2dsZShmcmVxLCBhbXApIHtcbiAgICAgICAgdmFyIGlXaWdnbGU7XG4gICAgICAgIHZhciBqO1xuICAgICAgICB2YXIgbGVuV2lnZ2xlID0gdGhpcy5wdi5sZW5ndGggPyB0aGlzLnB2Lmxlbmd0aCA6IDE7XG4gICAgICAgIHZhciBhZGRlZEFtcHMgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuV2lnZ2xlKTtcbiAgICAgICAgZnJlcSA9IDU7XG4gICAgICAgIHZhciBpdGVyYXRpb25zID0gTWF0aC5mbG9vcih0aW1lICogZnJlcSk7XG4gICAgICAgIGlXaWdnbGUgPSAwO1xuICAgICAgICBqID0gMDtcblxuICAgICAgICB3aGlsZSAoaVdpZ2dsZSA8IGl0ZXJhdGlvbnMpIHtcbiAgICAgICAgICAvLyB2YXIgcm5kID0gQk1NYXRoLnJhbmRvbSgpO1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsZW5XaWdnbGU7IGogKz0gMSkge1xuICAgICAgICAgICAgYWRkZWRBbXBzW2pdICs9IC1hbXAgKyBhbXAgKiAyICogQk1NYXRoLnJhbmRvbSgpOyAvLyBhZGRlZEFtcHNbal0gKz0gLWFtcCArIGFtcCoyKnJuZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpV2lnZ2xlICs9IDE7XG4gICAgICAgIH0gLy8gdmFyIHJuZDIgPSBCTU1hdGgucmFuZG9tKCk7XG5cblxuICAgICAgICB2YXIgcGVyaW9kcyA9IHRpbWUgKiBmcmVxO1xuICAgICAgICB2YXIgcGVyYyA9IHBlcmlvZHMgLSBNYXRoLmZsb29yKHBlcmlvZHMpO1xuICAgICAgICB2YXIgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbldpZ2dsZSk7XG5cbiAgICAgICAgaWYgKGxlbldpZ2dsZSA+IDEpIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGVuV2lnZ2xlOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGFycltqXSA9IHRoaXMucHZbal0gKyBhZGRlZEFtcHNbal0gKyAoLWFtcCArIGFtcCAqIDIgKiBCTU1hdGgucmFuZG9tKCkpICogcGVyYzsgLy8gYXJyW2pdID0gdGhpcy5wdltqXSArIGFkZGVkQW1wc1tqXSArICgtYW1wICsgYW1wKjIqcm5kKSpwZXJjO1xuICAgICAgICAgICAgLy8gYXJyW2ldID0gdGhpcy5wdltpXSArIGFkZGVkQW1wICsgYW1wMSpwZXJjICsgYW1wMiooMS1wZXJjKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucHYgKyBhZGRlZEFtcHNbMF0gKyAoLWFtcCArIGFtcCAqIDIgKiBCTU1hdGgucmFuZG9tKCkpICogcGVyYztcbiAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgaWYgKHRoaXNQcm9wZXJ0eS5sb29wSW4pIHtcbiAgICAgICAgbG9vcEluID0gdGhpc1Byb3BlcnR5Lmxvb3BJbi5iaW5kKHRoaXNQcm9wZXJ0eSk7XG4gICAgICAgIGxvb3BfaW4gPSBsb29wSW47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzUHJvcGVydHkubG9vcE91dCkge1xuICAgICAgICBsb29wT3V0ID0gdGhpc1Byb3BlcnR5Lmxvb3BPdXQuYmluZCh0aGlzUHJvcGVydHkpO1xuICAgICAgICBsb29wX291dCA9IGxvb3BPdXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzUHJvcGVydHkuc21vb3RoKSB7XG4gICAgICAgIHNtb290aCA9IHRoaXNQcm9wZXJ0eS5zbW9vdGguYmluZCh0aGlzUHJvcGVydHkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsb29wSW5EdXJhdGlvbih0eXBlLCBkdXJhdGlvbikge1xuICAgICAgICByZXR1cm4gbG9vcEluKHR5cGUsIGR1cmF0aW9uLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbG9vcE91dER1cmF0aW9uKHR5cGUsIGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBsb29wT3V0KHR5cGUsIGR1cmF0aW9uLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZ2V0VmFsdWVBdFRpbWUpIHtcbiAgICAgICAgdmFsdWVBdFRpbWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lLmJpbmQodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmdldFZlbG9jaXR5QXRUaW1lKSB7XG4gICAgICAgIHZlbG9jaXR5QXRUaW1lID0gdGhpcy5nZXRWZWxvY2l0eUF0VGltZS5iaW5kKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29tcCA9IGVsZW0uY29tcC5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UuYmluZChlbGVtLmNvbXAuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlKTtcblxuICAgICAgZnVuY3Rpb24gbG9va0F0KGVsZW0xLCBlbGVtMikge1xuICAgICAgICB2YXIgZlZlYyA9IFtlbGVtMlswXSAtIGVsZW0xWzBdLCBlbGVtMlsxXSAtIGVsZW0xWzFdLCBlbGVtMlsyXSAtIGVsZW0xWzJdXTtcbiAgICAgICAgdmFyIHBpdGNoID0gTWF0aC5hdGFuMihmVmVjWzBdLCBNYXRoLnNxcnQoZlZlY1sxXSAqIGZWZWNbMV0gKyBmVmVjWzJdICogZlZlY1syXSkpIC8gZGVnVG9SYWRzO1xuICAgICAgICB2YXIgeWF3ID0gLU1hdGguYXRhbjIoZlZlY1sxXSwgZlZlY1syXSkgLyBkZWdUb1JhZHM7XG4gICAgICAgIHJldHVybiBbeWF3LCBwaXRjaCwgMF07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGVhc2VPdXQodCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMikge1xuICAgICAgICByZXR1cm4gYXBwbHlFYXNlKGVhc2VPdXRCZXosIHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlYXNlSW4odCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMikge1xuICAgICAgICByZXR1cm4gYXBwbHlFYXNlKGVhc2VJbkJleiwgdCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGVhc2UodCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMikge1xuICAgICAgICByZXR1cm4gYXBwbHlFYXNlKGVhc2VJbk91dEJleiwgdCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFwcGx5RWFzZShmbiwgdCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMikge1xuICAgICAgICBpZiAodmFsMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFsMSA9IHRNaW47XG4gICAgICAgICAgdmFsMiA9IHRNYXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdCA9ICh0IC0gdE1pbikgLyAodE1heCAtIHRNaW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHQgPiAxKSB7XG4gICAgICAgICAgdCA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAodCA8IDApIHtcbiAgICAgICAgICB0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtdWx0ID0gZm4odCk7XG5cbiAgICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheSh2YWwxKSkge1xuICAgICAgICAgIHZhciBpS2V5O1xuICAgICAgICAgIHZhciBsZW5LZXkgPSB2YWwxLmxlbmd0aDtcbiAgICAgICAgICB2YXIgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbktleSk7XG5cbiAgICAgICAgICBmb3IgKGlLZXkgPSAwOyBpS2V5IDwgbGVuS2V5OyBpS2V5ICs9IDEpIHtcbiAgICAgICAgICAgIGFycltpS2V5XSA9ICh2YWwyW2lLZXldIC0gdmFsMVtpS2V5XSkgKiBtdWx0ICsgdmFsMVtpS2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh2YWwyIC0gdmFsMSkgKiBtdWx0ICsgdmFsMTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbmVhcmVzdEtleSh0aW1lKSB7XG4gICAgICAgIHZhciBpS2V5O1xuICAgICAgICB2YXIgbGVuS2V5ID0gZGF0YS5rLmxlbmd0aDtcbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICB2YXIga2V5VGltZTtcblxuICAgICAgICBpZiAoIWRhdGEuay5sZW5ndGggfHwgdHlwZW9mIGRhdGEua1swXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAga2V5VGltZSA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICB0aW1lICo9IGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcblxuICAgICAgICAgIGlmICh0aW1lIDwgZGF0YS5rWzBdLnQpIHtcbiAgICAgICAgICAgIGluZGV4ID0gMTtcbiAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbMF0udDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpS2V5ID0gMDsgaUtleSA8IGxlbktleSAtIDE7IGlLZXkgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAodGltZSA9PT0gZGF0YS5rW2lLZXldLnQpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGlLZXkgKyAxO1xuICAgICAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbaUtleV0udDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lID4gZGF0YS5rW2lLZXldLnQgJiYgdGltZSA8IGRhdGEua1tpS2V5ICsgMV0udCkge1xuICAgICAgICAgICAgICAgIGlmICh0aW1lIC0gZGF0YS5rW2lLZXldLnQgPiBkYXRhLmtbaUtleSArIDFdLnQgLSB0aW1lKSB7XG4gICAgICAgICAgICAgICAgICBpbmRleCA9IGlLZXkgKyAyO1xuICAgICAgICAgICAgICAgICAga2V5VGltZSA9IGRhdGEua1tpS2V5ICsgMV0udDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaW5kZXggPSBpS2V5ICsgMTtcbiAgICAgICAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbaUtleV0udDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gaUtleSArIDE7XG4gICAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbaUtleV0udDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2JLZXkgPSB7fTtcbiAgICAgICAgb2JLZXkuaW5kZXggPSBpbmRleDtcbiAgICAgICAgb2JLZXkudGltZSA9IGtleVRpbWUgLyBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICAgIHJldHVybiBvYktleTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24ga2V5KGluZCkge1xuICAgICAgICB2YXIgb2JLZXk7XG4gICAgICAgIHZhciBpS2V5O1xuICAgICAgICB2YXIgbGVuS2V5O1xuXG4gICAgICAgIGlmICghZGF0YS5rLmxlbmd0aCB8fCB0eXBlb2YgZGF0YS5rWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3BlcnR5IGhhcyBubyBrZXlmcmFtZSBhdCBpbmRleCAnICsgaW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZCAtPSAxO1xuICAgICAgICBvYktleSA9IHtcbiAgICAgICAgICB0aW1lOiBkYXRhLmtbaW5kXS50IC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLFxuICAgICAgICAgIHZhbHVlOiBbXVxuICAgICAgICB9O1xuICAgICAgICB2YXIgYXJyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEua1tpbmRdLCAncycpID8gZGF0YS5rW2luZF0ucyA6IGRhdGEua1tpbmQgLSAxXS5lO1xuICAgICAgICBsZW5LZXkgPSBhcnIubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaUtleSA9IDA7IGlLZXkgPCBsZW5LZXk7IGlLZXkgKz0gMSkge1xuICAgICAgICAgIG9iS2V5W2lLZXldID0gYXJyW2lLZXldO1xuICAgICAgICAgIG9iS2V5LnZhbHVlW2lLZXldID0gYXJyW2lLZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iS2V5O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmcmFtZXNUb1RpbWUoZnIsIGZwcykge1xuICAgICAgICBpZiAoIWZwcykge1xuICAgICAgICAgIGZwcyA9IGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmciAvIGZwcztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZVRvRnJhbWVzKHQsIGZwcykge1xuICAgICAgICBpZiAoIXQgJiYgdCAhPT0gMCkge1xuICAgICAgICAgIHQgPSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmcHMpIHtcbiAgICAgICAgICBmcHMgPSBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdCAqIGZwcztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2VlZFJhbmRvbShzZWVkKSB7XG4gICAgICAgIEJNTWF0aC5zZWVkcmFuZG9tKHJhbmRTZWVkICsgc2VlZCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNvdXJjZVJlY3RBdFRpbWUoKSB7XG4gICAgICAgIHJldHVybiBlbGVtLnNvdXJjZVJlY3RBdFRpbWUoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc3Vic3RyaW5nKGluaXQsIGVuZCkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhpbml0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKGluaXQsIGVuZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN1YnN0cihpbml0LCBlbmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHIoaW5pdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cihpbml0LCBlbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb3N0ZXJpemVUaW1lKGZyYW1lc1BlclNlY29uZCkge1xuICAgICAgICB0aW1lID0gZnJhbWVzUGVyU2Vjb25kID09PSAwID8gMCA6IE1hdGguZmxvb3IodGltZSAqIGZyYW1lc1BlclNlY29uZCkgLyBmcmFtZXNQZXJTZWNvbmQ7XG4gICAgICAgIHZhbHVlID0gdmFsdWVBdFRpbWUodGltZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lO1xuICAgICAgdmFyIHZlbG9jaXR5O1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgdmFyIHRleHQ7XG4gICAgICB2YXIgdGV4dEluZGV4O1xuICAgICAgdmFyIHRleHRUb3RhbDtcbiAgICAgIHZhciBzZWxlY3RvclZhbHVlO1xuICAgICAgdmFyIGluZGV4ID0gZWxlbS5kYXRhLmluZDtcbiAgICAgIHZhciBoYXNQYXJlbnQgPSAhIShlbGVtLmhpZXJhcmNoeSAmJiBlbGVtLmhpZXJhcmNoeS5sZW5ndGgpO1xuICAgICAgdmFyIHBhcmVudDtcbiAgICAgIHZhciByYW5kU2VlZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApO1xuICAgICAgdmFyIGdsb2JhbERhdGEgPSBlbGVtLmdsb2JhbERhdGE7XG5cbiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVFeHByZXNzaW9uKF92YWx1ZSkge1xuICAgICAgICAvLyBnbG9iYWxEYXRhLnB1c2hFeHByZXNzaW9uKCk7XG4gICAgICAgIHZhbHVlID0gX3ZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLmZyYW1lRXhwcmVzc2lvbklkID09PSBlbGVtLmdsb2JhbERhdGEuZnJhbWVJZCAmJiB0aGlzLnByb3BUeXBlICE9PSAndGV4dFNlbGVjdG9yJykge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BUeXBlID09PSAndGV4dFNlbGVjdG9yJykge1xuICAgICAgICAgIHRleHRJbmRleCA9IHRoaXMudGV4dEluZGV4O1xuICAgICAgICAgIHRleHRUb3RhbCA9IHRoaXMudGV4dFRvdGFsO1xuICAgICAgICAgIHNlbGVjdG9yVmFsdWUgPSB0aGlzLnNlbGVjdG9yVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXNMYXllcikge1xuICAgICAgICAgIHRleHQgPSBlbGVtLmxheWVySW50ZXJmYWNlLnRleHQ7XG4gICAgICAgICAgdGhpc0xheWVyID0gZWxlbS5sYXllckludGVyZmFjZTtcbiAgICAgICAgICB0aGlzQ29tcCA9IGVsZW0uY29tcC5jb21wSW50ZXJmYWNlO1xuICAgICAgICAgIHRvV29ybGQgPSB0aGlzTGF5ZXIudG9Xb3JsZC5iaW5kKHRoaXNMYXllcik7XG4gICAgICAgICAgZnJvbVdvcmxkID0gdGhpc0xheWVyLmZyb21Xb3JsZC5iaW5kKHRoaXNMYXllcik7XG4gICAgICAgICAgZnJvbUNvbXAgPSB0aGlzTGF5ZXIuZnJvbUNvbXAuYmluZCh0aGlzTGF5ZXIpO1xuICAgICAgICAgIHRvQ29tcCA9IHRoaXNMYXllci50b0NvbXAuYmluZCh0aGlzTGF5ZXIpO1xuICAgICAgICAgIG1hc2sgPSB0aGlzTGF5ZXIubWFzayA/IHRoaXNMYXllci5tYXNrLmJpbmQodGhpc0xheWVyKSA6IG51bGw7XG4gICAgICAgICAgZnJvbUNvbXBUb1N1cmZhY2UgPSBmcm9tQ29tcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdHJhbnNmb3JtKSB7XG4gICAgICAgICAgdHJhbnNmb3JtID0gZWxlbS5sYXllckludGVyZmFjZSgnQURCRSBUcmFuc2Zvcm0gR3JvdXAnKTtcbiAgICAgICAgICAkYm1fdHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuXG4gICAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgYW5jaG9yUG9pbnQgPSB0cmFuc2Zvcm0uYW5jaG9yUG9pbnQ7XG4gICAgICAgICAgICAvKiBwb3NpdGlvbiA9IHRyYW5zZm9ybS5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IHRyYW5zZm9ybS5yb3RhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IHRyYW5zZm9ybS5zY2FsZTsgKi9cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWxlbVR5cGUgPT09IDQgJiYgIWNvbnRlbnQpIHtcbiAgICAgICAgICBjb250ZW50ID0gdGhpc0xheWVyKCdBREJFIFJvb3QgVmVjdG9ycyBHcm91cCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlZmZlY3QpIHtcbiAgICAgICAgICBlZmZlY3QgPSB0aGlzTGF5ZXIoNCk7XG4gICAgICAgIH1cblxuICAgICAgICBoYXNQYXJlbnQgPSAhIShlbGVtLmhpZXJhcmNoeSAmJiBlbGVtLmhpZXJhcmNoeS5sZW5ndGgpO1xuXG4gICAgICAgIGlmIChoYXNQYXJlbnQgJiYgIXBhcmVudCkge1xuICAgICAgICAgIHBhcmVudCA9IGVsZW0uaGllcmFyY2h5WzBdLmxheWVySW50ZXJmYWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuXG4gICAgICAgIGlmIChfbmVlZHNSYW5kb20pIHtcbiAgICAgICAgICBzZWVkUmFuZG9tKHJhbmRTZWVkICsgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmVlZHNWZWxvY2l0eSkge1xuICAgICAgICAgIHZlbG9jaXR5ID0gdmVsb2NpdHlBdFRpbWUodGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBleHByZXNzaW9uX2Z1bmN0aW9uKCk7XG4gICAgICAgIHRoaXMuZnJhbWVFeHByZXNzaW9uSWQgPSBlbGVtLmdsb2JhbERhdGEuZnJhbWVJZDsgLy8gVE9ETzogQ2hlY2sgaWYgaXQncyBwb3NzaWJsZSB0byByZXR1cm4gb24gU2hhcGVJbnRlcmZhY2UgdGhlIC52IHZhbHVlXG4gICAgICAgIC8vIENoYW5nZWQgdGhpcyB0byBhIHRlcm5hcnkgb3BlcmF0aW9uIGJlY2F1c2UgUm9sbHVwIGZhaWxlZCBjb21waWxpbmcgaXQgY29ycmVjdGx5XG5cbiAgICAgICAgc2NvcGVkX2JtX3J0ID0gc2NvcGVkX2JtX3J0LnByb3BUeXBlID09PSBwcm9wVHlwZXMuU0hBUEUgPyBzY29wZWRfYm1fcnQudiA6IHNjb3BlZF9ibV9ydDtcbiAgICAgICAgcmV0dXJuIHNjb3BlZF9ibV9ydDtcbiAgICAgIH0gLy8gQnVuZGxlcnMgd2lsbCBzZWUgdGhlc2UgYXMgZGVhZCBjb2RlIGFuZCB1bmxlc3Mgd2UgcmVmZXJlbmNlIHRoZW1cblxuXG4gICAgICBleGVjdXRlRXhwcmVzc2lvbi5fX3ByZXZlbnREZWFkQ29kZVJlbW92YWwgPSBbJGJtX3RyYW5zZm9ybSwgYW5jaG9yUG9pbnQsIHRpbWUsIHZlbG9jaXR5LCBpblBvaW50LCBvdXRQb2ludCwgd2lkdGgsIGhlaWdodCwgbmFtZSwgbG9vcF9pbiwgbG9vcF9vdXQsIHNtb290aCwgdG9Db21wLCBmcm9tQ29tcFRvU3VyZmFjZSwgdG9Xb3JsZCwgZnJvbVdvcmxkLCBtYXNrLCBwb3NpdGlvbiwgcm90YXRpb24sIHNjYWxlLCB0aGlzQ29tcCwgbnVtS2V5cywgYWN0aXZlLCB3aWdnbGUsIGxvb3BJbkR1cmF0aW9uLCBsb29wT3V0RHVyYXRpb24sIGNvbXAsIGxvb2tBdCwgZWFzZU91dCwgZWFzZUluLCBlYXNlLCBuZWFyZXN0S2V5LCBrZXksIHRleHQsIHRleHRJbmRleCwgdGV4dFRvdGFsLCBzZWxlY3RvclZhbHVlLCBmcmFtZXNUb1RpbWUsIHRpbWVUb0ZyYW1lcywgc291cmNlUmVjdEF0VGltZSwgc3Vic3RyaW5nLCBzdWJzdHIsIHBvc3Rlcml6ZVRpbWUsIGluZGV4LCBnbG9iYWxEYXRhXTtcbiAgICAgIHJldHVybiBleGVjdXRlRXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICBvYi5pbml0aWF0ZUV4cHJlc3Npb24gPSBpbml0aWF0ZUV4cHJlc3Npb247XG4gICAgb2IuX19wcmV2ZW50RGVhZENvZGVSZW1vdmFsID0gW3dpbmRvdywgZG9jdW1lbnQsIFhNTEh0dHBSZXF1ZXN0LCBmZXRjaCwgZnJhbWVzLCAkYm1fbmVnLCBhZGQsICRibV9zdW0sICRibV9zdWIsICRibV9tdWwsICRibV9kaXYsICRibV9tb2QsIGNsYW1wLCByYWRpYW5zX3RvX2RlZ3JlZXMsIGRlZ3JlZXNUb1JhZGlhbnMsIGRlZ3JlZXNfdG9fcmFkaWFucywgbm9ybWFsaXplLCByZ2JUb0hzbCwgaHNsVG9SZ2IsIGxpbmVhciwgcmFuZG9tLCBjcmVhdGVQYXRoLCBfbG90dGllR2xvYmFsXTtcbiAgICBvYi5yZXNldEZyYW1lID0gcmVzZXRGcmFtZTtcbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICB2YXIgRXhwcmVzc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iID0ge307XG4gICAgb2IuaW5pdEV4cHJlc3Npb25zID0gaW5pdEV4cHJlc3Npb25zO1xuICAgIG9iLnJlc2V0RnJhbWUgPSBFeHByZXNzaW9uTWFuYWdlci5yZXNldEZyYW1lO1xuXG4gICAgZnVuY3Rpb24gaW5pdEV4cHJlc3Npb25zKGFuaW1hdGlvbikge1xuICAgICAgdmFyIHN0YWNrQ291bnQgPSAwO1xuICAgICAgdmFyIHJlZ2lzdGVycyA9IFtdO1xuXG4gICAgICBmdW5jdGlvbiBwdXNoRXhwcmVzc2lvbigpIHtcbiAgICAgICAgc3RhY2tDb3VudCArPSAxO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb3BFeHByZXNzaW9uKCkge1xuICAgICAgICBzdGFja0NvdW50IC09IDE7XG5cbiAgICAgICAgaWYgKHN0YWNrQ291bnQgPT09IDApIHtcbiAgICAgICAgICByZWxlYXNlSW5zdGFuY2VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJFeHByZXNzaW9uUHJvcGVydHkoZXhwcmVzc2lvbikge1xuICAgICAgICBpZiAocmVnaXN0ZXJzLmluZGV4T2YoZXhwcmVzc2lvbikgPT09IC0xKSB7XG4gICAgICAgICAgcmVnaXN0ZXJzLnB1c2goZXhwcmVzc2lvbik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVsZWFzZUluc3RhbmNlcygpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSByZWdpc3RlcnMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHJlZ2lzdGVyc1tpXS5yZWxlYXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cblxuICAgICAgYW5pbWF0aW9uLnJlbmRlcmVyLmNvbXBJbnRlcmZhY2UgPSBDb21wRXhwcmVzc2lvbkludGVyZmFjZShhbmltYXRpb24ucmVuZGVyZXIpO1xuICAgICAgYW5pbWF0aW9uLnJlbmRlcmVyLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5yZWdpc3RlckNvbXBvc2l0aW9uKGFuaW1hdGlvbi5yZW5kZXJlcik7XG4gICAgICBhbmltYXRpb24ucmVuZGVyZXIuZ2xvYmFsRGF0YS5wdXNoRXhwcmVzc2lvbiA9IHB1c2hFeHByZXNzaW9uO1xuICAgICAgYW5pbWF0aW9uLnJlbmRlcmVyLmdsb2JhbERhdGEucG9wRXhwcmVzc2lvbiA9IHBvcEV4cHJlc3Npb247XG4gICAgICBhbmltYXRpb24ucmVuZGVyZXIuZ2xvYmFsRGF0YS5yZWdpc3RlckV4cHJlc3Npb25Qcm9wZXJ0eSA9IHJlZ2lzdGVyRXhwcmVzc2lvblByb3BlcnR5O1xuICAgIH1cblxuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIHZhciBNYXNrTWFuYWdlckludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXNrSW50ZXJmYWNlKG1hc2ssIGRhdGEpIHtcbiAgICAgIHRoaXMuX21hc2sgPSBtYXNrO1xuICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hc2tJbnRlcmZhY2UucHJvdG90eXBlLCAnbWFza1BhdGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hc2sucHJvcC5rKSB7XG4gICAgICAgICAgdGhpcy5fbWFzay5wcm9wLmdldFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWFzay5wcm9wO1xuICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXNrSW50ZXJmYWNlLnByb3RvdHlwZSwgJ21hc2tPcGFjaXR5Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXNrLm9wLmspIHtcbiAgICAgICAgICB0aGlzLl9tYXNrLm9wLmdldFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWFzay5vcC52ICogMTAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIE1hc2tNYW5hZ2VyID0gZnVuY3Rpb24gTWFza01hbmFnZXIobWFza01hbmFnZXIpIHtcbiAgICAgIHZhciBfbWFza3NJbnRlcmZhY2VzID0gY3JlYXRlU2l6ZWRBcnJheShtYXNrTWFuYWdlci52aWV3RGF0YS5sZW5ndGgpO1xuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBtYXNrTWFuYWdlci52aWV3RGF0YS5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBfbWFza3NJbnRlcmZhY2VzW2ldID0gbmV3IE1hc2tJbnRlcmZhY2UobWFza01hbmFnZXIudmlld0RhdGFbaV0sIG1hc2tNYW5hZ2VyLm1hc2tzUHJvcGVydGllc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXNrRnVuY3Rpb24gPSBmdW5jdGlvbiBtYXNrRnVuY3Rpb24obmFtZSkge1xuICAgICAgICBpID0gMDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmIChtYXNrTWFuYWdlci5tYXNrc1Byb3BlcnRpZXNbaV0ubm0gPT09IG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBfbWFza3NJbnRlcmZhY2VzW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIG1hc2tGdW5jdGlvbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIE1hc2tNYW5hZ2VyO1xuICB9KCk7XG5cbiAgdmFyIEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVmYXVsdFVuaWRpbWVuc2lvbmFsVmFsdWUgPSB7XG4gICAgICBwdjogMCxcbiAgICAgIHY6IDAsXG4gICAgICBtdWx0OiAxXG4gICAgfTtcbiAgICB2YXIgZGVmYXVsdE11bHRpZGltZW5zaW9uYWxWYWx1ZSA9IHtcbiAgICAgIHB2OiBbMCwgMCwgMF0sXG4gICAgICB2OiBbMCwgMCwgMF0sXG4gICAgICBtdWx0OiAxXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlUHJvcGVydHkoZXhwcmVzc2lvblZhbHVlLCBwcm9wZXJ0eSwgdHlwZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cHJlc3Npb25WYWx1ZSwgJ3ZlbG9jaXR5Jywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcGVydHkuZ2V0VmVsb2NpdHlBdFRpbWUocHJvcGVydHkuY29tcC5jdXJyZW50RnJhbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGV4cHJlc3Npb25WYWx1ZS5udW1LZXlzID0gcHJvcGVydHkua2V5ZnJhbWVzID8gcHJvcGVydHkua2V5ZnJhbWVzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGV4cHJlc3Npb25WYWx1ZS5rZXkgPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgICAgIGlmICghZXhwcmVzc2lvblZhbHVlLm51bUtleXMpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2YWx1ZSA9ICcnO1xuXG4gICAgICAgIGlmICgncycgaW4gcHJvcGVydHkua2V5ZnJhbWVzW3BvcyAtIDFdKSB7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zIC0gMV0ucztcbiAgICAgICAgfSBlbHNlIGlmICgnZScgaW4gcHJvcGVydHkua2V5ZnJhbWVzW3BvcyAtIDJdKSB7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zIC0gMl0uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BlcnR5LmtleWZyYW1lc1twb3MgLSAyXS5zO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlUHJvcCA9IHR5cGUgPT09ICd1bmlkaW1lbnNpb25hbCcgPyBuZXcgTnVtYmVyKHZhbHVlKSA6IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblxuICAgICAgICB2YWx1ZVByb3AudGltZSA9IHByb3BlcnR5LmtleWZyYW1lc1twb3MgLSAxXS50IC8gcHJvcGVydHkuZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgICB2YWx1ZVByb3AudmFsdWUgPSB0eXBlID09PSAndW5pZGltZW5zaW9uYWwnID8gdmFsdWVbMF0gOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlUHJvcDtcbiAgICAgIH07XG5cbiAgICAgIGV4cHJlc3Npb25WYWx1ZS52YWx1ZUF0VGltZSA9IHByb3BlcnR5LmdldFZhbHVlQXRUaW1lO1xuICAgICAgZXhwcmVzc2lvblZhbHVlLnNwZWVkQXRUaW1lID0gcHJvcGVydHkuZ2V0U3BlZWRBdFRpbWU7XG4gICAgICBleHByZXNzaW9uVmFsdWUudmVsb2NpdHlBdFRpbWUgPSBwcm9wZXJ0eS5nZXRWZWxvY2l0eUF0VGltZTtcbiAgICAgIGV4cHJlc3Npb25WYWx1ZS5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHkucHJvcGVydHlHcm91cDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBVbmlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlKHByb3BlcnR5KSB7XG4gICAgICBpZiAoIXByb3BlcnR5IHx8ICEoJ3B2JyBpbiBwcm9wZXJ0eSkpIHtcbiAgICAgICAgcHJvcGVydHkgPSBkZWZhdWx0VW5pZGltZW5zaW9uYWxWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG11bHQgPSAxIC8gcHJvcGVydHkubXVsdDtcbiAgICAgIHZhciB2YWwgPSBwcm9wZXJ0eS5wdiAqIG11bHQ7XG4gICAgICB2YXIgZXhwcmVzc2lvblZhbHVlID0gbmV3IE51bWJlcih2YWwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXG4gICAgICBleHByZXNzaW9uVmFsdWUudmFsdWUgPSB2YWw7XG4gICAgICBjb21wbGV0ZVByb3BlcnR5KGV4cHJlc3Npb25WYWx1ZSwgcHJvcGVydHksICd1bmlkaW1lbnNpb25hbCcpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmspIHtcbiAgICAgICAgICBwcm9wZXJ0eS5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsID0gcHJvcGVydHkudiAqIG11bHQ7XG5cbiAgICAgICAgaWYgKGV4cHJlc3Npb25WYWx1ZS52YWx1ZSAhPT0gdmFsKSB7XG4gICAgICAgICAgZXhwcmVzc2lvblZhbHVlID0gbmV3IE51bWJlcih2YWwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXG4gICAgICAgICAgZXhwcmVzc2lvblZhbHVlLnZhbHVlID0gdmFsO1xuICAgICAgICAgIGNvbXBsZXRlUHJvcGVydHkoZXhwcmVzc2lvblZhbHVlLCBwcm9wZXJ0eSwgJ3VuaWRpbWVuc2lvbmFsJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvblZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBNdWx0aWRpbWVuc2lvbmFsUHJvcGVydHlJbnRlcmZhY2UocHJvcGVydHkpIHtcbiAgICAgIGlmICghcHJvcGVydHkgfHwgISgncHYnIGluIHByb3BlcnR5KSkge1xuICAgICAgICBwcm9wZXJ0eSA9IGRlZmF1bHRNdWx0aWRpbWVuc2lvbmFsVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBtdWx0ID0gMSAvIHByb3BlcnR5Lm11bHQ7XG4gICAgICB2YXIgbGVuID0gcHJvcGVydHkuZGF0YSAmJiBwcm9wZXJ0eS5kYXRhLmwgfHwgcHJvcGVydHkucHYubGVuZ3RoO1xuICAgICAgdmFyIGV4cHJlc3Npb25WYWx1ZSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuICAgICAgdmFyIGFyclZhbHVlID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgICBleHByZXNzaW9uVmFsdWUudmFsdWUgPSBhcnJWYWx1ZTtcbiAgICAgIGNvbXBsZXRlUHJvcGVydHkoZXhwcmVzc2lvblZhbHVlLCBwcm9wZXJ0eSwgJ211bHRpZGltZW5zaW9uYWwnKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eS5rKSB7XG4gICAgICAgICAgcHJvcGVydHkuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJWYWx1ZVtpXSA9IHByb3BlcnR5LnZbaV0gKiBtdWx0O1xuICAgICAgICAgIGV4cHJlc3Npb25WYWx1ZVtpXSA9IGFyclZhbHVlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb25WYWx1ZTtcbiAgICAgIH07XG4gICAgfSAvLyBUT0RPOiB0cnkgdG8gYXZvaWQgdXNpbmcgdGhpcyBnZXR0ZXJcblxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdEdldHRlcigpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VW5pZGltZW5zaW9uYWxWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICBpZiAoIXByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0R2V0dGVyO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcGVydHkucHJvcFR5cGUgPT09ICd1bmlkaW1lbnNpb25hbCcpIHtcbiAgICAgICAgcmV0dXJuIFVuaWRpbWVuc2lvbmFsUHJvcGVydHlJbnRlcmZhY2UocHJvcGVydHkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlKHByb3BlcnR5KTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIFRyYW5zZm9ybUV4cHJlc3Npb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHtcbiAgICAgIGZ1bmN0aW9uIF90aGlzRnVuY3Rpb24obmFtZSkge1xuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlICdzY2FsZSc6XG4gICAgICAgICAgY2FzZSAnU2NhbGUnOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgU2NhbGUnOlxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnNjYWxlO1xuXG4gICAgICAgICAgY2FzZSAncm90YXRpb24nOlxuICAgICAgICAgIGNhc2UgJ1JvdGF0aW9uJzpcbiAgICAgICAgICBjYXNlICdBREJFIFJvdGF0aW9uJzpcbiAgICAgICAgICBjYXNlICdBREJFIFJvdGF0ZSBaJzpcbiAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24ucm90YXRpb247XG5cbiAgICAgICAgICBjYXNlICdBREJFIFJvdGF0ZSBYJzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnhSb3RhdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ0FEQkUgUm90YXRlIFknOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24ueVJvdGF0aW9uO1xuXG4gICAgICAgICAgY2FzZSAncG9zaXRpb24nOlxuICAgICAgICAgIGNhc2UgJ1Bvc2l0aW9uJzpcbiAgICAgICAgICBjYXNlICdBREJFIFBvc2l0aW9uJzpcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi5wb3NpdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ0FEQkUgUG9zaXRpb25fMCc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi54UG9zaXRpb247XG5cbiAgICAgICAgICBjYXNlICdBREJFIFBvc2l0aW9uXzEnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24ueVBvc2l0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnQURCRSBQb3NpdGlvbl8yJzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnpQb3NpdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ2FuY2hvclBvaW50JzpcbiAgICAgICAgICBjYXNlICdBbmNob3JQb2ludCc6XG4gICAgICAgICAgY2FzZSAnQW5jaG9yIFBvaW50JzpcbiAgICAgICAgICBjYXNlICdBREJFIEFuY2hvclBvaW50JzpcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi5hbmNob3JQb2ludDtcblxuICAgICAgICAgIGNhc2UgJ29wYWNpdHknOlxuICAgICAgICAgIGNhc2UgJ09wYWNpdHknOlxuICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi5vcGFjaXR5O1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAncm90YXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5yIHx8IHRyYW5zZm9ybS5yeilcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd6Um90YXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5yeiB8fCB0cmFuc2Zvcm0ucilcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd4Um90YXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5yeClcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd5Um90YXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5yeSlcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdzY2FsZScsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnMpXG4gICAgICB9KTtcblxuICAgICAgdmFyIF9weDtcblxuICAgICAgdmFyIF9weTtcblxuICAgICAgdmFyIF9wejtcblxuICAgICAgdmFyIF90cmFuc2Zvcm1GYWN0b3J5O1xuXG4gICAgICBpZiAodHJhbnNmb3JtLnApIHtcbiAgICAgICAgX3RyYW5zZm9ybUZhY3RvcnkgPSBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3B4ID0gRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weCk7XG4gICAgICAgIF9weSA9IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucHkpO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm0ucHopIHtcbiAgICAgICAgICBfcHogPSBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB6KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3Bvc2l0aW9uJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBpZiAodHJhbnNmb3JtLnApIHtcbiAgICAgICAgICAgIHJldHVybiBfdHJhbnNmb3JtRmFjdG9yeSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBbX3B4KCksIF9weSgpLCBfcHogPyBfcHooKSA6IDBdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAneFBvc2l0aW9uJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucHgpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAneVBvc2l0aW9uJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucHkpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnelBvc2l0aW9uJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucHopXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnYW5jaG9yUG9pbnQnLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5hKVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ29wYWNpdHknLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5vKVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3NrZXcnLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5zaylcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdza2V3QXhpcycsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnNhKVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ29yaWVudGF0aW9uJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ub3IpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgTGF5ZXJFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGdldE1hdHJpeCh0aW1lKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IG5ldyBNYXRyaXgoKTtcblxuICAgICAgaWYgKHRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgcHJvcE1hdHJpeCA9IHRoaXMuX2VsZW0uZmluYWxUcmFuc2Zvcm0ubVByb3AuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG5cbiAgICAgICAgcHJvcE1hdHJpeC5jbG9uZSh0b1dvcmxkTWF0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1NYXQgPSB0aGlzLl9lbGVtLmZpbmFsVHJhbnNmb3JtLm1Qcm9wO1xuICAgICAgICB0cmFuc2Zvcm1NYXQuYXBwbHlUb01hdHJpeCh0b1dvcmxkTWF0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRvV29ybGRNYXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Xb3JsZFZlYyhhcnIsIHRpbWUpIHtcbiAgICAgIHZhciB0b1dvcmxkTWF0ID0gdGhpcy5nZXRNYXRyaXgodGltZSk7XG4gICAgICB0b1dvcmxkTWF0LnByb3BzWzEyXSA9IDA7XG4gICAgICB0b1dvcmxkTWF0LnByb3BzWzEzXSA9IDA7XG4gICAgICB0b1dvcmxkTWF0LnByb3BzWzE0XSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5hcHBseVBvaW50KHRvV29ybGRNYXQsIGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Xb3JsZChhcnIsIHRpbWUpIHtcbiAgICAgIHZhciB0b1dvcmxkTWF0ID0gdGhpcy5nZXRNYXRyaXgodGltZSk7XG4gICAgICByZXR1cm4gdGhpcy5hcHBseVBvaW50KHRvV29ybGRNYXQsIGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbVdvcmxkVmVjKGFyciwgdGltZSkge1xuICAgICAgdmFyIHRvV29ybGRNYXQgPSB0aGlzLmdldE1hdHJpeCh0aW1lKTtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTJdID0gMDtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTNdID0gMDtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTRdID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmludmVydFBvaW50KHRvV29ybGRNYXQsIGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbVdvcmxkKGFyciwgdGltZSkge1xuICAgICAgdmFyIHRvV29ybGRNYXQgPSB0aGlzLmdldE1hdHJpeCh0aW1lKTtcbiAgICAgIHJldHVybiB0aGlzLmludmVydFBvaW50KHRvV29ybGRNYXQsIGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlQb2ludChtYXRyaXgsIGFycikge1xuICAgICAgaWYgKHRoaXMuX2VsZW0uaGllcmFyY2h5ICYmIHRoaXMuX2VsZW0uaGllcmFyY2h5Lmxlbmd0aCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuX2VsZW0uaGllcmFyY2h5Lmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLl9lbGVtLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5hcHBseVRvTWF0cml4KG1hdHJpeCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdHJpeC5hcHBseVRvUG9pbnRBcnJheShhcnJbMF0sIGFyclsxXSwgYXJyWzJdIHx8IDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmVydFBvaW50KG1hdHJpeCwgYXJyKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbS5oaWVyYXJjaHkgJiYgdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuX2VsZW0uaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLmFwcGx5VG9NYXRyaXgobWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0cml4LmludmVyc2VQb2ludChhcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Db21wKGFycikge1xuICAgICAgdmFyIHRvV29ybGRNYXQgPSBuZXcgTWF0cml4KCk7XG4gICAgICB0b1dvcmxkTWF0LnJlc2V0KCk7XG5cbiAgICAgIHRoaXMuX2VsZW0uZmluYWxUcmFuc2Zvcm0ubVByb3AuYXBwbHlUb01hdHJpeCh0b1dvcmxkTWF0KTtcblxuICAgICAgaWYgKHRoaXMuX2VsZW0uaGllcmFyY2h5ICYmIHRoaXMuX2VsZW0uaGllcmFyY2h5Lmxlbmd0aCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuX2VsZW0uaGllcmFyY2h5Lmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLl9lbGVtLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5hcHBseVRvTWF0cml4KHRvV29ybGRNYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvV29ybGRNYXQuaW52ZXJzZVBvaW50KGFycik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b1dvcmxkTWF0LmludmVyc2VQb2ludChhcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNhbXBsZUltYWdlKCkge1xuICAgICAgcmV0dXJuIFsxLCAxLCAxLCAxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIHZhciB0cmFuc2Zvcm1JbnRlcmZhY2U7XG5cbiAgICAgIGZ1bmN0aW9uIF9yZWdpc3Rlck1hc2tJbnRlcmZhY2UobWFza01hbmFnZXIpIHtcbiAgICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLm1hc2sgPSBuZXcgTWFza01hbmFnZXJJbnRlcmZhY2UobWFza01hbmFnZXIsIGVsZW0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfcmVnaXN0ZXJFZmZlY3RzSW50ZXJmYWNlKGVmZmVjdHMpIHtcbiAgICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmVmZmVjdCA9IGVmZmVjdHM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aGlzTGF5ZXJGdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgIGNhc2UgJ0FEQkUgUm9vdCBWZWN0b3JzIEdyb3VwJzpcbiAgICAgICAgICBjYXNlICdDb250ZW50cyc6XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi5zaGFwZUludGVyZmFjZTtcblxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgY2FzZSAnVHJhbnNmb3JtJzpcbiAgICAgICAgICBjYXNlICd0cmFuc2Zvcm0nOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgVHJhbnNmb3JtIEdyb3VwJzpcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1JbnRlcmZhY2U7XG5cbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgY2FzZSAnQURCRSBFZmZlY3QgUGFyYWRlJzpcbiAgICAgICAgICBjYXNlICdlZmZlY3RzJzpcbiAgICAgICAgICBjYXNlICdFZmZlY3RzJzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0xheWVyRnVuY3Rpb24uZWZmZWN0O1xuXG4gICAgICAgICAgY2FzZSAnQURCRSBUZXh0IFByb3BlcnRpZXMnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi50ZXh0SW50ZXJmYWNlO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5nZXRNYXRyaXggPSBnZXRNYXRyaXg7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uaW52ZXJ0UG9pbnQgPSBpbnZlcnRQb2ludDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5hcHBseVBvaW50ID0gYXBwbHlQb2ludDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi50b1dvcmxkID0gdG9Xb3JsZDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi50b1dvcmxkVmVjID0gdG9Xb3JsZFZlYztcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5mcm9tV29ybGQgPSBmcm9tV29ybGQ7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZnJvbVdvcmxkVmVjID0gZnJvbVdvcmxkVmVjO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnRvQ29tcCA9IHRvV29ybGQ7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZnJvbUNvbXAgPSBmcm9tQ29tcDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5zYW1wbGVJbWFnZSA9IHNhbXBsZUltYWdlO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnNvdXJjZVJlY3RBdFRpbWUgPSBlbGVtLnNvdXJjZVJlY3RBdFRpbWUuYmluZChlbGVtKTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5fZWxlbSA9IGVsZW07XG4gICAgICB0cmFuc2Zvcm1JbnRlcmZhY2UgPSBUcmFuc2Zvcm1FeHByZXNzaW9uSW50ZXJmYWNlKGVsZW0uZmluYWxUcmFuc2Zvcm0ubVByb3ApO1xuICAgICAgdmFyIGFuY2hvclBvaW50RGVzY3JpcHRvciA9IGdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCAnYW5jaG9yUG9pbnQnKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzTGF5ZXJGdW5jdGlvbiwge1xuICAgICAgICBoYXNQYXJlbnQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmhpZXJhcmNoeS5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYXJlbnQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmhpZXJhcmNoeVswXS5sYXllckludGVyZmFjZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJvdGF0aW9uOiBnZXREZXNjcmlwdG9yKHRyYW5zZm9ybUludGVyZmFjZSwgJ3JvdGF0aW9uJyksXG4gICAgICAgIHNjYWxlOiBnZXREZXNjcmlwdG9yKHRyYW5zZm9ybUludGVyZmFjZSwgJ3NjYWxlJyksXG4gICAgICAgIHBvc2l0aW9uOiBnZXREZXNjcmlwdG9yKHRyYW5zZm9ybUludGVyZmFjZSwgJ3Bvc2l0aW9uJyksXG4gICAgICAgIG9wYWNpdHk6IGdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCAnb3BhY2l0eScpLFxuICAgICAgICBhbmNob3JQb2ludDogYW5jaG9yUG9pbnREZXNjcmlwdG9yLFxuICAgICAgICBhbmNob3JfcG9pbnQ6IGFuY2hvclBvaW50RGVzY3JpcHRvcixcbiAgICAgICAgdHJhbnNmb3JtOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtSW50ZXJmYWNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5pc0luUmFuZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5zdGFydFRpbWUgPSBlbGVtLmRhdGEuc3Q7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uaW5kZXggPSBlbGVtLmRhdGEuaW5kO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnNvdXJjZSA9IGVsZW0uZGF0YS5yZWZJZDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5oZWlnaHQgPSBlbGVtLmRhdGEudHkgPT09IDAgPyBlbGVtLmRhdGEuaCA6IDEwMDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi53aWR0aCA9IGVsZW0uZGF0YS50eSA9PT0gMCA/IGVsZW0uZGF0YS53IDogMTAwO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmluUG9pbnQgPSBlbGVtLmRhdGEuaXAgLyBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ub3V0UG9pbnQgPSBlbGVtLmRhdGEub3AgLyBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uX25hbWUgPSBlbGVtLmRhdGEubm07XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ucmVnaXN0ZXJNYXNrSW50ZXJmYWNlID0gX3JlZ2lzdGVyTWFza0ludGVyZmFjZTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2UgPSBfcmVnaXN0ZXJFZmZlY3RzSW50ZXJmYWNlO1xuICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIHByb3BlcnR5R3JvdXBGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW50ZXJmYWNlRnVuY3Rpb24sIHBhcmVudFByb3BlcnR5R3JvdXApIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gMSA6IHZhbDtcblxuICAgICAgICBpZiAodmFsIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyZW50UHJvcGVydHlHcm91cCh2YWwgLSAxKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBQcm9wZXJ0eUludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb3BlcnR5TmFtZSwgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIGludGVyZmFjZUZ1bmN0aW9uID0ge1xuICAgICAgICBfbmFtZTogcHJvcGVydHlOYW1lXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBfcHJvcGVydHlHcm91cCh2YWwpIHtcbiAgICAgICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyAxIDogdmFsO1xuXG4gICAgICAgIGlmICh2YWwgPD0gMCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUdyb3VwKHZhbCAtIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3Byb3BlcnR5R3JvdXA7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBFZmZlY3RzRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7XG4gICAgICBjcmVhdGVFZmZlY3RzSW50ZXJmYWNlOiBjcmVhdGVFZmZlY3RzSW50ZXJmYWNlXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVmZmVjdHNJbnRlcmZhY2UoZWxlbSwgcHJvcGVydHlHcm91cCkge1xuICAgICAgaWYgKGVsZW0uZWZmZWN0c01hbmFnZXIpIHtcbiAgICAgICAgdmFyIGVmZmVjdEVsZW1lbnRzID0gW107XG4gICAgICAgIHZhciBlZmZlY3RzRGF0YSA9IGVsZW0uZGF0YS5lZjtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSBlbGVtLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBlZmZlY3RFbGVtZW50cy5wdXNoKGNyZWF0ZUdyb3VwSW50ZXJmYWNlKGVmZmVjdHNEYXRhW2ldLCBlbGVtLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzW2ldLCBwcm9wZXJ0eUdyb3VwLCBlbGVtKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWZmZWN0cyA9IGVsZW0uZGF0YS5lZiB8fCBbXTtcblxuICAgICAgICB2YXIgZ3JvdXBJbnRlcmZhY2UgPSBmdW5jdGlvbiBncm91cEludGVyZmFjZShuYW1lKSB7XG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgbGVuID0gZWZmZWN0cy5sZW5ndGg7XG5cbiAgICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09IGVmZmVjdHNbaV0ubm0gfHwgbmFtZSA9PT0gZWZmZWN0c1tpXS5tbiB8fCBuYW1lID09PSBlZmZlY3RzW2ldLml4KSB7XG4gICAgICAgICAgICAgIHJldHVybiBlZmZlY3RFbGVtZW50c1tpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShncm91cEludGVyZmFjZSwgJ251bVByb3BlcnRpZXMnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZWZmZWN0cy5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdyb3VwSW50ZXJmYWNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVHcm91cEludGVyZmFjZShkYXRhLCBlbGVtZW50cywgcHJvcGVydHlHcm91cCwgZWxlbSkge1xuICAgICAgZnVuY3Rpb24gZ3JvdXBJbnRlcmZhY2UobmFtZSkge1xuICAgICAgICB2YXIgZWZmZWN0cyA9IGRhdGEuZWY7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IGVmZmVjdHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKG5hbWUgPT09IGVmZmVjdHNbaV0ubm0gfHwgbmFtZSA9PT0gZWZmZWN0c1tpXS5tbiB8fCBuYW1lID09PSBlZmZlY3RzW2ldLml4KSB7XG4gICAgICAgICAgICBpZiAoZWZmZWN0c1tpXS50eSA9PT0gNSkge1xuICAgICAgICAgICAgICByZXR1cm4gZWZmZWN0RWxlbWVudHNbaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBlZmZlY3RFbGVtZW50c1tpXSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShncm91cEludGVyZmFjZSwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZhciBlZmZlY3RFbGVtZW50cyA9IFtdO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gZGF0YS5lZi5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoZGF0YS5lZltpXS50eSA9PT0gNSkge1xuICAgICAgICAgIGVmZmVjdEVsZW1lbnRzLnB1c2goY3JlYXRlR3JvdXBJbnRlcmZhY2UoZGF0YS5lZltpXSwgZWxlbWVudHMuZWZmZWN0RWxlbWVudHNbaV0sIGVsZW1lbnRzLmVmZmVjdEVsZW1lbnRzW2ldLnByb3BlcnR5R3JvdXAsIGVsZW0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlZmZlY3RFbGVtZW50cy5wdXNoKGNyZWF0ZVZhbHVlSW50ZXJmYWNlKGVsZW1lbnRzLmVmZmVjdEVsZW1lbnRzW2ldLCBkYXRhLmVmW2ldLnR5LCBlbGVtLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLm1uID09PSAnQURCRSBDb2xvciBDb250cm9sJykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ3JvdXBJbnRlcmZhY2UsICdjb2xvcicsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBlZmZlY3RFbGVtZW50c1swXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGdyb3VwSW50ZXJmYWNlLCB7XG4gICAgICAgIG51bVByb3BlcnRpZXM6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhLm5wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogZGF0YS5ubVxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0eUdyb3VwOiB7XG4gICAgICAgICAgdmFsdWU6IF9wcm9wZXJ0eUdyb3VwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZ3JvdXBJbnRlcmZhY2UuZW5hYmxlZCA9IGRhdGEuZW4gIT09IDA7XG4gICAgICBncm91cEludGVyZmFjZS5hY3RpdmUgPSBncm91cEludGVyZmFjZS5lbmFibGVkO1xuICAgICAgcmV0dXJuIGdyb3VwSW50ZXJmYWNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVZhbHVlSW50ZXJmYWNlKGVsZW1lbnQsIHR5cGUsIGVsZW0sIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBleHByZXNzaW9uUHJvcGVydHkgPSBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UoZWxlbWVudC5wKTtcblxuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAxMCkge1xuICAgICAgICAgIHJldHVybiBlbGVtLmNvbXAuY29tcEludGVyZmFjZShlbGVtZW50LnAudik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvblByb3BlcnR5KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnAuc2V0R3JvdXBQcm9wZXJ0eSkge1xuICAgICAgICBlbGVtZW50LnAuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnJywgcHJvcGVydHlHcm91cCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIFNoYXBlUGF0aEludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcGF0aEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBwcm9wID0gdmlldy5zaDtcblxuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT09ICdTaGFwZScgfHwgdmFsID09PSAnc2hhcGUnIHx8IHZhbCA9PT0gJ1BhdGgnIHx8IHZhbCA9PT0gJ3BhdGgnIHx8IHZhbCA9PT0gJ0FEQkUgVmVjdG9yIFNoYXBlJyB8fCB2YWwgPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucGF0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHByb3Auc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUGF0aCcsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBwYXRoOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICBpZiAocHJvcC5rKSB7XG4gICAgICAgICAgICAgIHByb3AuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzaGFwZToge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgaWYgKHByb3Auaykge1xuICAgICAgICAgICAgICBwcm9wLmdldFZhbHVlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfSxcbiAgICAgICAgaXg6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUuaXhcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcGVydHlJbmRleDoge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5peFxuICAgICAgICB9LFxuICAgICAgICBtbjoge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5tblxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0eUdyb3VwOiB7XG4gICAgICAgICAgdmFsdWU6IHByb3BlcnR5R3JvdXBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBTaGFwZUV4cHJlc3Npb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaXRlcmF0ZUVsZW1lbnRzKHNoYXBlcywgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gc2hhcGVzID8gc2hhcGVzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgICAgYXJyLnB1c2goZ3JvdXBJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ2ZsJykge1xuICAgICAgICAgIGFyci5wdXNoKGZpbGxJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ3N0Jykge1xuICAgICAgICAgIGFyci5wdXNoKHN0cm9rZUludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAndG0nKSB7XG4gICAgICAgICAgYXJyLnB1c2godHJpbUludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAndHInKSB7Ly8gYXJyLnB1c2godHJhbnNmb3JtSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sdmlld1tpXSxwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZWwnKSB7XG4gICAgICAgICAgYXJyLnB1c2goZWxsaXBzZUludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnc3InKSB7XG4gICAgICAgICAgYXJyLnB1c2goc3RhckludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnc2gnKSB7XG4gICAgICAgICAgYXJyLnB1c2goU2hhcGVQYXRoSW50ZXJmYWNlKHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ3JjJykge1xuICAgICAgICAgIGFyci5wdXNoKHJlY3RJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ3JkJykge1xuICAgICAgICAgIGFyci5wdXNoKHJvdW5kZWRJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ3JwJykge1xuICAgICAgICAgIGFyci5wdXNoKHJlcGVhdGVySW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdnZicpIHtcbiAgICAgICAgICBhcnIucHVzaChncmFkaWVudEZpbGxJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFyci5wdXNoKGRlZmF1bHRJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udGVudHNJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgaW50ZXJmYWNlcztcblxuICAgICAgdmFyIGludGVyZmFjZUZ1bmN0aW9uID0gZnVuY3Rpb24gX2ludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IGludGVyZmFjZXMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKGludGVyZmFjZXNbaV0uX25hbWUgPT09IHZhbHVlIHx8IGludGVyZmFjZXNbaV0ubW4gPT09IHZhbHVlIHx8IGludGVyZmFjZXNbaV0ucHJvcGVydHlJbmRleCA9PT0gdmFsdWUgfHwgaW50ZXJmYWNlc1tpXS5peCA9PT0gdmFsdWUgfHwgaW50ZXJmYWNlc1tpXS5pbmQgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlc1tpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VzW3ZhbHVlIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG4gICAgICBpbnRlcmZhY2VzID0gaXRlcmF0ZUVsZW1lbnRzKHNoYXBlLml0LCB2aWV3Lml0LCBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm51bVByb3BlcnRpZXMgPSBpbnRlcmZhY2VzLmxlbmd0aDtcbiAgICAgIHZhciB0cmFuc2Zvcm1JbnRlcmZhY2UgPSB0cmFuc2Zvcm1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlLml0W3NoYXBlLml0Lmxlbmd0aCAtIDFdLCB2aWV3Lml0W3ZpZXcuaXQubGVuZ3RoIC0gMV0sIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXApO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24udHJhbnNmb3JtID0gdHJhbnNmb3JtSW50ZXJmYWNlO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLmNpeDtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLl9uYW1lID0gc2hhcGUubm07XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ3JvdXBJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgaW50ZXJmYWNlRnVuY3Rpb24gPSBmdW5jdGlvbiBfaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgIGNhc2UgJ0FEQkUgVmVjdG9ycyBHcm91cCc6XG4gICAgICAgICAgY2FzZSAnQ29udGVudHMnOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5jb250ZW50O1xuICAgICAgICAgIC8vIE5vdCBuZWNlc3NhcnkgZm9yIG5vdy4gS2VlcGluZyB0aGVtIGhlcmUgaW4gY2FzZSBhIG5ldyBjYXNlIGFwcGVhcnNcbiAgICAgICAgICAvLyBjYXNlICdBREJFIFZlY3RvciBUcmFuc2Zvcm0gR3JvdXAnOlxuICAgICAgICAgIC8vIGNhc2UgMzpcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24udHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuICAgICAgdmFyIGNvbnRlbnQgPSBjb250ZW50c0ludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXApO1xuICAgICAgdmFyIHRyYW5zZm9ybUludGVyZmFjZSA9IHRyYW5zZm9ybUludGVyZmFjZUZhY3Rvcnkoc2hhcGUuaXRbc2hhcGUuaXQubGVuZ3RoIC0gMV0sIHZpZXcuaXRbdmlldy5pdC5sZW5ndGggLSAxXSwgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5jb250ZW50ID0gY29udGVudDtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnRyYW5zZm9ybSA9IHRyYW5zZm9ybUludGVyZmFjZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbnRlcmZhY2VGdW5jdGlvbiwgJ19uYW1lJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gc2hhcGUubm07XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBpbnRlcmZhY2VGdW5jdGlvbi5jb250ZW50ID0gaW50ZXJmYWNlRnVuY3Rpb247XG5cbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm51bVByb3BlcnRpZXMgPSBzaGFwZS5ucDtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm5tID0gc2hhcGUubm07XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbGxJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gJ0NvbG9yJyB8fCB2YWwgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsID09PSAnT3BhY2l0eScgfHwgdmFsID09PSAnb3BhY2l0eScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3BhY2l0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBjb2xvcjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcuYylcbiAgICAgICAgfSxcbiAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcubylcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfSxcbiAgICAgICAgbW46IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubW5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2aWV3LmMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnQ29sb3InLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3Lm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3BhY2l0eScsIHByb3BlcnR5R3JvdXApKTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBncmFkaWVudEZpbGxJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gJ1N0YXJ0IFBvaW50JyB8fCB2YWwgPT09ICdzdGFydCBwb2ludCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc3RhcnRQb2ludDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09ICdFbmQgUG9pbnQnIHx8IHZhbCA9PT0gJ2VuZCBwb2ludCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uZW5kUG9pbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsID09PSAnT3BhY2l0eScgfHwgdmFsID09PSAnb3BhY2l0eScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3BhY2l0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBzdGFydFBvaW50OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5zKVxuICAgICAgICB9LFxuICAgICAgICBlbmRQb2ludDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcuZSlcbiAgICAgICAgfSxcbiAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcubylcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuICdhJztcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH0sXG4gICAgICAgIG1uOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm1uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmlldy5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1N0YXJ0IFBvaW50JywgcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy5lLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0VuZCBQb2ludCcsIHByb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5JywgcHJvcGVydHlHcm91cCkpO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRJbnRlcmZhY2VGYWN0b3J5KCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3Ryb2tlSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICB2YXIgX2Rhc2hQcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoZGFzaE9iLCBfcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIGZ1bmN0aW9uIGFkZFByb3BlcnR5VG9EYXNoT2IoaSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGFzaE9iLCBzaGFwZS5kW2ldLm5tLCB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5kLmRhdGFQcm9wc1tpXS5wKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gc2hhcGUuZCA/IHNoYXBlLmQubGVuZ3RoIDogMDtcbiAgICAgIHZhciBkYXNoT2IgPSB7fTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGFkZFByb3BlcnR5VG9EYXNoT2IoaSk7XG4gICAgICAgIHZpZXcuZC5kYXRhUHJvcHNbaV0ucC5zZXRHcm91cFByb3BlcnR5KF9kYXNoUHJvcGVydHlHcm91cCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSAnQ29sb3InIHx8IHZhbCA9PT0gJ2NvbG9yJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09ICdPcGFjaXR5JyB8fCB2YWwgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJ1N0cm9rZSBXaWR0aCcgfHwgdmFsID09PSAnc3Ryb2tlIHdpZHRoJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5zdHJva2VXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBjb2xvcjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcuYylcbiAgICAgICAgfSxcbiAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcubylcbiAgICAgICAgfSxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LncpXG4gICAgICAgIH0sXG4gICAgICAgIGRhc2g6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXNoT2I7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9LFxuICAgICAgICBtbjoge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5tblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZpZXcuYy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdDb2xvcicsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3Lm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3BhY2l0eScsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3Lncuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU3Ryb2tlIFdpZHRoJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmltSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT09IHNoYXBlLmUuaXggfHwgdmFsID09PSAnRW5kJyB8fCB2YWwgPT09ICdlbmQnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmVuZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09IHNoYXBlLnMuaXgpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsID09PSBzaGFwZS5vLml4KSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIHZpZXcucy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTdGFydCcsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3LmUuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnRW5kJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPZmZzZXQnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXA7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcucylcbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5lKVxuICAgICAgICB9LFxuICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3Lm8pXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoc2hhcGUuYS5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdBbmNob3IgUG9pbnQnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmFuY2hvclBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLm8uaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnT3BhY2l0eScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3BhY2l0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5wLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ1Bvc2l0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5yLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ1JvdGF0aW9uJyB8fCB2YWx1ZSA9PT0gJ0FEQkUgVmVjdG9yIFJvdGF0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5yb3RhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5zLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ1NjYWxlJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5zY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5zayAmJiBzaGFwZS5zay5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdTa2V3Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5za2V3O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnNhICYmIHNoYXBlLnNhLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ1NrZXcgQXhpcycpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2tld0F4aXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICB2aWV3LnRyYW5zZm9ybS5tUHJvcHMuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1Bvc2l0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5hLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0FuY2hvciBQb2ludCcsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3LnRyYW5zZm9ybS5tUHJvcHMucy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTY2FsZScsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3LnRyYW5zZm9ybS5tUHJvcHMuci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdSb3RhdGlvbicsIF9wcm9wZXJ0eUdyb3VwKSk7XG5cbiAgICAgIGlmICh2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2spIHtcbiAgICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLnNrLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1NrZXcnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2Euc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2tldyBBbmdsZScsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB9XG5cbiAgICAgIHZpZXcudHJhbnNmb3JtLm9wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09wYWNpdHknLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5vKVxuICAgICAgICB9LFxuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5wKVxuICAgICAgICB9LFxuICAgICAgICBhbmNob3JQb2ludDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5hKVxuICAgICAgICB9LFxuICAgICAgICBzY2FsZToge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zKVxuICAgICAgICB9LFxuICAgICAgICByb3RhdGlvbjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5yKVxuICAgICAgICB9LFxuICAgICAgICBza2V3OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnNrKVxuICAgICAgICB9LFxuICAgICAgICBza2V3QXhpczoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zYSlcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi50eSA9ICd0cic7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXA7XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZWxsaXBzZUludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5wLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5zLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5zaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgdmFyIHByb3AgPSB2aWV3LnNoLnR5ID09PSAndG0nID8gdmlldy5zaC5wcm9wIDogdmlldy5zaDtcbiAgICAgIHByb3Aucy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTaXplJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3AucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb3NpdGlvbicsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBzaXplOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5zKVxuICAgICAgICB9LFxuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucClcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoc2hhcGUucC5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucG9zaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuci5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucm90YXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUucHQuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBvaW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5vci5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdBREJFIFZlY3RvciBTdGFyIE91dGVyIFJhZGl1cycpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3V0ZXJSYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUub3MuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm91dGVyUm91bmRuZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLmlyICYmIChzaGFwZS5pci5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdBREJFIFZlY3RvciBTdGFyIElubmVyIFJhZGl1cycpKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmlubmVyUmFkaXVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLmlzICYmIHNoYXBlLmlzLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5pbm5lclJvdW5kbmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZhciBwcm9wID0gdmlldy5zaC50eSA9PT0gJ3RtJyA/IHZpZXcuc2gucHJvcCA6IHZpZXcuc2g7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBwcm9wLm9yLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ091dGVyIFJhZGl1cycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLm9zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ091dGVyIFJvdW5kbmVzcycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLnB0LnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1BvaW50cycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLnAuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUG9zaXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5yLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1JvdGF0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcblxuICAgICAgaWYgKHNoYXBlLmlyKSB7XG4gICAgICAgIHByb3AuaXIuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnSW5uZXIgUmFkaXVzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgICAgcHJvcC5pcy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdJbm5lciBSb3VuZG5lc3MnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucClcbiAgICAgICAgfSxcbiAgICAgICAgcm90YXRpb246IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnIpXG4gICAgICAgIH0sXG4gICAgICAgIHBvaW50czoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucHQpXG4gICAgICAgIH0sXG4gICAgICAgIG91dGVyUmFkaXVzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5vcilcbiAgICAgICAgfSxcbiAgICAgICAgb3V0ZXJSb3VuZG5lc3M6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLm9zKVxuICAgICAgICB9LFxuICAgICAgICBpbm5lclJhZGl1czoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AuaXIpXG4gICAgICAgIH0sXG4gICAgICAgIGlubmVyUm91bmRuZXNzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5pcylcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlY3RJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoc2hhcGUucC5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucG9zaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuci5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucm91bmRuZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnMuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnU2l6ZScgfHwgdmFsdWUgPT09ICdBREJFIFZlY3RvciBSZWN0IFNpemUnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNpemU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICB2YXIgcHJvcCA9IHZpZXcuc2gudHkgPT09ICd0bScgPyB2aWV3LnNoLnByb3AgOiB2aWV3LnNoO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgcHJvcC5wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1Bvc2l0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3Aucy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTaXplJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3Auci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdSb3RhdGlvbicsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucClcbiAgICAgICAgfSxcbiAgICAgICAgcm91bmRuZXNzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5yKVxuICAgICAgICB9LFxuICAgICAgICBzaXplOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5zKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm91bmRlZEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5yLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ1JvdW5kIENvcm5lcnMgMScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucmFkaXVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIHByb3AgPSB2aWV3O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgcHJvcC5yZC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdSYWRpdXMnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgcmFkaXVzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5yZClcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcGVhdGVySW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHNoYXBlLmMuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnQ29waWVzJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5jb3BpZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuby5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdPZmZzZXQnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZhciBwcm9wID0gdmlldztcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIHByb3AuYy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdDb3BpZXMnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09mZnNldCcsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBjb3BpZXM6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLmMpXG4gICAgICAgIH0sXG4gICAgICAgIG9mZnNldDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AubylcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoc2hhcGVzLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgaW50ZXJmYWNlcztcblxuICAgICAgZnVuY3Rpb24gX2ludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gMSA6IHZhbHVlO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHlHcm91cDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlc1t2YWx1ZSAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gaW50ZXJmYWNlcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAoaW50ZXJmYWNlc1tpXS5fbmFtZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VzW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJlbnRHcm91cFdyYXBwZXIoKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUdyb3VwO1xuICAgICAgfVxuXG4gICAgICBfaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KF9pbnRlcmZhY2VGdW5jdGlvbiwgcGFyZW50R3JvdXBXcmFwcGVyKTtcbiAgICAgIGludGVyZmFjZXMgPSBpdGVyYXRlRWxlbWVudHMoc2hhcGVzLCB2aWV3LCBfaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7XG4gICAgICBfaW50ZXJmYWNlRnVuY3Rpb24ubnVtUHJvcGVydGllcyA9IGludGVyZmFjZXMubGVuZ3RoO1xuICAgICAgX2ludGVyZmFjZUZ1bmN0aW9uLl9uYW1lID0gJ0NvbnRlbnRzJztcbiAgICAgIHJldHVybiBfaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBUZXh0RXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIHZhciBfc291cmNlVGV4dDtcblxuICAgICAgZnVuY3Rpb24gX3RoaXNMYXllckZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgY2FzZSAnQURCRSBUZXh0IERvY3VtZW50JzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0xheWVyRnVuY3Rpb24uc291cmNlVGV4dDtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNMYXllckZ1bmN0aW9uLCAnc291cmNlVGV4dCcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgZWxlbS50ZXh0UHJvcGVydHkuZ2V0VmFsdWUoKTtcbiAgICAgICAgICB2YXIgc3RyaW5nVmFsdWUgPSBlbGVtLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS50O1xuXG4gICAgICAgICAgaWYgKCFfc291cmNlVGV4dCB8fCBzdHJpbmdWYWx1ZSAhPT0gX3NvdXJjZVRleHQudmFsdWUpIHtcbiAgICAgICAgICAgIF9zb3VyY2VUZXh0ID0gbmV3IFN0cmluZyhzdHJpbmdWYWx1ZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG4gICAgICAgICAgICAvLyBJZiBzdHJpbmdWYWx1ZSBpcyBhbiBlbXB0eSBzdHJpbmcsIGV2YWwgcmV0dXJucyB1bmRlZmluZWQsIHNvIGl0IGhhcyB0byBiZSByZXR1cm5lZCBhcyBhIFN0cmluZyBwcmltaXRpdmVcblxuICAgICAgICAgICAgX3NvdXJjZVRleHQudmFsdWUgPSBzdHJpbmdWYWx1ZSB8fCBuZXcgU3RyaW5nKHN0cmluZ1ZhbHVlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9zb3VyY2VUZXh0LCAnc3R5bGUnLCB7XG4gICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6IGVsZW0udGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLmZjXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF9zb3VyY2VUZXh0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfdGhpc0xheWVyRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuICB2YXIgRm9vdGFnZUludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3V0bGluZUludGVyZmFjZUZhY3RvcnkgPSBmdW5jdGlvbiBvdXRsaW5lSW50ZXJmYWNlRmFjdG9yeShlbGVtKSB7XG4gICAgICB2YXIgY3VycmVudFByb3BlcnR5TmFtZSA9ICcnO1xuICAgICAgdmFyIGN1cnJlbnRQcm9wZXJ0eSA9IGVsZW0uZ2V0Rm9vdGFnZURhdGEoKTtcblxuICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgY3VycmVudFByb3BlcnR5TmFtZSA9ICcnO1xuICAgICAgICBjdXJyZW50UHJvcGVydHkgPSBlbGVtLmdldEZvb3RhZ2VEYXRhKCk7XG4gICAgICAgIHJldHVybiBzZWFyY2hQcm9wZXJ0eTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2VhcmNoUHJvcGVydHkodmFsdWUpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRQcm9wZXJ0eVt2YWx1ZV0pIHtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHlOYW1lID0gdmFsdWU7XG4gICAgICAgICAgY3VycmVudFByb3BlcnR5ID0gY3VycmVudFByb3BlcnR5W3ZhbHVlXTtcblxuICAgICAgICAgIGlmIChfdHlwZW9mKGN1cnJlbnRQcm9wZXJ0eSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VhcmNoUHJvcGVydHk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9wZXJ0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9wZXJ0eU5hbWVJbmRleCA9IHZhbHVlLmluZGV4T2YoY3VycmVudFByb3BlcnR5TmFtZSk7XG5cbiAgICAgICAgaWYgKHByb3BlcnR5TmFtZUluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHZhbHVlLnN1YnN0cihwcm9wZXJ0eU5hbWVJbmRleCArIGN1cnJlbnRQcm9wZXJ0eU5hbWUubGVuZ3RoKSwgMTApO1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eSA9IGN1cnJlbnRQcm9wZXJ0eVtpbmRleF07XG5cbiAgICAgICAgICBpZiAoX3R5cGVvZihjdXJyZW50UHJvcGVydHkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHNlYXJjaFByb3BlcnR5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjdXJyZW50UHJvcGVydHk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbml0O1xuICAgIH07XG5cbiAgICB2YXIgZGF0YUludGVyZmFjZUZhY3RvcnkgPSBmdW5jdGlvbiBkYXRhSW50ZXJmYWNlRmFjdG9yeShlbGVtKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09ICdPdXRsaW5lJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vdXRsaW5lSW50ZXJmYWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24uX25hbWUgPSAnT3V0bGluZSc7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5vdXRsaW5lSW50ZXJmYWNlID0gb3V0bGluZUludGVyZmFjZUZhY3RvcnkoZWxlbSk7XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgZnVuY3Rpb24gX2ludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ0RhdGEnKSB7XG4gICAgICAgICAgcmV0dXJuIF9pbnRlcmZhY2VGdW5jdGlvbi5kYXRhSW50ZXJmYWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIF9pbnRlcmZhY2VGdW5jdGlvbi5fbmFtZSA9ICdEYXRhJztcbiAgICAgIF9pbnRlcmZhY2VGdW5jdGlvbi5kYXRhSW50ZXJmYWNlID0gZGF0YUludGVyZmFjZUZhY3RvcnkoZWxlbSk7XG4gICAgICByZXR1cm4gX2ludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgaW50ZXJmYWNlcyA9IHtcbiAgICBsYXllcjogTGF5ZXJFeHByZXNzaW9uSW50ZXJmYWNlLFxuICAgIGVmZmVjdHM6IEVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlLFxuICAgIGNvbXA6IENvbXBFeHByZXNzaW9uSW50ZXJmYWNlLFxuICAgIHNoYXBlOiBTaGFwZUV4cHJlc3Npb25JbnRlcmZhY2UsXG4gICAgdGV4dDogVGV4dEV4cHJlc3Npb25JbnRlcmZhY2UsXG4gICAgZm9vdGFnZTogRm9vdGFnZUludGVyZmFjZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldEludGVyZmFjZSh0eXBlKSB7XG4gICAgcmV0dXJuIGludGVyZmFjZXNbdHlwZV0gfHwgbnVsbDtcbiAgfVxuXG4gIHZhciBleHByZXNzaW9uSGVscGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBzZWFyY2hFeHByZXNzaW9ucyhlbGVtLCBkYXRhLCBwcm9wKSB7XG4gICAgICBpZiAoZGF0YS54KSB7XG4gICAgICAgIHByb3AuayA9IHRydWU7XG4gICAgICAgIHByb3AueCA9IHRydWU7XG4gICAgICAgIHByb3AuaW5pdGlhdGVFeHByZXNzaW9uID0gRXhwcmVzc2lvbk1hbmFnZXIuaW5pdGlhdGVFeHByZXNzaW9uO1xuICAgICAgICBwcm9wLmVmZmVjdHNTZXF1ZW5jZS5wdXNoKHByb3AuaW5pdGlhdGVFeHByZXNzaW9uKGVsZW0sIGRhdGEsIHByb3ApLmJpbmQocHJvcCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZhbHVlQXRUaW1lKGZyYW1lTnVtKSB7XG4gICAgICBmcmFtZU51bSAqPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICBmcmFtZU51bSAtPSB0aGlzLm9mZnNldFRpbWU7XG5cbiAgICAgIGlmIChmcmFtZU51bSAhPT0gdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0RnJhbWUpIHtcbiAgICAgICAgdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0SW5kZXggPSB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RGcmFtZSA8IGZyYW1lTnVtID8gdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0SW5kZXggOiAwO1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lLnZhbHVlID0gdGhpcy5pbnRlcnBvbGF0ZVZhbHVlKGZyYW1lTnVtLCB0aGlzLl9jYWNoaW5nQXRUaW1lKTtcbiAgICAgICAgdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0RnJhbWUgPSBmcmFtZU51bTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hpbmdBdFRpbWUudmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3BlZWRBdFRpbWUoZnJhbWVOdW0pIHtcbiAgICAgIHZhciBkZWx0YSA9IC0wLjAxO1xuICAgICAgdmFyIHYxID0gdGhpcy5nZXRWYWx1ZUF0VGltZShmcmFtZU51bSk7XG4gICAgICB2YXIgdjIgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZyYW1lTnVtICsgZGVsdGEpO1xuICAgICAgdmFyIHNwZWVkID0gMDtcblxuICAgICAgaWYgKHYxLmxlbmd0aCkge1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdjEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBzcGVlZCArPSBNYXRoLnBvdyh2MltpXSAtIHYxW2ldLCAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNwZWVkID0gTWF0aC5zcXJ0KHNwZWVkKSAqIDEwMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwZWVkID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNwZWVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZlbG9jaXR5QXRUaW1lKGZyYW1lTnVtKSB7XG4gICAgICBpZiAodGhpcy52ZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZWw7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWx0YSA9IC0wLjAwMTsgLy8gZnJhbWVOdW0gKz0gdGhpcy5lbGVtLmRhdGEuc3Q7XG5cbiAgICAgIHZhciB2MSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZnJhbWVOdW0pO1xuICAgICAgdmFyIHYyID0gdGhpcy5nZXRWYWx1ZUF0VGltZShmcmFtZU51bSArIGRlbHRhKTtcbiAgICAgIHZhciB2ZWxvY2l0eTtcblxuICAgICAgaWYgKHYxLmxlbmd0aCkge1xuICAgICAgICB2ZWxvY2l0eSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCB2MS5sZW5ndGgpO1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdjEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAvLyByZW1vdmluZyBmcmFtZVJhdGVcbiAgICAgICAgICAvLyBpZiBuZWVkZWQsIGRvbid0IGFkZCBpdCBoZXJlXG4gICAgICAgICAgLy8gdmVsb2NpdHlbaV0gPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZVJhdGUqKCh2MltpXSAtIHYxW2ldKS9kZWx0YSk7XG4gICAgICAgICAgdmVsb2NpdHlbaV0gPSAodjJbaV0gLSB2MVtpXSkgLyBkZWx0YTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmVsb2NpdHkgPSAodjIgLSB2MSkgLyBkZWx0YTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZlbG9jaXR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0YXRpY1ZhbHVlQXRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0R3JvdXBQcm9wZXJ0eShwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB0aGlzLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzZWFyY2hFeHByZXNzaW9uczogc2VhcmNoRXhwcmVzc2lvbnMsXG4gICAgICBnZXRTcGVlZEF0VGltZTogZ2V0U3BlZWRBdFRpbWUsXG4gICAgICBnZXRWZWxvY2l0eUF0VGltZTogZ2V0VmVsb2NpdHlBdFRpbWUsXG4gICAgICBnZXRWYWx1ZUF0VGltZTogZ2V0VmFsdWVBdFRpbWUsXG4gICAgICBnZXRTdGF0aWNWYWx1ZUF0VGltZTogZ2V0U3RhdGljVmFsdWVBdFRpbWUsXG4gICAgICBzZXRHcm91cFByb3BlcnR5OiBzZXRHcm91cFByb3BlcnR5XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIGFkZFByb3BlcnR5RGVjb3JhdG9yKCkge1xuICAgIGZ1bmN0aW9uIGxvb3BPdXQodHlwZSwgZHVyYXRpb24sIGR1cmF0aW9uRmxhZykge1xuICAgICAgaWYgKCF0aGlzLmsgfHwgIXRoaXMua2V5ZnJhbWVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB0eXBlID0gdHlwZSA/IHR5cGUudG9Mb3dlckNhc2UoKSA6ICcnO1xuICAgICAgdmFyIGN1cnJlbnRGcmFtZSA9IHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lO1xuICAgICAgdmFyIGtleWZyYW1lcyA9IHRoaXMua2V5ZnJhbWVzO1xuICAgICAgdmFyIGxhc3RLZXlGcmFtZSA9IGtleWZyYW1lc1trZXlmcmFtZXMubGVuZ3RoIC0gMV0udDtcblxuICAgICAgaWYgKGN1cnJlbnRGcmFtZSA8PSBsYXN0S2V5RnJhbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgICB9XG5cbiAgICAgIHZhciBjeWNsZUR1cmF0aW9uO1xuICAgICAgdmFyIGZpcnN0S2V5RnJhbWU7XG5cbiAgICAgIGlmICghZHVyYXRpb25GbGFnKSB7XG4gICAgICAgIGlmICghZHVyYXRpb24gfHwgZHVyYXRpb24gPiBrZXlmcmFtZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGR1cmF0aW9uID0ga2V5ZnJhbWVzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBmaXJzdEtleUZyYW1lID0ga2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGggLSAxIC0gZHVyYXRpb25dLnQ7XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBsYXN0S2V5RnJhbWUgLSBmaXJzdEtleUZyYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICAgIGN5Y2xlRHVyYXRpb24gPSBNYXRoLm1heCgwLCBsYXN0S2V5RnJhbWUgLSB0aGlzLmVsZW0uZGF0YS5pcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3ljbGVEdXJhdGlvbiA9IE1hdGguYWJzKGxhc3RLZXlGcmFtZSAtIHRoaXMuZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlICogZHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlyc3RLZXlGcmFtZSA9IGxhc3RLZXlGcmFtZSAtIGN5Y2xlRHVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcbiAgICAgIHZhciByZXQ7XG5cbiAgICAgIGlmICh0eXBlID09PSAncGluZ3BvbmcnKSB7XG4gICAgICAgIHZhciBpdGVyYXRpb25zID0gTWF0aC5mbG9vcigoY3VycmVudEZyYW1lIC0gZmlyc3RLZXlGcmFtZSkgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXRlcmF0aW9ucyAlIDIgIT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUF0VGltZSgoY3ljbGVEdXJhdGlvbiAtIChjdXJyZW50RnJhbWUgLSBmaXJzdEtleUZyYW1lKSAlIGN5Y2xlRHVyYXRpb24gKyBmaXJzdEtleUZyYW1lKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2Zmc2V0Jykge1xuICAgICAgICB2YXIgaW5pdFYgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZpcnN0S2V5RnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgZW5kViA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUobGFzdEtleUZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldFZhbHVlQXRUaW1lKCgoY3VycmVudEZyYW1lIC0gZmlyc3RLZXlGcmFtZSkgJSBjeWNsZUR1cmF0aW9uICsgZmlyc3RLZXlGcmFtZSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgICAgdmFyIHJlcGVhdHMgPSBNYXRoLmZsb29yKChjdXJyZW50RnJhbWUgLSBmaXJzdEtleUZyYW1lKSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICAgIHJldCA9IG5ldyBBcnJheShpbml0Vi5sZW5ndGgpO1xuICAgICAgICAgIGxlbiA9IHJldC5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHJldFtpXSA9IChlbmRWW2ldIC0gaW5pdFZbaV0pICogcmVwZWF0cyArIGN1cnJlbnRbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoZW5kViAtIGluaXRWKSAqIHJlcGVhdHMgKyBjdXJyZW50O1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnY29udGludWUnKSB7XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGxhc3RLZXlGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciBuZXh0TGFzdFZhbHVlID0gdGhpcy5nZXRWYWx1ZUF0VGltZSgobGFzdEtleUZyYW1lIC0gMC4wMDEpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcblxuICAgICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgICByZXQgPSBuZXcgQXJyYXkobGFzdFZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgbGVuID0gcmV0Lmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcmV0W2ldID0gbGFzdFZhbHVlW2ldICsgKGxhc3RWYWx1ZVtpXSAtIG5leHRMYXN0VmFsdWVbaV0pICogKChjdXJyZW50RnJhbWUgLSBsYXN0S2V5RnJhbWUpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlKSAvIDAuMDAwNTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGFzdFZhbHVlICsgKGxhc3RWYWx1ZSAtIG5leHRMYXN0VmFsdWUpICogKChjdXJyZW50RnJhbWUgLSBsYXN0S2V5RnJhbWUpIC8gMC4wMDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUF0VGltZSgoKGN1cnJlbnRGcmFtZSAtIGZpcnN0S2V5RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvb3BJbih0eXBlLCBkdXJhdGlvbiwgZHVyYXRpb25GbGFnKSB7XG4gICAgICBpZiAoIXRoaXMuaykge1xuICAgICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGUgPyB0eXBlLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgICAgIHZhciBjdXJyZW50RnJhbWUgPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZTtcbiAgICAgIHZhciBrZXlmcmFtZXMgPSB0aGlzLmtleWZyYW1lcztcbiAgICAgIHZhciBmaXJzdEtleUZyYW1lID0ga2V5ZnJhbWVzWzBdLnQ7XG5cbiAgICAgIGlmIChjdXJyZW50RnJhbWUgPj0gZmlyc3RLZXlGcmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN5Y2xlRHVyYXRpb247XG4gICAgICB2YXIgbGFzdEtleUZyYW1lO1xuXG4gICAgICBpZiAoIWR1cmF0aW9uRmxhZykge1xuICAgICAgICBpZiAoIWR1cmF0aW9uIHx8IGR1cmF0aW9uID4ga2V5ZnJhbWVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBkdXJhdGlvbiA9IGtleWZyYW1lcy5sZW5ndGggLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdEtleUZyYW1lID0ga2V5ZnJhbWVzW2R1cmF0aW9uXS50O1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gbGFzdEtleUZyYW1lIC0gZmlyc3RLZXlGcmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgICBjeWNsZUR1cmF0aW9uID0gTWF0aC5tYXgoMCwgdGhpcy5lbGVtLmRhdGEub3AgLSBmaXJzdEtleUZyYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjeWNsZUR1cmF0aW9uID0gTWF0aC5hYnModGhpcy5lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUgKiBkdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0S2V5RnJhbWUgPSBmaXJzdEtleUZyYW1lICsgY3ljbGVEdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuO1xuICAgICAgdmFyIHJldDtcblxuICAgICAgaWYgKHR5cGUgPT09ICdwaW5ncG9uZycpIHtcbiAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBNYXRoLmZsb29yKChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpdGVyYXRpb25zICUgMiA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKCgoZmlyc3RLZXlGcmFtZSAtIGN1cnJlbnRGcmFtZSkgJSBjeWNsZUR1cmF0aW9uICsgZmlyc3RLZXlGcmFtZSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29mZnNldCcpIHtcbiAgICAgICAgdmFyIGluaXRWID0gdGhpcy5nZXRWYWx1ZUF0VGltZShmaXJzdEtleUZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIGVuZFYgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGxhc3RLZXlGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5nZXRWYWx1ZUF0VGltZSgoY3ljbGVEdXJhdGlvbiAtIChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAlIGN5Y2xlRHVyYXRpb24gKyBmaXJzdEtleUZyYW1lKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciByZXBlYXRzID0gTWF0aC5mbG9vcigoZmlyc3RLZXlGcmFtZSAtIGN1cnJlbnRGcmFtZSkgLyBjeWNsZUR1cmF0aW9uKSArIDE7XG5cbiAgICAgICAgaWYgKHRoaXMucHYubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0ID0gbmV3IEFycmF5KGluaXRWLmxlbmd0aCk7XG4gICAgICAgICAgbGVuID0gcmV0Lmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcmV0W2ldID0gY3VycmVudFtpXSAtIChlbmRWW2ldIC0gaW5pdFZbaV0pICogcmVwZWF0cztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnQgLSAoZW5kViAtIGluaXRWKSAqIHJlcGVhdHM7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjb250aW51ZScpIHtcbiAgICAgICAgdmFyIGZpcnN0VmFsdWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZpcnN0S2V5RnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgbmV4dEZpcnN0VmFsdWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lKChmaXJzdEtleUZyYW1lICsgMC4wMDEpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcblxuICAgICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgICByZXQgPSBuZXcgQXJyYXkoZmlyc3RWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgIGxlbiA9IHJldC5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHJldFtpXSA9IGZpcnN0VmFsdWVbaV0gKyAoZmlyc3RWYWx1ZVtpXSAtIG5leHRGaXJzdFZhbHVlW2ldKSAqIChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAvIDAuMDAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmlyc3RWYWx1ZSArIChmaXJzdFZhbHVlIC0gbmV4dEZpcnN0VmFsdWUpICogKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpIC8gMC4wMDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKChjeWNsZUR1cmF0aW9uIC0gKChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAlIGN5Y2xlRHVyYXRpb24gKyBmaXJzdEtleUZyYW1lKSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc21vb3RoKHdpZHRoLCBzYW1wbGVzKSB7XG4gICAgICBpZiAoIXRoaXMuaykge1xuICAgICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICAgIH1cblxuICAgICAgd2lkdGggPSAod2lkdGggfHwgMC40KSAqIDAuNTtcbiAgICAgIHNhbXBsZXMgPSBNYXRoLmZsb29yKHNhbXBsZXMgfHwgNSk7XG5cbiAgICAgIGlmIChzYW1wbGVzIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgdmFyIGluaXRGcmFtZSA9IGN1cnJlbnRUaW1lIC0gd2lkdGg7XG4gICAgICB2YXIgZW5kRnJhbWUgPSBjdXJyZW50VGltZSArIHdpZHRoO1xuICAgICAgdmFyIHNhbXBsZUZyZXF1ZW5jeSA9IHNhbXBsZXMgPiAxID8gKGVuZEZyYW1lIC0gaW5pdEZyYW1lKSAvIChzYW1wbGVzIC0gMSkgOiAxO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGogPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgdGhpcy5wdi5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2FtcGxlVmFsdWU7XG5cbiAgICAgIHdoaWxlIChpIDwgc2FtcGxlcykge1xuICAgICAgICBzYW1wbGVWYWx1ZSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoaW5pdEZyYW1lICsgaSAqIHNhbXBsZUZyZXF1ZW5jeSk7XG5cbiAgICAgICAgaWYgKHRoaXMucHYubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IHRoaXMucHYubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHZhbHVlW2pdICs9IHNhbXBsZVZhbHVlW2pdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSArPSBzYW1wbGVWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHYubGVuZ3RoKSB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLnB2Lmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgdmFsdWVbal0gLz0gc2FtcGxlcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgLz0gc2FtcGxlcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRyYW5zZm9ybVZhbHVlQXRUaW1lKHRpbWUpIHtcbiAgICAgIGlmICghdGhpcy5fdHJhbnNmb3JtQ2FjaGluZ0F0VGltZSkge1xuICAgICAgICB0aGlzLl90cmFuc2Zvcm1DYWNoaW5nQXRUaW1lID0ge1xuICAgICAgICAgIHY6IG5ldyBNYXRyaXgoKVxuICAgICAgICB9O1xuICAgICAgfSAvLy8gL1xuXG5cbiAgICAgIHZhciBtYXRyaXggPSB0aGlzLl90cmFuc2Zvcm1DYWNoaW5nQXRUaW1lLnY7XG4gICAgICBtYXRyaXguY2xvbmVGcm9tUHJvcHModGhpcy5wcmUucHJvcHMpO1xuXG4gICAgICBpZiAodGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgMSkge1xuICAgICAgICB2YXIgYW5jaG9yID0gdGhpcy5hLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICBtYXRyaXgudHJhbnNsYXRlKC1hbmNob3JbMF0gKiB0aGlzLmEubXVsdCwgLWFuY2hvclsxXSAqIHRoaXMuYS5tdWx0LCBhbmNob3JbMl0gKiB0aGlzLmEubXVsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCAyKSB7XG4gICAgICAgIHZhciBzY2FsZSA9IHRoaXMucy5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgbWF0cml4LnNjYWxlKHNjYWxlWzBdICogdGhpcy5zLm11bHQsIHNjYWxlWzFdICogdGhpcy5zLm11bHQsIHNjYWxlWzJdICogdGhpcy5zLm11bHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zayAmJiB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCAzKSB7XG4gICAgICAgIHZhciBza2V3ID0gdGhpcy5zay5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgdmFyIHNrZXdBeGlzID0gdGhpcy5zYS5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgbWF0cml4LnNrZXdGcm9tQXhpcygtc2tldyAqIHRoaXMuc2subXVsdCwgc2tld0F4aXMgKiB0aGlzLnNhLm11bHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDQpIHtcbiAgICAgICAgdmFyIHJvdGF0aW9uID0gdGhpcy5yLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICBtYXRyaXgucm90YXRlKC1yb3RhdGlvbiAqIHRoaXMuci5tdWx0KTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuciAmJiB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCA0KSB7XG4gICAgICAgIHZhciByb3RhdGlvblogPSB0aGlzLnJ6LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgcm90YXRpb25ZID0gdGhpcy5yeS5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgdmFyIHJvdGF0aW9uWCA9IHRoaXMucnguZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIHZhciBvcmllbnRhdGlvbiA9IHRoaXMub3IuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC5yb3RhdGVaKC1yb3RhdGlvblogKiB0aGlzLnJ6Lm11bHQpLnJvdGF0ZVkocm90YXRpb25ZICogdGhpcy5yeS5tdWx0KS5yb3RhdGVYKHJvdGF0aW9uWCAqIHRoaXMucngubXVsdCkucm90YXRlWigtb3JpZW50YXRpb25bMl0gKiB0aGlzLm9yLm11bHQpLnJvdGF0ZVkob3JpZW50YXRpb25bMV0gKiB0aGlzLm9yLm11bHQpLnJvdGF0ZVgob3JpZW50YXRpb25bMF0gKiB0aGlzLm9yLm11bHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLnAgJiYgdGhpcy5kYXRhLnAucykge1xuICAgICAgICB2YXIgcG9zaXRpb25YID0gdGhpcy5weC5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uWSA9IHRoaXMucHkuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5wLnopIHtcbiAgICAgICAgICB2YXIgcG9zaXRpb25aID0gdGhpcy5wei5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgICBtYXRyaXgudHJhbnNsYXRlKHBvc2l0aW9uWCAqIHRoaXMucHgubXVsdCwgcG9zaXRpb25ZICogdGhpcy5weS5tdWx0LCAtcG9zaXRpb25aICogdGhpcy5wei5tdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRyaXgudHJhbnNsYXRlKHBvc2l0aW9uWCAqIHRoaXMucHgubXVsdCwgcG9zaXRpb25ZICogdGhpcy5weS5tdWx0LCAwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5wLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICBtYXRyaXgudHJhbnNsYXRlKHBvc2l0aW9uWzBdICogdGhpcy5wLm11bHQsIHBvc2l0aW9uWzFdICogdGhpcy5wLm11bHQsIC1wb3NpdGlvblsyXSAqIHRoaXMucC5tdWx0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdHJpeDsgLy8vIC9cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1TdGF0aWNWYWx1ZUF0VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnYuY2xvbmUobmV3IE1hdHJpeCgpKTtcbiAgICB9XG5cbiAgICB2YXIgZ2V0VHJhbnNmb3JtUHJvcGVydHkgPSBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkuZ2V0VHJhbnNmb3JtUHJvcGVydHk7XG5cbiAgICBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkuZ2V0VHJhbnNmb3JtUHJvcGVydHkgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSwgY29udGFpbmVyKSB7XG4gICAgICB2YXIgcHJvcCA9IGdldFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sIGRhdGEsIGNvbnRhaW5lcik7XG5cbiAgICAgIGlmIChwcm9wLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICBwcm9wLmdldFZhbHVlQXRUaW1lID0gZ2V0VHJhbnNmb3JtVmFsdWVBdFRpbWUuYmluZChwcm9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3AuZ2V0VmFsdWVBdFRpbWUgPSBnZXRUcmFuc2Zvcm1TdGF0aWNWYWx1ZUF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgfVxuXG4gICAgICBwcm9wLnNldEdyb3VwUHJvcGVydHkgPSBleHByZXNzaW9uSGVscGVycy5zZXRHcm91cFByb3BlcnR5O1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfTtcblxuICAgIHZhciBwcm9wZXJ0eUdldFByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcDtcblxuICAgIFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEsIHR5cGUsIG11bHQsIGNvbnRhaW5lcikge1xuICAgICAgdmFyIHByb3AgPSBwcm9wZXJ0eUdldFByb3AoZWxlbSwgZGF0YSwgdHlwZSwgbXVsdCwgY29udGFpbmVyKTsgLy8gcHJvcC5nZXRWZWxvY2l0eUF0VGltZSA9IGdldFZlbG9jaXR5QXRUaW1lO1xuICAgICAgLy8gcHJvcC5sb29wT3V0ID0gbG9vcE91dDtcbiAgICAgIC8vIHByb3AubG9vcEluID0gbG9vcEluO1xuXG4gICAgICBpZiAocHJvcC5rZikge1xuICAgICAgICBwcm9wLmdldFZhbHVlQXRUaW1lID0gZXhwcmVzc2lvbkhlbHBlcnMuZ2V0VmFsdWVBdFRpbWUuYmluZChwcm9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3AuZ2V0VmFsdWVBdFRpbWUgPSBleHByZXNzaW9uSGVscGVycy5nZXRTdGF0aWNWYWx1ZUF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgfVxuXG4gICAgICBwcm9wLnNldEdyb3VwUHJvcGVydHkgPSBleHByZXNzaW9uSGVscGVycy5zZXRHcm91cFByb3BlcnR5O1xuICAgICAgcHJvcC5sb29wT3V0ID0gbG9vcE91dDtcbiAgICAgIHByb3AubG9vcEluID0gbG9vcEluO1xuICAgICAgcHJvcC5zbW9vdGggPSBzbW9vdGg7XG4gICAgICBwcm9wLmdldFZlbG9jaXR5QXRUaW1lID0gZXhwcmVzc2lvbkhlbHBlcnMuZ2V0VmVsb2NpdHlBdFRpbWUuYmluZChwcm9wKTtcbiAgICAgIHByb3AuZ2V0U3BlZWRBdFRpbWUgPSBleHByZXNzaW9uSGVscGVycy5nZXRTcGVlZEF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgcHJvcC5udW1LZXlzID0gZGF0YS5hID09PSAxID8gZGF0YS5rLmxlbmd0aCA6IDA7XG4gICAgICBwcm9wLnByb3BlcnR5SW5kZXggPSBkYXRhLml4O1xuICAgICAgdmFyIHZhbHVlID0gMDtcblxuICAgICAgaWYgKHR5cGUgIT09IDApIHtcbiAgICAgICAgdmFsdWUgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgZGF0YS5hID09PSAxID8gZGF0YS5rWzBdLnMubGVuZ3RoIDogZGF0YS5rLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHByb3AuX2NhY2hpbmdBdFRpbWUgPSB7XG4gICAgICAgIGxhc3RGcmFtZTogaW5pdGlhbERlZmF1bHRGcmFtZSxcbiAgICAgICAgbGFzdEluZGV4OiAwLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH07XG4gICAgICBleHByZXNzaW9uSGVscGVycy5zZWFyY2hFeHByZXNzaW9ucyhlbGVtLCBkYXRhLCBwcm9wKTtcblxuICAgICAgaWYgKHByb3Auaykge1xuICAgICAgICBjb250YWluZXIuYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0U2hhcGVWYWx1ZUF0VGltZShmcmFtZU51bSkge1xuICAgICAgLy8gRm9yIG5vdyB0aGlzIGNhY2hpbmcgb2JqZWN0IGlzIGNyZWF0ZWQgb25seSB3aGVuIG5lZWRlZCBpbnN0ZWFkIG9mIGNyZWF0aW5nIGl0IHdoZW4gdGhlIHNoYXBlIGlzIGluaXRpYWxpemVkLlxuICAgICAgaWYgKCF0aGlzLl9jYWNoaW5nQXRUaW1lKSB7XG4gICAgICAgIHRoaXMuX2NhY2hpbmdBdFRpbWUgPSB7XG4gICAgICAgICAgc2hhcGVWYWx1ZTogc2hhcGVQb29sLmNsb25lKHRoaXMucHYpLFxuICAgICAgICAgIGxhc3RJbmRleDogMCxcbiAgICAgICAgICBsYXN0VGltZTogaW5pdGlhbERlZmF1bHRGcmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmcmFtZU51bSAqPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICBmcmFtZU51bSAtPSB0aGlzLm9mZnNldFRpbWU7XG5cbiAgICAgIGlmIChmcmFtZU51bSAhPT0gdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0VGltZSkge1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RJbmRleCA9IHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdFRpbWUgPCBmcmFtZU51bSA/IHRoaXMuX2NhY2hpbmcubGFzdEluZGV4IDogMDtcbiAgICAgICAgdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0VGltZSA9IGZyYW1lTnVtO1xuICAgICAgICB0aGlzLmludGVycG9sYXRlU2hhcGUoZnJhbWVOdW0sIHRoaXMuX2NhY2hpbmdBdFRpbWUuc2hhcGVWYWx1ZSwgdGhpcy5fY2FjaGluZ0F0VGltZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYWNoaW5nQXRUaW1lLnNoYXBlVmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0Q29uc3RydWN0b3JGdW5jdGlvbigpO1xuICAgIHZhciBLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbiA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldEtleWZyYW1lZENvbnN0cnVjdG9yRnVuY3Rpb24oKTtcblxuICAgIGZ1bmN0aW9uIFNoYXBlRXhwcmVzc2lvbnMoKSB7fVxuXG4gICAgU2hhcGVFeHByZXNzaW9ucy5wcm90b3R5cGUgPSB7XG4gICAgICB2ZXJ0aWNlczogZnVuY3Rpb24gdmVydGljZXMocHJvcCwgdGltZSkge1xuICAgICAgICBpZiAodGhpcy5rKSB7XG4gICAgICAgICAgdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNoYXBlUGF0aCA9IHRoaXMudjtcblxuICAgICAgICBpZiAodGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2hhcGVQYXRoID0gdGhpcy5nZXRWYWx1ZUF0VGltZSh0aW1lLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gc2hhcGVQYXRoLl9sZW5ndGg7XG4gICAgICAgIHZhciB2ZXJ0aWNlcyA9IHNoYXBlUGF0aFtwcm9wXTtcbiAgICAgICAgdmFyIHBvaW50cyA9IHNoYXBlUGF0aC52O1xuICAgICAgICB2YXIgYXJyID0gY3JlYXRlU2l6ZWRBcnJheShsZW4pO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChwcm9wID09PSAnaScgfHwgcHJvcCA9PT0gJ28nKSB7XG4gICAgICAgICAgICBhcnJbaV0gPSBbdmVydGljZXNbaV1bMF0gLSBwb2ludHNbaV1bMF0sIHZlcnRpY2VzW2ldWzFdIC0gcG9pbnRzW2ldWzFdXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyW2ldID0gW3ZlcnRpY2VzW2ldWzBdLCB2ZXJ0aWNlc1tpXVsxXV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH0sXG4gICAgICBwb2ludHM6IGZ1bmN0aW9uIHBvaW50cyh0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzKCd2JywgdGltZSk7XG4gICAgICB9LFxuICAgICAgaW5UYW5nZW50czogZnVuY3Rpb24gaW5UYW5nZW50cyh0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzKCdpJywgdGltZSk7XG4gICAgICB9LFxuICAgICAgb3V0VGFuZ2VudHM6IGZ1bmN0aW9uIG91dFRhbmdlbnRzKHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljZXMoJ28nLCB0aW1lKTtcbiAgICAgIH0sXG4gICAgICBpc0Nsb3NlZDogZnVuY3Rpb24gaXNDbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnYuYztcbiAgICAgIH0sXG4gICAgICBwb2ludE9uUGF0aDogZnVuY3Rpb24gcG9pbnRPblBhdGgocGVyYywgdGltZSkge1xuICAgICAgICB2YXIgc2hhcGVQYXRoID0gdGhpcy52O1xuXG4gICAgICAgIGlmICh0aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzaGFwZVBhdGggPSB0aGlzLmdldFZhbHVlQXRUaW1lKHRpbWUsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9zZWdtZW50c0xlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX3NlZ21lbnRzTGVuZ3RoID0gYmV6LmdldFNlZ21lbnRzTGVuZ3RoKHNoYXBlUGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VnbWVudHNMZW5ndGggPSB0aGlzLl9zZWdtZW50c0xlbmd0aDtcbiAgICAgICAgdmFyIGxlbmd0aHMgPSBzZWdtZW50c0xlbmd0aC5sZW5ndGhzO1xuICAgICAgICB2YXIgbGVuZ3RoUG9zID0gc2VnbWVudHNMZW5ndGgudG90YWxMZW5ndGggKiBwZXJjO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSBsZW5ndGhzLmxlbmd0aDtcbiAgICAgICAgdmFyIGFjY3VtdWxhdGVkTGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIHB0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKGFjY3VtdWxhdGVkTGVuZ3RoICsgbGVuZ3Roc1tpXS5hZGRlZExlbmd0aCA+IGxlbmd0aFBvcykge1xuICAgICAgICAgICAgdmFyIGluaXRJbmRleCA9IGk7XG4gICAgICAgICAgICB2YXIgZW5kSW5kZXggPSBzaGFwZVBhdGguYyAmJiBpID09PSBsZW4gLSAxID8gMCA6IGkgKyAxO1xuICAgICAgICAgICAgdmFyIHNlZ21lbnRQZXJjID0gKGxlbmd0aFBvcyAtIGFjY3VtdWxhdGVkTGVuZ3RoKSAvIGxlbmd0aHNbaV0uYWRkZWRMZW5ndGg7XG4gICAgICAgICAgICBwdCA9IGJlei5nZXRQb2ludEluU2VnbWVudChzaGFwZVBhdGgudltpbml0SW5kZXhdLCBzaGFwZVBhdGgudltlbmRJbmRleF0sIHNoYXBlUGF0aC5vW2luaXRJbmRleF0sIHNoYXBlUGF0aC5pW2VuZEluZGV4XSwgc2VnbWVudFBlcmMsIGxlbmd0aHNbaV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdGVkTGVuZ3RoICs9IGxlbmd0aHNbaV0uYWRkZWRMZW5ndGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwdCkge1xuICAgICAgICAgIHB0ID0gc2hhcGVQYXRoLmMgPyBbc2hhcGVQYXRoLnZbMF1bMF0sIHNoYXBlUGF0aC52WzBdWzFdXSA6IFtzaGFwZVBhdGgudltzaGFwZVBhdGguX2xlbmd0aCAtIDFdWzBdLCBzaGFwZVBhdGgudltzaGFwZVBhdGguX2xlbmd0aCAtIDFdWzFdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwdDtcbiAgICAgIH0sXG4gICAgICB2ZWN0b3JPblBhdGg6IGZ1bmN0aW9uIHZlY3Rvck9uUGF0aChwZXJjLCB0aW1lLCB2ZWN0b3JUeXBlKSB7XG4gICAgICAgIC8vIHBlcmMgZG9lc24ndCB1c2UgdHJpcGxlIGVxdWFsaXR5IGJlY2F1c2UgaXQgY2FuIGJlIGEgTnVtYmVyIG9iamVjdCBhcyB3ZWxsIGFzIGEgcHJpbWl0aXZlLlxuICAgICAgICBpZiAocGVyYyA9PSAxKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgICBwZXJjID0gdGhpcy52LmM7XG4gICAgICAgIH0gZWxzZSBpZiAocGVyYyA9PSAwKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgICBwZXJjID0gMC45OTk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHQxID0gdGhpcy5wb2ludE9uUGF0aChwZXJjLCB0aW1lKTtcbiAgICAgICAgdmFyIHB0MiA9IHRoaXMucG9pbnRPblBhdGgocGVyYyArIDAuMDAxLCB0aW1lKTtcbiAgICAgICAgdmFyIHhMZW5ndGggPSBwdDJbMF0gLSBwdDFbMF07XG4gICAgICAgIHZhciB5TGVuZ3RoID0gcHQyWzFdIC0gcHQxWzFdO1xuICAgICAgICB2YXIgbWFnbml0dWRlID0gTWF0aC5zcXJ0KE1hdGgucG93KHhMZW5ndGgsIDIpICsgTWF0aC5wb3coeUxlbmd0aCwgMikpO1xuXG4gICAgICAgIGlmIChtYWduaXR1ZGUgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gWzAsIDBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuaXRWZWN0b3IgPSB2ZWN0b3JUeXBlID09PSAndGFuZ2VudCcgPyBbeExlbmd0aCAvIG1hZ25pdHVkZSwgeUxlbmd0aCAvIG1hZ25pdHVkZV0gOiBbLXlMZW5ndGggLyBtYWduaXR1ZGUsIHhMZW5ndGggLyBtYWduaXR1ZGVdO1xuICAgICAgICByZXR1cm4gdW5pdFZlY3RvcjtcbiAgICAgIH0sXG4gICAgICB0YW5nZW50T25QYXRoOiBmdW5jdGlvbiB0YW5nZW50T25QYXRoKHBlcmMsIHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjdG9yT25QYXRoKHBlcmMsIHRpbWUsICd0YW5nZW50Jyk7XG4gICAgICB9LFxuICAgICAgbm9ybWFsT25QYXRoOiBmdW5jdGlvbiBub3JtYWxPblBhdGgocGVyYywgdGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZWN0b3JPblBhdGgocGVyYywgdGltZSwgJ25vcm1hbCcpO1xuICAgICAgfSxcbiAgICAgIHNldEdyb3VwUHJvcGVydHk6IGV4cHJlc3Npb25IZWxwZXJzLnNldEdyb3VwUHJvcGVydHksXG4gICAgICBnZXRWYWx1ZUF0VGltZTogZXhwcmVzc2lvbkhlbHBlcnMuZ2V0U3RhdGljVmFsdWVBdFRpbWVcbiAgICB9O1xuICAgIGV4dGVuZFByb3RvdHlwZShbU2hhcGVFeHByZXNzaW9uc10sIFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uKTtcbiAgICBleHRlbmRQcm90b3R5cGUoW1NoYXBlRXhwcmVzc2lvbnNdLCBLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbik7XG4gICAgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24ucHJvdG90eXBlLmdldFZhbHVlQXRUaW1lID0gZ2V0U2hhcGVWYWx1ZUF0VGltZTtcbiAgICBLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbi5wcm90b3R5cGUuaW5pdGlhdGVFeHByZXNzaW9uID0gRXhwcmVzc2lvbk1hbmFnZXIuaW5pdGlhdGVFeHByZXNzaW9uO1xuICAgIHZhciBwcm9wZXJ0eUdldFNoYXBlUHJvcCA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcDtcblxuICAgIFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhLCB0eXBlLCBhcnIsIHRyaW1zKSB7XG4gICAgICB2YXIgcHJvcCA9IHByb3BlcnR5R2V0U2hhcGVQcm9wKGVsZW0sIGRhdGEsIHR5cGUsIGFyciwgdHJpbXMpO1xuICAgICAgcHJvcC5wcm9wZXJ0eUluZGV4ID0gZGF0YS5peDtcbiAgICAgIHByb3AubG9jayA9IGZhbHNlO1xuXG4gICAgICBpZiAodHlwZSA9PT0gMykge1xuICAgICAgICBleHByZXNzaW9uSGVscGVycy5zZWFyY2hFeHByZXNzaW9ucyhlbGVtLCBkYXRhLnB0LCBwcm9wKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNCkge1xuICAgICAgICBleHByZXNzaW9uSGVscGVycy5zZWFyY2hFeHByZXNzaW9ucyhlbGVtLCBkYXRhLmtzLCBwcm9wKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3Auaykge1xuICAgICAgICBlbGVtLmFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUkMSgpIHtcbiAgICBhZGRQcm9wZXJ0eURlY29yYXRvcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRGVjb3JhdG9yKCkge1xuICAgIGZ1bmN0aW9uIHNlYXJjaEV4cHJlc3Npb25zKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5kLngpIHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVFeHByZXNzaW9uID0gRXhwcmVzc2lvbk1hbmFnZXIuaW5pdGlhdGVFeHByZXNzaW9uLmJpbmQodGhpcykodGhpcy5lbGVtLCB0aGlzLmRhdGEuZCwgdGhpcyk7XG4gICAgICAgIHRoaXMuYWRkRWZmZWN0KHRoaXMuZ2V0RXhwcmVzc2lvblZhbHVlLmJpbmQodGhpcykpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5nZXRFeHByZXNzaW9uVmFsdWUgPSBmdW5jdGlvbiAoY3VycmVudFZhbHVlLCB0ZXh0KSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLmNhbGN1bGF0ZUV4cHJlc3Npb24odGV4dCk7XG5cbiAgICAgIGlmIChjdXJyZW50VmFsdWUudCAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIG5ld0RhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5jb3B5RGF0YShuZXdEYXRhLCBjdXJyZW50VmFsdWUpO1xuICAgICAgICBuZXdEYXRhLnQgPSBuZXdWYWx1ZS50b1N0cmluZygpO1xuICAgICAgICBuZXdEYXRhLl9fY29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gICAgfTtcblxuICAgIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaXNLZXlmcmFtZWQgPSB0aGlzLnNlYXJjaEtleWZyYW1lcygpO1xuICAgICAgdmFyIGhhc0V4cHJlc3Npb25zID0gdGhpcy5zZWFyY2hFeHByZXNzaW9ucygpO1xuICAgICAgdGhpcy5rZiA9IGlzS2V5ZnJhbWVkIHx8IGhhc0V4cHJlc3Npb25zO1xuICAgICAgcmV0dXJuIHRoaXMua2Y7XG4gICAgfTtcblxuICAgIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoRXhwcmVzc2lvbnMgPSBzZWFyY2hFeHByZXNzaW9ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgYWRkRGVjb3JhdG9yKCk7XG4gIH1cblxuICBmdW5jdGlvbiBTVkdDb21wb3NhYmxlRWZmZWN0KCkge31cblxuICBTVkdDb21wb3NhYmxlRWZmZWN0LnByb3RvdHlwZSA9IHtcbiAgICBjcmVhdGVNZXJnZU5vZGU6IGZ1bmN0aW9uIGNyZWF0ZU1lcmdlTm9kZShyZXN1bHRJZCwgaW5zKSB7XG4gICAgICB2YXIgZmVNZXJnZSA9IGNyZWF0ZU5TKCdmZU1lcmdlJyk7XG4gICAgICBmZU1lcmdlLnNldEF0dHJpYnV0ZSgncmVzdWx0JywgcmVzdWx0SWQpO1xuICAgICAgdmFyIGZlTWVyZ2VOb2RlO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBpbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZmVNZXJnZU5vZGUgPSBjcmVhdGVOUygnZmVNZXJnZU5vZGUnKTtcbiAgICAgICAgZmVNZXJnZU5vZGUuc2V0QXR0cmlidXRlKCdpbicsIGluc1tpXSk7XG4gICAgICAgIGZlTWVyZ2UuYXBwZW5kQ2hpbGQoZmVNZXJnZU5vZGUpO1xuICAgICAgICBmZU1lcmdlLmFwcGVuZENoaWxkKGZlTWVyZ2VOb2RlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZlTWVyZ2U7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaW5lYXJGaWx0ZXJWYWx1ZSA9ICcwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwIDAgMCc7XG5cbiAgZnVuY3Rpb24gU1ZHVGludEZpbHRlcihmaWx0ZXIsIGZpbHRlck1hbmFnZXIsIGVsZW0sIGlkLCBzb3VyY2UpIHtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHZhciBmZUNvbG9yTWF0cml4ID0gY3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsICdtYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ2xpbmVhclJHQicpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCBsaW5lYXJGaWx0ZXJWYWx1ZSArICcgMSAwJyk7XG4gICAgdGhpcy5saW5lYXJGaWx0ZXIgPSBmZUNvbG9yTWF0cml4O1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCArICdfdGludF8xJyk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29sb3JNYXRyaXgpO1xuICAgIGZlQ29sb3JNYXRyaXggPSBjcmVhdGVOUygnZmVDb2xvck1hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd0eXBlJywgJ21hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCAnMSAwIDAgMCAwIDAgMSAwIDAgMCAwIDAgMSAwIDAgMCAwIDAgMSAwJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ190aW50XzInKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb2xvck1hdHJpeCk7XG4gICAgdGhpcy5tYXRyaXhGaWx0ZXIgPSBmZUNvbG9yTWF0cml4O1xuICAgIHZhciBmZU1lcmdlID0gdGhpcy5jcmVhdGVNZXJnZU5vZGUoaWQsIFtzb3VyY2UsIGlkICsgJ190aW50XzEnLCBpZCArICdfdGludF8yJ10pO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZU1lcmdlKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU1ZHQ29tcG9zYWJsZUVmZmVjdF0sIFNWR1RpbnRGaWx0ZXIpO1xuXG4gIFNWR1RpbnRGaWx0ZXIucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKSB7XG4gICAgICB2YXIgY29sb3JCbGFjayA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLnY7XG4gICAgICB2YXIgY29sb3JXaGl0ZSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnY7XG4gICAgICB2YXIgb3BhY2l0eSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLnYgLyAxMDA7XG4gICAgICB0aGlzLmxpbmVhckZpbHRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsIGxpbmVhckZpbHRlclZhbHVlICsgJyAnICsgb3BhY2l0eSArICcgMCcpO1xuICAgICAgdGhpcy5tYXRyaXhGaWx0ZXIuc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCBjb2xvcldoaXRlWzBdIC0gY29sb3JCbGFja1swXSArICcgMCAwIDAgJyArIGNvbG9yQmxhY2tbMF0gKyAnICcgKyAoY29sb3JXaGl0ZVsxXSAtIGNvbG9yQmxhY2tbMV0pICsgJyAwIDAgMCAnICsgY29sb3JCbGFja1sxXSArICcgJyArIChjb2xvcldoaXRlWzJdIC0gY29sb3JCbGFja1syXSkgKyAnIDAgMCAwICcgKyBjb2xvckJsYWNrWzJdICsgJyAwIDAgMCAxIDAnKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHRmlsbEZpbHRlcihmaWx0ZXIsIGZpbHRlck1hbmFnZXIsIGVsZW0sIGlkKSB7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB2YXIgZmVDb2xvck1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsICcxIDAgMCAwIDAgMCAxIDAgMCAwIDAgMCAxIDAgMCAwIDAgMCAxIDAnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQpO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbG9yTWF0cml4KTtcbiAgICB0aGlzLm1hdHJpeEZpbHRlciA9IGZlQ29sb3JNYXRyaXg7XG4gIH1cblxuICBTVkdGaWxsRmlsdGVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZVJlbmRlcikge1xuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZikge1xuICAgICAgdmFyIGNvbG9yID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudjtcbiAgICAgIHZhciBvcGFjaXR5ID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzZdLnAudjtcbiAgICAgIHRoaXMubWF0cml4RmlsdGVyLnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzAgMCAwIDAgJyArIGNvbG9yWzBdICsgJyAwIDAgMCAwICcgKyBjb2xvclsxXSArICcgMCAwIDAgMCAnICsgY29sb3JbMl0gKyAnIDAgMCAwICcgKyBvcGFjaXR5ICsgJyAwJyk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1N0cm9rZUVmZmVjdChmaWwsIGZpbHRlck1hbmFnZXIsIGVsZW0pIHtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMucGF0aHMgPSBbXTtcbiAgfVxuXG4gIFNWR1N0cm9rZUVmZmVjdC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxlbUNoaWxkcmVuID0gdGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZHJlbiB8fCB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgdmFyIHBhdGg7XG4gICAgdmFyIGdyb3VwUGF0aDtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuXG4gICAgaWYgKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnYgPT09IDEpIHtcbiAgICAgIGxlbiA9IHRoaXMuZWxlbS5tYXNrTWFuYWdlci5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgICAgaSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGkgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52IC0gMTtcbiAgICAgIGxlbiA9IGkgKyAxO1xuICAgIH1cblxuICAgIGdyb3VwUGF0aCA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgZ3JvdXBQYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdub25lJyk7XG4gICAgZ3JvdXBQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCAncm91bmQnKTtcbiAgICBncm91cFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaG9mZnNldCcsIDEpO1xuXG4gICAgZm9yIChpOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHBhdGggPSBjcmVhdGVOUygncGF0aCcpO1xuICAgICAgZ3JvdXBQYXRoLmFwcGVuZENoaWxkKHBhdGgpO1xuICAgICAgdGhpcy5wYXRocy5wdXNoKHtcbiAgICAgICAgcDogcGF0aCxcbiAgICAgICAgbTogaVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52ID09PSAzKSB7XG4gICAgICB2YXIgbWFzayA9IGNyZWF0ZU5TKCdtYXNrJyk7XG4gICAgICB2YXIgaWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIG1hc2suc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgIG1hc2suc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnYWxwaGEnKTtcbiAgICAgIG1hc2suYXBwZW5kQ2hpbGQoZ3JvdXBQYXRoKTtcbiAgICAgIHRoaXMuZWxlbS5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQobWFzayk7XG4gICAgICB2YXIgZyA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICBnLnNldEF0dHJpYnV0ZSgnbWFzaycsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgaWQgKyAnKScpO1xuXG4gICAgICB3aGlsZSAoZWxlbUNoaWxkcmVuWzBdKSB7XG4gICAgICAgIGcuYXBwZW5kQ2hpbGQoZWxlbUNoaWxkcmVuWzBdKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbGVtLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChnKTtcbiAgICAgIHRoaXMubWFza2VyID0gbWFzaztcbiAgICAgIGdyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICcjZmZmJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMTBdLnAudiA9PT0gMSB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMTBdLnAudiA9PT0gMikge1xuICAgICAgaWYgKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52ID09PSAyKSB7XG4gICAgICAgIGVsZW1DaGlsZHJlbiA9IHRoaXMuZWxlbS5sYXllckVsZW1lbnQuY2hpbGRyZW4gfHwgdGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZE5vZGVzO1xuXG4gICAgICAgIHdoaWxlIChlbGVtQ2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5lbGVtLmxheWVyRWxlbWVudC5yZW1vdmVDaGlsZChlbGVtQ2hpbGRyZW5bMF0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWxlbS5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoZ3JvdXBQYXRoKTtcbiAgICAgIHRoaXMuZWxlbS5sYXllckVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdtYXNrJyk7XG4gICAgICBncm91cFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnI2ZmZicpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHRoaXMucGF0aE1hc2tlciA9IGdyb3VwUGF0aDtcbiAgfTtcblxuICBTVkdTdHJva2VFZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5wYXRocy5sZW5ndGg7XG4gICAgdmFyIG1hc2s7XG4gICAgdmFyIHBhdGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLnBhdGhzW2ldLm0gIT09IC0xKSB7XG4gICAgICAgIG1hc2sgPSB0aGlzLmVsZW0ubWFza01hbmFnZXIudmlld0RhdGFbdGhpcy5wYXRoc1tpXS5tXTtcbiAgICAgICAgcGF0aCA9IHRoaXMucGF0aHNbaV0ucDtcblxuICAgICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYgfHwgbWFzay5wcm9wLl9tZGYpIHtcbiAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnZCcsIG1hc2subGFzdFBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s5XS5wLl9tZGYgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAuX21kZiB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbN10ucC5fbWRmIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s4XS5wLl9tZGYgfHwgbWFzay5wcm9wLl9tZGYpIHtcbiAgICAgICAgICB2YXIgZGFzaGFycmF5VmFsdWU7XG5cbiAgICAgICAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzddLnAudiAhPT0gMCB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOF0ucC52ICE9PSAxMDApIHtcbiAgICAgICAgICAgIHZhciBzID0gTWF0aC5taW4odGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzddLnAudiwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzhdLnAudikgKiAwLjAxO1xuICAgICAgICAgICAgdmFyIGUgPSBNYXRoLm1heCh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbN10ucC52LCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOF0ucC52KSAqIDAuMDE7XG4gICAgICAgICAgICB2YXIgbCA9IHBhdGguZ2V0VG90YWxMZW5ndGgoKTtcbiAgICAgICAgICAgIGRhc2hhcnJheVZhbHVlID0gJzAgMCAwICcgKyBsICogcyArICcgJztcbiAgICAgICAgICAgIHZhciBsaW5lTGVuZ3RoID0gbCAqIChlIC0gcyk7XG4gICAgICAgICAgICB2YXIgc2VnbWVudCA9IDEgKyB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52ICogMiAqIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s5XS5wLnYgKiAwLjAxO1xuICAgICAgICAgICAgdmFyIHVuaXRzID0gTWF0aC5mbG9vcihsaW5lTGVuZ3RoIC8gc2VnbWVudCk7XG4gICAgICAgICAgICB2YXIgajtcblxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHVuaXRzOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgZGFzaGFycmF5VmFsdWUgKz0gJzEgJyArIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLnYgKiAyICogdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzldLnAudiAqIDAuMDEgKyAnICc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhc2hhcnJheVZhbHVlICs9ICcwICcgKyBsICogMTAgKyAnIDAgMCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhc2hhcnJheVZhbHVlID0gJzEgJyArIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLnYgKiAyICogdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzldLnAudiAqIDAuMDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBkYXNoYXJyYXlWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAuX21kZikge1xuICAgICAgdGhpcy5wYXRoTWFza2VyLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAudiAqIDIpO1xuICAgIH1cblxuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNl0ucC5fbWRmKSB7XG4gICAgICB0aGlzLnBhdGhNYXNrZXIuc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzZdLnAudik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52ID09PSAxIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52ID09PSAyKSB7XG4gICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzNdLnAuX21kZikge1xuICAgICAgICB2YXIgY29sb3IgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbM10ucC52O1xuICAgICAgICB0aGlzLnBhdGhNYXNrZXIuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAncmdiKCcgKyBibUZsb29yKGNvbG9yWzBdICogMjU1KSArICcsJyArIGJtRmxvb3IoY29sb3JbMV0gKiAyNTUpICsgJywnICsgYm1GbG9vcihjb2xvclsyXSAqIDI1NSkgKyAnKScpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdUcml0b25lRmlsdGVyKGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQpIHtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHZhciBmZUNvbG9yTWF0cml4ID0gY3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsICdtYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ2xpbmVhclJHQicpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCAnMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMCAwIDAgMSAwJyk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29sb3JNYXRyaXgpO1xuICAgIHZhciBmZUNvbXBvbmVudFRyYW5zZmVyID0gY3JlYXRlTlMoJ2ZlQ29tcG9uZW50VHJhbnNmZXInKTtcbiAgICBmZUNvbXBvbmVudFRyYW5zZmVyLnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ3NSR0InKTtcbiAgICBmZUNvbXBvbmVudFRyYW5zZmVyLnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQpO1xuICAgIHRoaXMubWF0cml4RmlsdGVyID0gZmVDb21wb25lbnRUcmFuc2ZlcjtcbiAgICB2YXIgZmVGdW5jUiA9IGNyZWF0ZU5TKCdmZUZ1bmNSJyk7XG4gICAgZmVGdW5jUi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGFibGUnKTtcbiAgICBmZUNvbXBvbmVudFRyYW5zZmVyLmFwcGVuZENoaWxkKGZlRnVuY1IpO1xuICAgIHRoaXMuZmVGdW5jUiA9IGZlRnVuY1I7XG4gICAgdmFyIGZlRnVuY0cgPSBjcmVhdGVOUygnZmVGdW5jRycpO1xuICAgIGZlRnVuY0cuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RhYmxlJyk7XG4gICAgZmVDb21wb25lbnRUcmFuc2Zlci5hcHBlbmRDaGlsZChmZUZ1bmNHKTtcbiAgICB0aGlzLmZlRnVuY0cgPSBmZUZ1bmNHO1xuICAgIHZhciBmZUZ1bmNCID0gY3JlYXRlTlMoJ2ZlRnVuY0InKTtcbiAgICBmZUZ1bmNCLnNldEF0dHJpYnV0ZSgndHlwZScsICd0YWJsZScpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuYXBwZW5kQ2hpbGQoZmVGdW5jQik7XG4gICAgdGhpcy5mZUZ1bmNCID0gZmVGdW5jQjtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gIH1cblxuICBTVkdUcml0b25lRmlsdGVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZVJlbmRlcikge1xuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZikge1xuICAgICAgdmFyIGNvbG9yMSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLnY7XG4gICAgICB2YXIgY29sb3IyID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAudjtcbiAgICAgIHZhciBjb2xvcjMgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52O1xuICAgICAgdmFyIHRhYmxlUiA9IGNvbG9yM1swXSArICcgJyArIGNvbG9yMlswXSArICcgJyArIGNvbG9yMVswXTtcbiAgICAgIHZhciB0YWJsZUcgPSBjb2xvcjNbMV0gKyAnICcgKyBjb2xvcjJbMV0gKyAnICcgKyBjb2xvcjFbMV07XG4gICAgICB2YXIgdGFibGVCID0gY29sb3IzWzJdICsgJyAnICsgY29sb3IyWzJdICsgJyAnICsgY29sb3IxWzJdO1xuICAgICAgdGhpcy5mZUZ1bmNSLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB0YWJsZVIpO1xuICAgICAgdGhpcy5mZUZ1bmNHLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB0YWJsZUcpO1xuICAgICAgdGhpcy5mZUZ1bmNCLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB0YWJsZUIpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdQcm9MZXZlbHNGaWx0ZXIoZmlsdGVyLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtLCBpZCkge1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdmFyIGVmZmVjdEVsZW1lbnRzID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzO1xuICAgIHZhciBmZUNvbXBvbmVudFRyYW5zZmVyID0gY3JlYXRlTlMoJ2ZlQ29tcG9uZW50VHJhbnNmZXInKTsgLy8gUmVkXG5cbiAgICBpZiAoZWZmZWN0RWxlbWVudHNbMTBdLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxMF0ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzExXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTFdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1sxMl0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzEyXS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMTNdLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxM10ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzE0XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTRdLnAudiAhPT0gMSkge1xuICAgICAgdGhpcy5mZUZ1bmNSID0gdGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY1InLCBmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICB9IC8vIEdyZWVuXG5cblxuICAgIGlmIChlZmZlY3RFbGVtZW50c1sxN10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzE3XS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMThdLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxOF0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzE5XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTldLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1syMF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzIwXS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMjFdLnAuayB8fCBlZmZlY3RFbGVtZW50c1syMV0ucC52ICE9PSAxKSB7XG4gICAgICB0aGlzLmZlRnVuY0cgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jRycsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgIH0gLy8gQmx1ZVxuXG5cbiAgICBpZiAoZWZmZWN0RWxlbWVudHNbMjRdLnAuayB8fCBlZmZlY3RFbGVtZW50c1syNF0ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzI1XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjVdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1syNl0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzI2XS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMjddLnAuayB8fCBlZmZlY3RFbGVtZW50c1syN10ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzI4XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjhdLnAudiAhPT0gMSkge1xuICAgICAgdGhpcy5mZUZ1bmNCID0gdGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY0InLCBmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICB9IC8vIEFscGhhXG5cblxuICAgIGlmIChlZmZlY3RFbGVtZW50c1szMV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzMxXS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMzJdLnAuayB8fCBlZmZlY3RFbGVtZW50c1szMl0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzMzXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMzNdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1szNF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzM0XS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMzVdLnAuayB8fCBlZmZlY3RFbGVtZW50c1szNV0ucC52ICE9PSAxKSB7XG4gICAgICB0aGlzLmZlRnVuY0EgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jQScsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgIH0gLy8gUkdCXG5cblxuICAgIGlmICh0aGlzLmZlRnVuY1IgfHwgdGhpcy5mZUZ1bmNHIHx8IHRoaXMuZmVGdW5jQiB8fCB0aGlzLmZlRnVuY0EpIHtcbiAgICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgIH1cblxuICAgIGlmIChlZmZlY3RFbGVtZW50c1szXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbM10ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzRdLnAuayB8fCBlZmZlY3RFbGVtZW50c1s0XS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbNV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzVdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1s2XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbNl0ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzddLnAuayB8fCBlZmZlY3RFbGVtZW50c1s3XS5wLnYgIT09IDEpIHtcbiAgICAgIGZlQ29tcG9uZW50VHJhbnNmZXIgPSBjcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpO1xuICAgICAgZmVDb21wb25lbnRUcmFuc2Zlci5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgICBmZUNvbXBvbmVudFRyYW5zZmVyLnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQpO1xuICAgICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgICAgdGhpcy5mZUZ1bmNSQ29tcG9zZWQgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jUicsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgICAgdGhpcy5mZUZ1bmNHQ29tcG9zZWQgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jRycsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgICAgdGhpcy5mZUZ1bmNCQ29tcG9zZWQgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jQicsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgIH1cbiAgfVxuXG4gIFNWR1Byb0xldmVsc0ZpbHRlci5wcm90b3R5cGUuY3JlYXRlRmVGdW5jID0gZnVuY3Rpb24gKHR5cGUsIGZlQ29tcG9uZW50VHJhbnNmZXIpIHtcbiAgICB2YXIgZmVGdW5jID0gY3JlYXRlTlModHlwZSk7XG4gICAgZmVGdW5jLnNldEF0dHJpYnV0ZSgndHlwZScsICd0YWJsZScpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuYXBwZW5kQ2hpbGQoZmVGdW5jKTtcbiAgICByZXR1cm4gZmVGdW5jO1xuICB9O1xuXG4gIFNWR1Byb0xldmVsc0ZpbHRlci5wcm90b3R5cGUuZ2V0VGFibGVWYWx1ZSA9IGZ1bmN0aW9uIChpbnB1dEJsYWNrLCBpbnB1dFdoaXRlLCBnYW1tYSwgb3V0cHV0QmxhY2ssIG91dHB1dFdoaXRlKSB7XG4gICAgdmFyIGNudCA9IDA7XG4gICAgdmFyIHNlZ21lbnRzID0gMjU2O1xuICAgIHZhciBwZXJjO1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbihpbnB1dEJsYWNrLCBpbnB1dFdoaXRlKTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgoaW5wdXRCbGFjaywgaW5wdXRXaGl0ZSk7XG4gICAgdmFyIHRhYmxlID0gQXJyYXkuY2FsbChudWxsLCB7XG4gICAgICBsZW5ndGg6IHNlZ21lbnRzXG4gICAgfSk7XG4gICAgdmFyIGNvbG9yVmFsdWU7XG4gICAgdmFyIHBvcyA9IDA7XG4gICAgdmFyIG91dHB1dERlbHRhID0gb3V0cHV0V2hpdGUgLSBvdXRwdXRCbGFjaztcbiAgICB2YXIgaW5wdXREZWx0YSA9IGlucHV0V2hpdGUgLSBpbnB1dEJsYWNrO1xuXG4gICAgd2hpbGUgKGNudCA8PSAyNTYpIHtcbiAgICAgIHBlcmMgPSBjbnQgLyAyNTY7XG5cbiAgICAgIGlmIChwZXJjIDw9IG1pbikge1xuICAgICAgICBjb2xvclZhbHVlID0gaW5wdXREZWx0YSA8IDAgPyBvdXRwdXRXaGl0ZSA6IG91dHB1dEJsYWNrO1xuICAgICAgfSBlbHNlIGlmIChwZXJjID49IG1heCkge1xuICAgICAgICBjb2xvclZhbHVlID0gaW5wdXREZWx0YSA8IDAgPyBvdXRwdXRCbGFjayA6IG91dHB1dFdoaXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sb3JWYWx1ZSA9IG91dHB1dEJsYWNrICsgb3V0cHV0RGVsdGEgKiBNYXRoLnBvdygocGVyYyAtIGlucHV0QmxhY2spIC8gaW5wdXREZWx0YSwgMSAvIGdhbW1hKTtcbiAgICAgIH1cblxuICAgICAgdGFibGVbcG9zXSA9IGNvbG9yVmFsdWU7XG4gICAgICBwb3MgKz0gMTtcbiAgICAgIGNudCArPSAyNTYgLyAoc2VnbWVudHMgLSAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFibGUuam9pbignICcpO1xuICB9O1xuXG4gIFNWR1Byb0xldmVsc0ZpbHRlci5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIHZhciB2YWw7XG4gICAgICB2YXIgZWZmZWN0RWxlbWVudHMgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHM7XG5cbiAgICAgIGlmICh0aGlzLmZlRnVuY1JDb21wb3NlZCAmJiAoZm9yY2VSZW5kZXIgfHwgZWZmZWN0RWxlbWVudHNbM10ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzRdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1s1XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbNl0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzddLnAuX21kZikpIHtcbiAgICAgICAgdmFsID0gdGhpcy5nZXRUYWJsZVZhbHVlKGVmZmVjdEVsZW1lbnRzWzNdLnAudiwgZWZmZWN0RWxlbWVudHNbNF0ucC52LCBlZmZlY3RFbGVtZW50c1s1XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzZdLnAudiwgZWZmZWN0RWxlbWVudHNbN10ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNSQ29tcG9zZWQuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHZhbCk7XG4gICAgICAgIHRoaXMuZmVGdW5jR0NvbXBvc2VkLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgICB0aGlzLmZlRnVuY0JDb21wb3NlZC5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdmFsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmVGdW5jUiAmJiAoZm9yY2VSZW5kZXIgfHwgZWZmZWN0RWxlbWVudHNbMTBdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1sxMV0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzEyXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMTNdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1sxNF0ucC5fbWRmKSkge1xuICAgICAgICB2YWwgPSB0aGlzLmdldFRhYmxlVmFsdWUoZWZmZWN0RWxlbWVudHNbMTBdLnAudiwgZWZmZWN0RWxlbWVudHNbMTFdLnAudiwgZWZmZWN0RWxlbWVudHNbMTJdLnAudiwgZWZmZWN0RWxlbWVudHNbMTNdLnAudiwgZWZmZWN0RWxlbWVudHNbMTRdLnAudik7XG4gICAgICAgIHRoaXMuZmVGdW5jUi5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdmFsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmVGdW5jRyAmJiAoZm9yY2VSZW5kZXIgfHwgZWZmZWN0RWxlbWVudHNbMTddLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1sxOF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzE5XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMjBdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1syMV0ucC5fbWRmKSkge1xuICAgICAgICB2YWwgPSB0aGlzLmdldFRhYmxlVmFsdWUoZWZmZWN0RWxlbWVudHNbMTddLnAudiwgZWZmZWN0RWxlbWVudHNbMThdLnAudiwgZWZmZWN0RWxlbWVudHNbMTldLnAudiwgZWZmZWN0RWxlbWVudHNbMjBdLnAudiwgZWZmZWN0RWxlbWVudHNbMjFdLnAudik7XG4gICAgICAgIHRoaXMuZmVGdW5jRy5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdmFsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmVGdW5jQiAmJiAoZm9yY2VSZW5kZXIgfHwgZWZmZWN0RWxlbWVudHNbMjRdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1syNV0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzI2XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMjddLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1syOF0ucC5fbWRmKSkge1xuICAgICAgICB2YWwgPSB0aGlzLmdldFRhYmxlVmFsdWUoZWZmZWN0RWxlbWVudHNbMjRdLnAudiwgZWZmZWN0RWxlbWVudHNbMjVdLnAudiwgZWZmZWN0RWxlbWVudHNbMjZdLnAudiwgZWZmZWN0RWxlbWVudHNbMjddLnAudiwgZWZmZWN0RWxlbWVudHNbMjhdLnAudik7XG4gICAgICAgIHRoaXMuZmVGdW5jQi5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdmFsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmVGdW5jQSAmJiAoZm9yY2VSZW5kZXIgfHwgZWZmZWN0RWxlbWVudHNbMzFdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1szMl0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzMzXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMzRdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1szNV0ucC5fbWRmKSkge1xuICAgICAgICB2YWwgPSB0aGlzLmdldFRhYmxlVmFsdWUoZWZmZWN0RWxlbWVudHNbMzFdLnAudiwgZWZmZWN0RWxlbWVudHNbMzJdLnAudiwgZWZmZWN0RWxlbWVudHNbMzNdLnAudiwgZWZmZWN0RWxlbWVudHNbMzRdLnAudiwgZWZmZWN0RWxlbWVudHNbMzVdLnAudik7XG4gICAgICAgIHRoaXMuZmVGdW5jQS5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHRHJvcFNoYWRvd0VmZmVjdChmaWx0ZXIsIGZpbHRlck1hbmFnZXIsIGVsZW0sIGlkLCBzb3VyY2UpIHtcbiAgICB2YXIgZ2xvYmFsRmlsdGVyU2l6ZSA9IGZpbHRlck1hbmFnZXIuY29udGFpbmVyLmdsb2JhbERhdGEucmVuZGVyQ29uZmlnLmZpbHRlclNpemU7XG4gICAgdmFyIGZpbHRlclNpemUgPSBmaWx0ZXJNYW5hZ2VyLmRhdGEuZnMgfHwgZ2xvYmFsRmlsdGVyU2l6ZTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCd4JywgZmlsdGVyU2l6ZS54IHx8IGdsb2JhbEZpbHRlclNpemUueCk7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgneScsIGZpbHRlclNpemUueSB8fCBnbG9iYWxGaWx0ZXJTaXplLnkpO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgZmlsdGVyU2l6ZS53aWR0aCB8fCBnbG9iYWxGaWx0ZXJTaXplLndpZHRoKTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBmaWx0ZXJTaXplLmhlaWdodCB8fCBnbG9iYWxGaWx0ZXJTaXplLmhlaWdodCk7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB2YXIgZmVHYXVzc2lhbkJsdXIgPSBjcmVhdGVOUygnZmVHYXVzc2lhbkJsdXInKTtcbiAgICBmZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ2luJywgJ1NvdXJjZUFscGhhJyk7XG4gICAgZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCArICdfZHJvcF9zaGFkb3dfMScpO1xuICAgIGZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgnc3RkRGV2aWF0aW9uJywgJzAnKTtcbiAgICB0aGlzLmZlR2F1c3NpYW5CbHVyID0gZmVHYXVzc2lhbkJsdXI7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlR2F1c3NpYW5CbHVyKTtcbiAgICB2YXIgZmVPZmZzZXQgPSBjcmVhdGVOUygnZmVPZmZzZXQnKTtcbiAgICBmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R4JywgJzI1Jyk7XG4gICAgZmVPZmZzZXQuc2V0QXR0cmlidXRlKCdkeScsICcwJyk7XG4gICAgZmVPZmZzZXQuc2V0QXR0cmlidXRlKCdpbicsIGlkICsgJ19kcm9wX3NoYWRvd18xJyk7XG4gICAgZmVPZmZzZXQuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCArICdfZHJvcF9zaGFkb3dfMicpO1xuICAgIHRoaXMuZmVPZmZzZXQgPSBmZU9mZnNldDtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVPZmZzZXQpO1xuICAgIHZhciBmZUZsb29kID0gY3JlYXRlTlMoJ2ZlRmxvb2QnKTtcbiAgICBmZUZsb29kLnNldEF0dHJpYnV0ZSgnZmxvb2QtY29sb3InLCAnIzAwZmYwMCcpO1xuICAgIGZlRmxvb2Quc2V0QXR0cmlidXRlKCdmbG9vZC1vcGFjaXR5JywgJzEnKTtcbiAgICBmZUZsb29kLnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQgKyAnX2Ryb3Bfc2hhZG93XzMnKTtcbiAgICB0aGlzLmZlRmxvb2QgPSBmZUZsb29kO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUZsb29kKTtcbiAgICB2YXIgZmVDb21wb3NpdGUgPSBjcmVhdGVOUygnZmVDb21wb3NpdGUnKTtcbiAgICBmZUNvbXBvc2l0ZS5zZXRBdHRyaWJ1dGUoJ2luJywgaWQgKyAnX2Ryb3Bfc2hhZG93XzMnKTtcbiAgICBmZUNvbXBvc2l0ZS5zZXRBdHRyaWJ1dGUoJ2luMicsIGlkICsgJ19kcm9wX3NoYWRvd18yJyk7XG4gICAgZmVDb21wb3NpdGUuc2V0QXR0cmlidXRlKCdvcGVyYXRvcicsICdpbicpO1xuICAgIGZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQgKyAnX2Ryb3Bfc2hhZG93XzQnKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb21wb3NpdGUpO1xuICAgIHZhciBmZU1lcmdlID0gdGhpcy5jcmVhdGVNZXJnZU5vZGUoaWQsIFtpZCArICdfZHJvcF9zaGFkb3dfNCcsIHNvdXJjZV0pO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZU1lcmdlKTsgLy9cbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU1ZHQ29tcG9zYWJsZUVmZmVjdF0sIFNWR0Ryb3BTaGFkb3dFZmZlY3QpO1xuXG4gIFNWR0Ryb3BTaGFkb3dFZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKSB7XG4gICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAuX21kZikge1xuICAgICAgICB0aGlzLmZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgnc3RkRGV2aWF0aW9uJywgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAudiAvIDQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAuX21kZikge1xuICAgICAgICB2YXIgY29sID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjtcbiAgICAgICAgdGhpcy5mZUZsb29kLnNldEF0dHJpYnV0ZSgnZmxvb2QtY29sb3InLCByZ2JUb0hleChNYXRoLnJvdW5kKGNvbFswXSAqIDI1NSksIE1hdGgucm91bmQoY29sWzFdICogMjU1KSwgTWF0aC5yb3VuZChjb2xbMl0gKiAyNTUpKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMV0ucC5fbWRmKSB7XG4gICAgICAgIHRoaXMuZmVGbG9vZC5zZXRBdHRyaWJ1dGUoJ2Zsb29kLW9wYWNpdHknLCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMV0ucC52IC8gMjU1KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLl9tZGYgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzNdLnAuX21kZikge1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbM10ucC52O1xuICAgICAgICB2YXIgYW5nbGUgPSAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudiAtIDkwKSAqIGRlZ1RvUmFkcztcbiAgICAgICAgdmFyIHggPSBkaXN0YW5jZSAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgdmFyIHkgPSBkaXN0YW5jZSAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdGhpcy5mZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R4JywgeCk7XG4gICAgICAgIHRoaXMuZmVPZmZzZXQuc2V0QXR0cmlidXRlKCdkeScsIHkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgX3N2Z01hdHRlU3ltYm9scyA9IFtdO1xuXG4gIGZ1bmN0aW9uIFNWR01hdHRlM0VmZmVjdChmaWx0ZXJFbGVtLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtKSB7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdGhpcy5maWx0ZXJFbGVtID0gZmlsdGVyRWxlbTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIGVsZW0ubWF0dGVFbGVtZW50ID0gY3JlYXRlTlMoJ2cnKTtcbiAgICBlbGVtLm1hdHRlRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtLmxheWVyRWxlbWVudCk7XG4gICAgZWxlbS5tYXR0ZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbS50cmFuc2Zvcm1lZEVsZW1lbnQpO1xuICAgIGVsZW0uYmFzZUVsZW1lbnQgPSBlbGVtLm1hdHRlRWxlbWVudDtcbiAgfVxuXG4gIFNWR01hdHRlM0VmZmVjdC5wcm90b3R5cGUuZmluZFN5bWJvbCA9IGZ1bmN0aW9uIChtYXNrKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBfc3ZnTWF0dGVTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAoX3N2Z01hdHRlU3ltYm9sc1tpXSA9PT0gbWFzaykge1xuICAgICAgICByZXR1cm4gX3N2Z01hdHRlU3ltYm9sc1tpXTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIFNWR01hdHRlM0VmZmVjdC5wcm90b3R5cGUucmVwbGFjZUluUGFyZW50ID0gZnVuY3Rpb24gKG1hc2ssIHN5bWJvbElkKSB7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBtYXNrLmxheWVyRWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gcGFyZW50Tm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAoY2hpbGRyZW5baV0gPT09IG1hc2subGF5ZXJFbGVtZW50KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgdmFyIG5leHRDaGlsZDtcblxuICAgIGlmIChpIDw9IGxlbiAtIDIpIHtcbiAgICAgIG5leHRDaGlsZCA9IGNoaWxkcmVuW2kgKyAxXTtcbiAgICB9XG5cbiAgICB2YXIgdXNlRWxlbSA9IGNyZWF0ZU5TKCd1c2UnKTtcbiAgICB1c2VFbGVtLnNldEF0dHJpYnV0ZSgnaHJlZicsICcjJyArIHN5bWJvbElkKTtcblxuICAgIGlmIChuZXh0Q2hpbGQpIHtcbiAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHVzZUVsZW0sIG5leHRDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodXNlRWxlbSk7XG4gICAgfVxuICB9O1xuXG4gIFNWR01hdHRlM0VmZmVjdC5wcm90b3R5cGUuc2V0RWxlbWVudEFzTWFzayA9IGZ1bmN0aW9uIChlbGVtLCBtYXNrKSB7XG4gICAgaWYgKCF0aGlzLmZpbmRTeW1ib2wobWFzaykpIHtcbiAgICAgIHZhciBzeW1ib2xJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgdmFyIG1hc2tlciA9IGNyZWF0ZU5TKCdtYXNrJyk7XG4gICAgICBtYXNrZXIuc2V0QXR0cmlidXRlKCdpZCcsIG1hc2subGF5ZXJJZCk7XG4gICAgICBtYXNrZXIuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnYWxwaGEnKTtcblxuICAgICAgX3N2Z01hdHRlU3ltYm9scy5wdXNoKG1hc2spO1xuXG4gICAgICB2YXIgZGVmcyA9IGVsZW0uZ2xvYmFsRGF0YS5kZWZzO1xuICAgICAgZGVmcy5hcHBlbmRDaGlsZChtYXNrZXIpO1xuICAgICAgdmFyIHN5bWJvbCA9IGNyZWF0ZU5TKCdzeW1ib2wnKTtcbiAgICAgIHN5bWJvbC5zZXRBdHRyaWJ1dGUoJ2lkJywgc3ltYm9sSWQpO1xuICAgICAgdGhpcy5yZXBsYWNlSW5QYXJlbnQobWFzaywgc3ltYm9sSWQpO1xuICAgICAgc3ltYm9sLmFwcGVuZENoaWxkKG1hc2subGF5ZXJFbGVtZW50KTtcbiAgICAgIGRlZnMuYXBwZW5kQ2hpbGQoc3ltYm9sKTtcbiAgICAgIHZhciB1c2VFbGVtID0gY3JlYXRlTlMoJ3VzZScpO1xuICAgICAgdXNlRWxlbS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnIycgKyBzeW1ib2xJZCk7XG4gICAgICBtYXNrZXIuYXBwZW5kQ2hpbGQodXNlRWxlbSk7XG4gICAgICBtYXNrLmRhdGEuaGQgPSBmYWxzZTtcbiAgICAgIG1hc2suc2hvdygpO1xuICAgIH1cblxuICAgIGVsZW0uc2V0TWF0dGUobWFzay5sYXllcklkKTtcbiAgfTtcblxuICBTVkdNYXR0ZTNFZmZlY3QucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluZCA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLnY7XG4gICAgdmFyIGVsZW1lbnRzID0gdGhpcy5lbGVtLmNvbXAuZWxlbWVudHM7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKGVsZW1lbnRzW2ldICYmIGVsZW1lbnRzW2ldLmRhdGEuaW5kID09PSBpbmQpIHtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50QXNNYXNrKHRoaXMuZWxlbSwgZWxlbWVudHNbaV0pO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gIH07XG5cbiAgU1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdHYXVzc2lhbkJsdXJFZmZlY3QoZmlsdGVyLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtLCBpZCkge1xuICAgIC8vIE91dHNldCB0aGUgZmlsdGVyIHJlZ2lvbiBieSAxMDAlIG9uIGFsbCBzaWRlcyB0byBhY2NvbW1vZGF0ZSBibHVyIGV4cGFuc2lvbi5cbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCd4JywgJy0xMDAlJyk7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgneScsICctMTAwJScpO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzMwMCUnKTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMzAwJScpO1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdmFyIGZlR2F1c3NpYW5CbHVyID0gY3JlYXRlTlMoJ2ZlR2F1c3NpYW5CbHVyJyk7XG4gICAgZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlR2F1c3NpYW5CbHVyKTtcbiAgICB0aGlzLmZlR2F1c3NpYW5CbHVyID0gZmVHYXVzc2lhbkJsdXI7XG4gIH1cblxuICBTVkdHYXVzc2lhbkJsdXJFZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKSB7XG4gICAgICAvLyBFbXBpcmljYWwgdmFsdWUsIG1hdGNoaW5nIEFFJ3MgYmx1ciBhcHBlYXJhbmNlLlxuICAgICAgdmFyIGtCbHVycmluZXNzVG9TaWdtYSA9IDAuMztcbiAgICAgIHZhciBzaWdtYSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLnYgKiBrQmx1cnJpbmVzc1RvU2lnbWE7IC8vIERpbWVuc2lvbnMgbWFwcGluZzpcbiAgICAgIC8vXG4gICAgICAvLyAgIDEgLT4gaG9yaXpvbnRhbCAmIHZlcnRpY2FsXG4gICAgICAvLyAgIDIgLT4gaG9yaXpvbnRhbCBvbmx5XG4gICAgICAvLyAgIDMgLT4gdmVydGljYWwgb25seVxuICAgICAgLy9cblxuICAgICAgdmFyIGRpbWVuc2lvbnMgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMV0ucC52O1xuICAgICAgdmFyIHNpZ21hWCA9IGRpbWVuc2lvbnMgPT0gMyA/IDAgOiBzaWdtYTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcblxuICAgICAgdmFyIHNpZ21hWSA9IGRpbWVuc2lvbnMgPT0gMiA/IDAgOiBzaWdtYTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcblxuICAgICAgdGhpcy5mZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ3N0ZERldmlhdGlvbicsIHNpZ21hWCArICcgJyArIHNpZ21hWSk7IC8vIFJlcGVhdCBlZGdlcyBtYXBwaW5nOlxuICAgICAgLy9cbiAgICAgIC8vICAgMCAtPiBvZmYgLT4gZHVwbGljYXRlXG4gICAgICAvLyAgIDEgLT4gb24gIC0+IHdyYXBcblxuICAgICAgdmFyIGVkZ2VNb2RlID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudiA9PSAxID8gJ3dyYXAnIDogJ2R1cGxpY2F0ZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5cbiAgICAgIHRoaXMuZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdlZGdlTW9kZScsIGVkZ2VNb2RlKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gVHJhbnNmb3JtRWZmZWN0KCkge31cblxuICBUcmFuc2Zvcm1FZmZlY3QucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZWZmZWN0c01hbmFnZXIpIHtcbiAgICB0aGlzLmVmZmVjdHNNYW5hZ2VyID0gZWZmZWN0c01hbmFnZXI7XG4gICAgdGhpcy50eXBlID0gZWZmZWN0VHlwZXMuVFJBTlNGT1JNX0VGRkVDVDtcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLm9wYWNpdHkgPSAtMTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9vcE1kZiA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zZm9ybUVmZmVjdC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VGcmFtZSkge1xuICAgIHRoaXMuX29wTWRmID0gZmFsc2U7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG5cbiAgICBpZiAoZm9yY2VGcmFtZSB8fCB0aGlzLmVmZmVjdHNNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIHZhciBlZmZlY3RFbGVtZW50cyA9IHRoaXMuZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHM7XG4gICAgICB2YXIgYW5jaG9yID0gZWZmZWN0RWxlbWVudHNbMF0ucC52O1xuICAgICAgdmFyIHBvc2l0aW9uID0gZWZmZWN0RWxlbWVudHNbMV0ucC52O1xuICAgICAgdmFyIGlzVW5pZm9ybVNjYWxlID0gZWZmZWN0RWxlbWVudHNbMl0ucC52ID09PSAxO1xuICAgICAgdmFyIHNjYWxlSGVpZ2h0ID0gZWZmZWN0RWxlbWVudHNbM10ucC52O1xuICAgICAgdmFyIHNjYWxlV2lkdGggPSBpc1VuaWZvcm1TY2FsZSA/IHNjYWxlSGVpZ2h0IDogZWZmZWN0RWxlbWVudHNbNF0ucC52O1xuICAgICAgdmFyIHNrZXcgPSBlZmZlY3RFbGVtZW50c1s1XS5wLnY7XG4gICAgICB2YXIgc2tld0F4aXMgPSBlZmZlY3RFbGVtZW50c1s2XS5wLnY7XG4gICAgICB2YXIgcm90YXRpb24gPSBlZmZlY3RFbGVtZW50c1s3XS5wLnY7XG4gICAgICB0aGlzLm1hdHJpeC5yZXNldCgpO1xuICAgICAgdGhpcy5tYXRyaXgudHJhbnNsYXRlKC1hbmNob3JbMF0sIC1hbmNob3JbMV0sIGFuY2hvclsyXSk7XG4gICAgICB0aGlzLm1hdHJpeC5zY2FsZShzY2FsZVdpZHRoICogMC4wMSwgc2NhbGVIZWlnaHQgKiAwLjAxLCAxKTtcbiAgICAgIHRoaXMubWF0cml4LnJvdGF0ZSgtcm90YXRpb24gKiBkZWdUb1JhZHMpO1xuICAgICAgdGhpcy5tYXRyaXguc2tld0Zyb21BeGlzKC1za2V3ICogZGVnVG9SYWRzLCAoc2tld0F4aXMgKyA5MCkgKiBkZWdUb1JhZHMpO1xuICAgICAgdGhpcy5tYXRyaXgudHJhbnNsYXRlKHBvc2l0aW9uWzBdLCBwb3NpdGlvblsxXSwgMCk7XG4gICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5vcGFjaXR5ICE9PSBlZmZlY3RFbGVtZW50c1s4XS5wLnYpIHtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gZWZmZWN0RWxlbWVudHNbOF0ucC52O1xuICAgICAgICB0aGlzLl9vcE1kZiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1RyYW5zZm9ybUVmZmVjdChfLCBmaWx0ZXJNYW5hZ2VyKSB7XG4gICAgdGhpcy5pbml0KGZpbHRlck1hbmFnZXIpO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtUcmFuc2Zvcm1FZmZlY3RdLCBTVkdUcmFuc2Zvcm1FZmZlY3QpO1xuXG4gIGZ1bmN0aW9uIENWVHJhbnNmb3JtRWZmZWN0KGVmZmVjdHNNYW5hZ2VyKSB7XG4gICAgdGhpcy5pbml0KGVmZmVjdHNNYW5hZ2VyKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbVHJhbnNmb3JtRWZmZWN0XSwgQ1ZUcmFuc2Zvcm1FZmZlY3QpO1xuXG4gIHJlZ2lzdGVyUmVuZGVyZXIoJ2NhbnZhcycsIENhbnZhc1JlbmRlcmVyKTtcbiAgcmVnaXN0ZXJSZW5kZXJlcignaHRtbCcsIEh5YnJpZFJlbmRlcmVyKTtcbiAgcmVnaXN0ZXJSZW5kZXJlcignc3ZnJywgU1ZHUmVuZGVyZXIpOyAvLyBSZWdpc3RlcmluZyBzaGFwZSBtb2RpZmllcnNcblxuICBTaGFwZU1vZGlmaWVycy5yZWdpc3Rlck1vZGlmaWVyKCd0bScsIFRyaW1Nb2RpZmllcik7XG4gIFNoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ3BiJywgUHVja2VyQW5kQmxvYXRNb2RpZmllcik7XG4gIFNoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ3JwJywgUmVwZWF0ZXJNb2RpZmllcik7XG4gIFNoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ3JkJywgUm91bmRDb3JuZXJzTW9kaWZpZXIpO1xuICBTaGFwZU1vZGlmaWVycy5yZWdpc3Rlck1vZGlmaWVyKCd6eicsIFppZ1phZ01vZGlmaWVyKTtcbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcignb3AnLCBPZmZzZXRQYXRoTW9kaWZpZXIpOyAvLyBSZWdpc3RlcmluZyBleHByZXNzaW9uIHBsdWdpblxuXG4gIHNldEV4cHJlc3Npb25zUGx1Z2luKEV4cHJlc3Npb25zKTtcbiAgc2V0RXhwcmVzc2lvbkludGVyZmFjZXMoZ2V0SW50ZXJmYWNlKTtcbiAgaW5pdGlhbGl6ZSQxKCk7XG4gIGluaXRpYWxpemUoKTsgLy8gUmVnaXN0ZXJpbmcgc3ZnIGVmZmVjdHNcblxuICByZWdpc3RlckVmZmVjdCQxKDIwLCBTVkdUaW50RmlsdGVyLCB0cnVlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyMSwgU1ZHRmlsbEZpbHRlciwgdHJ1ZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjIsIFNWR1N0cm9rZUVmZmVjdCwgZmFsc2UpO1xuICByZWdpc3RlckVmZmVjdCQxKDIzLCBTVkdUcml0b25lRmlsdGVyLCB0cnVlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyNCwgU1ZHUHJvTGV2ZWxzRmlsdGVyLCB0cnVlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyNSwgU1ZHRHJvcFNoYWRvd0VmZmVjdCwgdHJ1ZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjgsIFNWR01hdHRlM0VmZmVjdCwgZmFsc2UpO1xuICByZWdpc3RlckVmZmVjdCQxKDI5LCBTVkdHYXVzc2lhbkJsdXJFZmZlY3QsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDM1LCBTVkdUcmFuc2Zvcm1FZmZlY3QsIGZhbHNlKTtcbiAgcmVnaXN0ZXJFZmZlY3QoMzUsIENWVHJhbnNmb3JtRWZmZWN0KTtcblxuICByZXR1cm4gbG90dGllO1xuXG59KSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9sb3R0aWVXZWIgPSByZXF1aXJlKCdsb3R0aWUtd2ViJyk7XG5cbnZhciBfbG90dGllV2ViMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvdHRpZVdlYik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBMb3R0aWUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShMb3R0aWUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExvdHRpZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBMb3R0aWUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gTG90dGllLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShMb3R0aWUpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGlja1RvUGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUaGUgcGF1c2UoKSBtZXRob2QgaXMgZm9yIGhhbmRsaW5nIHBhdXNpbmcgYnkgcGFzc2luZyBhIHByb3AgaXNQYXVzZWRcbiAgICAgIC8vIFRoaXMgbWV0aG9kIGlzIGZvciBoYW5kbGluZyB0aGUgYWJpbGl0eSB0byBwYXVzZSBieSBjbGlja2luZyBvbiB0aGUgYW5pbWF0aW9uXG4gICAgICBpZiAoX3RoaXMuYW5pbS5pc1BhdXNlZCkge1xuICAgICAgICBfdGhpcy5hbmltLnBsYXkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmFuaW0ucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoTG90dGllLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcHRpb25zID0gX3Byb3BzLm9wdGlvbnMsXG4gICAgICAgICAgZXZlbnRMaXN0ZW5lcnMgPSBfcHJvcHMuZXZlbnRMaXN0ZW5lcnM7XG4gICAgICB2YXIgbG9vcCA9IG9wdGlvbnMubG9vcCxcbiAgICAgICAgICBhdXRvcGxheSA9IG9wdGlvbnMuYXV0b3BsYXksXG4gICAgICAgICAgYW5pbWF0aW9uRGF0YSA9IG9wdGlvbnMuYW5pbWF0aW9uRGF0YSxcbiAgICAgICAgICByZW5kZXJlclNldHRpbmdzID0gb3B0aW9ucy5yZW5kZXJlclNldHRpbmdzLFxuICAgICAgICAgIHNlZ21lbnRzID0gb3B0aW9ucy5zZWdtZW50cztcblxuXG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgIGNvbnRhaW5lcjogdGhpcy5lbCxcbiAgICAgICAgcmVuZGVyZXI6ICdzdmcnLFxuICAgICAgICBsb29wOiBsb29wICE9PSBmYWxzZSxcbiAgICAgICAgYXV0b3BsYXk6IGF1dG9wbGF5ICE9PSBmYWxzZSxcbiAgICAgICAgc2VnbWVudHM6IHNlZ21lbnRzICE9PSBmYWxzZSxcbiAgICAgICAgYW5pbWF0aW9uRGF0YTogYW5pbWF0aW9uRGF0YSxcbiAgICAgICAgcmVuZGVyZXJTZXR0aW5nczogcmVuZGVyZXJTZXR0aW5nc1xuICAgICAgfTtcblxuICAgICAgdGhpcy5vcHRpb25zID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYW5pbSA9IF9sb3R0aWVXZWIyLmRlZmF1bHQubG9hZEFuaW1hdGlvbih0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cyhldmVudExpc3RlbmVycyk7XG4gICAgICB0aGlzLnNldFNwZWVkKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzIC8qICwgbmV4dFN0YXRlICovKSB7XG4gICAgICAvKiBSZWNyZWF0ZSB0aGUgYW5pbWF0aW9uIGhhbmRsZSBpZiB0aGUgZGF0YSBpcyBjaGFuZ2VkICovXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbkRhdGEgIT09IG5leHRQcm9wcy5vcHRpb25zLmFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgdGhpcy5kZVJlZ2lzdGVyRXZlbnRzKHRoaXMucHJvcHMuZXZlbnRMaXN0ZW5lcnMpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgdGhpcy5vcHRpb25zLCBuZXh0UHJvcHMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYW5pbSA9IF9sb3R0aWVXZWIyLmRlZmF1bHQubG9hZEFuaW1hdGlvbih0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKG5leHRQcm9wcy5ldmVudExpc3RlbmVycyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaXNTdG9wcGVkKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNlZ21lbnRzKSB7XG4gICAgICAgIHRoaXMucGxheVNlZ21lbnRzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgdGhpcy5zZXRTcGVlZCgpO1xuICAgICAgdGhpcy5zZXREaXJlY3Rpb24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5kZVJlZ2lzdGVyRXZlbnRzKHRoaXMucHJvcHMuZXZlbnRMaXN0ZW5lcnMpO1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLmFuaW0gPSBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFNwZWVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3BlZWQoKSB7XG4gICAgICB0aGlzLmFuaW0uc2V0U3BlZWQodGhpcy5wcm9wcy5zcGVlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0RGlyZWN0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGlyZWN0aW9uKCkge1xuICAgICAgdGhpcy5hbmltLnNldERpcmVjdGlvbih0aGlzLnByb3BzLmRpcmVjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGxheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmFuaW0ucGxheSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXlTZWdtZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXlTZWdtZW50cygpIHtcbiAgICAgIHRoaXMuYW5pbS5wbGF5U2VnbWVudHModGhpcy5wcm9wcy5zZWdtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmFuaW0uc3RvcCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5pc1BhdXNlZCAmJiAhdGhpcy5hbmltLmlzUGF1c2VkKSB7XG4gICAgICAgIHRoaXMuYW5pbS5wYXVzZSgpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5wcm9wcy5pc1BhdXNlZCAmJiB0aGlzLmFuaW0uaXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5hbmltLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmFuaW0uZGVzdHJveSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZ2lzdGVyRXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJFdmVudHMoZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBldmVudExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudExpc3RlbmVyKSB7XG4gICAgICAgIF90aGlzMi5hbmltLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRMaXN0ZW5lci5ldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIuY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVSZWdpc3RlckV2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlUmVnaXN0ZXJFdmVudHMoZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBldmVudExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudExpc3RlbmVyKSB7XG4gICAgICAgIF90aGlzMy5hbmltLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRMaXN0ZW5lci5ldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIuY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB3aWR0aCA9IF9wcm9wczIud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3Byb3BzMi5oZWlnaHQsXG4gICAgICAgICAgYXJpYVJvbGUgPSBfcHJvcHMyLmFyaWFSb2xlLFxuICAgICAgICAgIGFyaWFMYWJlbCA9IF9wcm9wczIuYXJpYUxhYmVsLFxuICAgICAgICAgIGlzQ2xpY2tUb1BhdXNlRGlzYWJsZWQgPSBfcHJvcHMyLmlzQ2xpY2tUb1BhdXNlRGlzYWJsZWQsXG4gICAgICAgICAgdGl0bGUgPSBfcHJvcHMyLnRpdGxlO1xuXG5cbiAgICAgIHZhciBnZXRTaXplID0gZnVuY3Rpb24gZ2V0U2l6ZShpbml0aWFsKSB7XG4gICAgICAgIHZhciBzaXplID0gdm9pZCAwO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBzaXplID0gaW5pdGlhbCArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2l6ZSA9IGluaXRpYWwgfHwgJzEwMCUnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbG90dGllU3R5bGVzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgIHdpZHRoOiBnZXRTaXplKHdpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBnZXRTaXplKGhlaWdodCksXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnXG4gICAgICB9LCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgICAgdmFyIG9uQ2xpY2tIYW5kbGVyID0gaXNDbGlja1RvUGF1c2VEaXNhYmxlZCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IDogdGhpcy5oYW5kbGVDbGlja1RvUGF1c2U7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8vIEJ1ZyB3aXRoIGVzbGludCBydWxlcyBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL2phdmFzY3JpcHQvaXNzdWVzLzEzNzRcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9uc1xuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGMpIHtcbiAgICAgICAgICAgIF90aGlzNC5lbCA9IGM7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHlsZTogbG90dGllU3R5bGVzLFxuICAgICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tIYW5kbGVyLFxuICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICByb2xlOiBhcmlhUm9sZSxcbiAgICAgICAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAgICAgICB0YWJJbmRleDogJzAnXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTG90dGllO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTG90dGllO1xuXG5cbkxvdHRpZS5wcm9wVHlwZXMgPSB7XG4gIGV2ZW50TGlzdGVuZXJzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QpLFxuICBvcHRpb25zOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgaXNTdG9wcGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGlzUGF1c2VkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNwZWVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc2VnbWVudHM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlciksXG4gIGRpcmVjdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGFyaWFSb2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgYXJpYUxhYmVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaXNDbGlja1RvUGF1c2VEaXNhYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB0aXRsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufTtcblxuTG90dGllLmRlZmF1bHRQcm9wcyA9IHtcbiAgZXZlbnRMaXN0ZW5lcnM6IFtdLFxuICBpc1N0b3BwZWQ6IGZhbHNlLFxuICBpc1BhdXNlZDogZmFsc2UsXG4gIHNwZWVkOiAxLFxuICBhcmlhUm9sZTogJ2J1dHRvbicsXG4gIGFyaWFMYWJlbDogJ2FuaW1hdGlvbicsXG4gIGlzQ2xpY2tUb1BhdXNlRGlzYWJsZWQ6IGZhbHNlLFxuICB0aXRsZTogJydcbn07IiwiLy8gTWFudWFsbHkgbW9kaWZ5IG5vZGVfbW9kdWxlcy9sb3R0aWUtd2ViL2J1aWxkL3BsYXllci9sb3R0aWUuanNcbi8vIGZyb21cbi8vIHZhciBleHByZXNzaW9uX2Z1bmN0aW9uID0gZXZhbCgnW2Z1bmN0aW9uIF9leHByZXNzaW9uX2Z1bmN0aW9uKCl7JyArIHZhbCArICc7c2NvcGVkX2JtX3J0PSRibV9ydH1dJylbMF07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuLy8gdG9cbi8vIHZhciBleHByZXNzaW9uX2Z1bmN0aW9uID0gbmV3IEZ1bmN0aW9uKCdzY29wZWRfYm1fcnQnLCB2YWwgKyAnOyByZXR1cm4gJGJtX3J0OycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcbmltcG9ydCBcIi4vdWkvTG90dGllQW5pbWF0aW9ucy5jc3NcIjtcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBMb3R0aWUgZnJvbSBcInJlYWN0LWxvdHRpZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gTG90dGllQW5pbWF0aW9ucyh7IGZpbGVWaXNpYmlsaXR5LCBsb3R0aWVGaWxlLCBpbWFnZUZ1bGxQYWdlLCBpbWFnZUhlaWdodCwgaW1hZ2VXaWR0aCB9KSB7XG4gICAgY29uc3QgW3Zpc2libGUsIHNldFZpc2libGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGZpbGVWaXNpYmlsaXR5ICYmIGZpbGVWaXNpYmlsaXR5LnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIiAmJiBmaWxlVmlzaWJpbGl0eS52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGVWaXNpYmlsaXR5ICYmIGZpbGVWaXNpYmlsaXR5LnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIiAmJiBmaWxlVmlzaWJpbGl0eS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9LCBbZmlsZVZpc2liaWxpdHksIHZpc2libGVdKTtcblxuICAgIGlmIChsb3R0aWVGaWxlKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0aW9uRGF0YTogSlNPTi5wYXJzZShsb3R0aWVGaWxlKSxcbiAgICAgICAgICAgIHJlbmRlcmVyU2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBcInhNaWRZTWlkIHNsaWNlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wibG90dGllLWFuaW1hdGlvbnMtd2lkZ2V0XCIgJiYgdmlzaWJsZSA/IFwiZnVsbC1jb250YWluZXJcIiA6IFwiaGlkZGVuXCJ9PlxuICAgICAgICAgICAgICAgIDxMb3R0aWUgb3B0aW9ucz17ZGVmYXVsdE9wdGlvbnN9IGhlaWdodD17aW1hZ2VIZWlnaHR9IHdpZHRoPXtpbWFnZVdpZHRofSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIHJldHVybiBudWxsO1xufVxuIl0sIm5hbWVzIjpbImdsb2JhbCIsIm1vZHVsZSIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiRnVuY3Rpb24iLCJfX2ciLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsIml0IiwiVHlwZUVycm9yIiwiYUZ1bmN0aW9uIiwicmVxdWlyZSIsImZuIiwidGhhdCIsImxlbmd0aCIsInVuZGVmaW5lZCIsImEiLCJjYWxsIiwiYiIsImMiLCJhcHBseSIsImFyZ3VtZW50cyIsImlzT2JqZWN0IiwiZXhlYyIsImUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwiUyIsInZhbCIsInRvU3RyaW5nIiwidmFsdWVPZiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZXhwb3J0cyIsIk8iLCJQIiwiQXR0cmlidXRlcyIsInZhbHVlIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiY3JlYXRlRGVzYyIsIm9iamVjdCIsImtleSIsImYiLCJoYXNPd25Qcm9wZXJ0eSIsImN0eCIsImhpZGUiLCJoYXMiLCJQUk9UT1RZUEUiLCIkZXhwb3J0IiwidHlwZSIsIm5hbWUiLCJzb3VyY2UiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsImV4cFByb3RvIiwidGFyZ2V0Iiwib3duIiwib3V0IiwiQyIsInZpcnR1YWwiLCJSIiwiVSIsInNsaWNlIiwiY29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcGxpdCIsIklPYmplY3QiLCJkZWZpbmVkIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJ0b0ludGVnZXIiLCJtaW4iLCJtYXgiLCJpbmRleCIsInRvSU9iamVjdCIsInRvTGVuZ3RoIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiU0hBUkVEIiwic3RvcmUiLCJwdXNoIiwibW9kZSIsImNvcHlyaWdodCIsImlkIiwicHgiLCJyYW5kb20iLCJjb25jYXQiLCJzaGFyZWQiLCJ1aWQiLCJhcnJheUluZGV4T2YiLCJJRV9QUk9UTyIsIm5hbWVzIiwiaSIsInJlc3VsdCIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiREVTQ1JJUFRPUlMiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsInRvT2JqZWN0IiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJTeW1ib2wiLCJLIiwiZm9yRWFjaCIsImsiLCJqb2luIiwiVCIsImFMZW4iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwiaiIsInJlcXVpcmUkJDAiLCJfX2VzTW9kdWxlIiwiX2Fzc2lnbiIsIl9hc3NpZ24yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsImRlZmF1bHQiLCJwcm90b3R5cGUiLCJPYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJmYWlscyIsIktFWSIsImV4cCIsIiRnZXRQcm90b3R5cGVPZiIsInJlcXVpcmUkJDIiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiJE9iamVjdCIsImRlc2MiLCJfZGVmaW5lUHJvcGVydHkiLCJfZGVmaW5lUHJvcGVydHkyIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIlRPX1NUUklORyIsInBvcyIsInMiLCJTdHJpbmciLCJsIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsIlByb3BlcnRpZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWUiLCJsdCIsImd0IiwiaWZyYW1lRG9jdW1lbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsImNyZWF0ZSIsIlVTRV9TWU1CT0wiLCIkZXhwb3J0cyIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJzZXRUb1N0cmluZ1RhZyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwicmVxdWlyZSQkMyIsIk5BTUUiLCJuZXh0IiwiTElCUkFSWSIsInJlZGVmaW5lIiwiSXRlcmF0b3JzIiwiJGl0ZXJDcmVhdGUiLCJJVEVSQVRPUiIsIkJVR0dZIiwiRkZfSVRFUkFUT1IiLCJLRVlTIiwiVkFMVUVTIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiZ2V0TWV0aG9kIiwia2luZCIsInByb3RvIiwidmFsdWVzIiwiZW50cmllcyIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwibWV0aG9kcyIsIiRhdCIsIml0ZXJhdGVkIiwiX3QiLCJfaSIsInBvaW50IiwiZG9uZSIsImFkZFRvVW5zY29wYWJsZXMiLCJzdGVwIiwiQXJyYXkiLCJfayIsIkFyZ3VtZW50cyIsIlRPX1NUUklOR19UQUciLCJET01JdGVyYWJsZXMiLCJDb2xsZWN0aW9uIiwicmVxdWlyZSQkMSIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJtZXRhIiwiTkVFRCIsIndrc0V4dCIsIiRTeW1ib2wiLCJzeW1ib2xzIiwiaXNBcnJheSIsImFyZyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ09QTiIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGZhaWxzIiwid2tzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJEdPUFMiLCIkRFAiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJzZXR0ZXIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwiRCIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIml0ZXJhdG9yIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCIkY3JlYXRlIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJhcmdzIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzeW1ib2wiLCJfaXRlcmF0b3IiLCJfaXRlcmF0b3IyIiwiX3N5bWJvbCIsIl9zeW1ib2wyIiwiX3R5cGVvZiIsIl90eXBlb2YyIiwiX3R5cGVvZjMiLCJSZWZlcmVuY2VFcnJvciIsImNoZWNrIiwic2V0UHJvdG90eXBlT2YiLCJ0ZXN0IiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJfc2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YyIiwiX2NyZWF0ZTIiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJoYXNTeW1ib2wiLCJmb3IiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRUFDVF9QT1JUQUxfVFlQRSIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIiwiUkVBQ1RfUFJPRklMRVJfVFlQRSIsIlJFQUNUX1BST1ZJREVSX1RZUEUiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9BU1lOQ19NT0RFX1RZUEUiLCJSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSIsIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIiwiUkVBQ1RfTUVNT19UWVBFIiwiUkVBQ1RfTEFaWV9UWVBFIiwiUkVBQ1RfQkxPQ0tfVFlQRSIsIlJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUiLCJSRUFDVF9SRVNQT05ERVJfVFlQRSIsIlJFQUNUX1NDT1BFX1RZUEUiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCIkJHR5cGVvZiIsInR5cGVPZiIsIiQkdHlwZW9mVHlwZSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZvcndhcmRSZWYiLCJGcmFnbWVudCIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSIsImlzQXN5bmNNb2RlIiwiY29uc29sZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzTWVtbyIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJwcm9wSXNFbnVtZXJhYmxlIiwic2hvdWxkVXNlTmF0aXZlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm9yZGVyMiIsIm1hcCIsIm4iLCJ0ZXN0MyIsImxldHRlciIsImVyciIsImZyb20iLCJ0byIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiYmluZCIsInByaW50V2FybmluZyIsImxvZ2dlZFR5cGVGYWlsdXJlcyIsInRleHQiLCJtZXNzYWdlIiwiZXJyb3IiLCJFcnJvciIsIngiLCJjaGVja1Byb3BUeXBlcyIsInR5cGVTcGVjcyIsImxvY2F0aW9uIiwiY29tcG9uZW50TmFtZSIsImdldFN0YWNrIiwidHlwZVNwZWNOYW1lIiwiZXgiLCJzdGFjayIsInJlc2V0V2FybmluZ0NhY2hlIiwiUmVhY3RJcyIsInJlcXVpcmUkJDQiLCJlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsIiwiaXNWYWxpZEVsZW1lbnQiLCJ0aHJvd09uRGlyZWN0QWNjZXNzIiwiSVRFUkFUT1JfU1lNQk9MIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJBTk9OWU1PVVMiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIiLCJiaWdpbnQiLCJib29sIiwiZnVuYyIsIm51bWJlciIsInN0cmluZyIsImFueSIsImNyZWF0ZUFueVR5cGVDaGVja2VyIiwiYXJyYXlPZiIsImNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlciIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIiLCJlbGVtZW50VHlwZSIsImNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIiLCJpbnN0YW5jZU9mIiwiY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlciIsIm5vZGUiLCJjcmVhdGVOb2RlQ2hlY2tlciIsIm9iamVjdE9mIiwiY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlciIsIm9uZU9mIiwiY3JlYXRlRW51bVR5cGVDaGVja2VyIiwib25lT2ZUeXBlIiwiY3JlYXRlVW5pb25UeXBlQ2hlY2tlciIsInNoYXBlIiwiY3JlYXRlU2hhcGVUeXBlQ2hlY2tlciIsImV4YWN0IiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsInkiLCJQcm9wVHlwZUVycm9yIiwiZGF0YSIsImNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyIiwidmFsaWRhdGUiLCJtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSIsIm1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IiwiY2hlY2tUeXBlIiwiaXNSZXF1aXJlZCIsInByb3BOYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiY2FjaGVLZXkiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiZXhwZWN0ZWRUeXBlIiwicHJvcFZhbHVlIiwicHJvcFR5cGUiLCJnZXRQcm9wVHlwZSIsInByZWNpc2VUeXBlIiwiZ2V0UHJlY2lzZVR5cGUiLCJ0eXBlQ2hlY2tlciIsImV4cGVjdGVkQ2xhc3MiLCJleHBlY3RlZENsYXNzTmFtZSIsImFjdHVhbENsYXNzTmFtZSIsImdldENsYXNzTmFtZSIsImV4cGVjdGVkVmFsdWVzIiwidmFsdWVzU3RyaW5nIiwiYXJyYXlPZlR5cGVDaGVja2VycyIsInByb2Nlc3MiLCJjaGVja2VyIiwiZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nIiwiZXhwZWN0ZWRUeXBlcyIsImNoZWNrZXJSZXN1bHQiLCJleHBlY3RlZFR5cGVzTWVzc2FnZSIsImlzTm9kZSIsImludmFsaWRWYWxpZGF0b3JFcnJvciIsInNoYXBlVHlwZXMiLCJhbGxLZXlzIiwiZXZlcnkiLCJlbnRyeSIsIlJlZ0V4cCIsIkRhdGUiLCJQcm9wVHlwZXMiLCJuYXZpZ2F0b3IiLCJmYWN0b3J5IiwidGhpcyIsInN2Z05TIiwibG9jYXRpb25IcmVmIiwiX3VzZVdlYldvcmtlciIsImluaXRpYWxEZWZhdWx0RnJhbWUiLCJzZXRXZWJXb3JrZXIiLCJmbGFnIiwiZ2V0V2ViV29ya2VyIiwic2V0TG9jYXRpb25IcmVmIiwiZ2V0TG9jYXRpb25IcmVmIiwiY3JlYXRlVGFnIiwiZXh0ZW5kUHJvdG90eXBlIiwic291cmNlcyIsImRlc3RpbmF0aW9uIiwibGVuIiwic291cmNlUHJvdG90eXBlIiwiYXR0ciIsImdldERlc2NyaXB0b3IiLCJwcm9wIiwiY3JlYXRlUHJveHlGdW5jdGlvbiIsIlByb3h5RnVuY3Rpb24iLCJhdWRpb0NvbnRyb2xsZXJGYWN0b3J5IiwiQXVkaW9Db250cm9sbGVyIiwiYXVkaW9GYWN0b3J5IiwiYXVkaW9zIiwiX3ZvbHVtZSIsIl9pc011dGVkIiwiYWRkQXVkaW8iLCJhdWRpbyIsInBhdXNlIiwicmVzdW1lIiwic2V0UmF0ZSIsInJhdGVWYWx1ZSIsImNyZWF0ZUF1ZGlvIiwiYXNzZXRQYXRoIiwiSG93bCIsImlzUGxheWluZyIsInBsYXkiLCJzZWVrIiwicGxheWluZyIsInJhdGUiLCJzZXRWb2x1bWUiLCJzZXRBdWRpb0ZhY3RvcnkiLCJfdXBkYXRlVm9sdW1lIiwibXV0ZSIsInVubXV0ZSIsImdldFZvbHVtZSIsInZvbHVtZSIsImNyZWF0ZVR5cGVkQXJyYXkiLCJjcmVhdGVSZWd1bGFyQXJyYXkiLCJhcnIiLCJjcmVhdGVUeXBlZEFycmF5RmFjdG9yeSIsIkZsb2F0MzJBcnJheSIsIkludDE2QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsImNyZWF0ZVNpemVkQXJyYXkiLCJfdHlwZW9mJDYiLCJzdWJmcmFtZUVuYWJsZWQiLCJleHByZXNzaW9uc1BsdWdpbiIsImV4cHJlc3Npb25zSW50ZXJmYWNlcyIsImlkUHJlZml4JDEiLCJpc1NhZmFyaSIsInVzZXJBZ2VudCIsImJtUG93IiwicG93IiwiYm1TcXJ0Iiwic3FydCIsImJtRmxvb3IiLCJibU1heCIsImJtTWluIiwiQk1NYXRoIiwicHJvcGVydHlOYW1lcyIsImFicyIsInRPZlZhbCIsImFic0FyciIsImRlZmF1bHRDdXJ2ZVNlZ21lbnRzIiwiZGVnVG9SYWRzIiwiUEkiLCJyb3VuZENvcm5lciIsInN0eWxlRGl2IiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwidHJhbnNmb3JtT3JpZ2luIiwid2Via2l0VHJhbnNmb3JtT3JpZ2luIiwiYmFja2ZhY2VWaXNpYmlsaXR5Iiwid2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IiwidHJhbnNmb3JtU3R5bGUiLCJ3ZWJraXRUcmFuc2Zvcm1TdHlsZSIsIm1velRyYW5zZm9ybVN0eWxlIiwiQk1FbnRlckZyYW1lRXZlbnQiLCJjdXJyZW50VGltZSIsInRvdGFsVGltZSIsImZyYW1lTXVsdGlwbGllciIsImRpcmVjdGlvbiIsIkJNQ29tcGxldGVFdmVudCIsIkJNQ29tcGxldGVMb29wRXZlbnQiLCJ0b3RhbExvb3BzIiwiY3VycmVudExvb3AiLCJCTVNlZ21lbnRTdGFydEV2ZW50IiwiZmlyc3RGcmFtZSIsInRvdGFsRnJhbWVzIiwiQk1EZXN0cm95RXZlbnQiLCJCTVJlbmRlckZyYW1lRXJyb3JFdmVudCIsIm5hdGl2ZUVycm9yIiwiQk1Db25maWdFcnJvckV2ZW50IiwiY3JlYXRlRWxlbWVudElEIiwiX2NvdW50IiwiY3JlYXRlSUQiLCJIU1Z0b1JHQiIsImgiLCJ2IiwiciIsImciLCJwIiwicSIsInQiLCJSR0J0b0hTViIsImQiLCJhZGRTYXR1cmF0aW9uVG9SR0IiLCJjb2xvciIsIm9mZnNldCIsImhzdiIsImFkZEJyaWdodG5lc3NUb1JHQiIsImFkZEh1ZVRvUkdCIiwicmdiVG9IZXgiLCJjb2xvck1hcCIsImhleCIsInNldFN1YmZyYW1lRW5hYmxlZCIsImdldFN1YmZyYW1lRW5hYmxlZCIsInNldEV4cHJlc3Npb25zUGx1Z2luIiwiZ2V0RXhwcmVzc2lvbnNQbHVnaW4iLCJzZXRFeHByZXNzaW9uSW50ZXJmYWNlcyIsImdldEV4cHJlc3Npb25JbnRlcmZhY2VzIiwic2V0RGVmYXVsdEN1cnZlU2VnbWVudHMiLCJnZXREZWZhdWx0Q3VydmVTZWdtZW50cyIsInNldElkUHJlZml4IiwiY3JlYXRlTlMiLCJjcmVhdGVFbGVtZW50TlMiLCJfdHlwZW9mJDUiLCJkYXRhTWFuYWdlciIsIl9jb3VudGVySWQiLCJwcm9jZXNzZXMiLCJ3b3JrZXJGbiIsIndvcmtlckluc3RhbmNlIiwid29ya2VyUHJveHkiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInBhdGgiLCJfd29ya2VyU2VsZiIsImNyZWF0ZVdvcmtlciIsIldvcmtlciIsIkJsb2IiLCJibG9iIiwidXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwic2V0dXBXb3JrZXIiLCJ3b3JrZXJTdGFydCIsImRhdGFGdW5jdGlvbk1hbmFnZXIiLCJjb21wbGV0ZUxheWVycyIsImxheWVycyIsImNvbXBzIiwibGF5ZXJEYXRhIiwiakxlbiIsImtMZW4iLCJjb21wbGV0ZWQiLCJoYXNNYXNrIiwibWFza1Byb3BzIiwibWFza3NQcm9wZXJ0aWVzIiwicHQiLCJjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzIiwidHkiLCJmaW5kQ29tcExheWVycyIsInJlZklkIiwiY29tcGxldGVTaGFwZXMiLCJzaGFwZXMiLCJjb21wbGV0ZVRleHQiLCJjb21wbGV0ZUNoYXJzIiwiY2hhcnMiLCJhc3NldHMiLCJmaW5kQ29tcCIsImNvbXAiLCJfX3VzZWQiLCJwYXJzZSIsImtzIiwibyIsImNoZWNrVmVyc2lvbiIsIm1pbmltdW0iLCJhbmltVmVyc2lvblN0cmluZyIsImFuaW1WZXJzaW9uIiwiY2hlY2tUZXh0IiwibWluaW11bVZlcnNpb24iLCJ1cGRhdGVUZXh0TGF5ZXIiLCJ0ZXh0TGF5ZXIiLCJkb2N1bWVudERhdGEiLCJpdGVyYXRlTGF5ZXJzIiwiYW5pbWF0aW9uRGF0YSIsImNoZWNrQ2hhcnMiLCJjaGFyRGF0YSIsImlwIiwib3AiLCJzdCIsInNyIiwic2siLCJzYSIsImNoZWNrUGF0aFByb3BlcnRpZXMiLCJwYXRoRGF0YSIsImNoZWNrQ29sb3JzIiwiaXRlcmF0ZVNoYXBlcyIsImNoZWNrU2hhcGVzIiwiY29tcGxldGVDbG9zaW5nU2hhcGVzIiwiY2xvc2VkIiwiY2wiLCJjb21wbGV0ZURhdGEiLCJfX2NvbXBsZXRlIiwibW9kdWxlT2IiLCJhc3NldExvYWRlciIsImZvcm1hdFJlc3BvbnNlIiwieGhyIiwiY29udGVudFR5cGVIZWFkZXIiLCJnZXRSZXNwb25zZUhlYWRlciIsInJlc3BvbnNlVHlwZSIsImluZGV4T2YiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsImxvYWRBc3NldCIsImZ1bGxQYXRoIiwiY2FsbGJhY2siLCJlcnJvckNhbGxiYWNrIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwic2VuZCIsImxvYWQiLCJwYXlsb2FkIiwiYW5pbWF0aW9uIiwiZXZlbnQiLCJvbkNvbXBsZXRlIiwib25FcnJvciIsImNyZWF0ZVByb2Nlc3MiLCJsb2FkQW5pbWF0aW9uIiwicHJvY2Vzc0lkIiwib3JpZ2luIiwicGF0aG5hbWUiLCJsb2FkRGF0YSIsImNvbXBsZXRlQW5pbWF0aW9uIiwiYW5pbSIsIkltYWdlUHJlbG9hZGVyIiwicHJveHlJbWFnZSIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiZ2V0Q29udGV4dCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiaW1hZ2VMb2FkZWQiLCJsb2FkZWRBc3NldHMiLCJ0b3RhbEltYWdlcyIsImxvYWRlZEZvb3RhZ2VzQ291bnQiLCJ0b3RhbEZvb3RhZ2VzIiwiaW1hZ2VzTG9hZGVkQ2IiLCJmb290YWdlTG9hZGVkIiwiZ2V0QXNzZXRzUGF0aCIsImFzc2V0RGF0YSIsImFzc2V0c1BhdGgiLCJvcmlnaW5hbFBhdGgiLCJpbWFnZVBhdGgiLCJ1IiwidGVzdEltYWdlTG9hZGVkIiwiaW1nIiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiYm94IiwiZ2V0QkJveCIsIl9pbWFnZUxvYWRlZCIsImNsZWFySW50ZXJ2YWwiLCJjcmVhdGVJbWFnZURhdGEiLCJhZGRFdmVudExpc3RlbmVyIiwib2IiLCJzZXRBdHRyaWJ1dGVOUyIsIl9lbGVtZW50SGVscGVyIiwiYXBwZW5kIiwiY3JlYXRlSW1nRGF0YSIsImNyb3NzT3JpZ2luIiwiY3JlYXRlRm9vdGFnZURhdGEiLCJmb290YWdlRGF0YSIsIl9mb290YWdlTG9hZGVkIiwibG9hZEFzc2V0cyIsImNiIiwiaW1hZ2VzIiwiX2NyZWF0ZUltYWdlRGF0YSIsInNldFBhdGgiLCJzZXRBc3NldHNQYXRoIiwiZ2V0QXNzZXQiLCJkZXN0cm95IiwibG9hZGVkSW1hZ2VzIiwibG9hZGVkRm9vdGFnZXMiLCJzZXRDYWNoZVR5cGUiLCJlbGVtZW50SGVscGVyIiwiSW1hZ2VQcmVsb2FkZXJGYWN0b3J5IiwiQmFzZUV2ZW50IiwidHJpZ2dlckV2ZW50IiwiZXZlbnROYW1lIiwiX2NicyIsImNhbGxiYWNrcyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzcGxpY2UiLCJtYXJrZXJQYXJzZXIiLCJwYXJzZVBheWxvYWRMaW5lcyIsImxpbmVzIiwibGluZSIsImtleXNDb3VudCIsInRyaW0iLCJfbWFya2VycyIsIm1hcmtlcnMiLCJfbWFya2VyIiwibWFya2VyRGF0YSIsInRpbWUiLCJ0bSIsImR1cmF0aW9uIiwiZHIiLCJjbSIsIl8iLCJfXyIsIlByb2plY3RJbnRlcmZhY2UiLCJyZWdpc3RlckNvbXBvc2l0aW9uIiwiY29tcG9zaXRpb25zIiwiX3RoaXNQcm9qZWN0RnVuY3Rpb24iLCJubSIsInByZXBhcmVGcmFtZSIsInh0IiwiY3VycmVudEZyYW1lIiwiY29tcEludGVyZmFjZSIsInJlbmRlcmVycyIsInJlZ2lzdGVyUmVuZGVyZXIiLCJnZXRSZW5kZXJlciIsImdldFJlZ2lzdGVyZWRSZW5kZXJlciIsIl90eXBlb2YkNCIsIkFuaW1hdGlvbkl0ZW0iLCJpc0xvYWRlZCIsImN1cnJlbnRSYXdGcmFtZSIsImZyYW1lUmF0ZSIsImZyYW1lTXVsdCIsInBsYXlTcGVlZCIsInBsYXlEaXJlY3Rpb24iLCJwbGF5Q291bnQiLCJpc1BhdXNlZCIsImF1dG9wbGF5IiwibG9vcCIsInJlbmRlcmVyIiwiYW5pbWF0aW9uSUQiLCJ0aW1lQ29tcGxldGVkIiwic2VnbWVudFBvcyIsImlzU3ViZnJhbWVFbmFibGVkIiwic2VnbWVudHMiLCJfaWRsZSIsIl9jb21wbGV0ZWRMb29wIiwicHJvamVjdEludGVyZmFjZSIsImltYWdlUHJlbG9hZGVyIiwiYXVkaW9Db250cm9sbGVyIiwiY29uZmlnQW5pbWF0aW9uIiwib25TZXR1cEVycm9yIiwib25TZWdtZW50Q29tcGxldGUiLCJkcmF3bkZyYW1lRXZlbnQiLCJzZXRQYXJhbXMiLCJwYXJhbXMiLCJ3cmFwcGVyIiwiY29udGFpbmVyIiwiYW5pbVR5cGUiLCJSZW5kZXJlckNsYXNzIiwicmVuZGVyZXJTZXR0aW5ncyIsImdsb2JhbERhdGEiLCJkZWZzIiwic2V0UHJvamVjdEludGVyZmFjZSIsInBhcnNlSW50IiwiYXV0b2xvYWRTZWdtZW50cyIsImluaXRpYWxTZWdtZW50Iiwic2V0dXBBbmltYXRpb24iLCJsYXN0SW5kZXhPZiIsInN1YnN0ciIsImZpbGVOYW1lIiwidHJpZ2dlciIsInNldERhdGEiLCJ3cmFwcGVyQXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJnZXROYW1lZEl0ZW0iLCJwcmVyZW5kZXIiLCJpbmNsdWRlTGF5ZXJzIiwibmV3TGF5ZXJzIiwiZm9udHMiLCJmb250TWFuYWdlciIsImFkZENoYXJzIiwiYWRkRm9udHMiLCJpbml0RXhwcmVzc2lvbnMiLCJsb2FkTmV4dFNlZ21lbnQiLCJzZWdtZW50Iiwic2hpZnQiLCJzZWdtZW50UGF0aCIsImxvYWRTZWdtZW50cyIsImltYWdlc0xvYWRlZCIsImNoZWNrTG9hZGVkIiwicHJlbG9hZEltYWdlcyIsImFuaW1EYXRhIiwicm91bmQiLCJmciIsInNlYXJjaEV4dHJhQ29tcG9zaXRpb25zIiwidXBkYUZyYW1lTW9kaWZpZXIiLCJ3YWl0Rm9yRm9udHNMb2FkZWQiLCJ0cmlnZ2VyQ29uZmlnRXJyb3IiLCJzZXRUaW1lb3V0IiwicmVuZGVyZXJUeXBlIiwiaW5pdEl0ZW1zIiwiZ290b0ZyYW1lIiwicmVzaXplIiwiX3dpZHRoIiwiX2hlaWdodCIsInVwZGF0ZUNvbnRhaW5lclNpemUiLCJzZXRTdWJmcmFtZSIsInJlbmRlckZyYW1lIiwicmVzZXRGcmFtZSIsInRyaWdnZXJSZW5kZXJGcmFtZUVycm9yIiwidG9nZ2xlUGF1c2UiLCJzdG9wIiwic2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUiLCJnZXRNYXJrZXJEYXRhIiwibWFya2VyTmFtZSIsIm1hcmtlciIsImdvVG9BbmRTdG9wIiwiaXNGcmFtZSIsIm51bVZhbHVlIiwiTnVtYmVyIiwiZnJhbWVNb2RpZmllciIsImdvVG9BbmRQbGF5IiwicGxheVNlZ21lbnRzIiwiYWR2YW5jZVRpbWUiLCJuZXh0VmFsdWUiLCJfaXNDb21wbGV0ZSIsImNoZWNrU2VnbWVudHMiLCJhZGp1c3RTZWdtZW50Iiwic2V0U3BlZWQiLCJzZXREaXJlY3Rpb24iLCJzZXRTZWdtZW50IiwiaW5pdCIsImVuZCIsInBlbmRpbmdGcmFtZSIsImZvcmNlRmxhZyIsInJlc2V0U2VnbWVudHMiLCJvbkVudGVyRnJhbWUiLCJvbkxvb3BDb21wbGV0ZSIsIm9uU2VnbWVudFN0YXJ0Iiwib25EZXN0cm95Iiwic2V0TG9vcCIsImlzTG9vcGluZyIsImdldFBhdGgiLCJnZXRBc3NldERhdGEiLCJzaG93IiwiZ2V0RHVyYXRpb24iLCJ1cGRhdGVEb2N1bWVudERhdGEiLCJnZXRFbGVtZW50QnlQYXRoIiwiYW5pbWF0aW9uTWFuYWdlciIsInJlZ2lzdGVyZWRBbmltYXRpb25zIiwiaW5pdFRpbWUiLCJwbGF5aW5nQW5pbWF0aW9uc051bSIsIl9zdG9wcGVkIiwiX2lzRnJvemVuIiwicmVtb3ZlRWxlbWVudCIsImV2IiwiYW5pbUl0ZW0iLCJzdWJ0cmFjdFBsYXlpbmdDb3VudCIsInJlZ2lzdGVyQW5pbWF0aW9uIiwiZWxlbSIsImdldFJlZ2lzdGVyZWRBbmltYXRpb25zIiwibGVuQW5pbXMiLCJhbmltYXRpb25zIiwiYWRkUGxheWluZ0NvdW50IiwiYWN0aXZhdGUiLCJub3dUaW1lIiwiZWxhcHNlZFRpbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmaXJzdCIsInNlYXJjaEFuaW1hdGlvbnMiLCJzdGFuZGFsb25lIiwiYW5pbUVsZW1lbnRzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInNldEF0dHJpYnV0ZSIsImJvZHkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImlubmVyVGV4dCIsImRpdiIsImZyZWV6ZSIsInVuZnJlZXplIiwiQmV6aWVyRmFjdG9yeSIsImdldEJlemllckVhc2luZyIsImJlemllcnMiLCJzdHIiLCJyZXBsYWNlIiwiYmV6RWFzaW5nIiwiQmV6aWVyRWFzaW5nIiwiTkVXVE9OX0lURVJBVElPTlMiLCJORVdUT05fTUlOX1NMT1BFIiwiU1VCRElWSVNJT05fUFJFQ0lTSU9OIiwiU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMiLCJrU3BsaW5lVGFibGVTaXplIiwia1NhbXBsZVN0ZXBTaXplIiwiZmxvYXQzMkFycmF5U3VwcG9ydGVkIiwiYUExIiwiYUEyIiwiY2FsY0JlemllciIsImFUIiwiZ2V0U2xvcGUiLCJiaW5hcnlTdWJkaXZpZGUiLCJhWCIsImFBIiwiYUIiLCJtWDEiLCJtWDIiLCJjdXJyZW50WCIsImN1cnJlbnRUIiwibmV3dG9uUmFwaHNvbkl0ZXJhdGUiLCJhR3Vlc3NUIiwiY3VycmVudFNsb3BlIiwicG9pbnRzIiwiX3AiLCJfbVNhbXBsZVZhbHVlcyIsIl9wcmVjb21wdXRlZCIsIm1ZMSIsIm1ZMiIsIl9wcmVjb21wdXRlIiwiX2dldFRGb3JYIiwiX2NhbGNTYW1wbGVWYWx1ZXMiLCJtU2FtcGxlVmFsdWVzIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJsYXN0U2FtcGxlIiwiZGlzdCIsImd1ZXNzRm9yVCIsImluaXRpYWxTbG9wZSIsInBvb2xpbmciLCJfZG91YmxlIiwicG9vbEZhY3RvcnkiLCJpbml0aWFsTGVuZ3RoIiwiX3JlbGVhc2UiLCJfbGVuZ3RoIiwiX21heExlbmd0aCIsInBvb2wiLCJuZXdFbGVtZW50IiwicmVsZWFzZSIsImJlemllckxlbmd0aFBvb2wiLCJhZGRlZExlbmd0aCIsInBlcmNlbnRzIiwibGVuZ3RocyIsInNlZ21lbnRzTGVuZ3RoUG9vbCIsInRvdGFsTGVuZ3RoIiwiYmV6RnVuY3Rpb24iLCJtYXRoIiwicG9pbnRPbkxpbmUyRCIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJ5MyIsImRldDEiLCJwb2ludE9uTGluZTNEIiwiejEiLCJ6MiIsInozIiwiZGlzdDEiLCJkaXN0MiIsImRpc3QzIiwiZGlmZkRpc3QiLCJnZXRCZXppZXJMZW5ndGgiLCJwdDEiLCJwdDIiLCJwdDMiLCJwdDQiLCJjdXJ2ZVNlZ21lbnRzIiwicHRDb29yZCIsInBlcmMiLCJwdERpc3RhbmNlIiwibGFzdFBvaW50IiwibGVuZ3RoRGF0YSIsImdldFNlZ21lbnRzTGVuZ3RoIiwic2hhcGVEYXRhIiwic2VnbWVudHNMZW5ndGgiLCJwYXRoViIsInBhdGhPIiwicGF0aEkiLCJCZXppZXJEYXRhIiwic2VnbWVudExlbmd0aCIsIlBvaW50RGF0YSIsInBhcnRpYWwiLCJwYXJ0aWFsTGVuZ3RoIiwiYnVpbGRCZXppZXJEYXRhIiwic3RvcmVkRGF0YSIsImJlemllck5hbWUiLCJiZXppZXJEYXRhIiwiZ2V0RGlzdGFuY2VQZXJjIiwiaW5pdFBvcyIsImxlbmd0aFBvcyIsImxQZXJjIiwiZGlyIiwiZ2V0UG9pbnRJblNlZ21lbnQiLCJwZXJjZW50IiwidDEiLCJ1MSIsInB0WCIsInB0WSIsImJlemllclNlZ21lbnRQb2ludHMiLCJnZXROZXdTZWdtZW50Iiwic3RhcnRQZXJjIiwiZW5kUGVyYyIsInQwIiwidTAiLCJ1MHUwdTAiLCJ0MHUwdTBfMyIsInQwdDB1MF8zIiwidDB0MHQwIiwidTB1MHUxIiwidDB1MHUxXzMiLCJ0MHQwdTFfMyIsInQwdDB0MSIsInUwdTF1MSIsInQwdTF1MV8zIiwidDB0MXUxXzMiLCJ0MHQxdDEiLCJ1MXUxdTEiLCJ0MXUxdTFfMyIsInQxdDF1MV8zIiwidDF0MXQxIiwiYmV6IiwiaW5pdEZyYW1lIiwibWF0aEFicyIsImludGVycG9sYXRlVmFsdWUiLCJmcmFtZU51bSIsImNhY2hpbmciLCJvZmZzZXRUaW1lIiwibmV3VmFsdWUiLCJwdiIsIml0ZXJhdGlvbkluZGV4IiwibGFzdEluZGV4Iiwia2V5ZnJhbWVzIiwia2V5RGF0YSIsIm5leHRLZXlEYXRhIiwia2V5ZnJhbWVNZXRhZGF0YSIsImtleWZyYW1lc01ldGFkYXRhIiwiZm5jIiwibmV4dEtleVRpbWUiLCJrZXlUaW1lIiwiZW5kVmFsdWUiLCJ0aSIsImluZCIsIl9fZm5jdCIsImRpc3RhbmNlSW5MaW5lIiwic2VnbWVudFBlcmMiLCJsYXN0RnJhbWUiLCJfbGFzdEtleWZyYW1lSW5kZXgiLCJfbGFzdEFkZGVkTGVuZ3RoIiwiX2xhc3RQb2ludCIsIm91dFgiLCJvdXRZIiwiaW5YIiwiaW5ZIiwia2V5VmFsdWUiLCJzaCIsInF1YXRTdGFydCIsImNyZWF0ZVF1YXRlcm5pb24iLCJxdWF0RW5kIiwicXVhdGVybmlvblRvRXVsZXIiLCJzbGVycCIsImF4IiwiYXkiLCJheiIsImF3IiwiYngiLCJieSIsImJ6IiwiYnciLCJvbWVnYSIsImNvc29tIiwic2lub20iLCJzY2FsZTAiLCJzY2FsZTEiLCJhY29zIiwic2luIiwicXVhdCIsInF4IiwicXkiLCJxeiIsInF3IiwiaGVhZGluZyIsImF0YW4yIiwiYXR0aXR1ZGUiLCJhc2luIiwiYmFuayIsImMxIiwiY29zIiwiYzIiLCJjMyIsInMxIiwiczIiLCJzMyIsInoiLCJnZXRWYWx1ZUF0Q3VycmVudFRpbWUiLCJyZW5kZXJlZEZyYW1lIiwiZW5kVGltZSIsIl9jYWNoaW5nIiwicmVuZGVyUmVzdWx0Iiwic2V0VlZhbHVlIiwibXVsdGlwbGllZFZhbHVlIiwibXVsdCIsIl9tZGYiLCJwcm9jZXNzRWZmZWN0c1NlcXVlbmNlIiwiZnJhbWVJZCIsImVmZmVjdHNTZXF1ZW5jZSIsImxvY2siLCJfaXNGaXJzdEZyYW1lIiwiZmluYWxWYWx1ZSIsImtmIiwiYWRkRWZmZWN0IiwiZWZmZWN0RnVuY3Rpb24iLCJhZGREeW5hbWljUHJvcGVydHkiLCJWYWx1ZVByb3BlcnR5IiwidmVsIiwiZ2V0VmFsdWUiLCJNdWx0aURpbWVuc2lvbmFsUHJvcGVydHkiLCJLZXlmcmFtZWRWYWx1ZVByb3BlcnR5IiwiS2V5ZnJhbWVkTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5IiwiYXJyTGVuIiwiUHJvcGVydHlGYWN0b3J5IiwiZ2V0UHJvcCIsInNpZCIsInNsb3RNYW5hZ2VyIiwiRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyIiwiZHluYW1pY1Byb3BlcnRpZXMiLCJfaXNBbmltYXRlZCIsIml0ZXJhdGVEeW5hbWljUHJvcGVydGllcyIsImluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIiLCJwb2ludFBvb2wiLCJTaGFwZVBhdGgiLCJzZXRQYXRoRGF0YSIsInNldExlbmd0aCIsImRvdWJsZUFycmF5TGVuZ3RoIiwic2V0WFlBdCIsInNldFRyaXBsZUF0IiwidlgiLCJ2WSIsIm9YIiwib1kiLCJpWCIsImlZIiwicmV2ZXJzZSIsIm5ld1BhdGgiLCJ2ZXJ0aWNlcyIsIm91dFBvaW50cyIsImluUG9pbnRzIiwiY250Iiwic2hhcGVQb29sIiwic2hhcGVQYXRoIiwiY2xvbmUiLCJjbG9uZWQiLCJTaGFwZUNvbGxlY3Rpb24iLCJhZGRTaGFwZSIsInJlbGVhc2VTaGFwZXMiLCJzaGFwZUNvbGxlY3Rpb25Qb29sIiwibmV3U2hhcGVDb2xsZWN0aW9uIiwic2hhcGVDb2xsZWN0aW9uIiwiU2hhcGVQcm9wZXJ0eUZhY3RvcnkiLCJpbnRlcnBvbGF0ZVNoYXBlIiwicHJldmlvdXNWYWx1ZSIsImtleVByb3BTIiwia2V5UHJvcEUiLCJpc0hvbGQiLCJ2ZXJ0ZXhWYWx1ZSIsImludGVycG9sYXRlU2hhcGVDdXJyZW50VGltZSIsInJlc2V0U2hhcGUiLCJwYXRocyIsImxvY2FsU2hhcGVDb2xsZWN0aW9uIiwic2hhcGVzRXF1YWwiLCJzaGFwZTEiLCJzaGFwZTIiLCJTaGFwZVByb3BlcnR5IiwicmVzZXQiLCJLZXlmcmFtZWRTaGFwZVByb3BlcnR5IiwiRWxsU2hhcGVQcm9wZXJ0eSIsImNQb2ludCIsIkVsbFNoYXBlUHJvcGVydHlGYWN0b3J5IiwiY29udmVydEVsbFRvUGF0aCIsInAwIiwicDEiLCJzMCIsIl9jdyIsIl92IiwiU3RhclNoYXBlUHJvcGVydHkiLCJTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkiLCJzeSIsImlyIiwiY29udmVydFRvUGF0aCIsImNvbnZlcnRTdGFyVG9QYXRoIiwiY29udmVydFBvbHlnb25Ub1BhdGgiLCJvciIsIm9zIiwibnVtUHRzIiwiYW5nbGUiLCJsb25nRmxhZyIsImxvbmdSYWQiLCJzaG9ydFJhZCIsImxvbmdSb3VuZCIsInNob3J0Um91bmQiLCJsb25nUGVyaW1TZWdtZW50Iiwic2hvcnRQZXJpbVNlZ21lbnQiLCJyYWQiLCJyb3VuZG5lc3MiLCJwZXJpbVNlZ21lbnQiLCJjdXJyZW50QW5nIiwib3giLCJveSIsIlJlY3RTaGFwZVByb3BlcnR5IiwiUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5IiwiY29udmVydFJlY3RUb1BhdGgiLCJ2MCIsInYxIiwiZ2V0U2hhcGVQcm9wIiwiZGF0YVByb3AiLCJnZXRDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbiIsIk1hdHJpeCIsIl9jb3MiLCJfc2luIiwiX3RhbiIsInRhbiIsIl9ybmQiLCJyb3RhdGUiLCJtQ29zIiwibVNpbiIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNoZWFyIiwic3giLCJza2V3Iiwic2tld0Zyb21BeGlzIiwic2NhbGUiLCJzeiIsInNldFRyYW5zZm9ybSIsIm0iLCJ0cmFuc2xhdGUiLCJ0eCIsInR6IiwidHJhbnNmb3JtIiwiYTIiLCJiMiIsImQyIiwiZTIiLCJmMiIsImcyIiwiaDIiLCJpMiIsImoyIiwiazIiLCJsMiIsIm0yIiwibjIiLCJvMiIsInAyIiwiX2lkZW50aXR5Q2FsY3VsYXRlZCIsImExIiwiYjEiLCJkMSIsImUxIiwiZjEiLCJnMSIsImgxIiwiaTEiLCJqMSIsImsxIiwibDEiLCJtMSIsIm4xIiwibzEiLCJtdWx0aXBseSIsIm1hdHJpeCIsIm1hdHJpeFByb3BzIiwiaXNJZGVudGl0eSIsIl9pZGVudGl0eSIsImVxdWFscyIsIm1hdHIiLCJjbG9uZUZyb21Qcm9wcyIsImFwcGx5VG9Qb2ludCIsImFwcGx5VG9YIiwiYXBwbHlUb1kiLCJhcHBseVRvWiIsImdldEludmVyc2VNYXRyaXgiLCJkZXRlcm1pbmFudCIsImludmVyc2VNYXRyaXgiLCJpbnZlcnNlUG9pbnQiLCJhcHBseVRvUG9pbnRBcnJheSIsImludmVyc2VQb2ludHMiLCJwdHMiLCJyZXRQdHMiLCJhcHBseVRvVHJpcGxlUG9pbnRzIiwicDQiLCJwNSIsInAxMiIsInAxMyIsImFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkIiwidG9DU1MiLCJjc3NWYWx1ZSIsInJvdW5kTWF0cml4UHJvcGVydHkiLCJ0bzJkQ1NTIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiX3R5cGVvZiQzIiwibG90dGllIiwic2V0TG9jYXRpb24iLCJocmVmIiwic2V0U3ViZnJhbWVSZW5kZXJpbmciLCJzZXRQcmVmaXgiLCJwcmVmaXgiLCJzZXRRdWFsaXR5IiwiaW5Ccm93c2VyIiwiaW5zdGFsbFBsdWdpbiIsInBsdWdpbiIsImdldEZhY3RvcnkiLCJ1c2VXZWJXb3JrZXIiLCJzZXRJRFByZWZpeCIsIl9fZ2V0RmFjdG9yeSIsImNoZWNrUmVhZHkiLCJyZWFkeVN0YXRlQ2hlY2tJbnRlcnZhbCIsImdldFF1ZXJ5VmFyaWFibGUiLCJ2YXJpYWJsZSIsInZhcnMiLCJxdWVyeVN0cmluZyIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzY3JpcHRzIiwibXlTY3JpcHQiLCJkZWZpbmUiLCJhbWQiLCJib2R5bW92aW4iLCJTaGFwZU1vZGlmaWVycyIsIm1vZGlmaWVycyIsInJlZ2lzdGVyTW9kaWZpZXIiLCJnZXRNb2RpZmllciIsIlNoYXBlTW9kaWZpZXIiLCJpbml0TW9kaWZpZXJQcm9wZXJ0aWVzIiwiYWRkU2hhcGVUb01vZGlmaWVyIiwic2V0QXNBbmltYXRlZCIsInByb2Nlc3NLZXlzIiwiVHJpbU1vZGlmaWVyIiwic1ZhbHVlIiwiZVZhbHVlIiwicGF0aHNEYXRhIiwiY2FsY3VsYXRlU2hhcGVFZGdlcyIsInNoYXBlTGVuZ3RoIiwidG90YWxNb2RpZmllckxlbmd0aCIsInNoYXBlU2VnbWVudHMiLCJzZWdtZW50T2IiLCJzaGFwZVMiLCJzaGFwZUUiLCJyZWxlYXNlUGF0aHNEYXRhIiwicHJvY2Vzc1NoYXBlcyIsIl9zIiwic2hhcGVQYXRocyIsInRvdGFsU2hhcGVMZW5ndGgiLCJlZGdlcyIsIm5ld1NoYXBlc0RhdGEiLCJhZGRTaGFwZXMiLCJsYXN0U2hhcGVJbkNvbGxlY3Rpb24iLCJsYXN0U2hhcGUiLCJwb3AiLCJhZGRQYXRocyIsIm5ld1BhdGhzIiwiYWRkU2VnbWVudCIsIm5ld1NoYXBlIiwiYWRkU2VnbWVudEZyb21BcnJheSIsInNoYXBlU2VnbWVudCIsImN1cnJlbnRMZW5ndGhEYXRhIiwic2VnbWVudENvdW50IiwiUHVja2VyQW5kQmxvYXRNb2RpZmllciIsImFtb3VudCIsInByb2Nlc3NQYXRoIiwiY2VudGVyUG9pbnQiLCJwYXRoTGVuZ3RoIiwiY2xvbmVkUGF0aCIsIlRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeSIsImRlZmF1bHRWZWN0b3IiLCJhcHBseVRvTWF0cml4IiwibWF0IiwicnoiLCJyeSIsInJ4IiwicHkiLCJweiIsImZvcmNlUmVuZGVyIiwiX2lzRGlydHkiLCJwcmVjYWxjdWxhdGVNYXRyaXgiLCJwcmUiLCJhcHBsaWVkVHJhbnNmb3JtYXRpb25zIiwiYXV0b09yaWVudGVkIiwidjIiLCJnZXRWYWx1ZUF0VGltZSIsImF1dG9PcmllbnQiLCJfYWRkRHluYW1pY1Byb3BlcnR5IiwiVHJhbnNmb3JtUHJvcGVydHkiLCJnZXRUcmFuc2Zvcm1Qcm9wZXJ0eSIsIlJlcGVhdGVyTW9kaWZpZXIiLCJ0ciIsInNvIiwiZW8iLCJwTWF0cml4Iiwick1hdHJpeCIsInNNYXRyaXgiLCJ0TWF0cml4IiwiYXBwbHlUcmFuc2Zvcm1zIiwiaW52Iiwic2NhbGVYIiwic2NhbGVZIiwiZWxlbXNEYXRhIiwiX2N1cnJlbnRDb3BpZXMiLCJfZWxlbWVudHMiLCJfZ3JvdXBzIiwidW5zaGlmdCIsInJlc2V0RWxlbWVudHMiLCJlbGVtZW50cyIsIl9wcm9jZXNzZWQiLCJjbG9uZUVsZW1lbnRzIiwibmV3RWxlbWVudHMiLCJjaGFuZ2VHcm91cFJlbmRlciIsInJlbmRlckZsYWciLCJfcmVuZGVyIiwiaXRlbXMiLCJpdGVtc1RyYW5zZm9ybSIsImNvbnQiLCJoYXNSZWxvYWRlZCIsImNvcGllcyIsImdyb3VwIiwiaXgiLCJyZWxvYWRTaGFwZXMiLCJlbGVtcyIsInRyYW5zZm9ybURhdGEiLCJvZmZzZXRNb2R1bG8iLCJyb3VuZE9mZnNldCIsInBQcm9wcyIsInJQcm9wcyIsInNQcm9wcyIsIml0ZXJhdGlvbiIsIm1Qcm9wcyIsIlJvdW5kQ29ybmVyc01vZGlmaWVyIiwicmQiLCJjdXJyZW50ViIsImN1cnJlbnRJIiwiY3VycmVudE8iLCJjbG9zZXJWIiwiZGlzdGFuY2UiLCJuZXdQb3NQZXJjIiwiZmxvYXRFcXVhbCIsImZsb2F0WmVybyIsImxlcnAiLCJsZXJwUG9pbnQiLCJxdWFkUm9vdHMiLCJzaW5nbGVSb290IiwiZGVsdGEiLCJwb2x5bm9taWFsQ29lZmZpY2llbnRzIiwicDMiLCJzaW5nbGVQb2ludCIsIlBvbHlub21pYWxCZXppZXIiLCJsaW5lYXJpemUiLCJwb2ludEVxdWFsIiwiY29lZmZ4IiwiY29lZmZ5IiwiZGVyaXZhdGl2ZSIsInRhbmdlbnRBbmdsZSIsIm5vcm1hbEFuZ2xlIiwiaW5mbGVjdGlvblBvaW50cyIsImRlbm9tIiwidGN1c3AiLCJzcXVhcmUiLCJyb290IiwiZmlsdGVyIiwicDEwIiwicDExIiwicDIwIiwicDIxIiwiZXh0cmVtYSIsImJvdW5kcyIsImJvdW5kaW5nQm94IiwicmlnaHQiLCJib3R0b20iLCJjeCIsImN5IiwiaW50ZXJzZWN0RGF0YSIsInQyIiwic3BsaXREYXRhIiwiYm94SW50ZXJzZWN0IiwiaW50ZXJzZWN0c0ltcGwiLCJkZXB0aCIsInRvbGVyYW5jZSIsImludGVyc2VjdGlvbnMiLCJtYXhSZWN1cnNpb24iLCJkMXMiLCJkMnMiLCJvdGhlciIsIm5leHRJbmRleCIsInNoYXBlU2VnbWVudEludmVydGVkIiwiY3Jvc3NQcm9kdWN0IiwibGluZUludGVyc2VjdGlvbiIsInN0YXJ0MSIsImVuZDEiLCJzdGFydDIiLCJlbmQyIiwidjMiLCJ2NCIsInBvbGFyT2Zmc2V0IiwicG9pbnREaXN0YW5jZSIsImh5cG90IiwiWmlnWmFnTW9kaWZpZXIiLCJhbXBsaXR1ZGUiLCJmcmVxdWVuY3kiLCJwb2ludHNUeXBlIiwic2V0UG9pbnQiLCJvdXRwdXRCZXppZXIiLCJvdXRBbXBsaXR1ZGUiLCJpbkFtcGxpdHVkZSIsImFuZ08iLCJhbmdJIiwiZ2V0UGVycGVuZGljdWxhclZlY3RvciIsInZlY3RvciIsInJvdCIsInJvdGF0ZWRWZWN0b3IiLCJnZXRQcm9qZWN0aW5nQW5nbGUiLCJjdXIiLCJwcmV2SW5kZXgiLCJwcmV2UG9pbnQiLCJuZXh0UG9pbnQiLCJwVmVjdG9yIiwiemlnWmFnQ29ybmVyIiwicG9pbnRUeXBlIiwicHJldkRpc3QiLCJuZXh0RGlzdCIsInppZ1phZ1NlZ21lbnQiLCJjb3VudCIsImxpbmVhck9mZnNldCIsIm9mZnNldFNlZ21lbnQiLCJwMWEiLCJwMWIiLCJwMmIiLCJwMmEiLCJqb2luTGluZXMiLCJzZWcxIiwic2VnMiIsImxpbmVKb2luIiwibWl0ZXJMaW1pdCIsImFuZ2xlT3V0IiwiYW5nbGVJbiIsImNlbnRlciIsInJhZGl1cyIsImludGVyc2VjdGlvbiIsImdldEludGVyc2VjdGlvbiIsImludGVyc2VjdCIsInBydW5lU2VnbWVudEludGVyc2VjdGlvbiIsIm91dGEiLCJvdXRiIiwicHJ1bmVJbnRlcnNlY3Rpb25zIiwib2Zmc2V0U2VnbWVudFNwbGl0IiwiZmxleCIsIm1pZCIsIk9mZnNldFBhdGhNb2RpZmllciIsIm1sIiwibGoiLCJpbnB1dEJlemllciIsIm11bHRpU2VnbWVudHMiLCJsYXN0U2VnIiwibXVsdGlTZWdtZW50IiwiZ2V0Rm9udFByb3BlcnRpZXMiLCJmb250RGF0YSIsInN0eWxlcyIsImZTdHlsZSIsImZXZWlnaHQiLCJzdHlsZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsIndlaWdodCIsIkZvbnRNYW5hZ2VyIiwibWF4V2FpdGluZ1RpbWUiLCJlbXB0eUNoYXIiLCJzaXplIiwiY29tYmluZWRDaGFyYWN0ZXJzIiwiQkxBQ0tfRkxBR19DT0RFX1BPSU5UIiwiQ0FOQ0VMX1RBR19DT0RFX1BPSU5UIiwiQV9UQUdfQ09ERV9QT0lOVCIsIlpfVEFHX0NPREVfUE9JTlQiLCJWQVJJQVRJT05fU0VMRUNUT1JfMTZfQ09ERV9QT0lOVCIsIlpFUk9fV0lEVEhfSk9JTkVSX0NPREVfUE9JTlQiLCJSRUdJT05BTF9DSEFSQUNURVJfQV9DT0RFX1BPSU5UIiwiUkVHSU9OQUxfQ0hBUkFDVEVSX1pfQ09ERV9QT0lOVCIsInN1cnJvZ2F0ZU1vZGlmaWVycyIsInRyaW1Gb250T3B0aW9ucyIsImZvbnQiLCJmYW1pbHlBcnJheSIsImVuYWJsZWRGYW1pbGllcyIsInNldFVwTm9kZSIsImZhbWlseSIsInBhcmVudE5vZGUiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250VmFyaWFudCIsImZvbnRTdHlsZSIsImZvbnRXZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwib2Zmc2V0V2lkdGgiLCJwYXJlbnQiLCJjaGVja0xvYWRlZEZvbnRzIiwibG9hZGVkQ291bnQiLCJsb2FkZWQiLCJmT3JpZ2luIiwibW9ub0Nhc2UiLCJzYW5zQ2FzZSIsInJlbW92ZUNoaWxkIiwibm93IiwiY2hlY2tMb2FkZWRGb250c0JpbmRlZCIsInNldElzTG9hZGVkQmluZGVkIiwiY3JlYXRlSGVscGVyIiwiZW5naW5lIiwiaGVscGVyIiwiZm9udFByb3BzIiwidEhlbHBlciIsImZGYW1pbHkiLCJ0ZXh0Q29udGVudCIsImZDbGFzcyIsInRDYW52YXNIZWxwZXIiLCJPZmZzY3JlZW5DYW52YXMiLCJtZWFzdXJlIiwiZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoIiwibWVhc3VyZVRleHQiLCJsaXN0IiwiY2FjaGUiLCJmb250QXJyIiwiX3BlbmRpbmdGb250cyIsInNob3VsZExvYWRGb250IiwibG9hZGVkU2VsZWN0b3IiLCJmUGF0aCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZWwiLCJzYyIsImZvdW5kIiwiY2giLCJnZXRDaGFyRGF0YSIsIl9jaGFyIiwid2FybiIsIl93YXJuZWQiLCJfY2hhcjIiLCJmb250TmFtZSIsImdldEZvbnRCeU5hbWUiLCJkb3VibGVTaXplIiwic2luZ2xlU2l6ZSIsImZOYW1lIiwiZ2V0Q29kZVBvaW50IiwiY29kZVBvaW50Iiwic2Vjb25kIiwiaXNNb2RpZmllciIsImZpcnN0Q2hhckNvZGUiLCJzZWNvbmRDaGFyQ29kZSIsInN1bSIsImlzWmVyb1dpZHRoSm9pbmVyIiwiY2hhckNvZGUiLCJpc1ZhcmlhdGlvblNlbGVjdG9yIiwiaXNSZWdpb25hbENvZGUiLCJpc0ZsYWdFbW9qaSIsImlzQ29tYmluZWRDaGFyYWN0ZXIiLCJfY2hhcjMiLCJpc1JlZ2lvbmFsRmxhZyIsInNldElzTG9hZGVkIiwiRm9udCIsInR5cGVraXRMb2FkZWQiLCJmb250UHJvdG90eXBlIiwiU2xvdE1hbmFnZXIiLCJzbG90cyIsInNsb3RGYWN0b3J5IiwiUmVuZGVyYWJsZUVsZW1lbnQiLCJpbml0UmVuZGVyYWJsZSIsImlzSW5SYW5nZSIsImhpZGRlbiIsImlzVHJhbnNwYXJlbnQiLCJyZW5kZXJhYmxlQ29tcG9uZW50cyIsImFkZFJlbmRlcmFibGVDb21wb25lbnQiLCJjb21wb25lbnQiLCJyZW1vdmVSZW5kZXJhYmxlQ29tcG9uZW50IiwicHJlcGFyZVJlbmRlcmFibGVGcmFtZSIsIm51bSIsImNoZWNrTGF5ZXJMaW1pdHMiLCJjaGVja1RyYW5zcGFyZW5jeSIsImZpbmFsVHJhbnNmb3JtIiwibVByb3AiLCJyZW5kZXJDb25maWciLCJoaWRlT25UcmFuc3BhcmVudCIsInJlbmRlclJlbmRlcmFibGUiLCJzb3VyY2VSZWN0QXRUaW1lIiwiZ2V0TGF5ZXJTaXplIiwidGV4dERhdGEiLCJnZXRCbGVuZE1vZGUiLCJibGVuZE1vZGVFbnVtcyIsIlNsaWRlckVmZmVjdCIsIkFuZ2xlRWZmZWN0IiwiQ29sb3JFZmZlY3QiLCJQb2ludEVmZmVjdCIsIkxheWVySW5kZXhFZmZlY3QiLCJNYXNrSW5kZXhFZmZlY3QiLCJDaGVja2JveEVmZmVjdCIsIk5vVmFsdWVFZmZlY3QiLCJFZmZlY3RzTWFuYWdlciIsImVmZmVjdHMiLCJlZiIsImVmZmVjdEVsZW1lbnRzIiwiZWZmZWN0SXRlbSIsIkdyb3VwRWZmZWN0IiwiZWZmIiwiQmFzZUVsZW1lbnQiLCJjaGVja01hc2tzIiwiTGF5ZXJFeHByZXNzaW9uSW50ZXJmYWNlIiwiRWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UiLCJTaGFwZUV4cHJlc3Npb25JbnRlcmZhY2UiLCJUZXh0RXhwcmVzc2lvbkludGVyZmFjZSIsIkNvbXBFeHByZXNzaW9uSW50ZXJmYWNlIiwibGF5ZXJJbnRlcmZhY2UiLCJtYXNrTWFuYWdlciIsInJlZ2lzdGVyTWFza0ludGVyZmFjZSIsImVmZmVjdHNJbnRlcmZhY2UiLCJjcmVhdGVFZmZlY3RzSW50ZXJmYWNlIiwicmVnaXN0ZXJFZmZlY3RzSW50ZXJmYWNlIiwic2hhcGVJbnRlcmZhY2UiLCJzaGFwZXNEYXRhIiwiaXRlbXNEYXRhIiwiY29udGVudCIsInRleHRJbnRlcmZhY2UiLCJzZXRCbGVuZE1vZGUiLCJibGVuZE1vZGVWYWx1ZSIsImJtIiwiYmFzZUVsZW1lbnQiLCJsYXllckVsZW1lbnQiLCJpbml0QmFzZURhdGEiLCJsYXllcklkIiwiZWZmZWN0c01hbmFnZXIiLCJnZXRUeXBlIiwiRnJhbWVFbGVtZW50IiwicHJlcGFyZVByb3BlcnRpZXMiLCJpc1Zpc2libGUiLCJfaXNQYXJlbnQiLCJGb290YWdlRWxlbWVudCIsImltYWdlTG9hZGVyIiwiZ2V0QmFzZUVsZW1lbnQiLCJGb290YWdlSW50ZXJmYWNlIiwiZ2V0Rm9vdGFnZURhdGEiLCJBdWRpb0VsZW1lbnQiLCJfaXNQbGF5aW5nIiwiX2NhblBsYXkiLCJfY3VycmVudFRpbWUiLCJfdm9sdW1lTXVsdGlwbGllciIsIl9wcmV2aW91c1ZvbHVtZSIsIl9wbGFjZWhvbGRlciIsImx2IiwiYXUiLCJ0aW1lUmVtYXBwZWQiLCJ0b3RhbFZvbHVtZSIsInZvbHVtZVZhbHVlIiwiQmFzZVJlbmRlcmVyIiwiY2hlY2tMYXllcnMiLCJidWlsZEl0ZW0iLCJjaGVja1BlbmRpbmdFbGVtZW50cyIsImNyZWF0ZUl0ZW0iLCJsYXllciIsImNyZWF0ZUltYWdlIiwiY3JlYXRlQ29tcCIsImNyZWF0ZVNvbGlkIiwiY3JlYXRlTnVsbCIsImNyZWF0ZVNoYXBlIiwiY3JlYXRlVGV4dCIsImNyZWF0ZUNhbWVyYSIsImNyZWF0ZUZvb3RhZ2UiLCJidWlsZEFsbEl0ZW1zIiwicEludGVyZmFjZSIsInByb2dyZXNzaXZlTG9hZCIsImJ1aWxkRWxlbWVudFBhcmVudGluZyIsInBhcmVudE5hbWUiLCJoaWVyYXJjaHkiLCJhZGRQZW5kaW5nRWxlbWVudCIsInNldEFzUGFyZW50Iiwic2V0SGllcmFyY2h5IiwicGVuZGluZ0VsZW1lbnRzIiwiZ2V0RWxlbWVudEJ5SWQiLCJwYXRoVmFsdWUiLCJzZXR1cEdsb2JhbERhdGEiLCJmb250c0NvbnRhaW5lciIsImFuaW1hdGlvbkl0ZW0iLCJjb21wU2l6ZSIsImVmZmVjdFR5cGVzIiwiVFJBTlNGT1JNX0VGRkVDVCIsIlRyYW5zZm9ybUVsZW1lbnQiLCJpbml0VHJhbnNmb3JtIiwiX21hdE1kZiIsIl9sb2NhbE1hdE1kZiIsIl9vcE1kZiIsImxvY2FsTWF0IiwibG9jYWxPcGFjaXR5IiwiYW8iLCJyZW5kZXJUcmFuc2Zvcm0iLCJmaW5hbE1hdCIsInJlbmRlckxvY2FsVHJhbnNmb3JtIiwibG9jYWxUcmFuc2Zvcm1zIiwibG1hdCIsImxvY2FsT3AiLCJvcGFjaXR5Iiwic2VhcmNoRWZmZWN0VHJhbnNmb3JtcyIsInJlbmRlcmFibGVFZmZlY3RzTWFuYWdlciIsInRyYW5zZm9ybUVmZmVjdHMiLCJnZXRFZmZlY3RzIiwiZ2xvYmFsVG9Mb2NhbCIsInRyYW5zZm9ybXMiLCJwdE5ldyIsIm1IZWxwZXIiLCJNYXNrRWxlbWVudCIsIm1hc2tFbGVtZW50Iiwidmlld0RhdGEiLCJzb2xpZFBhdGgiLCJwcm9wZXJ0aWVzIiwiY3VycmVudE1hc2tzIiwicmVjdCIsImV4cGFuc29yIiwiZmVNb3JwaCIsIm1hc2tUeXBlIiwibWFza1JlZiIsImxhc3RQYXRoIiwiZmlsdGVySUQiLCJleHBhbiIsImxhc3RPcGVyYXRvciIsImZpbHRlcklkIiwibGFzdFJhZGl1cyIsIm1hc2siLCJjcmVhdGVMYXllclNvbGlkUGF0aCIsImludlJlY3QiLCJkcmF3UGF0aCIsIm1hc2tlZEVsZW1lbnQiLCJnZXRNYXNrUHJvcGVydHkiLCJpc0ZpcnN0RnJhbWUiLCJnZXRNYXNrZWxlbWVudCIsInBhdGhOb2RlcyIsInBhdGhTdHJpbmciLCJwYXRoU2hhcGVWYWx1ZSIsImZpbHRlcnNGYWN0b3J5IiwiY3JlYXRlRmlsdGVyIiwiY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlciIsImZpbElkIiwic2tpcENvb3JkaW5hdGVzIiwiZmlsIiwiZmVDb2xvck1hdHJpeCIsImZlYXR1cmVTdXBwb3J0Iiwic3ZnTHVtYUhpZGRlbiIsIm9mZnNjcmVlbkNhbnZhcyIsInJlZ2lzdGVyZWRFZmZlY3RzJDEiLCJpZFByZWZpeCIsIlNWR0VmZmVjdHMiLCJmaWx0ZXJzIiwiZmlsdGVyTWFuYWdlciIsIkVmZmVjdCIsImVmZmVjdCIsImNvdW50c0FzRWZmZWN0IiwicmVnaXN0ZXJFZmZlY3QkMSIsIlNWR0Jhc2VFbGVtZW50IiwiaW5pdFJlbmRlcmVyRWxlbWVudCIsImNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzIiwibWF0dGVFbGVtZW50IiwidHJhbnNmb3JtZWRFbGVtZW50IiwiX3NpemVDaGFuZ2VkIiwibGF5ZXJFbGVtZW50UGFyZW50IiwidGQiLCJtYXR0ZU1hc2tzIiwiZ2ciLCJ0dCIsImxuIiwiaGQiLCJjcCIsImNsaXBJZCIsImNwR3JvdXAiLCJyZW5kZXJFbGVtZW50IiwiZGVzdHJveUJhc2VFbGVtZW50IiwiY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMiLCJnZXRNYXR0ZSIsIm1hdHRlVHlwZSIsInVzZUVsZW1lbnQiLCJtYXNrZXIiLCJtYXNrR3JvdXAiLCJtYXNrR3JvdXBlciIsImZlQ1RyIiwiZmVGdW5jIiwiYWxwaGFSZWN0Iiwic2V0TWF0dGUiLCJIaWVyYXJjaHlFbGVtZW50IiwiaW5pdEhpZXJhcmNoeSIsImNoZWNrUGFyZW50aW5nIiwiUmVuZGVyYWJsZURPTUVsZW1lbnQiLCJfcHJvdG90eXBlIiwiaW5pdEVsZW1lbnQiLCJjcmVhdGVDb250ZW50IiwicmVuZGVySW5uZXJDb250ZW50IiwiaW5uZXJFbGVtIiwiSUltYWdlRWxlbWVudCIsInNvdXJjZVJlY3QiLCJwciIsImltYWdlUHJlc2VydmVBc3BlY3RSYXRpbyIsIlByb2Nlc3NlZEVsZW1lbnQiLCJJU2hhcGVFbGVtZW50IiwiYWRkU2hhcGVUb01vZGlmaWVycyIsInNoYXBlTW9kaWZpZXJzIiwiaXNTaGFwZUluQW5pbWF0ZWRNb2RpZmllcnMiLCJpc0FuaW1hdGVkV2l0aFNoYXBlIiwicmVuZGVyTW9kaWZpZXJzIiwic2hvdWxkQnJlYWtQcm9jZXNzIiwic2VhcmNoUHJvY2Vzc2VkRWxlbWVudCIsInByb2Nlc3NlZEVsZW1lbnRzIiwiYWRkUHJvY2Vzc2VkRWxlbWVudCIsImxpbmVDYXBFbnVtIiwibGluZUpvaW5FbnVtIiwiU1ZHU2hhcGVEYXRhIiwidHJhbnNmb3JtZXJzIiwibGV2ZWwiLCJjYWNoZXMiLCJsU3RyIiwibHZsIiwiU1ZHU3R5bGVEYXRhIiwicEVsZW0iLCJtc0VsZW0iLCJEYXNoUHJvcGVydHkiLCJkYXRhUHJvcHMiLCJkYXNoU3RyIiwiZGFzaEFycmF5IiwiZGFzaG9mZnNldCIsIlNWR1N0cm9rZVN0eWxlRGF0YSIsInN0eWxlT2IiLCJTVkdGaWxsU3R5bGVEYXRhIiwiU1ZHTm9TdHlsZURhdGEiLCJHcmFkaWVudFByb3BlcnR5IiwiY0xlbmd0aCIsIl9jbWRmIiwiX29tZGYiLCJfY29sbGFwc2FibGUiLCJjaGVja0NvbGxhcHNhYmxlIiwiX2hhc09wYWNpdHkiLCJjb21wYXJlUG9pbnRzIiwiZGlmZiIsIlNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YSIsImluaXRHcmFkaWVudERhdGEiLCJzdG9wcyIsInNldEdyYWRpZW50RGF0YSIsInNldEdyYWRpZW50T3BhY2l0eSIsInBhdGhFbGVtZW50IiwiZ3JhZGllbnRJZCIsImdmaWxsIiwiZ2YiLCJjc3QiLCJvcGFjaXR5SWQiLCJtYXNrSWQiLCJvcEZpbGwiLCJsYyIsIm9mIiwibXMiLCJvc3QiLCJTVkdHcmFkaWVudFN0cm9rZVN0eWxlRGF0YSIsIlNoYXBlR3JvdXBEYXRhIiwicHJldlZpZXdEYXRhIiwiZ3IiLCJTVkdUcmFuc2Zvcm1EYXRhIiwiYnVpbGRTaGFwZVN0cmluZyIsIl9vIiwic2hhcGVTdHJpbmciLCJTVkdFbGVtZW50c1JlbmRlcmVyIiwiX2lkZW50aXR5TWF0cml4IiwiX21hdHJpeEhlbHBlciIsImNyZWF0ZVJlbmRlckZ1bmN0aW9uIiwicmVuZGVyRmlsbCIsInJlbmRlckdyYWRpZW50IiwicmVuZGVyR3JhZGllbnRTdHJva2UiLCJyZW5kZXJTdHJva2UiLCJyZW5kZXJQYXRoIiwicmVuZGVyQ29udGVudFRyYW5zZm9ybSIsInJlbmRlck5vb3AiLCJzdHlsZURhdGEiLCJpdGVtRGF0YSIsInBhdGhTdHJpbmdUcmFuc2Zvcm1lZCIsInJlZHJhdyIsImxMZW4iLCJpdGVyYXRpb25zIiwic3R5bGVFbGVtIiwiaGFzT3BhY2l0eSIsImF0dHIxIiwiYXR0cjIiLCJjVmFsdWVzIiwib1ZhbHVlcyIsImFuZyIsIlNWR1NoYXBlRWxlbWVudCIsInN0eWxlc0xpc3QiLCJhbmltYXRlZENvbnRlbnRzIiwiaW5pdFNlY29uZGFyeUVsZW1lbnQiLCJpZGVudGl0eU1hdHJpeCIsImJ1aWxkRXhwcmVzc2lvbkludGVyZmFjZSIsInNlYXJjaFNoYXBlcyIsImZpbHRlclVuaXF1ZVNoYXBlcyIsInRlbXBTaGFwZXMiLCJhcmVBbmltYXRlZCIsInNldFNoYXBlc0FzQW5pbWF0ZWQiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJlbGVtZW50RGF0YSIsIkdyYWRpZW50Q29uc3RydWN0b3IiLCJhZGRUb0FuaW1hdGVkQ29udGVudHMiLCJjcmVhdGVHcm91cEVsZW1lbnQiLCJjcmVhdGVUcmFuc2Zvcm1FbGVtZW50IiwidHJhbnNmb3JtUHJvcGVydHkiLCJjcmVhdGVTaGFwZUVsZW1lbnQiLCJvd25UcmFuc2Zvcm1lcnMiLCJzaGFwZVByb3BlcnR5Iiwic2V0RWxlbWVudFN0eWxlcyIsInJlbmRlciIsIm93blN0eWxlcyIsIm93bk1vZGlmaWVycyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJtb2RpZmllciIsInByb2Nlc3NlZFBvcyIsInJlbmRlclNoYXBlIiwiYW5pbWF0ZWRDb250ZW50IiwiTGV0dGVyUHJvcHMiLCJzdyIsImZjIiwidXBkYXRlIiwidXBkYXRlZCIsIlRleHRQcm9wZXJ0eSIsIl9mcmFtZUlkIiwia2V5c0luZGV4IiwiY2FuUmVzaXplIiwibWluaW11bUZvbnRTaXplIiwiY3VycmVudERhdGEiLCJhc2NlbnQiLCJib3hXaWR0aCIsImRlZmF1bHRCb3hXaWR0aCIsImp1c3RpZnlPZmZzZXQiLCJsaCIsImxpbmVXaWR0aHMiLCJscyIsInBzIiwiZmlsbENvbG9yQW5pbSIsInN0cm9rZUNvbG9yQW5pbSIsInN0cm9rZVdpZHRoQW5pbSIsInlPZmZzZXQiLCJmaW5hbFNpemUiLCJmaW5hbFRleHQiLCJmaW5hbExpbmVIZWlnaHQiLCJjb3B5RGF0YSIsInNlYXJjaFByb3BlcnR5IiwiY29tcGxldGVUZXh0RGF0YSIsInNldEN1cnJlbnREYXRhIiwic2VhcmNoS2V5ZnJhbWVzIiwiZ2V0S2V5ZnJhbWVWYWx1ZSIsIl9maW5hbFZhbHVlIiwiY3VycmVudFZhbHVlIiwiY3VycmVudEluZGV4IiwidGV4dEtleXMiLCJidWlsZEZpbmFsVGV4dCIsImNoYXJhY3RlcnNBcnJheSIsInNob3VsZENvbWJpbmUiLCJzaG91bGRDb21iaW5lTmV4dCIsImN1cnJlbnRDaGFycyIsImxldHRlcnMiLCJuZXdMaW5lRmxhZyIsImFuY2hvckdyb3VwaW5nIiwiY3VycmVudFNpemUiLCJjdXJyZW50UG9zIiwiY3VycmVudExpbmUiLCJsaW5lV2lkdGgiLCJtYXhMaW5lV2lkdGgiLCJ0cmFja2luZ09mZnNldCIsImJveEhlaWdodCIsImN1cnJlbnRIZWlnaHQiLCJsYXN0U3BhY2VJbmRleCIsInVuY29sbGFwc2VkU3BhY2VzIiwiY3VycmVudENoYXIiLCJhbiIsImFkZCIsImFuSW5kZXhlcyIsImFuaW1hdG9ySnVzdGlmeU9mZnNldCIsImV4dHJhIiwiYW5pbWF0b3JzIiwiYW5pbWF0b3JEYXRhIiwibGV0dGVyRGF0YSIsImJhc2VkIiwiaW5kZXhlcyIsImZoIiwiZnMiLCJmYiIsInJuIiwidG90YWxDaGFycyIsImN1cnJlbnRJbmQiLCJuZXdJbmQiLCJuZXdEYXRhIiwiZERhdGEiLCJyZWNhbGN1bGF0ZSIsImNhblJlc2l6ZUZvbnQiLCJfY2FuUmVzaXplIiwic2V0TWluaW11bUZvbnRTaXplIiwiX2ZvbnRWYWx1ZSIsIlRleHRTZWxlY3RvclByb3AiLCJUZXh0U2VsZWN0b3JQcm9wRmFjdG9yeSIsIl9jdXJyZW50VGV4dExlbmd0aCIsImZpbmFsUyIsImZpbmFsRSIsInhlIiwibmUiLCJzbSIsImdldE11bHQiLCJ0ZXh0UHJvcGVydHkiLCJlYXNlciIsInRvdCIsInNtb290aG5lc3MiLCJ0aHJlc2hvbGQiLCJuZXdDaGFyc0ZsYWciLCJkaXZpc29yIiwiZ2V0VGV4dFNlbGVjdG9yUHJvcCIsIlRleHRBbmltYXRvckRhdGFQcm9wZXJ0eSIsImFuaW1hdG9yUHJvcHMiLCJkZWZhdWx0RGF0YSIsInRleHRBbmltYXRvckFuaW1hdGFibGVzIiwiVGV4dEFuaW1hdG9yUHJvcGVydHkiLCJyZW5kZXJUeXBlIiwiX2hhc01hc2tlZFBhdGgiLCJfdGV4dERhdGEiLCJfcmVuZGVyVHlwZSIsIl9lbGVtIiwiX2FuaW1hdG9yc0RhdGEiLCJfcGF0aERhdGEiLCJfbW9yZU9wdGlvbnMiLCJhbGlnbm1lbnQiLCJyZW5kZXJlZExldHRlcnMiLCJsZXR0ZXJzQ2hhbmdlZEZsYWciLCJzZWFyY2hQcm9wZXJ0aWVzIiwiZ2V0TWVhc3VyZXMiLCJtYXRyaXhIZWxwZXIiLCJyZW5kZXJlZExldHRlcnNDb3VudCIsInhQb3MiLCJ5UG9zIiwicGF0aEluZm8iLCJjdXJyZW50TGVuZ3RoIiwiY3VycmVudFBvaW50IiwicG9pbnRJbmQiLCJzZWdtZW50SW5kIiwidGFuQW5nbGUiLCJ0TGVuZ3RoIiwicGkiLCJ5T2ZmIiwiZmlyc3RMaW5lIiwiYW5pbWF0b3JTZWxlY3RvciIsImxldHRlclZhbHVlIiwib2ZmZiIsInhQYXRoUG9zIiwieVBhdGhQb3MiLCJpbml0UGF0aFBvcyIsImluaXRTZWdtZW50SW5kIiwiaW5pdFBvaW50SW5kIiwiZWxlbU9wYWNpdHkiLCJsZXR0ZXJTdyIsImxldHRlclNjIiwibGV0dGVyRmMiLCJsZXR0ZXJNIiwibGV0dGVyUCIsImRlZmF1bHRQcm9wc0FycmF5IiwibGV0dGVyTyIsImFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0IiwianVzdGlmeU9mZnNldE11bHQiLCJpc05ld0xpbmUiLCJhbmltYXRvck9mZnNldCIsImF0YW4iLCJJVGV4dEVsZW1lbnQiLCJ0ZXh0QW5pbWF0b3IiLCJjcmVhdGVQYXRoU2hhcGUiLCJzaGFwZVN0ciIsIl9mb250U2l6ZSIsImFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeCIsImxpbmVOdW1iZXIiLCJidWlsZENvbG9yIiwiY29sb3JEYXRhIiwiZW1wdHlQcm9wIiwidmFsaWRhdGVUZXh0IiwiYnVpbGROZXdUZXh0IiwiZW1wdHlTaGFwZURhdGEiLCJTVkdUZXh0TG90dGllRWxlbWVudCIsInRleHRTcGFucyIsInNpbmdsZVNoYXBlIiwidGV4dENvbnRhaW5lciIsImJ1aWxkVGV4dENvbnRlbnRzIiwidGV4dEFycmF5IiwidGV4dENvbnRlbnRzIiwiY3VycmVudFRleHRDb250ZW50IiwiYnVpbGRTaGFwZURhdGEiLCJzaGFwZUl0ZW0iLCJ1c2VzR2x5cGhzIiwidFNwYW4iLCJ0RWxlbWVudCIsImp1c3RpZnkiLCJzcGFuIiwiZ2x5cGgiLCJjYWNoZWRTcGFuc0xlbmd0aCIsImNoaWxkU3BhbiIsImdseXBoRWxlbWVudCIsIlNWR0NvbXBFbGVtZW50IiwiX2RlYnVnIiwidGV4dEJveCIsImJib3giLCJyZW5kZXJlZExldHRlciIsInRleHRTcGFuIiwiSVNvbGlkRWxlbWVudCIsIk51bGxFbGVtZW50IiwiU1ZHUmVuZGVyZXJCYXNlIiwic3ZnRWxlbWVudCIsInZpZXdCb3hTaXplIiwidmlld0JveE9ubHkiLCJjb250ZW50VmlzaWJpbGl0eSIsImNsYXNzTmFtZSIsImZvY3VzYWJsZSIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJkZXN0cm95ZWQiLCJmaW5kSW5kZXhCeUluZCIsImFwcGVuZEVsZW1lbnRJblBvcyIsImVsZW1lbnRJbmRleCIsInRwIiwibWF0dGVNYXNrIiwibmV4dEVsZW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJJQ29tcEVsZW1lbnQiLCJzZXRFbGVtZW50cyIsImdldEVsZW1lbnRzIiwiZGVzdHJveUVsZW1lbnRzIiwic3VwcG9ydHMzZCIsIlNWR1JlbmRlcmVyIiwiY29uZmlnIiwiYXJpYUxhYmVsIiwidGl0bGUiLCJ0aXRsZUVsZW1lbnQiLCJ0aXRsZUlkIiwiZGVzY3JpcHRpb24iLCJkZXNjRWxlbWVudCIsImRlc2NJZCIsImZpbHRlclNpemUiLCJydW5FeHByZXNzaW9ucyIsIlNoYXBlVHJhbnNmb3JtTWFuYWdlciIsInNlcXVlbmNlcyIsInNlcXVlbmNlTGlzdCIsInRyYW5zZm9ybV9rZXlfY291bnQiLCJhZGRUcmFuc2Zvcm1TZXF1ZW5jZSIsInNlcXVlbmNlIiwicHJvY2Vzc1NlcXVlbmNlIiwicHJvY2Vzc1NlcXVlbmNlcyIsImdldE5ld0tleSIsImx1bWFMb2FkZXIiLCJsdW1hQnVmZmVyIiwibHVtYUJ1ZmZlckN0eCIsInN2ZyIsImNyZWF0ZUx1bWFTdmdGaWx0ZXIiLCJfc3ZnIiwibG9hZEx1bWEiLCJnZXRMdW1hIiwiY3JlYXRlQ2FudmFzIiwibG9hZEx1bWFDYW52YXMiLCJnZXRMdW1hQ2FudmFzIiwicmVnaXN0ZXJlZEVmZmVjdHMiLCJDVkVmZmVjdHMiLCJyZWdpc3RlckVmZmVjdCIsIkNWTWFza0VsZW1lbnQiLCJoYXNNYXNrcyIsImNhbnZhc0NvbnRleHQiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJiZXppZXJDdXJ2ZVRvIiwic2F2ZSIsImNsaXAiLCJDVkJhc2VFbGVtZW50Iiwib3BlcmF0aW9uc01hcCIsImNyZWF0ZUVsZW1lbnRzIiwiYnVmZmVycyIsImJ1ZmZlckNhbnZhcyIsImJ1ZmZlckNhbnZhczIiLCJfaXNQcm94eSIsInRyYW5zZm9ybUNhbnZhcyIsImJsZW5kTW9kZSIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImhpZGVFbGVtZW50Iiwic2hvd0VsZW1lbnQiLCJjbGVhckNhbnZhcyIsImNsZWFyUmVjdCIsInByZXBhcmVMYXllciIsImJ1ZmZlciIsImJ1ZmZlckN0eCIsImRyYXdJbWFnZSIsImdldFRyYW5zZm9ybSIsImV4aXRMYXllciIsImZvcmNlUmVhbFN0YWNrIiwiY3R4VHJhbnNmb3JtIiwiY3R4T3BhY2l0eSIsInJlc3RvcmUiLCJDVlNoYXBlRGF0YSIsInRyYW5zZm9ybXNNYW5hZ2VyIiwic3R5bGVkU2hhcGVzIiwic3R5bGVkU2hhcGUiLCJ0ck5vZGVzIiwiQ1ZTaGFwZUVsZW1lbnQiLCJ0cmFuc2Zvcm1IZWxwZXIiLCJkYXNoUmVzZXR0ZXIiLCJwcmVUcmFuc2Zvcm1zIiwiY28iLCJ3aSIsImRhIiwiYWRkVHJhbnNmb3JtVG9TdHlsZUxpc3QiLCJyZW1vdmVUcmFuc2Zvcm1Gcm9tU3R5bGVMaXN0IiwiY2xvc2VTdHlsZXMiLCJzaG91bGRSZW5kZXIiLCJvd25UcmFuc2Zvcm1zIiwiX3Nob3VsZFJlbmRlciIsInJlbmRlclNoYXBlVHJhbnNmb3JtIiwicGFyZW50VHJhbnNmb3JtIiwiZ3JvdXBUcmFuc2Zvcm0iLCJkcmF3TGF5ZXIiLCJub2RlcyIsImN1cnJlbnRTdHlsZSIsImNvT3AiLCJjdXJyZW50R2xvYmFsQWxwaGEiLCJjdHhTdHJva2VTdHlsZSIsImdyZCIsImN0eExpbmVXaWR0aCIsImN0eExpbmVDYXAiLCJjdHhMaW5lSm9pbiIsImN0eE1pdGVyTGltaXQiLCJjdHhGaWxsU3R5bGUiLCJzZXRMaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0IiwiY2xvc2VQYXRoIiwiY3R4U3Ryb2tlIiwiY3R4RmlsbCIsImlzTWFpbiIsInJlbmRlckdyYWRpZW50RmlsbCIsInJlbmRlclN0eWxlZFNoYXBlIiwic2hhcGVOb2RlcyIsImdyb3VwVHJhbnNmb3JtTWF0IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsIkNWVGV4dEVsZW1lbnQiLCJzdHJva2UiLCJmaWxsIiwiY3VycmVudFJlbmRlciIsInNXaWR0aCIsImZWYWx1ZSIsImhhc0ZpbGwiLCJoYXNTdHJva2UiLCJjb21tYW5kcyIsInBhdGhBcnIiLCJjb21tYW5kc0NvdW50ZXIiLCJsYXN0RmlsbCIsImxhc3RTdHJva2UiLCJsYXN0U3Ryb2tlVyIsIkNWSW1hZ2VFbGVtZW50IiwiaW1nVyIsImltZ0giLCJpbWdSZWwiLCJjYW52YXNSZWwiLCJ3aWR0aENyb3AiLCJoZWlnaHRDcm9wIiwicGFyIiwiQ1ZTb2xpZEVsZW1lbnQiLCJjdHhGaWxsUmVjdCIsIkNhbnZhc1JlbmRlcmVyQmFzZSIsImdsb2JhbEFscGhhIiwic3Ryb2tlU3R5bGUiLCJsaW5lQ2FwIiwicnVsZSIsImNvbnRleHREYXRhIiwiYWN0aW9uRmxhZyIsImNvbnRhaW5lclN0eWxlIiwibW96VHJhbnNmb3JtT3JpZ2luIiwiY29udGV4dCIsInNldENvbnRleHQiLCJpc0Rhc2hlZCIsImVsZW1lbnRXaWR0aCIsImVsZW1lbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJkcHIiLCJlbGVtZW50UmVsIiwiYW5pbWF0aW9uUmVsIiwiZmlsbFR5cGUiLCJDYW52YXNDb250ZXh0IiwiQ1ZDb250ZXh0RGF0YSIsImNBcnJQb3MiLCJjVHIiLCJuYXRpdmVDb250ZXh0IiwidHJhbnNmb3JtTWF0IiwiY3VycmVudE9wYWNpdHkiLCJjdXJyZW50RmlsbFN0eWxlIiwiYXBwbGllZEZpbGxTdHlsZSIsImN1cnJlbnRTdHJva2VTdHlsZSIsImFwcGxpZWRTdHJva2VTdHlsZSIsImN1cnJlbnRMaW5lV2lkdGgiLCJhcHBsaWVkTGluZVdpZHRoIiwiY3VycmVudExpbmVDYXAiLCJhcHBsaWVkTGluZUNhcCIsImN1cnJlbnRMaW5lSm9pbiIsImFwcGxpZWRMaW5lSm9pbiIsImFwcGxpZWRNaXRlckxpbWl0IiwiY3VycmVudE1pdGVyTGltaXQiLCJkdXBsaWNhdGUiLCJuZXdMZW5ndGgiLCJmb3JjZVJlc3RvcmUiLCJjdXJyZW50Q29udGV4dCIsInByZXZTdGFjayIsInNhdmVPbk5hdGl2ZUZsYWciLCJjdXJyZW50U3RhY2siLCJuZXdTdGFjayIsInNldE9wYWNpdHkiLCJ0clByb3BzIiwiQ1ZDb21wRWxlbWVudCIsIkNhbnZhc1JlbmRlcmVyIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIkhCYXNlRWxlbWVudCIsImNoZWNrQmxlbmRNb2RlIiwidGciLCJ0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZSIsIm1hdHJpeFZhbHVlIiwid2Via2l0VHJhbnNmb3JtIiwiYWRkRWZmZWN0cyIsIkhTb2xpZEVsZW1lbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJIU2hhcGVFbGVtZW50Iiwic2hhcGVzQ29udGFpbmVyIiwiY3VycmVudEJCb3giLCJfcmVuZGVyU2hhcGVGcmFtZSIsInNoYXBlQ29udCIsImdldFRyYW5zZm9ybWVkUG9pbnQiLCJjYWxjdWxhdGVTaGFwZUJvdW5kaW5nQm94IiwiaXRlbSIsInZQb2ludCIsIm9Qb2ludCIsIm5leHRJUG9pbnQiLCJuZXh0VlBvaW50IiwiY2hlY2tCb3VuZHMiLCJnZXRCb3VuZHNPZkN1cnZlIiwic2hhcGVCb3VuZGluZ0JveCIsInhNYXgiLCJ5TWF4IiwidGVtcEJvdW5kaW5nQm94IiwiYjJhYyIsImNhbGN1bGF0ZUYiLCJjYWxjdWxhdGVCb3VuZGluZ0JveCIsImV4cGFuZFN0cm9rZUJvdW5kaW5nQm94Iiwid2lkdGhQcm9wZXJ0eSIsImtmdyIsImN1cnJlbnRCb3hDb250YWlucyIsImNoYW5nZWQiLCJzaGFwZVN0eWxlIiwic2hhcGVUcmFuc2Zvcm0iLCJIVGV4dEVsZW1lbnQiLCJ0ZXh0UGF0aHMiLCJpc01hc2tlZCIsImNvbXBXIiwiY29tcEgiLCJpbm5lckVsZW1TdHlsZSIsInRleHRDb2xvciIsInN0cm9rZVdpZHRoIiwibGluZUhlaWdodCIsInRQYXJlbnQiLCJ0Q29udCIsImNoaWxkcmVuIiwidENvbnRTdHlsZSIsInRDb250VHJhbnNsYXRpb24iLCJ0U3R5bGUiLCJ0U3BhblRyYW5zbGF0aW9uIiwic3ZnU3R5bGUiLCJ0cmFuc2xhdGlvbiIsInRleHRQYXRoIiwibWFyZ2luIiwic3ZnVHJhbnNmb3JtIiwiSENhbWVyYUVsZW1lbnQiLCJwZSIsIl9wcmV2TWF0Iiwic2V0dXAiLCJ0aHJlZURFbGVtZW50cyIsInBlcnNwZWN0aXZlU3R5bGUiLCJwZXJzcGVjdGl2ZUVsZW0iLCJwZXJzcGVjdGl2ZSIsIndlYmtpdFBlcnNwZWN0aXZlIiwibVRyYW5zZiIsImRpZmZWZWN0b3IiLCJtYWciLCJsb29rRGlyIiwibG9va0xlbmd0aE9uWFoiLCJtUm90YXRpb25YIiwibVJvdGF0aW9uWSIsImhhc01hdHJpeENoYW5nZWQiLCJtYXRWYWx1ZSIsIkhJbWFnZUVsZW1lbnQiLCJJbWFnZSIsImltYWdlRWxlbSIsIkh5YnJpZFJlbmRlcmVyQmFzZSIsImNhbWVyYSIsIm5ld0RPTUVsZW1lbnQiLCJkZGQiLCJhZGRUbzNkQ29udGFpbmVyIiwibmV4dERPTUVsZW1lbnQiLCJuZXh0TGF5ZXIiLCJ0bXBET01FbGVtZW50IiwiZ2V0VGhyZWVEQ29udGFpbmVyQnlQb3MiLCJzdGFydFBvcyIsImVuZFBvcyIsImNyZWF0ZVRocmVlRENvbnRhaW5lciIsInRocmVlRENvbnRhaW5lckRhdGEiLCJidWlsZDNkQ29udGFpbmVycyIsImxhc3RUaHJlZURDb250YWluZXJEYXRhIiwiY3VycmVudENvbnRhaW5lciIsInJlc2l6ZXJFbGVtIiwib3ZlcmZsb3ciLCJjV2lkdGgiLCJjSGVpZ2h0IiwiZmxvYXRpbmdDb250YWluZXIiLCJIQ29tcEVsZW1lbnQiLCJfY3JlYXRlQmFzZUNvbnRhaW5lckVsZW1lbnRzIiwiSHlicmlkUmVuZGVyZXIiLCJfdGhpc0xheWVyRnVuY3Rpb24iLCJwaXhlbEFzcGVjdCIsImZyYW1lRHVyYXRpb24iLCJkaXNwbGF5U3RhcnRUaW1lIiwibnVtTGF5ZXJzIiwiX3R5cGVvZiQyIiwic2VlZFJhbmRvbSIsImNodW5rcyIsImRpZ2l0cyIsInJuZ25hbWUiLCJzdGFydGRlbm9tIiwic2lnbmlmaWNhbmNlIiwibm9kZWNyeXB0byIsInNlZWRyYW5kb20iLCJzZWVkIiwib3B0aW9ucyIsImVudHJvcHkiLCJzaG9ydHNlZWQiLCJtaXhrZXkiLCJmbGF0dGVuIiwidG9zdHJpbmciLCJhdXRvc2VlZCIsImFyYzQiLCJBUkM0IiwicHJuZyIsImludDMyIiwicXVpY2siLCJwYXNzIiwiaXNfbWF0aF9jYWxsIiwic3RhdGUiLCJjb3B5Iiwia2V5bGVuIiwibWUiLCJ0eXAiLCJzdHJpbmdzZWVkIiwic21lYXIiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJicm93c2VyIiwicGx1Z2lucyIsInNjcmVlbiIsImluaXRpYWxpemUkMiIsInByb3BUeXBlcyIsIlNIQVBFIiwiX3R5cGVvZiQxIiwiRXhwcmVzc2lvbk1hbmFnZXIiLCJmZXRjaCIsImZyYW1lcyIsIl9sb3R0aWVHbG9iYWwiLCIkYm1faXNJbnN0YW5jZU9mQXJyYXkiLCJpc051bWVyYWJsZSIsInRPZlYiLCIkYm1fbmVnIiwidE9mQSIsImxlbkEiLCJyZXRBcnIiLCJlYXNlSW5CZXoiLCJlYXNlT3V0QmV6IiwiZWFzZUluT3V0QmV6IiwidE9mQiIsImxlbkIiLCJzdWIiLCJtdWwiLCJtb2QiLCIkYm1fc3VtIiwiJGJtX3N1YiIsIiRibV9tdWwiLCIkYm1fZGl2IiwiJGJtX21vZCIsImNsYW1wIiwibW0iLCJyYWRpYW5zVG9EZWdyZWVzIiwicmFkaWFuc190b19kZWdyZWVzIiwiZGVncmVlc1RvUmFkaWFucyIsImRlZ3JlZXNfdG9fcmFkaWFucyIsImhlbHBlckxlbmd0aEFycmF5IiwiYXJyMSIsImFycjIiLCJub3JtYWxpemUiLCJ2ZWMiLCJyZ2JUb0hzbCIsImh1ZTJyZ2IiLCJoc2xUb1JnYiIsImxpbmVhciIsInRNaW4iLCJ0TWF4IiwidmFsdWUxIiwidmFsdWUyIiwiX3RNaW4iLCJybmQiLCJybmRtIiwiY3JlYXRlUGF0aCIsImluVGFuZ2VudHMiLCJvdXRUYW5nZW50cyIsImFyclBsYWNlaG9sZGVyIiwiaW5WZXJ0ZXhQb2ludCIsIm91dFZlcnRleFBvaW50IiwiaW5pdGlhdGVFeHByZXNzaW9uIiwicHJvcGVydHkiLCJub09wIiwiX3ZhbHVlIiwibmVlZHNWZWxvY2l0eSIsIl9uZWVkc1JhbmRvbSIsImVsZW1UeXBlIiwiJGJtX3RyYW5zZm9ybSIsInRoaXNQcm9wZXJ0eSIsInZhbHVlQXRUaW1lIiwiaW5Qb2ludCIsIm91dFBvaW50IiwibG9vcEluIiwibG9vcF9pbiIsImxvb3BPdXQiLCJsb29wX291dCIsInNtb290aCIsInRvV29ybGQiLCJmcm9tV29ybGQiLCJmcm9tQ29tcCIsInRvQ29tcCIsImZyb21Db21wVG9TdXJmYWNlIiwicm90YXRpb24iLCJhbmNob3JQb2ludCIsInRoaXNMYXllciIsInRoaXNDb21wIiwidmVsb2NpdHlBdFRpbWUiLCJzY29wZWRfYm1fcnQiLCJleHByZXNzaW9uX2Z1bmN0aW9uIiwibnVtS2V5cyIsImFjdGl2ZSIsIndpZ2dsZSIsImZyZXEiLCJhbXAiLCJpV2lnZ2xlIiwibGVuV2lnZ2xlIiwiYWRkZWRBbXBzIiwicGVyaW9kcyIsImxvb3BJbkR1cmF0aW9uIiwibG9vcE91dER1cmF0aW9uIiwiZ2V0VmVsb2NpdHlBdFRpbWUiLCJsb29rQXQiLCJlbGVtMSIsImVsZW0yIiwiZlZlYyIsInBpdGNoIiwieWF3IiwiZWFzZU91dCIsInZhbDEiLCJ2YWwyIiwiYXBwbHlFYXNlIiwiZWFzZUluIiwiZWFzZSIsImlLZXkiLCJsZW5LZXkiLCJuZWFyZXN0S2V5Iiwib2JLZXkiLCJmcmFtZXNUb1RpbWUiLCJmcHMiLCJ0aW1lVG9GcmFtZXMiLCJyYW5kU2VlZCIsInN1YnN0cmluZyIsInBvc3Rlcml6ZVRpbWUiLCJmcmFtZXNQZXJTZWNvbmQiLCJ2ZWxvY2l0eSIsInRleHRJbmRleCIsInRleHRUb3RhbCIsInNlbGVjdG9yVmFsdWUiLCJoYXNQYXJlbnQiLCJleGVjdXRlRXhwcmVzc2lvbiIsImZyYW1lRXhwcmVzc2lvbklkIiwiX19wcmV2ZW50RGVhZENvZGVSZW1vdmFsIiwiRXhwcmVzc2lvbnMiLCJzdGFja0NvdW50IiwicmVnaXN0ZXJzIiwicHVzaEV4cHJlc3Npb24iLCJwb3BFeHByZXNzaW9uIiwicmVsZWFzZUluc3RhbmNlcyIsInJlZ2lzdGVyRXhwcmVzc2lvblByb3BlcnR5IiwiZXhwcmVzc2lvbiIsIk1hc2tNYW5hZ2VySW50ZXJmYWNlIiwiTWFza0ludGVyZmFjZSIsIl9tYXNrIiwiX2RhdGEiLCJNYXNrTWFuYWdlciIsIl9tYXNrc0ludGVyZmFjZXMiLCJtYXNrRnVuY3Rpb24iLCJFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UiLCJkZWZhdWx0VW5pZGltZW5zaW9uYWxWYWx1ZSIsImRlZmF1bHRNdWx0aWRpbWVuc2lvbmFsVmFsdWUiLCJjb21wbGV0ZVByb3BlcnR5IiwiZXhwcmVzc2lvblZhbHVlIiwidmFsdWVQcm9wIiwic3BlZWRBdFRpbWUiLCJnZXRTcGVlZEF0VGltZSIsInByb3BlcnR5R3JvdXAiLCJVbmlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlIiwiTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlIiwiYXJyVmFsdWUiLCJkZWZhdWx0R2V0dGVyIiwiVHJhbnNmb3JtRXhwcmVzc2lvbkludGVyZmFjZSIsIl90aGlzRnVuY3Rpb24iLCJ4Um90YXRpb24iLCJ5Um90YXRpb24iLCJ4UG9zaXRpb24iLCJ5UG9zaXRpb24iLCJ6UG9zaXRpb24iLCJfcHgiLCJfcHkiLCJfcHoiLCJfdHJhbnNmb3JtRmFjdG9yeSIsImdldE1hdHJpeCIsInRvV29ybGRNYXQiLCJwcm9wTWF0cml4IiwidG9Xb3JsZFZlYyIsImFwcGx5UG9pbnQiLCJmcm9tV29ybGRWZWMiLCJpbnZlcnRQb2ludCIsInNhbXBsZUltYWdlIiwidHJhbnNmb3JtSW50ZXJmYWNlIiwiX3JlZ2lzdGVyTWFza0ludGVyZmFjZSIsIl9yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2UiLCJhbmNob3JQb2ludERlc2NyaXB0b3IiLCJhbmNob3JfcG9pbnQiLCJzdGFydFRpbWUiLCJfbmFtZSIsInByb3BlcnR5R3JvdXBGYWN0b3J5IiwiaW50ZXJmYWNlRnVuY3Rpb24iLCJwYXJlbnRQcm9wZXJ0eUdyb3VwIiwiUHJvcGVydHlJbnRlcmZhY2UiLCJwcm9wZXJ0eU5hbWUiLCJfcHJvcGVydHlHcm91cCIsImVmZmVjdHNEYXRhIiwiY3JlYXRlR3JvdXBJbnRlcmZhY2UiLCJncm91cEludGVyZmFjZSIsIm1uIiwiY3JlYXRlVmFsdWVJbnRlcmZhY2UiLCJudW1Qcm9wZXJ0aWVzIiwibnAiLCJlbmFibGVkIiwiZW4iLCJleHByZXNzaW9uUHJvcGVydHkiLCJzZXRHcm91cFByb3BlcnR5IiwiU2hhcGVQYXRoSW50ZXJmYWNlIiwicGF0aEludGVyZmFjZUZhY3RvcnkiLCJ2aWV3IiwicHJvcGVydHlJbmRleCIsIml0ZXJhdGVFbGVtZW50cyIsImdyb3VwSW50ZXJmYWNlRmFjdG9yeSIsImZpbGxJbnRlcmZhY2VGYWN0b3J5Iiwic3Ryb2tlSW50ZXJmYWNlRmFjdG9yeSIsInRyaW1JbnRlcmZhY2VGYWN0b3J5IiwiZWxsaXBzZUludGVyZmFjZUZhY3RvcnkiLCJzdGFySW50ZXJmYWNlRmFjdG9yeSIsInJlY3RJbnRlcmZhY2VGYWN0b3J5Iiwicm91bmRlZEludGVyZmFjZUZhY3RvcnkiLCJyZXBlYXRlckludGVyZmFjZUZhY3RvcnkiLCJncmFkaWVudEZpbGxJbnRlcmZhY2VGYWN0b3J5IiwiZGVmYXVsdEludGVyZmFjZUZhY3RvcnkiLCJjb250ZW50c0ludGVyZmFjZUZhY3RvcnkiLCJpbnRlcmZhY2VzIiwiX2ludGVyZmFjZUZ1bmN0aW9uIiwidHJhbnNmb3JtSW50ZXJmYWNlRmFjdG9yeSIsImNpeCIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsIl9kYXNoUHJvcGVydHlHcm91cCIsImRhc2hPYiIsImFkZFByb3BlcnR5VG9EYXNoT2IiLCJkYXNoIiwic3RhcnQiLCJza2V3QXhpcyIsIm91dGVyUmFkaXVzIiwib3V0ZXJSb3VuZG5lc3MiLCJpbm5lclJhZGl1cyIsImlubmVyUm91bmRuZXNzIiwicGFyZW50R3JvdXBXcmFwcGVyIiwiX3NvdXJjZVRleHQiLCJzb3VyY2VUZXh0Iiwic3RyaW5nVmFsdWUiLCJmaWxsQ29sb3IiLCJvdXRsaW5lSW50ZXJmYWNlRmFjdG9yeSIsImN1cnJlbnRQcm9wZXJ0eU5hbWUiLCJjdXJyZW50UHJvcGVydHkiLCJwcm9wZXJ0eU5hbWVJbmRleCIsImRhdGFJbnRlcmZhY2VGYWN0b3J5Iiwib3V0bGluZUludGVyZmFjZSIsImRhdGFJbnRlcmZhY2UiLCJmb290YWdlIiwiZ2V0SW50ZXJmYWNlIiwiZXhwcmVzc2lvbkhlbHBlcnMiLCJzZWFyY2hFeHByZXNzaW9ucyIsIl9jYWNoaW5nQXRUaW1lIiwic3BlZWQiLCJnZXRTdGF0aWNWYWx1ZUF0VGltZSIsImFkZFByb3BlcnR5RGVjb3JhdG9yIiwiZHVyYXRpb25GbGFnIiwibGFzdEtleUZyYW1lIiwiY3ljbGVEdXJhdGlvbiIsImZpcnN0S2V5RnJhbWUiLCJyZXQiLCJpbml0ViIsImVuZFYiLCJjdXJyZW50IiwicmVwZWF0cyIsImxhc3RWYWx1ZSIsIm5leHRMYXN0VmFsdWUiLCJmaXJzdFZhbHVlIiwibmV4dEZpcnN0VmFsdWUiLCJzYW1wbGVzIiwiZW5kRnJhbWUiLCJzYW1wbGVGcmVxdWVuY3kiLCJzYW1wbGVWYWx1ZSIsImdldFRyYW5zZm9ybVZhbHVlQXRUaW1lIiwiX3RyYW5zZm9ybUNhY2hpbmdBdFRpbWUiLCJhbmNob3IiLCJyb3RhdGlvbloiLCJyb3RhdGlvblkiLCJyb3RhdGlvblgiLCJvcmllbnRhdGlvbiIsInBvc2l0aW9uWCIsInBvc2l0aW9uWSIsInBvc2l0aW9uWiIsImdldFRyYW5zZm9ybVN0YXRpY1ZhbHVlQXRUaW1lIiwicHJvcGVydHlHZXRQcm9wIiwiZ2V0U2hhcGVWYWx1ZUF0VGltZSIsInNoYXBlVmFsdWUiLCJsYXN0VGltZSIsIlNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24iLCJTaGFwZUV4cHJlc3Npb25zIiwiaXNDbG9zZWQiLCJwb2ludE9uUGF0aCIsIl9zZWdtZW50c0xlbmd0aCIsImFjY3VtdWxhdGVkTGVuZ3RoIiwiaW5pdEluZGV4IiwiZW5kSW5kZXgiLCJ2ZWN0b3JPblBhdGgiLCJ2ZWN0b3JUeXBlIiwieExlbmd0aCIsInlMZW5ndGgiLCJtYWduaXR1ZGUiLCJ1bml0VmVjdG9yIiwidGFuZ2VudE9uUGF0aCIsIm5vcm1hbE9uUGF0aCIsInByb3BlcnR5R2V0U2hhcGVQcm9wIiwidHJpbXMiLCJpbml0aWFsaXplJDEiLCJhZGREZWNvcmF0b3IiLCJjYWxjdWxhdGVFeHByZXNzaW9uIiwiZ2V0RXhwcmVzc2lvblZhbHVlIiwiaXNLZXlmcmFtZWQiLCJoYXNFeHByZXNzaW9ucyIsImluaXRpYWxpemUiLCJTVkdDb21wb3NhYmxlRWZmZWN0IiwiY3JlYXRlTWVyZ2VOb2RlIiwicmVzdWx0SWQiLCJpbnMiLCJmZU1lcmdlIiwiZmVNZXJnZU5vZGUiLCJsaW5lYXJGaWx0ZXJWYWx1ZSIsIlNWR1RpbnRGaWx0ZXIiLCJsaW5lYXJGaWx0ZXIiLCJtYXRyaXhGaWx0ZXIiLCJjb2xvckJsYWNrIiwiY29sb3JXaGl0ZSIsIlNWR0ZpbGxGaWx0ZXIiLCJTVkdTdHJva2VFZmZlY3QiLCJpbml0aWFsaXplZCIsImVsZW1DaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJncm91cFBhdGgiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwYXRoTWFza2VyIiwiZGFzaGFycmF5VmFsdWUiLCJnZXRUb3RhbExlbmd0aCIsImxpbmVMZW5ndGgiLCJ1bml0cyIsIlNWR1RyaXRvbmVGaWx0ZXIiLCJmZUNvbXBvbmVudFRyYW5zZmVyIiwiZmVGdW5jUiIsImZlRnVuY0ciLCJmZUZ1bmNCIiwiY29sb3IxIiwiY29sb3IyIiwiY29sb3IzIiwidGFibGVSIiwidGFibGVHIiwidGFibGVCIiwiU1ZHUHJvTGV2ZWxzRmlsdGVyIiwiY3JlYXRlRmVGdW5jIiwiZmVGdW5jQSIsImZlRnVuY1JDb21wb3NlZCIsImZlRnVuY0dDb21wb3NlZCIsImZlRnVuY0JDb21wb3NlZCIsImdldFRhYmxlVmFsdWUiLCJpbnB1dEJsYWNrIiwiaW5wdXRXaGl0ZSIsImdhbW1hIiwib3V0cHV0QmxhY2siLCJvdXRwdXRXaGl0ZSIsInRhYmxlIiwiY29sb3JWYWx1ZSIsIm91dHB1dERlbHRhIiwiaW5wdXREZWx0YSIsIlNWR0Ryb3BTaGFkb3dFZmZlY3QiLCJnbG9iYWxGaWx0ZXJTaXplIiwiZmVHYXVzc2lhbkJsdXIiLCJmZU9mZnNldCIsImZlRmxvb2QiLCJmZUNvbXBvc2l0ZSIsImNvbCIsIl9zdmdNYXR0ZVN5bWJvbHMiLCJTVkdNYXR0ZTNFZmZlY3QiLCJmaWx0ZXJFbGVtIiwiZmluZFN5bWJvbCIsInJlcGxhY2VJblBhcmVudCIsInN5bWJvbElkIiwibmV4dENoaWxkIiwidXNlRWxlbSIsInNldEVsZW1lbnRBc01hc2siLCJTVkdHYXVzc2lhbkJsdXJFZmZlY3QiLCJrQmx1cnJpbmVzc1RvU2lnbWEiLCJzaWdtYSIsImRpbWVuc2lvbnMiLCJzaWdtYVgiLCJzaWdtYVkiLCJlZGdlTW9kZSIsIlRyYW5zZm9ybUVmZmVjdCIsImZvcmNlRnJhbWUiLCJpc1VuaWZvcm1TY2FsZSIsInNjYWxlSGVpZ2h0Iiwic2NhbGVXaWR0aCIsIlNWR1RyYW5zZm9ybUVmZmVjdCIsIkNWVHJhbnNmb3JtRWZmZWN0IiwiX2V4dGVuZHMyIiwiX2V4dGVuZHMzIiwiX2dldFByb3RvdHlwZU9mIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY2xhc3NDYWxsQ2hlY2szIiwiX2NyZWF0ZUNsYXNzMiIsIl9jcmVhdGVDbGFzczMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMiLCJfaW5oZXJpdHMyIiwiX2luaGVyaXRzMyIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfcHJvcFR5cGVzIiwicmVxdWlyZSQkNiIsIl9wcm9wVHlwZXMyIiwiX2xvdHRpZVdlYiIsIl9sb3R0aWVXZWIyIiwiTG90dGllIiwiX1JlYWN0JENvbXBvbmVudCIsIl9yZWYiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJfa2V5IiwiaGFuZGxlQ2xpY2tUb1BhdXNlIiwiY29tcG9uZW50RGlkTW91bnQiLCJfcHJvcHMiLCJldmVudExpc3RlbmVycyIsInJlZ2lzdGVyRXZlbnRzIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIm5leHRQcm9wcyIsImRlUmVnaXN0ZXJFdmVudHMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJpc1N0b3BwZWQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIl90aGlzMiIsImV2ZW50TGlzdGVuZXIiLCJfdGhpczMiLCJfdGhpczQiLCJfcHJvcHMyIiwiYXJpYVJvbGUiLCJpc0NsaWNrVG9QYXVzZURpc2FibGVkIiwiZ2V0U2l6ZSIsImluaXRpYWwiLCJsb3R0aWVTdHlsZXMiLCJvdXRsaW5lIiwib25DbGlja0hhbmRsZXIiLCJyZWYiLCJvbkNsaWNrIiwicm9sZSIsInRhYkluZGV4IiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwiTG90dGllQW5pbWF0aW9ucyIsImZpbGVWaXNpYmlsaXR5IiwibG90dGllRmlsZSIsImltYWdlRnVsbFBhZ2UiLCJpbWFnZUhlaWdodCIsImltYWdlV2lkdGgiLCJ2aXNpYmxlIiwic2V0VmlzaWJsZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiZGVmYXVsdE9wdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtDQUNBLElBQUlBLE1BQU0sR0FBR0MsT0FBQUEsQ0FBQUEsT0FBYyxHQUFHLE9BQU9DLE1BQU0sSUFBSSxXQUFXLElBQUlBLE1BQU0sQ0FBQ0MsSUFBSSxJQUFJQSxJQUFJLEdBQzdFRCxNQUFNLEdBQUcsT0FBT0UsSUFBSSxJQUFJLFdBQVcsSUFBSUEsSUFBSSxDQUFDRCxJQUFJLElBQUlBLElBQUksR0FBR0MsSUFBQUE7QUFDN0Q7QUFBQSxHQUNFQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQTtDQUM3QixJQUFJ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Q0FBRUEsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFFQSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUVBLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBRUEsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFFQSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUVBLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUM3UixDQUVBLFNBQVNDLFVBQVVBLEVBQUcsQ0FDcEIsR0FBSSxDQUFDLElBQUksQ0FBQ2xCLG1CQUFtQixDQUFFLENBQzdCLElBQUksQ0FBQ21CLFNBQVMsQ0FBRyxFQUFFLElBQUksQ0FBQzVzQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUssQ0FBQyxFQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFLLENBQUMsRUFBSSxJQUFJLENBQUNBLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBSyxDQUFDLEVBQUksSUFBSSxDQUFDQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUssQ0FBQyxFQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFLLENBQUMsRUFBSSxJQUFJLENBQUNBLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBSyxDQUFDLEVBQUksSUFBSSxDQUFDQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUssQ0FBQyxFQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFLLENBQUMsRUFBSSxJQUFJLENBQUNBLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBSyxDQUFDLEVBQUksSUFBSSxDQUFDQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUssQ0FBQyxFQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFLLENBQUMsRUFBSSxJQUFJLENBQUNBLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBSyxDQUFDLEVBQUksSUFBSSxDQUFDQSxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUssQ0FBQyxFQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFLLENB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QyxDQUFDLENBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFFQSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUVBLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBRUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFFQSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUVBLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUMzTSxJQUFJLENBQUN2SyxNQUFNLENBQUNoQyxTQUFTLENBQUN3TSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUVBLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBRUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFFQSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUVBLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBRUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFFQSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDM00sSUFBSSxDQUFDeEssTUFBTSxDQUFDaEMsU0FBUyxDQUFDc00sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUVB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VUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3BCLEtBQUMsTUFBTTtNQUNIQSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDcEIsS0FBQTtBQUNKLEdBQUMsRUFBRSxDQUFDTixjQUFjLEVBQUVLLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFFN0IsRUFBQSxJQUFJSixVQUFVLEVBQUU7QUFDWixJQUFBLE1BQU1RLGNBQWMsR0FBRztBQUNuQjV1RSxNQUFBQSxJQUFJLEVBQUUsSUFBSTtBQUNWRCxNQUFBQSxRQUFRLEVBQUUsSUFBSTtBQUNkeEosTUFBQUEsYUFBYSxFQUFFeGEsSUFBSSxDQUFDMlosS0FBSyxDQUFDMDRFLFVBQVUsQ0FBQztBQUNyQzlzRSxNQUFBQSxnQkFBZ0IsRUFBRTtBQUNkaTdDLFFBQUFBLG1CQUFtQixFQUFFLGdCQUFBO0FBQ3pCLE9BQUE7S0FDSCxDQUFBO0FBRUQsSUFBQSxPQUNJN3ZFLGFBQUEsQ0FBQSxLQUFBLEVBQUE7QUFBSzJ2RSxNQUFBQSxTQUFTLEVBQWdDbXlCLE9BQU8sR0FBRyxnQkFBZ0IsR0FBRyxRQUFBO0tBQ3ZFOWhHLEVBQUFBLGFBQUEsQ0FBQ20vRixNQUFNLEVBQUE7QUFBQ3RiLE1BQUFBLE9BQU8sRUFBRXFlLGNBQWU7QUFBQzcwRSxNQUFBQSxNQUFNLEVBQUV1MEUsV0FBWTtBQUFDeDBFLE1BQUFBLEtBQUssRUFBRXkwRSxVQUFBQTtBQUFXLEtBQUUsQ0FDekUsQ0FBQyxDQUFBO0dBRWIsTUFBTSxPQUFPLElBQUksQ0FBQTtBQUN0Qjs7OzsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0Niw0Nyw0OCw0OSw1MCw1MSw1Miw1Myw1NCw1NSw1Niw1Nyw1OCw1OSw2MCw2MSw2Miw2Myw2NCw2NSw2Niw2Nyw2OCw2OSw3MCw3MSw3Miw3Myw3NCw3NSw3Niw3Nyw3OCw3OSw4MCw4MSw4Miw4Myw4NCw4NSw4Niw4Nyw4OCw4OSw5MCw5MSw5Miw5Myw5NCw5NSw5Niw5Nyw5OF19
